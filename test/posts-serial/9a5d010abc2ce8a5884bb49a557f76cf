ccopy_reg
_reconstructor
p0
(cpost
Post
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'post_file'
p6
S'/Users/anupamjain/code/gitRepo/GitToPost/test/Java/BoundaryTraversalOfBinaryTree'
p7
sS'files_covered'
p8
c__builtin__
set
p9
((lp10
S'/Users/anupamjain/code/gitRepo/Questions/Algo/Java/BoundaryTraversalOfBinaryTree.java'
p11
atp12
Rp13
sS'title'
p14
VBoundary Traversal of binary tree
p15
sS'file_name'
p16
g11
sS'link'
p17
S'http://www.geeksforgeeks.org/boundary-traversal-of-binary-tree/'
p18
sS'host_name'
p19
S'www.geeksforgeeks.org'
p20
sS'problem_text'
p21
g0
(cbs4.element
Tag
p22
g2
Ntp23
Rp24
(dp25
S'can_be_empty_element'
p26
I00
sS'previous_element'
p27
NsS'next_sibling'
p28
NsS'name'
p29
S'p'
p30
sS'parent'
p31
NsS'namespace'
p32
NsS'prefix'
p33
NsS'previous_sibling'
p34
NsS'attrs'
p35
(dp36
sS'next_element'
p37
g0
(g22
g2
Ntp38
Rp39
(dp40
g26
I00
sg27
g24
sg28
g0
(g22
g2
Ntp41
Rp42
(dp43
g26
I00
sg27
g0
(g22
g2
Ntp44
Rp45
(dp46
g26
I00
sg27
g0
(cbs4.element
NavigableString
p47
c__builtin__
unicode
p48
VGiven a binary tree, print boundary nodes of the binary tree Anti-Clockwise starting from the root. For example, boundary traversal of the following tree is \u201c20 8 4 10 14 25 22\u2033
p49
tp50
Rp51
(dp52
g34
Nsg27
g39
sg28
g45
sg37
g45
sg31
g39
sbsg28
Nsg29
Vspan
p53
sg31
g39
sg32
Nsg33
Nsg34
g51
sg35
(dp54
Vid
p55
Vmore-23796
p56
ssg37
g42
sS'parser_class'
p57
cbs4
BeautifulSoup
p58
sS'hidden'
p59
I00
sS'contents'
p60
(lp61
sbsg28
g0
(g22
g2
Ntp62
Rp63
(dp64
g26
I00
sg27
g0
(g47
g48
V Print the right boundary in bottom-up manner.
p65
tp66
Rp67
(dp68
g34
g0
(g22
g2
Ntp69
Rp70
(dp71
g26
I00
sg27
g0
(g47
g48
V\u000a
p72
tp73
Rp74
(dp75
g34
g0
(g22
g2
Ntp76
Rp77
(dp78
g26
I01
sg27
g0
(g47
g48
V Print all leaf nodes of right subtree from left to right.
p79
tp80
Rp81
(dp82
g34
g0
(g22
g2
Ntp83
Rp84
(dp85
g26
I00
sg27
g0
(g47
g48
V\u000a\u2026..
p86
tp87
Rp88
(dp89
g34
g0
(g22
g2
Ntp90
Rp91
(dp92
g26
I01
sg27
g0
(g47
g48
V  Print all leaf nodes of left sub-tree from left to right.
p93
tp94
Rp95
(dp96
g34
g0
(g22
g2
Ntp97
Rp98
(dp99
g26
I00
sg27
g0
(g47
g48
V\u000a\u2026..
p100
tp101
Rp102
(dp103
g34
g0
(g22
g2
Ntp104
Rp105
(dp106
g26
I01
sg27
g0
(g47
g48
V Print all leaf nodes from left to right, which can again be sub-divided into two sub-parts:
p107
tp108
Rp109
(dp110
g34
g0
(g22
g2
Ntp111
Rp112
(dp113
g26
I00
sg27
g0
(g47
g48
V\u000a
p114
tp115
Rp116
(dp117
g34
g0
(g22
g2
Ntp118
Rp119
(dp120
g26
I01
sg27
g0
(g47
g48
V Print the left boundary in top-down manner.
p121
tp122
Rp123
(dp124
g34
g0
(g22
g2
Ntp125
Rp126
(dp127
g26
I00
sg27
g0
(g47
g48
V\u000a
p128
tp129
Rp130
(dp131
g34
g0
(g22
g2
Ntp132
Rp133
(dp134
g26
I01
sg27
g0
(g47
g48
V\u000aWe break the problem in 3 parts:
p135
tp136
Rp137
(dp138
g34
g0
(g22
g2
Ntp139
Rp140
(dp141
g26
I01
sg27
g0
(g22
g2
Ntp142
Rp143
(dp144
g26
I01
sg27
g0
(g22
g2
Ntp145
Rp146
(dp147
g26
I00
sg27
g42
sg28
g140
sg29
Va
p148
sg31
g42
sg32
Nsg33
Nsg34
Nsg35
(dp149
Vhref
p150
Vhttp://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/BoundryTraversal.gif
p151
ssg37
g143
sg57
g58
sg59
I00
sg60
(lp152
g143
asbsg28
Nsg29
Vimg
p153
sg31
g146
sg32
Nsg33
Nsg34
Nsg35
(dp154
Vsrc
p155
Vhttp://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/BoundryTraversal-300x188.gif
p156
sVtitle
p157
VBoundryTraversal
p158
sVheight
p159
V188
p160
sVwidth
p161
V300
p162
sValt
p163
V
p164
sVclass
p165
(lp166
Valigncenter
p167
aVsize-medium
p168
aVwp-image-23836
p169
assg37
g140
sg57
g58
sg59
I00
sg60
(lp170
sbsg28
g137
sg29
Vbr
p171
sg31
g42
sg32
Nsg33
Nsg34
g146
sg35
(dp172
sg37
g137
sg57
g58
sg59
I00
sg60
(lp173
sbsg27
g140
sg28
g133
sg37
g133
sg31
g42
sbsg28
g130
sg29
Vbr
p174
sg31
g42
sg32
Nsg33
Nsg34
g137
sg35
(dp175
sg37
g130
sg57
g58
sg59
I00
sg60
(lp176
sbsg27
g133
sg28
g126
sg37
g126
sg31
g42
sbsg28
g123
sg29
Vstrong
p177
sg31
g42
sg32
Nsg33
Nsg34
g130
sg35
(dp178
sg37
g0
(g47
g48
V1.
p179
tp180
Rp181
(dp182
g34
Nsg27
g126
sg28
Nsg37
g123
sg31
g126
sbsg57
g58
sg59
I00
sg60
(lp183
g181
asbsg27
g181
sg28
g119
sg37
g119
sg31
g42
sbsg28
g116
sg29
Vbr
p184
sg31
g42
sg32
Nsg33
Nsg34
g123
sg35
(dp185
sg37
g116
sg57
g58
sg59
I00
sg60
(lp186
sbsg27
g119
sg28
g112
sg37
g112
sg31
g42
sbsg28
g109
sg29
Vstrong
p187
sg31
g42
sg32
Nsg33
Nsg34
g116
sg35
(dp188
sg37
g0
(g47
g48
V2.
p189
tp190
Rp191
(dp192
g34
Nsg27
g112
sg28
Nsg37
g109
sg31
g112
sbsg57
g58
sg59
I00
sg60
(lp193
g191
asbsg27
g191
sg28
g105
sg37
g105
sg31
g42
sbsg28
g102
sg29
Vbr
p194
sg31
g42
sg32
Nsg33
Nsg34
g109
sg35
(dp195
sg37
g102
sg57
g58
sg59
I00
sg60
(lp196
sbsg27
g105
sg28
g98
sg37
g98
sg31
g42
sbsg28
g95
sg29
Vstrong
p197
sg31
g42
sg32
Nsg33
Nsg34
g102
sg35
(dp198
sg37
g0
(g47
g48
V2.1
p199
tp200
Rp201
(dp202
g34
Nsg27
g98
sg28
Nsg37
g95
sg31
g98
sbsg57
g58
sg59
I00
sg60
(lp203
g201
asbsg27
g201
sg28
g91
sg37
g91
sg31
g42
sbsg28
g88
sg29
Vbr
p204
sg31
g42
sg32
Nsg33
Nsg34
g95
sg35
(dp205
sg37
g88
sg57
g58
sg59
I00
sg60
(lp206
sbsg27
g91
sg28
g84
sg37
g84
sg31
g42
sbsg28
g81
sg29
Vstrong
p207
sg31
g42
sg32
Nsg33
Nsg34
g88
sg35
(dp208
sg37
g0
(g47
g48
V2.2
p209
tp210
Rp211
(dp212
g34
Nsg27
g84
sg28
Nsg37
g81
sg31
g84
sbsg57
g58
sg59
I00
sg60
(lp213
g211
asbsg27
g211
sg28
g77
sg37
g77
sg31
g42
sbsg28
g74
sg29
Vbr
p214
sg31
g42
sg32
Nsg33
Nsg34
g81
sg35
(dp215
sg37
g74
sg57
g58
sg59
I00
sg60
(lp216
sbsg27
g77
sg28
g70
sg37
g70
sg31
g42
sbsg28
g67
sg29
Vstrong
p217
sg31
g42
sg32
Nsg33
Nsg34
g74
sg35
(dp218
sg37
g0
(g47
g48
V3.
p219
tp220
Rp221
(dp222
g34
Nsg27
g70
sg28
Nsg37
g67
sg31
g70
sbsg57
g58
sg59
I00
sg60
(lp223
g221
asbsg27
g221
sg28
Nsg37
g63
sg31
g42
sbsg28
g0
(g22
g2
Ntp224
Rp225
(dp226
g26
I00
sg27
g0
(g47
g48
VWe need to take care of one thing that nodes are not printed again. e.g. The left most node is also the leaf node of the tree.
p227
tp228
Rp229
(dp230
g34
Nsg27
g63
sg28
Nsg37
g225
sg31
g63
sbsg28
g0
(g22
g2
Ntp231
Rp232
(dp233
g26
I00
sg27
g0
(g47
g48
VBased on the above cases, below is the implementation:
p234
tp235
Rp236
(dp237
g34
Nsg27
g225
sg28
Nsg37
g232
sg31
g225
sbsg28
g0
(g22
g2
Ntp238
Rp239
(dp240
g26
I00
sg27
g0
(g22
g2
Ntp241
Rp242
(dp243
g26
I00
sg27
g0
(g47
g48
V\u000a
p244
tp245
Rp246
(dp247
g34
g0
(g22
g2
Ntp248
Rp249
(dp250
g26
I00
sg27
g0
(g47
g48
V\u000a
p251
tp252
Rp253
(dp254
g34
Nsg27
g0
(g22
g2
Ntp255
Rp256
(dp257
g26
I00
sg27
g0
(g47
g48
V\u000a
p258
tp259
Rp260
(dp261
g34
g0
(g22
g2
Ntp262
Rp263
(dp264
g26
I00
sg27
g0
(g47
g48
V\u000a
p265
tp266
Rp267
(dp268
g34
g0
(g22
g2
Ntp269
Rp270
(dp271
g26
I00
sg27
g0
(g47
g48
V\u000a
p272
tp273
Rp274
(dp275
g34
Nsg27
g0
(g22
g2
Ntp276
Rp277
(dp278
g26
I00
sg27
g0
(g47
g48
V\u000a
p279
tp280
Rp281
(dp282
g34
g0
(g22
g2
Ntp283
Rp284
(dp285
g26
I00
sg27
g0
(g47
g48
V\u000a
p286
tp287
Rp288
(dp289
g34
g0
(g22
g2
Ntp290
Rp291
(dp292
g26
I00
sg27
g0
(g47
g48
V\u000a
p293
tp294
Rp295
(dp296
g34
Nsg27
g0
(g22
g2
Ntp297
Rp298
(dp299
g26
I00
sg27
g0
(g47
g48
V\u000a
p300
tp301
Rp302
(dp303
g34
g0
(g22
g2
Ntp304
Rp305
(dp306
g26
I00
sg27
g0
(g47
g48
V\u000a
p307
tp308
Rp309
(dp310
g34
Nsg27
g232
sg28
g305
sg37
g305
sg31
g232
sbsg28
g302
sg29
Vh2
p311
sg31
g232
sg32
Nsg33
Nsg34
g309
sg35
(dp312
Vclass
p313
(lp314
Vtabtitle
p315
assg37
g0
(g47
g48
VC++
p316
tp317
Rp318
(dp319
g34
Nsg27
g305
sg28
Nsg37
g302
sg31
g305
sbsg57
g58
sg59
I00
sg60
(lp320
g318
asbsg27
g318
sg28
g298
sg37
g298
sg31
g232
sbsg28
g284
sg29
Vdiv
p321
sg31
g232
sg32
Nsg33
Nsg34
g302
sg35
(dp322
Vclass
p323
(lp324
Vtabcontent
p325
assg37
g295
sg57
g58
sg59
I00
sg60
(lp326
g295
ag291
ag288
asbsg28
g291
sg37
g291
sg31
g298
sbsg28
g288
sg29
Vpre
p327
sg31
g298
sg32
Nsg33
Nsg34
g295
sg35
(dp328
Vclass
p329
(lp330
Vbrush:
p331
aVcpp;
p332
aVhighlight:
p333
aV[75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92];
p334
aVtitle:
p335
aV;
p336
aVnotranslate
p337
asVtitle
p338
g164
ssg37
g0
(g47
g48
V\u000a/* program for boundary traversal of a binary tree */\u000a#include <stdio.h>\u000a#include <stdlib.h>\u000a\u000a/* A binary tree node has data, pointer to left child\u000a   and a pointer to right child */\u000astruct node\u000a{\u000a    int data;\u000a    struct node *left, *right;\u000a};\u000a\u000a// A simple function to print leaf nodes of a binary tree\u000avoid printLeaves(struct node* root)\u000a{\u000a    if ( root )\u000a    {\u000a        printLeaves(root->left);\u000a\u000a        // Print it if it is a leaf node\u000a        if ( !(root->left)  &&  !(root->right) )\u000a            printf("%d ", root->data);\u000a\u000a        printLeaves(root->right);\u000a    }\u000a}\u000a\u000a// A function to print all left boundry nodes, except a leaf node.\u000a// Print the nodes in TOP DOWN manner\u000avoid printBoundaryLeft(struct node* root)\u000a{\u000a    if (root)\u000a    {\u000a        if (root->left)\u000a        {\u000a            // to ensure top down order, print the node\u000a            // before calling itself for left subtree\u000a            printf("%d ", root->data);\u000a            printBoundaryLeft(root->left);\u000a        }\u000a        else if( root->right )\u000a        {\u000a            printf("%d ", root->data);\u000a            printBoundaryLeft(root->right);\u000a        }\u000a        // do nothing if it is a leaf node, this way we avoid\u000a        // duplicates in output\u000a    }\u000a}\u000a\u000a// A function to print all right boundry nodes, except a leaf node\u000a// Print the nodes in BOTTOM UP manner\u000avoid printBoundaryRight(struct node* root)\u000a{\u000a    if (root)\u000a    {\u000a        if ( root->right )\u000a        {\u000a            // to ensure bottom up order, first call for right\u000a            //  subtree, then print this node\u000a            printBoundaryRight(root->right);\u000a            printf("%d ", root->data);\u000a        }\u000a        else if ( root->left )\u000a        {\u000a            printBoundaryRight(root->left);\u000a            printf("%d ", root->data);\u000a        }\u000a       // do nothing if it is a leaf node, this way we avoid\u000a       // duplicates in output\u000a    }\u000a}\u000a\u000a\u000a// A function to do boundary traversal of a given binary tree\u000avoid printBoundary (struct node* root)\u000a{\u000a    if (root)\u000a    {\u000a        printf("%d ",root->data);\u000a\u000a        // Print the left boundary in top-down manner.\u000a        printBoundaryLeft(root->left);\u000a\u000a        // Print all leaf nodes\u000a        printLeaves(root->left);\u000a        printLeaves(root->right);\u000a\u000a        // Print the right boundary in bottom-up manner\u000a        printBoundaryRight(root->right);\u000a    }\u000a}\u000a\u000a// A utility function to create a node\u000astruct node* newNode( int data )\u000a{\u000a    struct node* temp = (struct node *) malloc( sizeof(struct node) );\u000a\u000a    temp->data = data;\u000a    temp->left = temp->right = NULL;\u000a\u000a    return temp;\u000a}\u000a\u000a// Driver program to test above functions\u000aint main()\u000a{\u000a    // Let us construct the tree given in the above diagram\u000a    struct node *root         = newNode(20);\u000a    root->left                = newNode(8);\u000a    root->left->left          = newNode(4);\u000a    root->left->right         = newNode(12);\u000a    root->left->right->left   = newNode(10);\u000a    root->left->right->right  = newNode(14);\u000a    root->right               = newNode(22);\u000a    root->right->right        = newNode(25);\u000a\u000a    printBoundary( root );\u000a\u000a    return 0;\u000a}\u000a
p339
tp340
Rp341
(dp342
g34
Nsg27
g291
sg28
Nsg37
g288
sg31
g291
sbsg57
g58
sg59
I00
sg60
(lp343
g341
asbsg27
g341
sg28
Nsg37
g284
sg31
g298
sbsg28
g281
sg29
Vh2
p344
sg31
g232
sg32
Nsg33
Nsg34
g298
sg35
(dp345
Vclass
p346
(lp347
Vtabtitle
p348
assg37
g0
(g47
g48
VJava
p349
tp350
Rp351
(dp352
g34
Nsg27
g284
sg28
Nsg37
g281
sg31
g284
sbsg57
g58
sg59
I00
sg60
(lp353
g351
asbsg27
g351
sg28
g277
sg37
g277
sg31
g232
sbsg28
g263
sg29
Vdiv
p354
sg31
g232
sg32
Nsg33
Nsg34
g281
sg35
(dp355
Vclass
p356
(lp357
Vtabcontent
p358
assg37
g274
sg57
g58
sg59
I00
sg60
(lp359
g274
ag270
ag267
asbsg28
g270
sg37
g270
sg31
g277
sbsg28
g267
sg29
Vpre
p360
sg31
g277
sg32
Nsg33
Nsg34
g274
sg35
(dp361
Vclass
p362
(lp363
Vbrush:
p364
aVjava;
p365
aVtitle:
p366
ag336
aVnotranslate
p367
asVtitle
p368
g164
ssg37
g0
(g47
g48
V\u000a//Java program to print boundary traversal of binary tree\u000a\u000a// A binary tree node\u000aclass Node {\u000a\u000a    int data;\u000a    Node left, right;\u000a\u000a    Node(int item) {\u000a        data = item;\u000a        left = right = null;\u000a    }\u000a}\u000a\u000aclass BinaryTree {\u000a\u000a    static Node root;\u000a\u000a    // A simple function to print leaf nodes of a binary tree\u000a    void printLeaves(Node node) {\u000a        if (node != null) {\u000a            printLeaves(node.left);\u000a\u000a            // Print it if it is a leaf node\u000a            if (node.left == null && node.right == null) {\u000a                System.out.print(node.data + " ");\u000a            }\u000a\u000a            printLeaves(node.right);\u000a        }\u000a    }\u000a\u000a    // A function to print all left boundry nodes, except a leaf node.\u000a    // Print the nodes in TOP DOWN manner\u000a    void printBoundaryLeft(Node node) {\u000a        if (node != null) {\u000a            if (node.left != null) {\u000a                \u000a                // to ensure top down order, print the node\u000a                // before calling itself for left subtree\u000a                System.out.print(node.data + " ");\u000a                printBoundaryLeft(node.left);\u000a            } else if (node.right != null) {\u000a                System.out.print(node.data + " ");\u000a                printBoundaryLeft(node.right);\u000a            }\u000a\u000a            // do nothing if it is a leaf node, this way we avoid\u000a            // duplicates in output\u000a        }\u000a    }\u000a\u000a    // A function to print all right boundry nodes, except a leaf node\u000a    // Print the nodes in BOTTOM UP manner\u000a    void printBoundaryRight(Node node) {\u000a        if (node != null) {\u000a            if (node.right != null) {\u000a\u000a                // to ensure bottom up order, first call for right\u000a                //  subtree, then print this node\u000a                printBoundaryRight(node.right);\u000a                System.out.print(node.data + " ");\u000a            } else if (node.left != null) {\u000a                printBoundaryRight(node.left);\u000a                System.out.print(node.data + " ");\u000a            }\u000a\u000a            // do nothing if it is a leaf node, this way we avoid\u000a            // duplicates in output\u000a        }\u000a    }\u000a\u000a    // A function to do boundary traversal of a given binary tree\u000a    void printBoundary(Node node) {\u000a        if (node != null) {\u000a            System.out.print(node.data + " ");\u000a\u000a            // Print the left boundary in top-down manner.\u000a            printBoundaryLeft(node.left);\u000a\u000a            // Print all leaf nodes\u000a            printLeaves(node.left);\u000a            printLeaves(node.right);\u000a\u000a            // Print the right boundary in bottom-up manner\u000a            printBoundaryRight(node.right);\u000a        }\u000a    }\u000a     \u000a    // driver program to test above functions\u000a    public static void main(String args[]) {\u000a        BinaryTree tree = new BinaryTree();\u000a        tree.root = new Node(20);\u000a        tree.root.left = new Node(8);\u000a        tree.root.left.left = new Node(4);\u000a        tree.root.left.right = new Node(12);\u000a        tree.root.left.right.left = new Node(10);\u000a        tree.root.left.right.right = new Node(14);\u000a        tree.root.right = new Node(22);\u000a        tree.root.right.right = new Node(25);\u000a        tree.printBoundary(root);\u000a\u000a    }\u000a}\u000a\u000a
p369
tp370
Rp371
(dp372
g34
Nsg27
g270
sg28
Nsg37
g267
sg31
g270
sbsg57
g58
sg59
I00
sg60
(lp373
g371
asbsg27
g371
sg28
Nsg37
g263
sg31
g277
sbsg28
g260
sg29
Vh2
p374
sg31
g232
sg32
Nsg33
Nsg34
g277
sg35
(dp375
Vclass
p376
(lp377
Vtabtitle
p378
assg37
g0
(g47
g48
VPython
p379
tp380
Rp381
(dp382
g34
Nsg27
g263
sg28
Nsg37
g260
sg31
g263
sbsg57
g58
sg59
I00
sg60
(lp383
g381
asbsg27
g381
sg28
g256
sg37
g256
sg31
g232
sbsg28
Nsg29
Vdiv
p384
sg31
g232
sg32
Nsg33
Nsg34
g260
sg35
(dp385
Vclass
p386
(lp387
Vtabcontent
p388
assg37
g253
sg57
g58
sg59
I00
sg60
(lp389
g253
ag249
ag246
ag242
asbsg28
g249
sg37
g249
sg31
g256
sbsg28
g246
sg29
Vpre
p390
sg31
g256
sg32
Nsg33
Nsg34
g253
sg35
(dp391
Vclass
p392
(lp393
Vbrush:
p394
aVpython;
p395
aVtitle:
p396
ag336
aVnotranslate
p397
asVtitle
p398
g164
ssg37
g0
(g47
g48
V\u000a\u000a# Python program for binary traversal of binary tree\u000a\u000a# A binary tree node\u000aclass Node:\u000a\u000a    # Constructor to create a new node\u000a    def __init__(self, data):\u000a        self.data = data \u000a        self.left = None\u000a        self.right = None\u000a\u000a# A simple function to print leaf nodes of a Binary Tree\u000adef printLeaves(root):\u000a    if(root):\u000a        printLeaves(root.left)\u000a        \u000a        # Print it if it is a leaf node\u000a        if root.left is None and root.right is None:\u000a            print root.data,\u000a\u000a        printLeaves(root.right)\u000a\u000a# A function to print all left boundary nodes, except a \u000a# leaf node. Print the nodes in TOP DOWN manner\u000adef printBoundaryLeft(root):\u000a    \u000a    if(root):\u000a        if (root.left):\u000a            \u000a            # to ensure top down order, print the node\u000a            # before calling itself for left subtree\u000a            print root.data,\u000a            printBoundaryLeft(root.left)\u000a        \u000a        elif(root.right):\u000a            print root.data,\u000a            printBoundaryRight(root.right)\u000a        \u000a        # do nothing if it is a leaf node, this way we\u000a        # avoid duplicates in output\u000a\u000a\u000a# A function to print all right boundary nodes, except\u000a# a leaf node. Print the nodes in BOTTOM UP manner\u000adef printBoundaryRight(root):\u000a    \u000a    if(root):\u000a        if (root.right):\u000a            # to ensure bottom up order, first call for\u000a            # right subtree, then print this node\u000a            printBoundaryRight(root.right)\u000a            print root.data,\u000a        \u000a        elif(root.left):\u000a            printBoundaryRight(root.left)\u000a            print root.data,\u000a\u000a        # do nothing if it is a leaf node, this way we \u000a        # avoid duplicates in output\u000a\u000a\u000a# A function to do boundary traversal of a given binary tree\u000adef printBoundary(root):\u000a    if (root):\u000a        print root.data, \u000a        \u000a        # Print the left boundary in top-down manner\u000a        printBoundaryLeft(root.left)\u000a\u000a        # Print all leaf nodes\u000a        printLeaves(root.left)\u000a        printLeaves(root.right)\u000a\u000a        # Print the right boundary in bottom-up manner\u000a        printBoundaryRight(root.right)\u000a\u000a\u000a# Driver program to test above function\u000aroot = Node(20)\u000aroot.left = Node(8)\u000aroot.left.left = Node(4)\u000aroot.left.right = Node(12)\u000aroot.left.right.left =  Node(10)\u000aroot.left.right.right = Node(14)\u000aroot.right = Node(22)\u000aroot.right.right = Node(25)\u000aprintBoundary(root)\u000a\u000a# This code is contributed by Nikhil Kumar Singh(nickzuck_007)\u000a\u000a
p399
tp400
Rp401
(dp402
g34
Nsg27
g249
sg28
Nsg37
g246
sg31
g249
sbsg57
g58
sg59
I00
sg60
(lp403
g401
asbsg27
g401
sg28
g242
sg37
g242
sg31
g256
sbsg28
Nsg29
Vp
p404
sg31
g256
sg32
Nsg33
Nsg34
g246
sg35
(dp405
sg37
g239
sg57
g58
sg59
I00
sg60
(lp406
sbsg28
g0
(g22
g2
Ntp407
Rp408
(dp409
g26
I00
sg27
g0
(g47
g48
V20 8 4 10 14 25 22
p410
tp411
Rp412
(dp413
g34
Nsg27
g239
sg28
Nsg37
g408
sg31
g239
sbsg28
g0
(g22
g2
Ntp414
Rp415
(dp416
g26
I00
sg27
g0
(g47
g48
VTime Complexity: O(n) where n is the number of nodes in binary tree.
p417
tp418
Rp419
(dp420
g34
Nsg27
g408
sg28
Nsg37
g415
sg31
g408
sbsg28
g0
(g22
g2
Ntp421
Rp422
(dp423
g26
I00
sg27
g0
(g47
g48
VPlease write comments if you find anything incorrect, or you want to share more information about the topic discussed above
p424
tp425
Rp426
(dp427
g34
Nsg27
g415
sg28
Nsg37
g422
sg31
g415
sbsg28
g0
(g22
g2
Ntp428
Rp429
(dp430
g26
I00
sg27
g422
sg28
g0
(g22
g2
Ntp431
Rp432
(dp433
g26
I00
sg27
g429
sg28
g0
(g22
g2
Ntp434
Rp435
(dp436
g26
I01
sg27
g0
(g47
g48
V\u000a(adsbygoogle = window.adsbygoogle || []).push({});\u000a
p437
tp438
Rp439
(dp440
g34
Nsg27
g432
sg28
Nsg37
g435
sg31
g432
sbsg28
Nsg29
Vbr
p441
sg31
g24
sg32
Nsg33
Nsg34
g432
sg35
(dp442
sg37
Nsg57
g58
sg59
I00
sg60
(lp443
sbsg29
Vscript
p444
sg31
g24
sg32
Nsg33
Nsg34
g429
sg35
(dp445
sg37
g439
sg57
g58
sg59
I00
sg60
(lp446
g439
asbsg29
Vins
p447
sg31
g24
sg32
Nsg33
Nsg34
g422
sg35
(dp448
Vstyle
p449
Vdisplay:inline-block;width:336px;height:280px
p450
sVdata-ad-client
p451
Vca-pub-9465609616171866
p452
sVclass
p453
(lp454
Vadsbygoogle
p455
asVdata-ad-slot
p456
V4061219431
p457
ssg37
g432
sg57
g58
sg59
I00
sg60
(lp458
sbsg29
Vscript
p459
sg31
g24
sg32
Nsg33
Nsg34
g415
sg35
(dp460
Vasync
p461
S''
p462
sVsrc
p463
V//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js
p464
ssg37
g429
sg57
g58
sg59
I00
sg60
(lp465
sbsg29
g404
sg31
g24
sg32
Nsg33
Nsg34
g408
sg35
(dp466
sg37
g426
sg57
g58
sg59
I00
sg60
(lp467
g426
asbsg29
g404
sg31
g24
sg32
Nsg33
Nsg34
g239
sg35
(dp468
sg37
g419
sg57
g58
sg59
I00
sg60
(lp469
g419
asbsg29
Vpre
p470
sg31
g24
sg32
Nsg33
Nsg34
g232
sg35
(dp471
sg37
g412
sg57
g58
sg59
I00
sg60
(lp472
g412
asbsg29
Vdiv
p473
sg31
g24
sg32
Nsg33
Nsg34
g225
sg35
(dp474
Vclass
p475
(lp476
Vresponsive-tabs
p477
assg37
g309
sg57
g58
sg59
I00
sg60
(lp478
g309
ag305
ag302
ag298
ag284
ag281
ag277
ag263
ag260
ag256
asbsg29
g404
sg31
g24
sg32
Nsg33
Nsg34
g63
sg35
(dp479
sg37
g236
sg57
g58
sg59
I00
sg60
(lp480
g236
asbsg29
g404
sg31
g24
sg32
Nsg33
Nsg34
g42
sg35
(dp481
sg37
g229
sg57
g58
sg59
I00
sg60
(lp482
g229
asbsg29
g404
sg31
g24
sg32
Nsg33
Nsg34
g39
sg35
(dp483
sg37
g146
sg57
g58
sg59
I00
sg60
(lp484
g146
ag140
ag137
ag133
ag130
ag126
ag123
ag119
ag116
ag112
ag109
ag105
ag102
ag98
ag95
ag91
ag88
ag84
ag81
ag77
ag74
ag70
ag67
asbsg29
g404
sg31
g24
sg32
Nsg33
Nsg34
Nsg35
(dp485
sg37
g51
sg57
g58
sg59
I00
sg60
(lp486
g51
ag45
asbsg57
Nsg59
I00
sg60
(lp487
g39
ag42
ag63
ag225
ag232
ag239
ag408
ag415
ag422
ag429
ag432
ag435
asbsS'raw_page'
p488
S'<!DOCTYPE html>\r\n<!--[if IE 7]>\r\n<html class="ie ie7" lang="en-US" prefix="og: http://ogp.me/ns#">\r\n<![endif]-->\r\n<!--[if IE 8]>\r\n<html class="ie ie8" lang="en-US" prefix="og: http://ogp.me/ns#">\r\n<![endif]-->\r\n<!--[if !(IE 7) | !(IE 8)  ]><!-->\r\n<html lang="en-US" prefix="og: http://ogp.me/ns#">\r\n<!--<![endif]-->\r\n<head>\r\n<meta charset="UTF-8" />\r\n<meta name="viewport" content="width=device-width" />\r\n\r\n<meta property="og:image" content="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/gfg_200X200.png">\r\n<meta property="og:image:type" content="image/png">\r\n<meta property="og:image:width" content="200">\r\n<meta property="og:image:height" content="200">\r\n\r\n<title>Boundary Traversal of binary tree - GeeksforGeeks</title>\r\n<link rel="profile" href="http://gmpg.org/xfn/11" />\r\n<link rel="pingback" href="http://www.geeksforgeeks.org/xmlrpc.php" />\r\n<!--[if lt IE 9]>\r\n<script src="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/js/html5.js" type="text/javascript"></script>\r\n<![endif]-->\r\n\n<!-- This site is optimized with the Yoast SEO plugin v3.0.7 - https://yoast.com/wordpress/plugins/seo/ -->\n<link rel="canonical" href="http://www.geeksforgeeks.org/boundary-traversal-of-binary-tree/" />\n<meta property="og:locale" content="en_US" />\n<meta property="og:type" content="article" />\n<meta property="og:title" content="Boundary Traversal of binary tree - GeeksforGeeks" />\n<meta property="og:description" content="Given a binary tree, print boundary nodes of the binary tree Anti-Clockwise starting from the root. For example, boundary traversal of the following tree is &#8220;20 8 4 10 14 25 22&#8243; We break the problem in 3 parts: 1. Print the left boundary in top-down manner. 2. Print all leaf nodes from left to\xe2\x80\xa6 Read More &raquo;" />\n<meta property="og:url" content="http://www.geeksforgeeks.org/boundary-traversal-of-binary-tree/" />\n<meta property="og:site_name" content="GeeksforGeeks" />\n<meta property="article:section" content="Trees" />\n<meta property="article:published_time" content="2012-09-12T14:29:15+00:00" />\n<meta property="article:modified_time" content="2016-01-15T17:31:06+00:00" />\n<meta property="og:updated_time" content="2016-01-15T17:31:06+00:00" />\n<meta property="og:image" content="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/BoundryTraversal-300x188.gif" />\n<!-- / Yoast SEO plugin. -->\n\n\t\t<script type="text/javascript">\n\t\t\twindow._wpemojiSettings = {"baseUrl":"http:\\/\\/s.w.org\\/images\\/core\\/emoji\\/72x72\\/","ext":".png","source":{"concatemoji":"http:\\/\\/www.geeksforgeeks.org\\/wp-includes\\/js\\/wp-emoji-release.min.js"}};\n\t\t\t!function(a,b,c){function d(a){var c=b.createElement("canvas"),d=c.getContext&&c.getContext("2d");return d&&d.fillText?(d.textBaseline="top",d.font="600 32px Arial","flag"===a?(d.fillText(String.fromCharCode(55356,56812,55356,56807),0,0),c.toDataURL().length>3e3):(d.fillText(String.fromCharCode(55357,56835),0,0),0!==d.getImageData(16,16,1,1).data[0])):!1}function e(a){var c=b.createElement("script");c.src=a,c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f,g;c.supports={simple:d("simple"),flag:d("flag")},c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.simple&&c.supports.flag||(g=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",g,!1),a.addEventListener("load",g,!1)):(a.attachEvent("onload",g),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&&f.twemoji&&(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);\n\t\t</script>\n\t\t<style type="text/css">\nimg.wp-smiley,\nimg.emoji {\n\tdisplay: inline !important;\n\tborder: none !important;\n\tbox-shadow: none !important;\n\theight: 1em !important;\n\twidth: 1em !important;\n\tmargin: 0 .07em !important;\n\tvertical-align: -0.1em !important;\n\tbackground: none !important;\n\tpadding: 0 !important;\n}\n</style>\n<link rel=\'stylesheet\' id=\'wp-pagenavi-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/wp-pagenavi/pagenavi-css.css\' type=\'text/css\' media=\'all\' />\n<link rel=\'stylesheet\' id=\'themonic-fonts-css\'  href=\'http://fonts.googleapis.com/css?family=Ubuntu:400,700&#038;subset=latin,latin-ext\' type=\'text/css\' media=\'all\' />\n<link rel=\'stylesheet\' id=\'themonic-style-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/style.css\' type=\'text/css\' media=\'all\' />\n<link rel=\'stylesheet\' id=\'custom-style-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/custom.css\' type=\'text/css\' media=\'all\' />\n<!--[if lt IE 9]>\n<link rel=\'stylesheet\' id=\'themonic-ie-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/css/ie.css\' type=\'text/css\' media=\'all\' />\n<![endif]-->\n<meta name="generator" content="WordPress 4.2.7" />\n<style type="text/css" id="custom-background-css">\nbody.custom-background { background-color: #ffffff; }\n</style>\n<style type="text/css" id="syntaxhighlighteranchor"></style>\n<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<script>\r\n  (adsbygoogle = window.adsbygoogle || []).push({\r\n    google_ad_client: "ca-pub-9465609616171866",\r\n    enable_page_level_ads: true\r\n  });\r\n</script>\r\n</head>\r\n<body class="single single-post postid-23796 single-format-standard custom-background custom-background-white custom-font-enabled">\r\n<div id="page" class="hfeed site">\r\n\t<header id="masthead" class="site-header" role="banner">\r\n\t\t\t\t\t<hgroup>\r\n\t\t\t<a href="http://www.geeksforgeeks.org/" title="GeeksforGeeks" rel="home">GeeksforGeeks</a>\r\n\t\t\t\t<br .../> <a class="site-description">A computer science portal for geeks</a>\r\n\t\t</hgroup>\r\n\r\n<div style="float:right;">\r\n<hgroup style="float:right;">   \r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://www.geeksforgeeks.org/campus-ambassador-program-by-geeksforgeeks/">CA</a>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://geeksquiz.com/gate-corner-2/">GATE CS</a>\r\n\r\n<strong><a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://practice.geeksforgeeks.org/">Practice</a></strong>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://www.geeksforgeeks.org/suggest/">Suggest</a>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://code.geeksforgeeks.org/">IDE</a>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://qa.geeksforgeeks.org/">Q&A</a>\r\n\r\n<a style="padding:0px 30px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://geeksquiz.com/">GeeksQuiz</a>\r\n\r\n</hgroup><br></br>\r\n\r\n<span style="display:inline-block; width:300px;float:right;">\r\n<script>\r\n  (function() {\r\n    var cx = \'009682134359037907028:tj6eafkv_be\';\r\n    var gcse = document.createElement(\'script\');\r\n    gcse.type = \'text/javascript\';\r\n    gcse.async = true;\r\n    gcse.src = (document.location.protocol == \'https:\' ? \'https:\' : \'http:\') +\r\n        \'//cse.google.com/cse.js?cx=\' + cx;\r\n    var s = document.getElementsByTagName(\'script\')[0];\r\n    s.parentNode.insertBefore(gcse, s);\r\n  })();\r\n</script>\r\n<gcse:search></gcse:search>\r\n\r\n<style type="text/css">\r\n  .gsc-control-cse {\r\n     padding: 0px 10px;\r\n  } \r\n\r\n  .gsc-control-cse {\r\n    font-family: "Trebuchet MS", sans-serif;\r\n    /*border-color: #E1F3DA;*/\r\n    /*background-color: #E1F3DA;*/\r\n  }\r\n  input.gsc-input {\r\n    border-color: #94CC7A;\r\n  }\r\n  input.gsc-search-button {\r\n    border-color: #94CC7A;\r\n    background-color: #4CB96B;\r\n    margin-top:7px;\r\n  }\r\n  .gsc-tabHeader.gsc-tabhInactive {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gsc-tabHeader.gsc-tabhActive {\r\n    border-color: #A9DA92;\r\n    background-color: #A9DA92;\r\n  }\r\n  .gsc-tabsArea {\r\n    border-color: #A9DA92;\r\n  }\r\n  .gsc-webResult.gsc-result {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gsc-webResult.gsc-result:hover {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:link,\r\n  .gs-webResult.gs-result a.gs-title:link b {\r\n    color: #009900;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:visited,\r\n  .gs-webResult.gs-result a.gs-title:visited b {\r\n    color: #009900;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:hover,\r\n  .gs-webResult.gs-result a.gs-title:hover b {\r\n    color: #003300;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:active,\r\n  .gs-webResult.gs-result a.gs-title:active b {\r\n    color: #009900;\r\n  }\r\n  .gsc-cursor-page {\r\n    color: #009900;\r\n  }\r\n  a.gsc-trailing-more-results:link {\r\n    color: #009900;\r\n  }\r\n  .gs-webResult.gs-result .gs-snippet {\r\n    color: #454545;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl {\r\n    color: #33cc00;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl-short {\r\n    color: #33cc00;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl-short {\r\n    display: none;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl-long {\r\n    display: block;\r\n  }\r\n  .gsc-cursor-box {\r\n    border-color: #A9DA92;\r\n  }\r\n  .gsc-results .gsc-cursor-page {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {\r\n    border-color: #A9DA92;\r\n    background-color: #A9DA92;\r\n  }\r\n  .gs-promotion.gs-result {\r\n    border-color: #94CC7A;\r\n    background-color: #CBE8B4;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:link {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:visited {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:hover {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:active {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result .gs-snippet {\r\n    color: #454545;\r\n  }\r\n  .gs-promotion.gs-result .gs-visibleUrl,\r\n  .gs-promotion.gs-result .gs-visibleUrl-short {\r\n    color: #815FA7;\r\n  }\r\n  .gsib_a {\r\n    padding : 2px;\r\n  }\r\n</style>    \r\n</span>\r\n</div>\r\n\r\n\t\t\r\n\t\t\r\n\t\t<nav id="site-navigation" class="themonic-nav" role="navigation">\r\n\t\t\t<a class="assistive-text" href="#content" title="Skip to content">Skip to content</a>\r\n\t\t\t<div class="menu-iconic-container"><ul id="menu-top" class="nav-menu"><li id="menu-item-135003" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-135003"><a href="http://www.geeksforgeeks.org/">Home</a></li>\n<li id="menu-item-135004" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-135004"><a title="Algorithms" href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algo</a>\n<ul class="sub-menu">\n\t<li id="menu-item-135030" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135030"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#AnalysisofAlgorithms">Analysis of Algorithms</a></li>\n\t<li id="menu-item-135031" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135031"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#SearchingandSorting">Searching and Sorting</a></li>\n\t<li id="menu-item-135032" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135032"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#GreedyAlgorithms">Greedy Algorithms</a></li>\n\t<li id="menu-item-135033" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135033"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#DynamicProgramming">Dynamic Programming</a></li>\n\t<li id="menu-item-135034" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135034"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#PatternSearching">Pattern Searching</a></li>\n\t<li id="menu-item-135035" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135035"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#OtherStringAlgorithms">Other String Algorithms</a></li>\n\t<li id="menu-item-135036" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135036"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#Backtracking">Backtracking</a></li>\n\t<li id="menu-item-135037" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135037"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#DivideandConquer">Divide and Conquer</a></li>\n\t<li id="menu-item-135038" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135038"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#GeometricAlgorithms">Geometric Algorithms</a></li>\n\t<li id="menu-item-135039" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135039"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#MathematicalAlgorithms">Mathematical Algorithms</a></li>\n\t<li id="menu-item-135040" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135040"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#BitAlgorithms">Bit Algorithms</a></li>\n\t<li id="menu-item-135041" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135041"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#GraphAlgorithms">Graph Algorithms</a></li>\n\t<li id="menu-item-135042" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135042"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#RandomizedAlgorithms">Randomized Algorithms</a></li>\n</ul>\n</li>\n<li id="menu-item-135010" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-135010"><a title="Data Structures" href="http://www.geeksforgeeks.org/data-structures/">DS</a>\n<ul class="sub-menu">\n\t<li id="menu-item-135045" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135045"><a href="http://www.geeksforgeeks.org/data-structures/#LinkedList">LinkedList</a></li>\n\t<li id="menu-item-135046" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135046"><a href="http://www.geeksforgeeks.org/data-structures/#Stack">Stack</a></li>\n\t<li id="menu-item-135047" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135047"><a href="http://www.geeksforgeeks.org/data-structures/#Queue">Queue</a></li>\n\t<li id="menu-item-135048" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135048"><a href="http://www.geeksforgeeks.org/data-structures/#BinaryTree">Binary Tree</a></li>\n\t<li id="menu-item-135049" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135049"><a href="http://www.geeksforgeeks.org/data-structures/#BinarySearchTree">Binary Search Tree</a></li>\n\t<li id="menu-item-135050" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135050"><a href="http://www.geeksforgeeks.org/data-structures/#Heap">Heap</a></li>\n\t<li id="menu-item-135051" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135051"><a href="http://www.geeksforgeeks.org/data-structures/#Hashing">Hashing</a></li>\n\t<li id="menu-item-135052" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135052"><a href="http://www.geeksforgeeks.org/data-structures/#Graph">Graph</a></li>\n\t<li id="menu-item-135053" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135053"><a href="http://www.geeksforgeeks.org/data-structures/#AdvancedDataStructure">Advanced Data Structure</a></li>\n\t<li id="menu-item-135054" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135054"><a href="http://www.geeksforgeeks.org/data-structures/#Array">Array</a></li>\n\t<li id="menu-item-135055" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135055"><a href="http://www.geeksforgeeks.org/data-structures/#Matrix">Matrix</a></li>\n\t<li id="menu-item-135056" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135056"><a href="http://www.geeksforgeeks.org/data-structures/#Misc">Misc</a></li>\n</ul>\n</li>\n<li id="menu-item-135014" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135014"><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview</a></li>\n<li id="menu-item-135006" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135006"><a href="http://www.geeksforgeeks.org/c/">C</a></li>\n<li id="menu-item-135007" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135007"><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>\n<li id="menu-item-135012" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135012"><a href="http://www.geeksforgeeks.org/java/">Java</a></li>\n<li id="menu-item-137004" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-137004"><a href="http://www.geeksforgeeks.org/python/">Python</a></li>\n<li id="menu-item-135009" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135009"><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>\n<li id="menu-item-135016" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135016"><a href="http://qa.geeksforgeeks.org/index.php?qa=ask">Ask a Q</a></li>\n<li id="menu-item-135077" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135077"><a href="https://play.google.com/store/apps/details?id=free.programming.programming">AndroidApp</a></li>\n<li id="menu-item-135367" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135367"><a href="http://www.geeksforgeeks.org/category/guestblogs/">GBlog</a></li>\n<li id="menu-item-135028" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135028"><a href="http://www.geeksforgeeks.org/category/gfact/">GFact</a></li>\n<li id="menu-item-136004" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-136004"><a href="http://www.geeksforgeeks.org/category/project/">Project</a></li>\n<li id="menu-item-136978" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-136978"><a href="http://www.geeksforgeeks.org/jobs/">Jobs</a></li>\n<li id="menu-item-135019" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135019"><a href="http://www.geeksforgeeks.org/category/c-arrays/">Arr</a></li>\n<li id="menu-item-135022" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135022"><a href="http://www.geeksforgeeks.org/category/c-strings/">String</a></li>\n<li id="menu-item-135937" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135937"><a href="http://www.geeksforgeeks.org/category/matrix/">Matrix</a></li>\n<li id="menu-item-135023" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135023"><a href="http://www.geeksforgeeks.org/category/linked-list/">Linked List</a></li>\n<li id="menu-item-135029" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135029"><a href="http://www.geeksforgeeks.org/category/stack/">Stack</a></li>\n<li id="menu-item-135932" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135932"><a href="http://www.geeksforgeeks.org/category/queue/">Q</a></li>\n<li id="menu-item-136299" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-136299"><a href="http://www.geeksforgeeks.org/category/hash/">Hash</a></li>\n<li id="menu-item-135941" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135941"><a href="http://www.geeksforgeeks.org/category/heap/">Heap</a></li>\n<li id="menu-item-135020" class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-parent current-post-parent menu-item-135020"><a href="http://www.geeksforgeeks.org/category/tree/">Tree</a></li>\n<li id="menu-item-135940" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135940"><a href="http://www.geeksforgeeks.org/category/binary-search-tree/">BST</a></li>\n<li id="menu-item-135024" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135024"><a href="http://www.geeksforgeeks.org/category/graph/">Graph</a></li>\n<li id="menu-item-135017" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135017"><a href="http://www.geeksforgeeks.org/category/c-puzzles/">C/C++</a></li>\n<li id="menu-item-135027" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135027"><a href="http://www.geeksforgeeks.org/category/bit-magic/">Bit</a></li>\n<li id="menu-item-135021" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135021"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/">MCQ</a></li>\n<li id="menu-item-135018" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135018"><a href="http://www.geeksforgeeks.org/category/c-programs/">Misc</a></li>\n<li id="menu-item-135025" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135025"><a href="http://www.geeksforgeeks.org/category/program-output/">O/P</a></li>\n</ul></div>\t\t</nav><!-- #site-navigation -->\r\n\t\t<div class="clear"></div>\r\n\t</header><!-- #masthead -->\r\n\r\n\t<div id="main" class="wrapper">\t<div id="primary" class="site-content">\r\n\t\t<div id="content" role="main">\r\n\r\n\t\t\t\t\t\t\t\r\n\t<article id="post-23796" class="post-23796 post type-post status-publish format-standard hentry category-tree">\r\n\t\t\t\t<header class="entry-header">\r\n\t\t\t\t\t\t<h1 class="entry-title">Boundary Traversal of binary tree</h1>\r\n\t\t\t\t\r\n\t\t\t</header><!-- .entry-header -->\r\n\r\n\t\t\t\t<div class="entry-content">\r\n\t\t\t<p>Given a binary tree, print boundary nodes of the binary tree Anti-Clockwise starting from the root. For example, boundary traversal of the following tree is &#8220;20 8 4 10 14 25 22&#8243;<span id="more-23796"></span></p>\n<p><a href="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/BoundryTraversal.gif"><img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/BoundryTraversal-300x188.gif" alt="" title="BoundryTraversal" width="300" height="188" class="aligncenter size-medium wp-image-23836" /></a><br />\nWe break the problem in 3 parts:<br />\n<strong>1.</strong> Print the left boundary in top-down manner.<br />\n<strong>2.</strong> Print all leaf nodes from left to right, which can again be sub-divided into two sub-parts:<br />\n&#8230;..<strong>2.1</strong>  Print all leaf nodes of left sub-tree from left to right.<br />\n&#8230;..<strong>2.2</strong> Print all leaf nodes of right subtree from left to right.<br />\n<strong>3.</strong> Print the right boundary in bottom-up manner.</p>\n<p>We need to take care of one thing that nodes are not printed again. e.g. The left most node is also the leaf node of the tree.</p>\n<p>Based on the above cases, below is the implementation:</p>\n<div class="responsive-tabs">\n<h2 class="tabtitle">C++</h2>\n<div class="tabcontent">\n\n<pre class="brush: cpp; highlight: [75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92]; title: ; notranslate" title="">\r\n/* program for boundary traversal of a binary tree */\r\n#include &lt;stdio.h&gt;\r\n#include &lt;stdlib.h&gt;\r\n\r\n/* A binary tree node has data, pointer to left child\r\n   and a pointer to right child */\r\nstruct node\r\n{\r\n    int data;\r\n    struct node *left, *right;\r\n};\r\n\r\n// A simple function to print leaf nodes of a binary tree\r\nvoid printLeaves(struct node* root)\r\n{\r\n    if ( root )\r\n    {\r\n        printLeaves(root-&gt;left);\r\n\r\n        // Print it if it is a leaf node\r\n        if ( !(root-&gt;left)  &amp;&amp;  !(root-&gt;right) )\r\n            printf(&quot;%d &quot;, root-&gt;data);\r\n\r\n        printLeaves(root-&gt;right);\r\n    }\r\n}\r\n\r\n// A function to print all left boundry nodes, except a leaf node.\r\n// Print the nodes in TOP DOWN manner\r\nvoid printBoundaryLeft(struct node* root)\r\n{\r\n    if (root)\r\n    {\r\n        if (root-&gt;left)\r\n        {\r\n            // to ensure top down order, print the node\r\n            // before calling itself for left subtree\r\n            printf(&quot;%d &quot;, root-&gt;data);\r\n            printBoundaryLeft(root-&gt;left);\r\n        }\r\n        else if( root-&gt;right )\r\n        {\r\n            printf(&quot;%d &quot;, root-&gt;data);\r\n            printBoundaryLeft(root-&gt;right);\r\n        }\r\n        // do nothing if it is a leaf node, this way we avoid\r\n        // duplicates in output\r\n    }\r\n}\r\n\r\n// A function to print all right boundry nodes, except a leaf node\r\n// Print the nodes in BOTTOM UP manner\r\nvoid printBoundaryRight(struct node* root)\r\n{\r\n    if (root)\r\n    {\r\n        if ( root-&gt;right )\r\n        {\r\n            // to ensure bottom up order, first call for right\r\n            //  subtree, then print this node\r\n            printBoundaryRight(root-&gt;right);\r\n            printf(&quot;%d &quot;, root-&gt;data);\r\n        }\r\n        else if ( root-&gt;left )\r\n        {\r\n            printBoundaryRight(root-&gt;left);\r\n            printf(&quot;%d &quot;, root-&gt;data);\r\n        }\r\n       // do nothing if it is a leaf node, this way we avoid\r\n       // duplicates in output\r\n    }\r\n}\r\n\r\n\r\n// A function to do boundary traversal of a given binary tree\r\nvoid printBoundary (struct node* root)\r\n{\r\n    if (root)\r\n    {\r\n        printf(&quot;%d &quot;,root-&gt;data);\r\n\r\n        // Print the left boundary in top-down manner.\r\n        printBoundaryLeft(root-&gt;left);\r\n\r\n        // Print all leaf nodes\r\n        printLeaves(root-&gt;left);\r\n        printLeaves(root-&gt;right);\r\n\r\n        // Print the right boundary in bottom-up manner\r\n        printBoundaryRight(root-&gt;right);\r\n    }\r\n}\r\n\r\n// A utility function to create a node\r\nstruct node* newNode( int data )\r\n{\r\n    struct node* temp = (struct node *) malloc( sizeof(struct node) );\r\n\r\n    temp-&gt;data = data;\r\n    temp-&gt;left = temp-&gt;right = NULL;\r\n\r\n    return temp;\r\n}\r\n\r\n// Driver program to test above functions\r\nint main()\r\n{\r\n    // Let us construct the tree given in the above diagram\r\n    struct node *root         = newNode(20);\r\n    root-&gt;left                = newNode(8);\r\n    root-&gt;left-&gt;left          = newNode(4);\r\n    root-&gt;left-&gt;right         = newNode(12);\r\n    root-&gt;left-&gt;right-&gt;left   = newNode(10);\r\n    root-&gt;left-&gt;right-&gt;right  = newNode(14);\r\n    root-&gt;right               = newNode(22);\r\n    root-&gt;right-&gt;right        = newNode(25);\r\n\r\n    printBoundary( root );\r\n\r\n    return 0;\r\n}\r\n</pre>\n\n</div><h2 class="tabtitle">Java</h2>\n<div class="tabcontent">\n\n<pre class="brush: java; title: ; notranslate" title="">\r\n//Java program to print boundary traversal of binary tree\r\n\r\n// A binary tree node\r\nclass Node {\r\n\r\n    int data;\r\n    Node left, right;\r\n\r\n    Node(int item) {\r\n        data = item;\r\n        left = right = null;\r\n    }\r\n}\r\n\r\nclass BinaryTree {\r\n\r\n    static Node root;\r\n\r\n    // A simple function to print leaf nodes of a binary tree\r\n    void printLeaves(Node node) {\r\n        if (node != null) {\r\n            printLeaves(node.left);\r\n\r\n            // Print it if it is a leaf node\r\n            if (node.left == null &amp;&amp; node.right == null) {\r\n                System.out.print(node.data + &quot; &quot;);\r\n            }\r\n\r\n            printLeaves(node.right);\r\n        }\r\n    }\r\n\r\n    // A function to print all left boundry nodes, except a leaf node.\r\n    // Print the nodes in TOP DOWN manner\r\n    void printBoundaryLeft(Node node) {\r\n        if (node != null) {\r\n            if (node.left != null) {\r\n                \r\n                // to ensure top down order, print the node\r\n                // before calling itself for left subtree\r\n                System.out.print(node.data + &quot; &quot;);\r\n                printBoundaryLeft(node.left);\r\n            } else if (node.right != null) {\r\n                System.out.print(node.data + &quot; &quot;);\r\n                printBoundaryLeft(node.right);\r\n            }\r\n\r\n            // do nothing if it is a leaf node, this way we avoid\r\n            // duplicates in output\r\n        }\r\n    }\r\n\r\n    // A function to print all right boundry nodes, except a leaf node\r\n    // Print the nodes in BOTTOM UP manner\r\n    void printBoundaryRight(Node node) {\r\n        if (node != null) {\r\n            if (node.right != null) {\r\n\r\n                // to ensure bottom up order, first call for right\r\n                //  subtree, then print this node\r\n                printBoundaryRight(node.right);\r\n                System.out.print(node.data + &quot; &quot;);\r\n            } else if (node.left != null) {\r\n                printBoundaryRight(node.left);\r\n                System.out.print(node.data + &quot; &quot;);\r\n            }\r\n\r\n            // do nothing if it is a leaf node, this way we avoid\r\n            // duplicates in output\r\n        }\r\n    }\r\n\r\n    // A function to do boundary traversal of a given binary tree\r\n    void printBoundary(Node node) {\r\n        if (node != null) {\r\n            System.out.print(node.data + &quot; &quot;);\r\n\r\n            // Print the left boundary in top-down manner.\r\n            printBoundaryLeft(node.left);\r\n\r\n            // Print all leaf nodes\r\n            printLeaves(node.left);\r\n            printLeaves(node.right);\r\n\r\n            // Print the right boundary in bottom-up manner\r\n            printBoundaryRight(node.right);\r\n        }\r\n    }\r\n     \r\n    // driver program to test above functions\r\n    public static void main(String args[]) {\r\n        BinaryTree tree = new BinaryTree();\r\n        tree.root = new Node(20);\r\n        tree.root.left = new Node(8);\r\n        tree.root.left.left = new Node(4);\r\n        tree.root.left.right = new Node(12);\r\n        tree.root.left.right.left = new Node(10);\r\n        tree.root.left.right.right = new Node(14);\r\n        tree.root.right = new Node(22);\r\n        tree.root.right.right = new Node(25);\r\n        tree.printBoundary(root);\r\n\r\n    }\r\n}\r\n\r\n</pre>\n\n</div><h2 class="tabtitle">Python</h2>\n<div class="tabcontent">\n\n<pre class="brush: python; title: ; notranslate" title="">\r\n\r\n# Python program for binary traversal of binary tree\r\n\r\n# A binary tree node\r\nclass Node:\r\n\r\n    # Constructor to create a new node\r\n    def __init__(self, data):\r\n        self.data = data \r\n        self.left = None\r\n        self.right = None\r\n\r\n# A simple function to print leaf nodes of a Binary Tree\r\ndef printLeaves(root):\r\n    if(root):\r\n        printLeaves(root.left)\r\n        \r\n        # Print it if it is a leaf node\r\n        if root.left is None and root.right is None:\r\n            print root.data,\r\n\r\n        printLeaves(root.right)\r\n\r\n# A function to print all left boundary nodes, except a \r\n# leaf node. Print the nodes in TOP DOWN manner\r\ndef printBoundaryLeft(root):\r\n    \r\n    if(root):\r\n        if (root.left):\r\n            \r\n            # to ensure top down order, print the node\r\n            # before calling itself for left subtree\r\n            print root.data,\r\n            printBoundaryLeft(root.left)\r\n        \r\n        elif(root.right):\r\n            print root.data,\r\n            printBoundaryRight(root.right)\r\n        \r\n        # do nothing if it is a leaf node, this way we\r\n        # avoid duplicates in output\r\n\r\n\r\n# A function to print all right boundary nodes, except\r\n# a leaf node. Print the nodes in BOTTOM UP manner\r\ndef printBoundaryRight(root):\r\n    \r\n    if(root):\r\n        if (root.right):\r\n            # to ensure bottom up order, first call for\r\n            # right subtree, then print this node\r\n            printBoundaryRight(root.right)\r\n            print root.data,\r\n        \r\n        elif(root.left):\r\n            printBoundaryRight(root.left)\r\n            print root.data,\r\n\r\n        # do nothing if it is a leaf node, this way we \r\n        # avoid duplicates in output\r\n\r\n\r\n# A function to do boundary traversal of a given binary tree\r\ndef printBoundary(root):\r\n    if (root):\r\n        print root.data, \r\n        \r\n        # Print the left boundary in top-down manner\r\n        printBoundaryLeft(root.left)\r\n\r\n        # Print all leaf nodes\r\n        printLeaves(root.left)\r\n        printLeaves(root.right)\r\n\r\n        # Print the right boundary in bottom-up manner\r\n        printBoundaryRight(root.right)\r\n\r\n\r\n# Driver program to test above function\r\nroot = Node(20)\r\nroot.left = Node(8)\r\nroot.left.left = Node(4)\r\nroot.left.right = Node(12)\r\nroot.left.right.left =  Node(10)\r\nroot.left.right.right = Node(14)\r\nroot.right = Node(22)\r\nroot.right.right = Node(25)\r\nprintBoundary(root)\r\n\r\n# This code is contributed by Nikhil Kumar Singh(nickzuck_007)\r\n\r\n</pre>\n<p></div></div><br />\nOutput:\n<pre>20 8 4 10 14 25 22</pre>\n<p>Time Complexity: O(n) where n is the number of nodes in binary tree.</p>\n<p>Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above</p>\n\r\n\t\t\t<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<!-- Big Rectangle Blog Bottom -->\r\n<ins class="adsbygoogle"\r\n     style="display:inline-block;width:336px;height:280px"\r\n     data-ad-client="ca-pub-9465609616171866"\r\n     data-ad-slot="4061219431"></ins>\r\n<script>\r\n(adsbygoogle = window.adsbygoogle || []).push({});\r\n</script>\r\n<br></br>\r\n\t\t</div><!-- .entry-content -->\r\n\t\t\t\t\r\n\t\t\r\n\r\n\t\t<footer class="entry-meta">\r\n\t\t<span class="post-comment"><a href="http://www.geeksforgeeks.org/boundary-traversal-of-binary-tree/#comments" class="commentslink" ><span class="dsq-postid" data-dsqidentifier="23796 http://www.geeksforgeeks.org/?p=23796">62 Comments</span></a> <!--added for comments by Shubham-->\r\n\t\t</span><span>Category: <a href="http://www.geeksforgeeks.org/category/tree/" rel="category tag">Trees</a></span> <span></span> \r\n           \t          \t\r\n\t\t\t\t\t</footer><!-- .entry-meta -->\r\n\t</article><!-- #post -->\r\n<div class="related_posts"><h3>Related Posts:</h3><ul><li><a href="http://www.geeksforgeeks.org/bfs-vs-dfs-binary-tree/" title="BFS vs DFS for Binary Tree">BFS vs DFS for Binary Tree</a></li><li><a href="http://www.geeksforgeeks.org/maximum-difference-between-node-and-its-ancestor-in-binary-tree/" title="Maximum difference between node and its ancestor in Binary Tree">Maximum difference between node and its ancestor in Binary Tree</a></li><li><a href="http://www.geeksforgeeks.org/inorder-non-threaded-binary-tree-traversal-without-recursion-or-stack/" title="Inorder Non-threaded Binary Tree Traversal without Recursion or Stack">Inorder Non-threaded Binary Tree Traversal without Recursion or Stack</a></li><li><a href="http://www.geeksforgeeks.org/check-if-leaf-traversal-of-two-binary-trees-is-same/" title="Check if leaf traversal of two Binary Trees is same?">Check if leaf traversal of two Binary Trees is same?</a></li><li><a href="http://www.geeksforgeeks.org/closest-leaf-to-a-given-node-in-binary-tree/" title="Closest leaf to a given node in Binary Tree">Closest leaf to a given node in Binary Tree</a></li><li><a href="http://www.geeksforgeeks.org/locking-and-unlocking-of-resources-in-the-form-of-n-ary-tree/" title="Locking and Unlocking of Resources arranged in the form of n-ary Tree">Locking and Unlocking of Resources arranged in the form of n-ary Tree</a></li><li><a href="http://www.geeksforgeeks.org/find-all-possible-trees-with-given-inorder-traversal/" title="Find all possible binary trees with given Inorder Traversal">Find all possible binary trees with given Inorder Traversal</a></li><li><a href="http://www.geeksforgeeks.org/find-lca-in-binary-tree-using-rmq/" title="Find LCA in Binary Tree using RMQ">Find LCA in Binary Tree using RMQ</a></li></ul></div><br></br>\r\n\r\n<!-- Added on 29 Oct 2015 for next and previous from same category -->\r\n<nav class="nav-single">\r\n\t\t\t\t\t<div class="assistive-text">Post navigation</div>\r\n\t\t\t\t\t<span class="nav-previous"><a href="http://www.geeksforgeeks.org/check-if-a-given-binary-tree-is-complete-tree-or-not/" rel="prev">Previous post in category</a></span>\r\n\t\t\t\t\t<span class="nav-next"><a href="http://www.geeksforgeeks.org/full-and-complete-binary-tree-from-given-preorder-and-postorder-traversals/" rel="next">Next post in category</a></span>\r\n\t\t\t\t</nav><!-- .nav-single -->\r\n\r\n\r\n<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>\r\n    <script type="text/javascript">\r\n    $(document).ready(function(){\r\n        $.ajax({\r\n            url:"http://courses.geeksforgeeks.org/plugin.php",\r\n            method:"POST",\r\n            dataType:"json",\r\n            data:{post_id:$("#ratePlugin").attr("pid"),url:window.location.href},\r\n            xhrFields:{withCredentials:true},\r\n            success:function(response){\r\n                $("#ratePlugin").html(response.rate);\r\n                $("#markPlugin").html(response.mark);\r\n            },\r\n            complete:function(){\r\n                $(".box").click(function(){\r\n                    rrequest({post_id:$("#ratePlugin").attr("pid"),post_title:$("#ratePlugin").attr("ptitle"),rating:$(this).attr("rating"),url:window.location.href});\r\n                });\r\n                $(".mark").click(function(){\r\n                    mrequest({post_id:$("#markPlugin").attr("pid"),post_title:$("#markPlugin").attr("ptitle"),op:$(this).attr("id"),url:window.location.href});\r\n                });\r\n            }\r\n        });\r\n        function rrequest(payload){\r\n            $.ajax({\r\n                url:"http://courses.geeksforgeeks.org/gfgRatings.php",\r\n                method:"POST",\r\n                dataType:"html",\r\n                data:payload,\r\n                xhrFields:{withCredentials:true},\r\n                success:function(response){\r\n                    $("#ratePlugin").html(response);\r\n                },\r\n                complete:function(){\r\n                    $(".box").click(function(){\r\n                        rrequest({post_id:$("#ratePlugin").attr("pid"),post_title:$("#ratePlugin").attr("ptitle"),rating:$(this).attr("rating"),url:window.location.href});\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        //rrequest({post_id:$("#ratePlugin").attr("pid"),url:window.location.href});\r\n        function mrequest(payload){\r\n            $.ajax({\r\n                url:"http://courses.geeksforgeeks.org/gfgMarking.php",\r\n                method:"POST",\r\n                dataType:"html",\r\n                data:payload,\r\n                xhrFields:{withCredentials:true},\r\n                success:function(response){\r\n                    $("#markPlugin").html(response);\r\n                },\r\n                complete:function(){\r\n                    $(".mark").click(function(){\r\n                        mrequest({post_id:$("#markPlugin").attr("pid"),post_title:$("#markPlugin").attr("ptitle"),op:$(this).attr("id"),url:window.location.href});\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        //mrequest({post_id:$("#markPlugin").attr("pid"),url:window.location.href});\r\n    });\r\n</script>\r\n\r\n<div class="plugins">\r\n<div pid="23796" ptitle="Boundary Traversal of binary tree" id="ratePlugin"></div>\r\n<div pid="23796" ptitle="Boundary Traversal of binary tree" id="markPlugin"></div>\r\n</div>\r\n\r\n<br></br>\r\n\r\n<script>\r\n  window.fbAsyncInit=function() {\r\n    FB.init({\r\n      appId      : \\\'380853768781431\\\',\r\n      xfbml      : true,\r\n      version    : \\\'v2.3\\\'\r\n    });\r\n  };\r\n\r\n  (function(d, s, id){\r\n     var js, fjs = d.getElementsByTagName(s)[0];\r\n     if (d.getElementById(id)) {return;}\r\n     js = d.createElement(s); js.id = id;\r\n     js.src = "//connect.facebook.net/en_US/sdk.js";\r\n     fjs.parentNode.insertBefore(js, fjs);\r\n   }(document, \\\'script\\\', \\\'facebook-jssdk\\\'));\r\n</script>\r\n<div class="fb-like" data-share="true" data-width="450" data-show-faces="true"></div>\r\n\r\n<br></br>\r\n<p>Writing code in comment? Please use <a href="http://code.geeksforgeeks.org/">code.geeksforgeeks.org</a>, generate link and share the link here.</a>\r\n\t\t\t\t\r\n<div id="disqus_thread">\r\n            <div id="dsq-content">\r\n\r\n\r\n            <ul id="dsq-comments">\r\n                    <li class="comment even thread-even depth-1" id="dsq-comment-35225">\r\n        <div id="dsq-comment-header-35225" class="dsq-comment-header">\r\n            <cite id="dsq-cite-35225">\r\n                <span id="dsq-author-user-35225">AlienOnEarth</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-35225" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-35225" class="dsq-comment-message"><p>Another algorithm can be:</p>\n<p>1.) print left view of the tree<br />\n2.) print all the leaves from left to right<br />\n3.) print right view of the tree</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-34497">\r\n        <div id="dsq-comment-header-34497" class="dsq-comment-header">\r\n            <cite id="dsq-cite-34497">\r\n                <span id="dsq-author-user-34497">danny</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-34497" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-34497" class="dsq-comment-message"><p>I don&#8217;t think the above solution will work for skew trees either Left skew or right skew&#8230;.Please correct me if I am wrong.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-35224">\r\n        <div id="dsq-comment-header-35224" class="dsq-comment-header">\r\n            <cite id="dsq-cite-35224">\r\n                <span id="dsq-author-user-35224">AlienOnEarth</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-35224" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-35224" class="dsq-comment-message"><p>It will work for all type of trees</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-3" id="dsq-comment-35714">\r\n        <div id="dsq-comment-header-35714" class="dsq-comment-header">\r\n            <cite id="dsq-cite-35714">\r\n                <span id="dsq-author-user-35714">danny</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-35714" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-35714" class="dsq-comment-message"><p>Yes,. Got to know . Thanks <img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/images/smilies/simple-smile.png" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-32399">\r\n        <div id="dsq-comment-header-32399" class="dsq-comment-header">\r\n            <cite id="dsq-cite-32399">\r\n                <span id="dsq-author-user-32399">mccullum</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-32399" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-32399" class="dsq-comment-message"><p>20</p>\n<p>                  8<br />\n               /<br />\n           4<br />\n        /<br />\n    10        14</p>\n<p>          22        </p>\n<p>for the tree above shudn&#8217;t the ans be 20 10 22 14 8<br />\nbt the solution posted gives 20 22 14 4 8</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-32469">\r\n        <div id="dsq-comment-header-32469" class="dsq-comment-header">\r\n            <cite id="dsq-cite-32469">\r\n                <span id="dsq-author-user-32469">Rahul</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-32469" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-32469" class="dsq-comment-message"><p>In the boundary traversal as mentioned we have to print .. first left subtree&#8217;s boundary , then all leaf nodes and at last right subtree&#8217;s boundary in bottom-up manner&#8230;<br />\nIn ur example, 10 is neither in left subtree&#8217;s boundary nor in right subtree&#8217;s boundary .. hence the required ans. i think should be 20 22 14 4 8</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-29687">\r\n        <div id="dsq-comment-header-29687" class="dsq-comment-header">\r\n            <cite id="dsq-cite-29687">\r\n                <span id="dsq-author-user-29687">Sriharsha g.r.v</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-29687" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-29687" class="dsq-comment-message"><p>HI..the same idea but code loooks simple here</p>\n<p>printleft(struct node* node)</p>\n<p>{</p>\n<p>    if (node-&gt;left == NULL)</p>\n<p>        return;</p>\n<p>    printf(&#8220;%d &#8220;, node-&gt;data);</p>\n<p>    printleft(node-&gt;left);</p>\n<p>}</p>\n<p>printleaves(struct node*root)</p>\n<p>{</p>\n<p>  if(root)</p>\n<p>  {</p>\n<p>    printleaves(root-&gt;left);</p>\n<p>    if(root-&gt;left==NULL &amp;&amp; root-&gt;right==NULL)</p>\n<p>    printf(&#8220;%d  &#8220;,root-&gt;data );</p>\n<p>    printleaves(root-&gt;right);</p>\n<p>  }</p>\n<p>}</p>\n<p>printright(struct node* node)</p>\n<p>{</p>\n<p>    if (node-&gt;right == NULL)</p>\n<p>        return;<br />\n    printleft(node-&gt;right);</p>\n<p>    printf(&#8220;%d &#8220;, node-&gt;data);<br />\n}</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-32470">\r\n        <div id="dsq-comment-header-32470" class="dsq-comment-header">\r\n            <cite id="dsq-cite-32470">\r\n                <span id="dsq-author-user-32470">Rahul</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-32470" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-32470" class="dsq-comment-message"><p>your code will give incorrect output for this &#8230; </p>\n<p>   20</p>\n<p>\t\t\t\t\t\t    /    </p>\n<p>\t\t\t\t\t\t   8      22</p>\n<p>12      25</p>\n<p>\t\t\t\t\t            /       </p>\n<p>\t\t\t\t\t          10    14</p>\n<p>the correct output should be . 20 8 12 10 14 25 22</p>\n<p>but o/p according to ur code is . 20 10 14 25 22</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-29216">\r\n        <div id="dsq-comment-header-29216" class="dsq-comment-header">\r\n            <cite id="dsq-cite-29216">\r\n                <span id="dsq-author-user-29216">Gautam</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-29216" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-29216" class="dsq-comment-message"><p>Hey  i think your code will not properly work for<br />\n                                           20</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-27307">\r\n        <div id="dsq-comment-header-27307" class="dsq-comment-header">\r\n            <cite id="dsq-cite-27307">\r\n                <span id="dsq-author-user-27307">@Ankit</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-27307" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-27307" class="dsq-comment-message"><p>i think else if part in printBoundaryLeft and printBoundaryRight function is not necessary</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-sh even thread-even depth-1" id="dsq-comment-26677">\r\n        <div id="dsq-comment-header-26677" class="dsq-comment-header">\r\n            <cite id="dsq-cite-26677">\r\n                <span id="dsq-author-user-26677">sh</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-26677" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-26677" class="dsq-comment-message"><p>Another approach could be, use BFS for the tree traversal and enter all the elements in queue where levels are seperated by NULL entries.After completing traversal, start taking out elements from queue, first entry after NULL will be printed, and entry before NULL will be pushed to stack, rest all the entries are ignored. Now, when queue is empty, go on popping elements from the stack until it gets empty.</p>\n<p>please mention if it is having problem with some cases. </p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-25125">\r\n        <div id="dsq-comment-header-25125" class="dsq-comment-header">\r\n            <cite id="dsq-cite-25125">\r\nhttp://realfv.blogspot.in                <span id="dsq-author-user-25125">Amit Bgl</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-25125" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-25125" class="dsq-comment-message"><p>wow code \xf0\x9f\x98\x80</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-punfabi even thread-even depth-1" id="dsq-comment-23041">\r\n        <div id="dsq-comment-header-23041" class="dsq-comment-header">\r\n            <cite id="dsq-cite-23041">\r\n                <span id="dsq-author-user-23041">punfabi</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-23041" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-23041" class="dsq-comment-message"><p>for trees in which root doesn&#8217;t have left or right child..</p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n\n// A function to do boundary traversal of a given binary tree\nvoid printBoundary (struct node* root)\n{\n    if (root)\n    {\n        printf(&quot;%d &quot;,root-&gt;data);\n \n        // Print the left boundary in top-down manner.\n        if( root-&gt;left)\n            printBoundaryLeft(root-&gt;left);\n        else\n            printBoundaryLeft(root-&gt;right);\n \n        // Print all leaf nodes\n        printLeaves(root-&gt;left);\n        printLeaves(root-&gt;right);\n \n        // Print the right boundary in bottom-up manner\n        if( root-&gt;right)\n           printBoundaryRight(root-&gt;right);\n        else\n           printBoundaryRight(root-&gt;left);\n    }\n}\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-22587">\r\n        <div id="dsq-comment-header-22587" class="dsq-comment-header">\r\n            <cite id="dsq-cite-22587">\r\n                <span id="dsq-author-user-22587">Akshay Jindal</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-22587" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-22587" class="dsq-comment-message"><p>Awesome!!&#8230;simplicity at its best..:D</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-ushekokar even thread-even depth-1" id="dsq-comment-22506">\r\n        <div id="dsq-comment-header-22506" class="dsq-comment-header">\r\n            <cite id="dsq-cite-22506">\r\n                <span id="dsq-author-user-22506">ushekokar</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-22506" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-22506" class="dsq-comment-message"><p>void boundary(struct node *root1)<br />\n{<br />\n   static struct node *t=root1;<br />\n   static int leftflag=1;</p>\n<p>   if(root1-&gt;l==NULL&amp;&amp;root1-&gt;r==NULL)//dont print leaf nodes<br />\n     return;</p>\n<p>   if(leftflag==1&amp;&amp;t-&gt;l!=NULL)//check if left of root is not null,if it is null dont go inside<br />\n   {<br />\n      cout&lt;&lt;&quot; &quot;&lt;&lt;root1-&gt;data;//print data first<br />\n     if(root1-&gt;l!=NULL)<br />\n       boundary(root1-&gt;l);<br />\n     else if(root1-&gt;r!=NULL)<br />\n       boundary(root1-&gt;r);<br />\n   }</p>\n<p>   if(root1==t&amp;&amp;leftflag==1)//if left<br />\n      {<br />\n        leftflag=0;<br />\n        printleaf(root1);<br />\n      } </p>\n<p>   if(leftflag==0&amp;&amp;t-&gt;r!=NULL)//if right is null dont go inside<br />\n   {<br />\n    if(root1-&gt;r!=NULL)<br />\n       boundary(root1-&gt;r);<br />\n     else if(root1-&gt;l!=NULL)<br />\n       boundary(root1-&gt;l);<br />\n     if(root1!=t)//dont print root again<br />\n     cout&lt;&lt;&quot; &quot;&lt;&lt;root1-&gt;data;//print data in reverse order<br />\n   }<br />\n}</p>\n<p>void printleaf(struct node *t)<br />\n{<br />\n     if(t-&gt;l==NULL&amp;&amp;t-&gt;r==NULL)<br />\n         cout&lt;&lt;&quot; &quot;&lt;&lt;t-&gt;data;<br />\n     else<br />\n        {<br />\n           if(t-&gt;l!=NULL)<br />\n                 printleaf(t-&gt;l);<br />\n           if(t-&gt;r!=NULL)<br />\n                 printleaf(t-&gt;r);<br />\n        }<br />\n}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-21925">\r\n        <div id="dsq-comment-header-21925" class="dsq-comment-header">\r\n            <cite id="dsq-cite-21925">\r\n                <span id="dsq-author-user-21925">Sunil</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-21925" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-21925" class="dsq-comment-message"><p>There is no need of the &#8216;else if&#8217; part in both printBoundaryLeft() and printBoundaryRight(). I don&#8217;t understand its need. Code works just fine without it.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-22141">\r\n        <div id="dsq-comment-header-22141" class="dsq-comment-header">\r\n            <cite id="dsq-cite-22141">\r\n                <span id="dsq-author-user-22141">Himanshu</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-22141" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-22141" class="dsq-comment-message"><p>@Sunil<br />\nThere is a need of else if in both functions.<br />\nSuppose in the above example node 8 has no left child.<br />\nThen the output should be 20 8 12 10 14 25 22.If you remove else if from the functions the output will be<br />\n20 10 14 25 22</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-3" id="dsq-comment-22143">\r\n        <div id="dsq-comment-header-22143" class="dsq-comment-header">\r\n            <cite id="dsq-cite-22143">\r\n                <span id="dsq-author-user-22143">Sunil</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-22143" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-22143" class="dsq-comment-message"><p>Thank you so much! It needed explanation!</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment byuser comment-author-denial even thread-even depth-1" id="dsq-comment-21387">\r\n        <div id="dsq-comment-header-21387" class="dsq-comment-header">\r\n            <cite id="dsq-cite-21387">\r\n                <span id="dsq-author-user-21387">denial</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-21387" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-21387" class="dsq-comment-message"><p>I think this code solves problem. works in all case. Correct me if I&#8217;m wrong. \xf0\x9f\x98\x9b</p>\n<pre> <code language="C">\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n// structure declaration of tree node\nstruct tnode\n{\n\tint data;\n\tstruct tnode *left;\n\tstruct tnode *right;\n};\ntypedef struct tnode node;\nnode *newNode(int data)\n{\n\tnode *temp=(node *)malloc(sizeof(node));\n\ttemp-&gt;data=data;\n\ttemp-&gt;left=NULL;\n\ttemp-&gt;right=NULL;\n\treturn temp;\n}\n// function printing left boundary of the tree\nvoid leftBoundary(node *root)\n{\n\tif(root)\n\t{\n\t\t// print the node if it is NOT leaf\n\t\tif(root-&gt;left!=NULL||root-&gt;right!=NULL)\n\t\t\tprintf(&quot;%d\\t&quot;,root-&gt;data);\n\t\tleftBoundary(root-&gt;left);\n\t}\n}\n// function printing right boundary of the tree\nvoid rightBoundary(node *root)\n{\n\tif(root)\n\t{\n\t\trightBoundary(root-&gt;right);\n\t\t// print the node if it is NOT leaf\n\t\tif(root-&gt;left!=NULL||root-&gt;right!=NULL)\n\t\t\tprintf(&quot;%d\\t&quot;,root-&gt;data);\n\t}\n}\n// function printing all leaves of tree\nvoid printLeaf(node *root)\n{\n\tif(root)\n\t{\n\t\t// traverse in Inorder and print all leaves\n\t\tprintLeaf(root-&gt;left);\n\t\tif(root-&gt;left==NULL&amp;&amp;root-&gt;right==NULL)\n\t\t\tprintf(&quot;%d\\t&quot;,root-&gt;data);\n\t\tprintLeaf(root-&gt;right);\n\t}\n}\n// function printing boundary of the tree\nvoid printBoundary(node *root)\n{\n\tif(root)\n\t{\n\t\t    leftBoundary(root);\n\t\t    printLeaf(root);\n\t\t    rightBoundary(root);\n\t}\n}\nint main()\n{\n\tnode *root         \t\t  = newNode(20);\n    root-&gt;left                = newNode(8);\n    root-&gt;left-&gt;left          = newNode(4);\n    root-&gt;left-&gt;right         = newNode(12);\n    root-&gt;left-&gt;right-&gt;left   = newNode(10);\n    root-&gt;left-&gt;right-&gt;right  = newNode(14);\n    root-&gt;right               = newNode(22);\n    root-&gt;right-&gt;right        = newNode(25);\n    \n    printBoundary(root);\n    \n\treturn 0;\n}\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-20067">\r\n        <div id="dsq-comment-header-20067" class="dsq-comment-header">\r\n            <cite id="dsq-cite-20067">\r\n                <span id="dsq-author-user-20067">sid</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-20067" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-20067" class="dsq-comment-message"><p>#include</p>\n<p>using namespace std;</p>\n<p>struct node<br />\n{<br />\n\tint data;<br />\n\tstruct node *left;<br />\n\tstruct node *right;<br />\n};</p>\n<p>struct node *getnode(int data)<br />\n{<br />\n\tstruct node *new_node =(struct node *)malloc(sizeof(struct node));<br />\n\tnew_node-&gt;data=data;<br />\n\tnew_node-&gt;left=NULL;<br />\n\tnew_node-&gt;right=NULL;<br />\n\treturn new_node;<br />\n}<br />\nvoid printleftboundary(struct node *node)<br />\n{<br />\n\tif(node)<br />\n\t{<br />\n\t\tif(node-&gt;left!=NULL)<br />\n\t\t{<br />\n\t\t\tprintf(&#8220;%d &#8220;,node-&gt;data);<br />\n\t\t\tprintleftboundary(node-&gt;left);<br />\n\t\t}<br />\n\t\telse if(node-&gt;right)<br />\n\t\t{<br />\n\t\t\tprintf(&#8220;%d &#8220;,node-&gt;data);<br />\n\t\t\tprintleftboundary(node-&gt;right);<br />\n\t\t}<br />\n\t}<br />\n}</p>\n<p>void printrightboundary(struct node *node)<br />\n{<br />\n\tif(node)<br />\n\t{<br />\n\t\tif(node-&gt;right!=NULL)<br />\n\t\t{<br />\n\t\t\tprintf(&#8220;%d &#8220;,node-&gt;data);<br />\n\t\t\tprintrightboundary(node-&gt;right);<br />\n\t\t}<br />\n\t\telse if(node-&gt;left)<br />\n\t\t{<br />\n\t\t\tprintf(&#8220;%d &#8220;,node-&gt;data);<br />\n\t\t\tprintrightboundary(node-&gt;left);<br />\n\t\t}<br />\n\t}<br />\n}</p>\n<p>void printleafnodes(struct node *node)<br />\n{<br />\n\tif(!node)<br />\n\t\treturn;</p>\n<p>\tif(!node-&gt;left&amp;&amp;!node-&gt;right)<br />\n\t\tprintf(&#8220;%d &#8220;,node-&gt;data);</p>\n<p>\tprintleafnodes(node-&gt;left);<br />\n\tprintleafnodes(node-&gt;right);<br />\n}</p>\n<p>void print(struct node *node)<br />\n{<br />\n\tstruct node *rightnode=node-&gt;right,*leftnode=node-&gt;left,*tnode=node;</p>\n<p>\tif(!node)<br />\n\t\treturn;<br />\n\tprintf(&#8220;%d &#8220;,node-&gt;data);</p>\n<p>\tif((!tnode-&gt;left)&amp;&amp;tnode-&gt;right)<br />\n\t{<br />\n\t\twhile((!tnode-&gt;left)&amp;&amp;tnode-&gt;right)<br />\n\t\t{<br />\n\t\t\ttnode=tnode-&gt;right;<br />\n\t\t}</p>\n<p>\t\tif(tnode-&gt;left!=NULL)<br />\n\t\t{<br />\n\t\t\tleftnode=tnode-&gt;left;<br />\n\t\t}<br />\n\t\trightnode=node-&gt;right;<br />\n\t}</p>\n<p>\telse if(tnode-&gt;left&amp;&amp;(!tnode-&gt;right))<br />\n\t{<br />\n\t\twhile(tnode-&gt;left&amp;&amp;(!tnode-&gt;right))<br />\n\t\t{<br />\n\t\t\ttnode=tnode-&gt;left;<br />\n\t\t}</p>\n<p>\t\tif(tnode-&gt;right!=NULL)<br />\n\t\t{<br />\n\t\t\trightnode=tnode-&gt;right;<br />\n\t\t}<br />\n\t\tleftnode=node-&gt;left;</p>\n<p>\t}</p>\n<p>\tprintleftboundary(leftnode);</p>\n<p>\tprintleafnodes(node-&gt;left);</p>\n<p>\tprintleafnodes(node-&gt;right);<br />\n\t//printf(&#8220;%d&#8221;,rightnode-&gt;right-&gt;data);<br />\n\tprintrightboundary(rightnode);<br />\n}</p>\n<p>int main()<br />\n{<br />\n\tstruct node *root=getnode(10);<br />\n\troot-&gt;left=getnode(5);<br />\n\troot-&gt;left-&gt;left=getnode(3);<br />\n\troot-&gt;left-&gt;right=getnode(7);<br />\n\troot-&gt;left-&gt;left-&gt;left=getnode(1);<br />\n\troot-&gt;left-&gt;right-&gt;right=getnode(8);<br />\n\troot-&gt;left-&gt;left-&gt;right=getnode(4);</p>\n<p>\tprint(root);<br />\n\treturn 0;<br />\n}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-koolkeshaw even thread-even depth-1" id="dsq-comment-19465">\r\n        <div id="dsq-comment-header-19465" class="dsq-comment-header">\r\n            <cite id="dsq-cite-19465">\r\n                <span id="dsq-author-user-19465">koolkeshaw</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-19465" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-19465" class="dsq-comment-message"><p>@GeeksforGeeks</p>\n<p>   your algo will not work for a node satisfying following condition :-<br />\n      i) it is neither on left boundary nor on right boundary<br />\n      ii) only one of its child(either left OR right) is null</p>\n<p>refer :<br />\n<a href="http://ideone.com/QtOivl" rel="nofollow">http://ideone.com/QtOivl</a></p>\n<p>I think the correct o/p :- 20,8,23,24,25</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-koolkeshaw odd alt depth-2" id="dsq-comment-19467">\r\n        <div id="dsq-comment-header-19467" class="dsq-comment-header">\r\n            <cite id="dsq-cite-19467">\r\n                <span id="dsq-author-user-19467">koolkeshaw</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-19467" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-19467" class="dsq-comment-message"><p>correct o/p :- 20,8,24,23,25</p>\n<p>for correct algo<br />\nrefer to<br />\n          <a href="http://ideone.com/kaZWyD" rel="nofollow">http://ideone.com/kaZWyD</a></p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-19182">\r\n        <div id="dsq-comment-header-19182" class="dsq-comment-header">\r\n            <cite id="dsq-cite-19182">\r\n                <span id="dsq-author-user-19182">abhinav</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-19182" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-19182" class="dsq-comment-message"><p>just  level  order  traversal  and  print  first  and  last  nodes</p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-34498">\r\n        <div id="dsq-comment-header-34498" class="dsq-comment-header">\r\n            <cite id="dsq-cite-34498">\r\n                <span id="dsq-author-user-34498">danny</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-34498" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-34498" class="dsq-comment-message"><p>In the last level you have to print all the values in queue and also the right values will not follow bottom up approach.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-18822">\r\n        <div id="dsq-comment-header-18822" class="dsq-comment-header">\r\n            <cite id="dsq-cite-18822">\r\n                <span id="dsq-author-user-18822">KK</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-18822" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-18822" class="dsq-comment-message"><p>We can do with level order traversal also. Print left node of each level and store the right node in stack. Once we are done with tree traversal print the stack in reverse order. </p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-abhishek08aug odd alt thread-odd thread-alt depth-1" id="dsq-comment-18458">\r\n        <div id="dsq-comment-header-18458" class="dsq-comment-header">\r\n            <cite id="dsq-cite-18458">\r\n                <span id="dsq-author-user-18458">abhishek08aug</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-18458" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-18458" class="dsq-comment-message"><p>Intelligent \xf0\x9f\x98\x80</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-17442">\r\n        <div id="dsq-comment-header-17442" class="dsq-comment-header">\r\n            <cite id="dsq-cite-17442">\r\n                <span id="dsq-author-user-17442">r&#8230;</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-17442" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-17442" class="dsq-comment-message"><p>we can Print all boundary elements in a single iteration O(n) </p>\n<pre> <code language="C">\nvoid Boundary_traversal ( bst_node * node ,int lcnt ,int rcnt )\n{\n\tif(node == NULL)\n\t\treturn;\n\n\tif( !rcnt &amp;&amp; !isLeaf(node))\n\t{\n\t      printf(&quot;-&gt; %d &quot;,node-&gt;value);\n\t}\n\t\n\tBoundary_traversal(node-&gt;left ,flag,lcnt+1,rcnt);\n\n\tif(isLeaf(node))\n\t{\n\t      printf(&quot;-&gt; %d &quot;,node-&gt;value );\n\t}\n\n\tBoundary_traversal(node-&gt;right ,flag,lcnt,rcnt+1);\n\n\tif(!lcnt &amp;&amp; rcnt &amp;&amp; !isLeaf(node))\n\t{\n\t      printf(&quot;-&gt; %d &quot;,node-&gt;value );\n\t}\n\n}\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-17443">\r\n        <div id="dsq-comment-header-17443" class="dsq-comment-header">\r\n            <cite id="dsq-cite-17443">\r\n                <span id="dsq-author-user-17443">r&#8230;</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-17443" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-17443" class="dsq-comment-message"><p>fixing the recursive caller function arguments (shouldn&#8217;t have flag as the second argument)</p>\n<pre> <code language="C">\nvoid Boundary_traversal ( bst_node * node ,int lcnt ,int rcnt )\n{\n    if(node == NULL)\n        return;\n \n    if( !rcnt &amp;&amp; !isLeaf(node))\n    {\n          printf(&quot;-&gt; %d &quot;,node-&gt;value);\n    }\n     \n    Boundary_traversal(node-&gt;left ,lcnt+1,rcnt);\n \n    if(isLeaf(node))\n    {\n          printf(&quot;-&gt; %d &quot;,node-&gt;value );\n    }\n \n    Boundary_traversal(node-&gt;right,lcnt,rcnt+1);\n \n    if(!lcnt &amp;&amp; rcnt &amp;&amp; !isLeaf(node))\n    {\n          printf(&quot;-&gt; %d &quot;,node-&gt;value );\n    }\n \n}\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment byuser comment-author-gupt even thread-odd thread-alt depth-1" id="dsq-comment-17059">\r\n        <div id="dsq-comment-header-17059" class="dsq-comment-header">\r\n            <cite id="dsq-cite-17059">\r\n                <span id="dsq-author-user-17059">Gupt</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-17059" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-17059" class="dsq-comment-message"><p>The above approach seems to be wrong. Consider a tree where the left subtree of root has just one child. But the right subtree has say 10 complete levels. The left boundary of right subtree also becomes the boundary of whole tree. But it wont be printed in this aproach.</p>\n<pre> <code language="C">\r\n/* Paste your code here (You may delete these lines if not writing code) */\r\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-26702">\r\n        <div id="dsq-comment-header-26702" class="dsq-comment-header">\r\n            <cite id="dsq-cite-26702">\r\n                <span id="dsq-author-user-26702">Anon</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-26702" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-26702" class="dsq-comment-message"><p>this is a valid point.It is a request to please confirm this point!.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even depth-2" id="dsq-comment-29096">\r\n        <div id="dsq-comment-header-29096" class="dsq-comment-header">\r\n            <cite id="dsq-cite-29096">\r\n                <span id="dsq-author-user-29096">Shrey Trivedi</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-29096" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-29096" class="dsq-comment-message"><p>Then in that case we should do the following :<br />\n1. Print the left view of the tree (all nodes that you would see from the left)<br />\n2. Print the leaves of the tree<br />\n3. Print the right view of the tree bottom to top</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-16441">\r\n        <div id="dsq-comment-header-16441" class="dsq-comment-header">\r\n            <cite id="dsq-cite-16441">\r\n                <span id="dsq-author-user-16441">Manish</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-16441" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-16441" class="dsq-comment-message"><p>public void boundaryTraversal(){<br />\n       boundaryTraversal(root);<br />\n   }<br />\n  private void boundaryTraversal(Node root){<br />\n       leftBoundary(root);<br />\n       leafNodes(root);<br />\n       rightBoundary(root.right);</p>\n<p>   }<br />\n   private void leftBoundary(Node root){<br />\n       if(root==null)<br />\n           return;<br />\n       while(root.left!=null){<br />\n           System.out.println(root.key);<br />\n           root=root.left;<br />\n       }<br />\n   }<br />\n    private void rightBoundary(Node root){<br />\n       if(root==null)<br />\n           return;<br />\n       rightBoundary(root.right);<br />\n       if(root.right==null){}<br />\n       else<br />\n            System.out.println(root.key);</p>\n<p>         }<br />\n    private void leafNodes(Node root){<br />\n        if(root==null)<br />\n            return;<br />\n        leafNodes(root.left);<br />\n        leafNodes(root.right);<br />\n        if(root.left==null&amp;&amp;root.right==null)<br />\n            System.out.println(root.key);<br />\n    }</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-14938">\r\n        <div id="dsq-comment-header-14938" class="dsq-comment-header">\r\n            <cite id="dsq-cite-14938">\r\n                <span id="dsq-author-user-14938">amit</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-14938" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-14938" class="dsq-comment-message"><p>I think if we add another node as left of 10 say with value 6, we should get both 10 and 6 in output, but these code wont give 10 in the output<br />\nplease verify</p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n/* A binary tree node has data, pointer to left child\n   and a pointer to right child */\nstruct node\n{\n    int data;\n    struct node *left, *right;\n};\n\n// A simple function to print leaf nodes of a binary tree\nvoid printLeaves(struct node* root)\n{\n    if ( root )\n    {\n        printLeaves(root-&gt;left);\n\n        // Print it if it is a leaf node\n        if ( !(root-&gt;left)  &amp;&amp;  !(root-&gt;right) )\n            printf(&quot;%d &quot;, root-&gt;data);\n\n        printLeaves(root-&gt;right);\n    }\n}\n\n// A function to print all left boundry nodes, except a leaf node.\n// Print the nodes in TOP DOWN manner\nvoid printBoundaryLeft(struct node* root)\n{\n    if (root)\n    {\n        if (root-&gt;left)\n        {\n            // to ensure top down order, print the node\n            // before calling itself for left subtree\n            printf(&quot;%d &quot;, root-&gt;data);\n            printBoundaryLeft(root-&gt;left);\n        }\n        else if( root-&gt;right )\n        {\n            printf(&quot;%d &quot;, root-&gt;data);\n            printBoundaryLeft(root-&gt;right);\n        }\n        // do nothing if it is a leaf node, this way we avoid\n        // duplicates in output\n    }\n}\n\n// A function to print all right boundry nodes, except a leaf node\n// Print the nodes in BOTTOM UP manner\nvoid printBoundaryRight(struct node* root)\n{\n    if (root)\n    {\n        if ( root-&gt;right )\n        {\n            // to ensure bottom up order, first call for right\n            //  subtree, then print this node\n            printBoundaryRight(root-&gt;right);\n            printf(&quot;%d &quot;, root-&gt;data);\n        }\n        else if ( root-&gt;left )\n        {\n            printBoundaryRight(root-&gt;left);\n            printf(&quot;%d &quot;, root-&gt;data);\n        }\n       // do nothing if it is a leaf node, this way we avoid\n       // duplicates in output\n    }\n}\n\n\n// A function to do boundary traversal of a given binary tree\nvoid printBoundary (struct node* root)\n{\n    if (root)\n    {\n        printf(&quot;%d &quot;,root-&gt;data);\n\n        // Print the left boundary in top-down manner.\n        printBoundaryLeft(root-&gt;left);\n\n        // Print all leaf nodes\n        printLeaves(root-&gt;left);\n        printLeaves(root-&gt;right);\n\n        // Print the right boundary in bottom-up manner\n        printBoundaryRight(root-&gt;right);\n    }\n}\n\n// A utility function to create a node\nstruct node* newNode( int data )\n{\n    struct node* temp = (struct node *) malloc( sizeof(struct node) );\n\n    temp-&gt;data = data;\n    temp-&gt;left = temp-&gt;right = NULL;\n\n    return temp;\n}\n\n// Driver program to test above functions\nint main()\n{\n    // Let us construct the tree given in the above diagram\n    struct node *root         = newNode(20);\n    root-&gt;left                = newNode(8);\n    root-&gt;left-&gt;left          = newNode(4);\n    root-&gt;left-&gt;right         = newNode(12);\n    root-&gt;left-&gt;right-&gt;left   = newNode(10);\n    root-&gt;left-&gt;right-&gt;left-&gt;left   = newNode(6);\n    root-&gt;left-&gt;right-&gt;right  = newNode(14);\n    root-&gt;right               = newNode(22);\n    root-&gt;right-&gt;right        = newNode(25);\n\n    printBoundary( root );\n\n    return 0;\n}\n\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-14681">\r\n        <div id="dsq-comment-header-14681" class="dsq-comment-header">\r\n            <cite id="dsq-cite-14681">\r\n                <span id="dsq-author-user-14681">Gopal</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-14681" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-14681" class="dsq-comment-message"><p>\tpublic static void boundaryTraversal(Node root)<br />\n\t{<br />\n\t\tif(root == null)<br />\n\t\t\treturn;</p>\n<p>\t\tboundaryTraversal(root,true,true);<br />\n\t}</p>\n<p>\tprivate static void boundaryTraversal(Node node,boolean left,boolean right)<br />\n\t{<br />\n\t\tif(node == null)<br />\n\t\t\treturn;<br />\n\t\t//to avoid root to printed twice<br />\n\t\tboolean isRootPrinted = false;<br />\n\t\tif(node.left == null &amp;&amp; node.right ==null)<br />\n\t\t{<br />\n\t\t\tSystem.out.print(node.n + &quot; &quot;);<br />\n\t\t\treturn;<br />\n\t\t}</p>\n<p>\t\tif(left)<br />\n\t\t{<br />\n\t\t\tSystem.out.print(node.n + &quot; &quot;);<br />\n\t\t\tisRootPrinted = true;<br />\n\t\t}</p>\n<p>\t\tif(left)<br />\n\t\t\tboundaryTraversal(node.left,left,false);<br />\n\t\telse<br />\n\t\t\tboundaryTraversal(node.left,false,false);</p>\n<p>\t\tif(right)<br />\n\t\t\tboundaryTraversal(node.right,false,right);<br />\n\t\telse<br />\n\t\t\tboundaryTraversal(node.right,false,false);</p>\n<p>\t\tif(right &amp;&amp; !isRootPrinted)<br />\n\t\t{<br />\n\t\t\tSystem.out.print(node.n + &quot; &quot;);<br />\n\t\t}<br />\n\t}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-14320">\r\n        <div id="dsq-comment-header-14320" class="dsq-comment-header">\r\n            <cite id="dsq-cite-14320">\r\n                <span id="dsq-author-user-14320">Karthik</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-14320" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-14320" class="dsq-comment-message"><p>Using Preorder traversal on left tree and postorder traversal on right</p>\n<p>void preLeft(Node* node, bool check = true)<br />\n{<br />\n\tif(!node)<br />\n\t\treturn;</p>\n<p>\tif(check || !(node-&gt;right || node-&gt;left))<br />\n\t\tcout &lt;&lt; node-&gt;data &lt;&lt; endl;</p>\n<p>\tpreLeft(node-&gt;left,check &amp;&amp; true);<br />\n\tpreLeft(node-&gt;right,false);<br />\n}</p>\n<p>void postRight(Node* node, bool check = true)<br />\n{<br />\n\tif(!node)<br />\n\t\treturn;</p>\n<p>\tpostRight(node-&gt;left,false);<br />\n\tpostRight(node-&gt;right,check&amp;&amp;true);</p>\n<p>\tif(check || !(node-&gt;right || node-&gt;left))<br />\n\t\tcout &lt;&lt; node-&gt;data &lt;&lt; endl;<br />\n}</p>\n<p>void boundaryTraversal(Node* root)<br />\n{<br />\n\tif(!root)<br />\n\t\treturn;</p>\n<p>\tcout&lt;&lt; root-&gt;data&lt;&lt;endl;<br />\n\tpreLeft(root-&gt;left);<br />\n\tpostRight(root-&gt;right);<br />\n}</p>\n<p>class Node<br />\n{<br />\npublic:<br />\n\tNode* left;<br />\n\tNode* right;<br />\n\tint data;<br />\n\tNode(int data, Node*right = NULL, Node* left = NULL):data(data),right(right),left(left){};<br />\n};</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-16143">\r\n        <div id="dsq-comment-header-16143" class="dsq-comment-header">\r\n            <cite id="dsq-cite-16143">\r\nhttp://chandrabhagat.wordpress.com                <span id="dsq-author-user-16143">Sharad Chandra</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-16143" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-16143" class="dsq-comment-message"><p>I figured out the same and agree with your idea with some changes. It is one pass solution unlike given solution.</p>\n<p>For left tree, pre-order traversal, use the information that backtrack has started so stop printing internal nodes.</p>\n<p>For right tree, post-order traversal, pass the information to recursive function that which child of current node is part of right boundary.</p>\n<p>In both the case, always print leaf node, which can easily be checked.</p>\n<p>void preorderPrintBoundary (struct node* root, int&amp; backtrack)<br />\n{<br />\n\t if (root)<br />\n\t {<br />\n\t\tif ((! backtrack) || ((!root-&gt;left) &amp;&amp; (!root-&gt;right)))<br />\n\t\t   printf(&#8220;%d &#8220;, root-&gt;data);</p>\n<p>        preorderPrintBoundary(root-&gt;left, backtrack);<br />\n        preorderPrintBoundary(root-&gt;right, backtrack);<br />\n        backtrack = 1; // place where backtrack starts, set it forever<br />\n  \t }<br />\n}</p>\n<p>void postorderPrintBoundary (struct node* root, const int&amp; right_boundary)<br />\n{<br />\n     if (root)<br />\n\t {<br />\n\t\tpostorderPrintBoundary(root-&gt;left, (right_boundary &amp;&amp; root-&gt;right == NULL));<br />\n\t\tpostorderPrintBoundary(root-&gt;right, right_boundary);<br />\n\t\tif (right_boundary || ((!root-&gt;left) &amp;&amp; (!root-&gt;right)))<br />\n\t\t   printf(&#8220;%d &#8220;, root-&gt;data);<br />\n\t }<br />\n}</p>\n<p>void printBoundary (struct node* root)<br />\n{<br />\n     if (root)<br />\n\t {<br />\n\t\tprintf(&#8220;%d &#8220;, root-&gt;data);<br />\n\t\tint backtrack = 0;<br />\n\t\tpreorderPrintBoundary(root-&gt;left, backtrack);<br />\n\t\tint right_boundary = 1;<br />\n\t\tpostorderPrintBoundary(root-&gt;right, right_boundary);<br />\n\t }<br />\n}</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-3" id="dsq-comment-16144">\r\n        <div id="dsq-comment-header-16144" class="dsq-comment-header">\r\n            <cite id="dsq-cite-16144">\r\n                <span id="dsq-author-user-16144">Sharad Chandra</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-16144" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-16144" class="dsq-comment-message"><p>PrintBoundary requires a correction</p>\n<p>if (root and root does not have both child node)<br />\n{<br />\n   print root-&gt;data<br />\n   printBoundary(root&#8217;s child which ever is present)<br />\n}<br />\nelse<br />\n{  /* root has both the child node, continue with preorder and post order idea */<br />\n}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-13949">\r\n        <div id="dsq-comment-header-13949" class="dsq-comment-header">\r\n            <cite id="dsq-cite-13949">\r\n                <span id="dsq-author-user-13949">Amit</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-13949" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-13949" class="dsq-comment-message"><p>Requirement :<br />\n1. Print the left boundary in top-down manner.<br />\n2. Print all leaf nodes from left to right, which can again be sub-divided into two sub-parts:<br />\n\xe2\x80\xa6..2.1 Print all leaf nodes of left sub-tree from left to right.<br />\n\xe2\x80\xa6..2.2 Print all leaf nodes of right subtree from left to right.<br />\n3. Print the right boundary in bottom-up manner.</p>\n<p>Solution should be :<br />\n1. Root -&gt; Check Not Leaf -&gt; Print -&gt; Recurse to left<br />\n2. Inorder Traversal of full tree print only leaves<br />\n3. Root -&gt; Recurse to right -&gt; Check Not Leaf -&gt; Print</p>\n<p>Am I right looks like simple functions</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-12242">\r\n        <div id="dsq-comment-header-12242" class="dsq-comment-header">\r\n            <cite id="dsq-cite-12242">\r\n                <span id="dsq-author-user-12242">Dhaval</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-12242" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-12242" class="dsq-comment-message"><pre> <code language="C">\n/*@geeksforgeeks\n    For the following input...*/\n    struct node *root         = newNode(20);\n    root-&gt;right                = newNode(8);\n    root-&gt;right-&gt;left          = newNode(4);\n    root-&gt;right-&gt;right         = newNode(12);\n    root-&gt;right-&gt;left-&gt;left   = newNode(10);\n    root-&gt;right-&gt;right-&gt;right  = newNode(14);\n    root-&gt;right-&gt;right-&gt;left   = newNode(11);\n    root-&gt;right-&gt;left-&gt;right        = newNode(25);\n/*    output:20 10 25 11 14 12 8\n        20\n         \n             8\n \n        4        12\n\n     10    25  11   14\n\n    4 is not printed...\n    I think it should be print 4 as a Left-boundary..\n    Correct me if I am wrong.. \n\n*/\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-25043">\r\n        <div id="dsq-comment-header-25043" class="dsq-comment-header">\r\n            <cite id="dsq-cite-25043">\r\n                <span id="dsq-author-user-25043">AKS</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-25043" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-25043" class="dsq-comment-message"><p>@Dhaval, Yes, You are right.I too have same question, let me know if you got the answer .</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-11663">\r\n        <div id="dsq-comment-header-11663" class="dsq-comment-header">\r\n            <cite id="dsq-cite-11663">\r\n                <span id="dsq-author-user-11663">Sariam</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-11663" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-11663" class="dsq-comment-message"><p>why do well call printLeaves() twice, we can just call it once by passing the root like: printLeaves(root) which will print leaves from left to right which we want. </p>\n<p>Clarify if I am missing something!</p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-10918">\r\n        <div id="dsq-comment-header-10918" class="dsq-comment-header">\r\n            <cite id="dsq-cite-10918">\r\n                <span id="dsq-author-user-10918">rahul sihag</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-10918" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-10918" class="dsq-comment-message"><p>O(n) in one traversal<br />\nCall<br />\nprintBoundary(root,1,1);</p>\n<pre> <code language="C">\nint flagl=1;\n\nvoid printBoundary(struct node *root,int flagr,int rootflag)\n{\n        if(!root)\n                return;\n        if(root-&gt;left==NULL&amp;&amp;root-&gt;right==NULL)\n        {\n                printf(&quot;%d &quot;,root-&gt;data);\n                flagl=0;\n                return;\n        }\n\n        if(flagl)\n                printf(&quot;%d &quot;,root-&gt;data);\n\n        printBoundary(root-&gt;left,0,0);\n        if(flagr)\n                printBoundary(root-&gt;right,1,0);\n        else\n                printBoundary(root-&gt;right,0,0);\n        if(flagr&amp;&amp;!rootflag)\n                printf(&quot;%d &quot;,root-&gt;data);\n\n}\n\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-11360">\r\n        <div id="dsq-comment-header-11360" class="dsq-comment-header">\r\n            <cite id="dsq-cite-11360">\r\n                <span id="dsq-author-user-11360">firefist</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-11360" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-11360" class="dsq-comment-message"><p>fantastic&#8230;</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-3" id="dsq-comment-11500">\r\n        <div id="dsq-comment-header-11500" class="dsq-comment-header">\r\n            <cite id="dsq-cite-11500">\r\n                <span id="dsq-author-user-11500">praveen</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-11500" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-11500" class="dsq-comment-message"><p>superb</p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment byuser comment-author-gupt even depth-2" id="dsq-comment-17048">\r\n        <div id="dsq-comment-header-17048" class="dsq-comment-header">\r\n            <cite id="dsq-cite-17048">\r\n                <span id="dsq-author-user-17048">Gupt</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-17048" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-17048" class="dsq-comment-message"><p>Could you please explain the code?</p>\n<pre> <code language="C">\r\n/* Paste your code here (You may delete these lines if not writing code) */\r\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt depth-2" id="dsq-comment-28114">\r\n        <div id="dsq-comment-header-28114" class="dsq-comment-header">\r\n            <cite id="dsq-cite-28114">\r\n                <span id="dsq-author-user-28114">Guest</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-28114" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-28114" class="dsq-comment-message"><p>Your code will not work in below example:</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even depth-2" id="dsq-comment-28115">\r\n        <div id="dsq-comment-header-28115" class="dsq-comment-header">\r\n            <cite id="dsq-cite-28115">\r\n                <span id="dsq-author-user-28115">Vaibhav</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-28115" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-28115" class="dsq-comment-message"><p>Your code will not work in below example:<br />\n10</p>\n<p>    20</p>\n<p>        30</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-10880">\r\n        <div id="dsq-comment-header-10880" class="dsq-comment-header">\r\n            <cite id="dsq-cite-10880">\r\n                <span id="dsq-author-user-10880">Nishant Seth</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-10880" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-10880" class="dsq-comment-message"><p>What if nodes 10 &amp; 14 have children as well? I think they should still be part of tree boundary, but they wont be picked by any of the 3 boundary functions. Let me know if I am wrong.</p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-10881">\r\n        <div id="dsq-comment-header-10881" class="dsq-comment-header">\r\n            <cite id="dsq-cite-10881">\r\n                <span id="dsq-author-user-10881">Aashish</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-10881" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-10881" class="dsq-comment-message"><p>If 10 and 14 will have children, they will become internal nodes, so they should not be printed.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-3" id="dsq-comment-11023">\r\n        <div id="dsq-comment-header-11023" class="dsq-comment-header">\r\n            <cite id="dsq-cite-11023">\r\n                <span id="dsq-author-user-11023">Theo</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-11023" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-11023" class="dsq-comment-message"><p>i think 10 and 14 will be still part of the boundary if 10 has only a right child(leaf) and 14 has only a left child(leaf). But your code seems doesn&#8217;t handling it..the boundary should contain all left most nodes and right most nodes of n-1 levels and all leaves of nth level for a n level tree&#8230;.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-10872">\r\n        <div id="dsq-comment-header-10872" class="dsq-comment-header">\r\n            <cite id="dsq-cite-10872">\r\n                <span id="dsq-author-user-10872">Nitin Gutpa iitan</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-10872" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-10872" class="dsq-comment-message"><p><img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/images/smilies/simple-smile.png" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;" /> No Need to right else part of PrintLeft and PrintRight boundary function&#8230;.<br />\npls clarify me &#8230;if i m wrong  </p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-10873">\r\n        <div id="dsq-comment-header-10873" class="dsq-comment-header">\r\n            <cite id="dsq-cite-10873">\r\n                <span id="dsq-author-user-10873">Aashish</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-10873" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-10873" class="dsq-comment-message"><p>Remove node 4 from the example discussed above. The new output should be: 20 8 12 10 14 25 22<br />\nThis is because, if a subtree has no left child, its right node will serve as the boundary. This will be missed if we remove the else part.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-3" id="dsq-comment-11472">\r\n        <div id="dsq-comment-header-11472" class="dsq-comment-header">\r\n            <cite id="dsq-cite-11472">\r\n                <span id="dsq-author-user-11472">adarsh</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-11472" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-11472" class="dsq-comment-message"><pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-10831">\r\n        <div id="dsq-comment-header-10831" class="dsq-comment-header">\r\n            <cite id="dsq-cite-10831">\r\n                <span id="dsq-author-user-10831">sahilalipuria</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-10831" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-10831" class="dsq-comment-message"><pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\nthe function to print the left and right can be written as\n\nvoid printleft(node *root)\n{\n  if(root-&gt;left==NULL &amp;&amp; root-&gt;right==NULL)\n   return;\n  else\n   {\n     printf(&quot;%d&quot;,root-&gt;left-&gt;data);\n     printleft(root-&gt;left);\n   }\n}\n\nsimilarly we can write for the right boundary\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-10792">\r\n        <div id="dsq-comment-header-10792" class="dsq-comment-header">\r\n            <cite id="dsq-cite-10792">\r\n                <span id="dsq-author-user-10792">atul</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-10792" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-10792" class="dsq-comment-message"><p>printing left and leaf nodes can be done in same function :-<br />\ncall : print(root);</p>\n<pre> <code language="C">\nint flag=1;\nvoid printLeftLeaf(node *root)\n{\n        if(root!=NULL)\n        {\n                if(flag==1 || (!root-&gt;left &amp;&amp; !root-&gt;right))\n                {\n                        printf(&quot;%d &quot;,root-&gt;data);\n                }\n                printLeftLeaf(root-&gt;left);\n                flag=0;\n                printLeftLeaf(root-&gt;right);\n        }\n\n\n}\n\nvoid printRight(node *root)\n{\n        if(root!=NULL)\n        {\n                if(root-&gt;left==NULL &amp;&amp; root-&gt;right==NULL)\n                {\n                        return;\n                }\n                else\n                {\n                        printf(&quot;%d &quot;,root-&gt;data);\n                        printRight(root-&gt;right);\n                }\n        }\n\n}\nnode* print(node *root)\n{\n        if(!root)\n                return NULL;\n        printLeftLeaf(root);\n        if(root-&gt;right)\n        {\n                printRight(root-&gt;right);\n        }\n}\n\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-10791">\r\n        <div id="dsq-comment-header-10791" class="dsq-comment-header">\r\n            <cite id="dsq-cite-10791">\r\n                <span id="dsq-author-user-10791">atul</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-10791" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-10791" class="dsq-comment-message"><p>printing left and the leaf nodes can be done in single function.<br />\ncall : print(root);</p>\n<pre> <code language="C">\nint flag=1;\nvoid printLeftLeaf(node *root)\n{\n        if(root!=NULL)\n        {\n                if(flag==1 || (!root-&gt;left &amp;&amp; !root-&gt;right))\n                {\n                        printf(&quot;%d &quot;,root-&gt;data);\n                }\n                printLeftLeaf(root-&gt;left);\n                flag=0;\n                printLeftLeaf(root-&gt;right);\n        }\n\n\n}\n\nvoid printRight(node *root)\n{\n        if(root!=NULL)\n        {\n                if(root-&gt;left==NULL &amp;&amp; root-&gt;right==NULL)\n                {\n                        return;\n                }\n                else\n                {\n                        printf(&quot;%d &quot;,root-&gt;data);\n                        printRight(root-&gt;right);\n                }\n        }\n\n}\nnode* print(node *root)\n{\n        if(!root)\n                return NULL;\n        printLeftLeaf(root);\n        if(root-&gt;right)\n        {\n                printRight(root-&gt;right);\n        }\n}\n\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-10788">\r\n        <div id="dsq-comment-header-10788" class="dsq-comment-header">\r\n            <cite id="dsq-cite-10788">\r\n                <span id="dsq-author-user-10788">sreeram</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-10788" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-10788" class="dsq-comment-message"><p>I think in these printBoundaryLeft and printBoundaryRight<br />\nfunctions &#8230;we can go for iterative traversal since it substantially reduces stack calls and memory &#8230;.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-10790">\r\n        <div id="dsq-comment-header-10790" class="dsq-comment-header">\r\n            <cite id="dsq-cite-10790">\r\n                <span id="dsq-author-user-10790">ranjan</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-10790" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-10790" class="dsq-comment-message"><p>yes..i agree..<br />\ncud u please post ur solution here..</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-3" id="dsq-comment-10793">\r\n        <div id="dsq-comment-header-10793" class="dsq-comment-header">\r\n            <cite id="dsq-cite-10793">\r\n                <span id="dsq-author-user-10793">sreeram</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-10793" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-10793" class="dsq-comment-message"><pre> <code language="C">\nvoid printBoundaryLeft(struct node* root)\n{\n    while (root-&gt;left||root-&gt;right)\n    {\n        if (root-&gt;left)\n        {\n            // to ensure top down order, print the node\n            // before calling itself for left subtree\n            printf(&quot;%d &quot;, root-&gt;data);\n            root=root-&gt;left;\n        }\n        else if( root-&gt;right )\n        {\n            printf(&quot;%d &quot;, root-&gt;data);\n            root=root-&gt;right;\n        }\n        // do nothing if it is a leaf node, this way we avoid\n        // duplicates in output\n    }\n}\n\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-10786">\r\n        <div id="dsq-comment-header-10786" class="dsq-comment-header">\r\n            <cite id="dsq-cite-10786">\r\n                <span id="dsq-author-user-10786">Siva Krishna</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-10786" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-10786" class="dsq-comment-message"><p>I think here duplicates may come 4 and 25 are printed twice</p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-10787">\r\n        <div id="dsq-comment-header-10787" class="dsq-comment-header">\r\n            <cite id="dsq-cite-10787">\r\n                <span id="dsq-author-user-10787">Aashish Barnwal</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-10787" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-10787" class="dsq-comment-message"><p>You can check output here: <a href="https://ideone.com/5Mdp7" rel="nofollow">https://ideone.com/5Mdp7</a></p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n            </ul>\r\n\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n<script type="text/javascript">\r\nvar disqus_url = \'http://www.geeksforgeeks.org/boundary-traversal-of-binary-tree/\';\r\nvar disqus_identifier = \'23796 http://www.geeksforgeeks.org/?p=23796\';\r\nvar disqus_container_id = \'disqus_thread\';\r\nvar disqus_shortname = \'geeksforgeeks\';\r\nvar disqus_title = "Boundary Traversal of binary tree";\r\nvar disqus_config_custom = window.disqus_config;\r\nvar disqus_config = function () {\r\n    /*\r\n    All currently supported events:\r\n    onReady: fires when everything is ready,\r\n    onNewComment: fires when a new comment is posted,\r\n    onIdentify: fires when user is authenticated\r\n    */\r\n    \r\n    \r\n    this.language = \'\';\r\n    \r\n    if (disqus_config_custom) {\r\n        disqus_config_custom.call(this);\r\n    }\r\n};\r\n\r\n(function() {\r\n    var dsq = document.createElement(\'script\'); dsq.type = \'text/javascript\';\r\n    dsq.async = true;\r\n    dsq.src = \'//\' + disqus_shortname + \'.disqus.com/embed.js\';\r\n    (document.getElementsByTagName(\'head\')[0] || document.getElementsByTagName(\'body\')[0]).appendChild(dsq);\r\n})();\r\n</script>\r\n\r\n\r\n\t\t\t\r\n\t\t</div><!-- #content -->\r\n\t</div><!-- #primary -->\r\n\r\n\r\n\t\t\t<div id="secondary" class="widget-area" role="complementary">\r\n\t\t\t<aside id="text-9" class="widget widget_text">\t\t\t<div class="textwidget"><div id="fb-root"></div>\r\n<script>(function(d, s, id) {\r\n  var js, fjs = d.getElementsByTagName(s)[0];\r\n  if (d.getElementById(id)) return;\r\n  js = d.createElement(s); js.id = id;\r\n  js.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.3&appId=138031159685820";\r\n  fjs.parentNode.insertBefore(js, fjs);\r\n}(document, \'script\', \'facebook-jssdk\'));</script>\r\n\r\n<div class="fb-page" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="300" data-height="180" data-small-header="true" data-adapt-container-width="false" data-hide-cover="true" data-show-facepile="true" data-show-posts="false"><div class="fb-xfbml-parse-ignore"><blockquote cite="https://www.facebook.com/pages/GeeksforGeeks/316764689022"><a href="https://www.facebook.com/pages/GeeksforGeeks/316764689022">GeeksforGeeks</a></blockquote></div></div>\r\n</div>\n\t\t</aside><aside id="text-33" class="widget widget_text">\t\t\t<div class="textwidget"><a href="http://www.springpeople.com/gfg-landing">\r\n<img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/GfG-2.jpg" alt="SpringPeople Ad">\r\n</a>\r\n</div>\n\t\t</aside><aside id="text-14" class="widget widget_text"><p class="widget-title">Popular Posts</p>\t\t\t<div class="textwidget"><ul>\r\n<li><a href="http://www.geeksforgeeks.org/top-algorithms-and-data-structures-for-competitive-programming/">Top 10 Algorithms and Data Structures for Competitive Programming</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/top-10-algorithms-in-interview-questions/">Top 10 algorithms in Interview Questions</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/how-to-begin-with-competitive-programming/">How to begin with Competitive Programming?</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>\r\n<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>\r\n<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding \xe2\x80\x9cextern\xe2\x80\x9d keyword in C</a> </li>\r\n<li><a href="http://www.geeksforgeeks.org/heavy-light-decomposition-set-1-introduction/"> Heavy Light Decomposition</a> </li>\r\n<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>\r\n</ul></div>\n\t\t</aside><aside id="text-17" class="widget widget_text">\t\t\t<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<!-- Big 300x600 Sidebar -->\r\n<ins class="adsbygoogle"\r\n     style="display:inline-block;width:300px;height:600px"\r\n     data-ad-client="ca-pub-9465609616171866"\r\n     data-ad-slot="4402736037"></ins>\r\n<script>\r\n(adsbygoogle = window.adsbygoogle || []).push({});\r\n</script></div>\n\t\t</aside><aside id="text-32" class="widget widget_text">\t\t\t<div class="textwidget"><form style="border:1px solid #ccc;padding:3px;text-align:center;" action="https://feedburner.google.com/fb/a/mailverify" method="post" target="popupwindow" onsubmit="window.open(\'https://feedburner.google.com/fb/a/mailverify?uri=Geeksforgeeks\', \'popupwindow\', \'scrollbars=yes,width=550,height=520\');return true"><p>Subscribe and Never Miss an Article</p><input type="text" style="width:140px" placeholder="Email Address" name="email"/><input type="hidden" value="Geeksforgeeks" name="uri"/><input type="hidden" name="loc" value="en_US"/>&nbsp;&nbsp;<input type="submit" style="background-color: #4cb96b;" value="Subscribe" /></form></div>\n\t\t</aside><aside id="text-18" class="widget widget_text">\t\t\t<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<!-- LargeRectangleSide -->\r\n<ins class="adsbygoogle"\r\n     style="display:inline-block;width:336px;height:280px"\r\n     data-ad-client="ca-pub-9465609616171866"\r\n     data-ad-slot="1884636833"></ins>\r\n<script>\r\n(adsbygoogle = window.adsbygoogle || []).push({});\r\n</script></div>\n\t\t</aside><aside id="text-13" class="widget widget_text">\t\t\t<div class="textwidget"><ul><li><a href="http://geeksquiz.com/category/articles/puzzle/">Common Interview Puzzles</a></li><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/advanced-data-structure/">Advanced Data Structures</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/pattern-searching/">Pattern Searching</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li><li><a href="http://www.geeksforgeeks.org/category/searching/">Searching</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/sorting/">Sorting</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/Hash/">Hashing</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/algorithm/analysis/">Analysis of Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/algorithm/mathematical/">Mathematical Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/algorithm/randomized/">Randomized Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>\r\n</ul>\r\n\r\n\r\n\r\n\r\n</div>\n\t\t</aside><aside id="categories-384568212" class="widget widget_categories"><p class="widget-title">All Categories</p><label class="screen-reader-text" for="cat">All Categories</label><select name=\'cat\' id=\'cat\' class=\'postform\' >\n\t<option value=\'-1\'>Select Category</option>\n\t<option class="level-0" value="1762">Advanced Data Structure&nbsp;&nbsp;(69)</option>\n\t<option class="level-0" value="1744">Algorithm&nbsp;&nbsp;(401)</option>\n\t<option class="level-1" value="1745">&nbsp;&nbsp;&nbsp;Analysis&nbsp;&nbsp;(16)</option>\n\t<option class="level-1" value="1748">&nbsp;&nbsp;&nbsp;Backtracking&nbsp;&nbsp;(11)</option>\n\t<option class="level-1" value="1750">&nbsp;&nbsp;&nbsp;Divide and Conquer&nbsp;&nbsp;(29)</option>\n\t<option class="level-1" value="1746">&nbsp;&nbsp;&nbsp;Dynamic Programming&nbsp;&nbsp;(91)</option>\n\t<option class="level-1" value="1754">&nbsp;&nbsp;&nbsp;Geometric&nbsp;&nbsp;(14)</option>\n\t<option class="level-1" value="1747">&nbsp;&nbsp;&nbsp;Greedy&nbsp;&nbsp;(20)</option>\n\t<option class="level-1" value="1753">&nbsp;&nbsp;&nbsp;Mathematical&nbsp;&nbsp;(122)</option>\n\t<option class="level-1" value="1749">&nbsp;&nbsp;&nbsp;Pattern Searching&nbsp;&nbsp;(29)</option>\n\t<option class="level-1" value="1757">&nbsp;&nbsp;&nbsp;Randomized&nbsp;&nbsp;(18)</option>\n\t<option class="level-1" value="1751">&nbsp;&nbsp;&nbsp;Searching&nbsp;&nbsp;(43)</option>\n\t<option class="level-1" value="1752">&nbsp;&nbsp;&nbsp;Sorting&nbsp;&nbsp;(40)</option>\n\t<option class="level-0" value="3">Arrays&nbsp;&nbsp;(80)</option>\n\t<option class="level-0" value="18">Articles&nbsp;&nbsp;(25)</option>\n\t<option class="level-0" value="1761">Binary Search Tree&nbsp;&nbsp;(37)</option>\n\t<option class="level-0" value="17">Bit Magic&nbsp;&nbsp;(56)</option>\n\t<option class="level-0" value="14">C/C++ Puzzles&nbsp;&nbsp;(244)</option>\n\t<option class="level-0" value="1790">Competitive Programming&nbsp;&nbsp;(4)</option>\n\t<option class="level-0" value="1710">GBlog&nbsp;&nbsp;(55)</option>\n\t<option class="level-0" value="67">GFacts&nbsp;&nbsp;(43)</option>\n\t<option class="level-0" value="97">Graph&nbsp;&nbsp;(74)</option>\n\t<option class="level-0" value="1756">Hash&nbsp;&nbsp;(21)</option>\n\t<option class="level-0" value="1755">Heap&nbsp;&nbsp;(18)</option>\n\t<option class="level-0" value="1140">Interview Experiences&nbsp;&nbsp;(1,050)</option>\n\t<option class="level-0" value="87">Java&nbsp;&nbsp;(55)</option>\n\t<option class="level-0" value="8">Linked Lists&nbsp;&nbsp;(70)</option>\n\t<option class="level-0" value="1760">Matrix&nbsp;&nbsp;(39)</option>\n\t<option class="level-0" value="66">MCQ&nbsp;&nbsp;(95)</option>\n\t<option class="level-0" value="4">Misc&nbsp;&nbsp;(40)</option>\n\t<option class="level-0" value="5">Output&nbsp;&nbsp;(55)</option>\n\t<option class="level-0" value="1767">Project&nbsp;&nbsp;(21)</option>\n\t<option class="level-0" value="1789">Python&nbsp;&nbsp;(5)</option>\n\t<option class="level-0" value="1743">Queue&nbsp;&nbsp;(16)</option>\n\t<option class="level-0" value="1742">Stack&nbsp;&nbsp;(25)</option>\n\t<option class="level-0" value="7">Strings&nbsp;&nbsp;(61)</option>\n\t<option class="level-0" value="1788">Technical Scripter&nbsp;&nbsp;(13)</option>\n\t<option class="level-0" value="19">Trees&nbsp;&nbsp;(114)</option>\n</select>\n\n<script type=\'text/javascript\'>\n/* <![CDATA[ */\n(function() {\n\tvar dropdown = document.getElementById( "cat" );\n\tfunction onCatChange() {\n\t\tif ( dropdown.options[ dropdown.selectedIndex ].value > 0 ) {\n\t\t\tlocation.href = "http://www.geeksforgeeks.org/?cat=" + dropdown.options[ dropdown.selectedIndex ].value;\n\t\t}\n\t}\n\tdropdown.onchange = onCatChange;\n})();\n/* ]]> */\n</script>\n\n</aside><aside id="text-21" class="widget widget_text"><p class="widget-title">Recent Comments</p>\t\t\t<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>\n\t\t</aside><aside id="tag_cloud-3" class="widget widget_tag_cloud"><p class="widget-title">Tags</p><div class="tagcloud"><a href=\'http://www.geeksforgeeks.org/tag/adobe/\' class=\'tag-link-148\' title=\'32 topics\' style=\'font-size: 12.941176470588pt;\'>Adobe</a>\n<a href=\'http://www.geeksforgeeks.org/tag/advance-data-structures/\' class=\'tag-link-152\' title=\'31 topics\' style=\'font-size: 12.838235294118pt;\'>Advance Data Structures</a>\n<a href=\'http://www.geeksforgeeks.org/tag/advanced-data-structures/\' class=\'tag-link-150\' title=\'38 topics\' style=\'font-size: 13.661764705882pt;\'>Advanced Data Structures</a>\n<a href=\'http://www.geeksforgeeks.org/tag/amazon/\' class=\'tag-link-141\' title=\'253 topics\' style=\'font-size: 22pt;\'>Amazon</a>\n<a href=\'http://www.geeksforgeeks.org/tag/array/\' class=\'tag-link-68\' title=\'12 topics\' style=\'font-size: 8.7205882352941pt;\'>array</a>\n<a href=\'http://www.geeksforgeeks.org/tag/backtracking/\' class=\'tag-link-112\' title=\'11 topics\' style=\'font-size: 8.4117647058824pt;\'>Backtracking</a>\n<a href=\'http://www.geeksforgeeks.org/tag/bharti-softbank-hike/\' class=\'tag-link-1214\' title=\'10 topics\' style=\'font-size: 8pt;\'>Bharti SoftBank (HIKE)</a>\n<a href=\'http://www.geeksforgeeks.org/tag/bit-magic/\' class=\'tag-link-17\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>Bit Magic</a>\n<a href=\'http://www.geeksforgeeks.org/tag/c/\' class=\'tag-link-86\' title=\'18 topics\' style=\'font-size: 10.470588235294pt;\'>C++</a>\n<a href=\'http://www.geeksforgeeks.org/tag/cn/\' class=\'tag-link-142\' title=\'12 topics\' style=\'font-size: 8.7205882352941pt;\'>CN</a>\n<a href=\'http://www.geeksforgeeks.org/tag/c-puzzle/\' class=\'tag-link-69\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>c puzzle</a>\n<a href=\'http://www.geeksforgeeks.org/tag/d-e-shaw/\' class=\'tag-link-823\' title=\'17 topics\' style=\'font-size: 10.264705882353pt;\'>D-E-Shaw</a>\n<a href=\'http://www.geeksforgeeks.org/tag/dbms/\' class=\'tag-link-139\' title=\'11 topics\' style=\'font-size: 8.4117647058824pt;\'>DBMS</a>\n<a href=\'http://www.geeksforgeeks.org/tag/divide-and-conquer/\' class=\'tag-link-113\' title=\'27 topics\' style=\'font-size: 12.220588235294pt;\'>Divide and Conquer</a>\n<a href=\'http://www.geeksforgeeks.org/tag/dynamic-programming/\' class=\'tag-link-111\' title=\'83 topics\' style=\'font-size: 17.058823529412pt;\'>Dynamic Programming</a>\n<a href=\'http://www.geeksforgeeks.org/tag/flipkart/\' class=\'tag-link-173\' title=\'46 topics\' style=\'font-size: 14.485294117647pt;\'>Flipkart</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate/\' class=\'tag-link-114\' title=\'88 topics\' style=\'font-size: 17.367647058824pt;\'>GATE</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-2012/\' class=\'tag-link-133\' title=\'10 topics\' style=\'font-size: 8pt;\'>GATE-CS-2012</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-c-language/\' class=\'tag-link-72\' title=\'10 topics\' style=\'font-size: 8pt;\'>GATE-CS-C-Language</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-ds-algo/\' class=\'tag-link-79\' title=\'35 topics\' style=\'font-size: 13.352941176471pt;\'>GATE-CS-DS-&amp;-Algo</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-older/\' class=\'tag-link-145\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>GATE-CS-Older</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gfact/\' class=\'tag-link-67\' title=\'20 topics\' style=\'font-size: 10.882352941176pt;\'>GFacts</a>\n<a href=\'http://www.geeksforgeeks.org/tag/goldman-sachs/\' class=\'tag-link-590\' title=\'20 topics\' style=\'font-size: 10.882352941176pt;\'>Goldman Sachs</a>\n<a href=\'http://www.geeksforgeeks.org/tag/google/\' class=\'tag-link-155\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>Google</a>\n<a href=\'http://www.geeksforgeeks.org/tag/graph/\' class=\'tag-link-97\' title=\'45 topics\' style=\'font-size: 14.382352941176pt;\'>Graph</a>\n<a href=\'http://www.geeksforgeeks.org/tag/greedy-algorithm/\' class=\'tag-link-159\' title=\'20 topics\' style=\'font-size: 10.882352941176pt;\'>Greedy Algorithm</a>\n<a href=\'http://www.geeksforgeeks.org/tag/hashing/\' class=\'tag-link-250\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>Hashing</a>\n<a href=\'http://www.geeksforgeeks.org/tag/interview-experience/\' class=\'tag-link-126\' title=\'216 topics\' style=\'font-size: 21.382352941176pt;\'>Interview Experience</a>\n<a href=\'http://www.geeksforgeeks.org/tag/java/\' class=\'tag-link-87\' title=\'61 topics\' style=\'font-size: 15.720588235294pt;\'>Java</a>\n<a href=\'http://www.geeksforgeeks.org/tag/maq-software/\' class=\'tag-link-1392\' title=\'11 topics\' style=\'font-size: 8.4117647058824pt;\'>MAQ Software</a>\n<a href=\'http://www.geeksforgeeks.org/tag/mathematicalalgo/\' class=\'tag-link-154\' title=\'73 topics\' style=\'font-size: 16.544117647059pt;\'>MathematicalAlgo</a>\n<a href=\'http://www.geeksforgeeks.org/tag/matrix/\' class=\'tag-link-211\' title=\'21 topics\' style=\'font-size: 11.088235294118pt;\'>Matrix</a>\n<a href=\'http://www.geeksforgeeks.org/tag/microsoft/\' class=\'tag-link-104\' title=\'95 topics\' style=\'font-size: 17.676470588235pt;\'>Microsoft</a>\n<a href=\'http://www.geeksforgeeks.org/tag/morgan-stanley/\' class=\'tag-link-167\' title=\'17 topics\' style=\'font-size: 10.264705882353pt;\'>Morgan Stanley</a>\n<a href=\'http://www.geeksforgeeks.org/tag/operating-systems/\' class=\'tag-link-110\' title=\'19 topics\' style=\'font-size: 10.676470588235pt;\'>Operating systems</a>\n<a href=\'http://www.geeksforgeeks.org/tag/oracle/\' class=\'tag-link-171\' title=\'24 topics\' style=\'font-size: 11.705882352941pt;\'>Oracle</a>\n<a href=\'http://www.geeksforgeeks.org/tag/pattern-searching/\' class=\'tag-link-107\' title=\'26 topics\' style=\'font-size: 12.014705882353pt;\'>Pattern Searching</a>\n<a href=\'http://www.geeksforgeeks.org/tag/puzzle/\' class=\'tag-link-70\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>puzzle</a>\n<a href=\'http://www.geeksforgeeks.org/tag/python/\' class=\'tag-link-1770\' title=\'21 topics\' style=\'font-size: 11.088235294118pt;\'>Python</a>\n<a href=\'http://www.geeksforgeeks.org/tag/recursion/\' class=\'tag-link-85\' title=\'21 topics\' style=\'font-size: 11.088235294118pt;\'>Recursion</a>\n<a href=\'http://www.geeksforgeeks.org/tag/samsung/\' class=\'tag-link-180\' title=\'12 topics\' style=\'font-size: 8.7205882352941pt;\'>Samsung</a>\n<a href=\'http://www.geeksforgeeks.org/tag/sap-labs/\' class=\'tag-link-1414\' title=\'23 topics\' style=\'font-size: 11.5pt;\'>SAP Labs</a>\n<a href=\'http://www.geeksforgeeks.org/tag/snapdeal/\' class=\'tag-link-1246\' title=\'16 topics\' style=\'font-size: 9.9558823529412pt;\'>SnapDeal</a>\n<a href=\'http://www.geeksforgeeks.org/tag/stack/\' class=\'tag-link-94\' title=\'17 topics\' style=\'font-size: 10.264705882353pt;\'>stack</a>\n<a href=\'http://www.geeksforgeeks.org/tag/stack-queue/\' class=\'tag-link-899\' title=\'12 topics\' style=\'font-size: 8.7205882352941pt;\'>Stack-Queue</a></div>\n</aside><aside id="text-25" class="widget widget_text">\t\t\t<div class="textwidget"><ul>\r\n<li><h2><a href="http://geeksquiz.com/">GeeksQuiz</a></h2></li>\r\n\r\n<li><h2><a href="http://code.geeksforgeeks.org/">GeeksforGeeksIDE</a></h2></li>\r\n\r\n<li><h2><a href="http://www.practice.geeksforgeeks.org/">GeeksforGeeks Practice</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/data-structures/">Data Structures</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/c/">C Programming</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++ Programming</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/java/">Java Programming</a></h2></li>\r\n\r\n<li><h2><a href="http://geeksquiz.com/books/">Books</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Experiences</a></h2></li>\r\n\r\n<li><h2><a href="http://geeksquiz.com/gate-corner-2/">GATE CS</a></h2></li>\r\n\r\n<li><h2><a href="http://www.gatecs.geeksquiz.com">GATE CS Forum</a></h2></li>\r\n\r\n<li><h2><a href="https://play.google.com/store/apps/details?id=free.programming.programming">Android App</a></h2></li>\r\n</ul>\r\n\r\n</div>\n\t\t</aside>\t\t</div><!-- #secondary -->\r\n\t\t</div><!-- #main .wrapper -->\r\n\t<footer id="colophon" role="contentinfo">\r\n\t\t<div class="site-info">\r\n\t\t<div class="clear"></div>\r\n\t\t</div><!-- .site-info -->\r\n\t\t</footer><!-- #colophon -->\r\n<center>\r\n<div class="iconic-footer">\r\n\r\n@geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>  <a href="http://www.geeksforgeeks.org/about/"> &nbsp; &nbsp; &nbsp; &nbsp;About Us!&nbsp; &nbsp; &nbsp; &nbsp;</a><a href="http://www.geeksforgeeks.org/new/ad.htm"> &nbsp; &nbsp; &nbsp; &nbsp;Advertise with us!&nbsp; &nbsp; &nbsp; &nbsp;</a>\r\n\r\n      \t\t\t</div></center><!-- .site-info -->\r\n\r\n\t\t\t\t<div class="clear"></div>\r\n</div><!-- #page -->\r\n\r\n        <script type="text/javascript">\r\n        // <![CDATA[\r\n        var disqus_shortname = \'geeksforgeeks\';\r\n        (function () {\r\n            var nodes = document.getElementsByTagName(\'span\');\r\n            for (var i = 0, url; i < nodes.length; i++) {\r\n                if (nodes[i].className.indexOf(\'dsq-postid\') != -1) {\r\n                    nodes[i].parentNode.setAttribute(\'data-disqus-identifier\', nodes[i].getAttribute(\'data-dsqidentifier\'));\r\n                    url = nodes[i].parentNode.href.split(\'#\', 1);\r\n                    if (url.length == 1) { url = url[0]; }\r\n                    else { url = url[1]; }\r\n                    nodes[i].parentNode.href = url + \'#disqus_thread\';\r\n                }\r\n            }\r\n            var s = document.createElement(\'script\'); \r\n            s.async = true;\r\n            s.type = \'text/javascript\';\r\n            s.src = \'//\' + disqus_shortname + \'.disqus.com/count.js\';\r\n            (document.getElementsByTagName(\'HEAD\')[0] || document.getElementsByTagName(\'BODY\')[0]).appendChild(s);\r\n        }());\r\n        // ]]>\r\n        </script>\r\n        <script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushJava.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushPython.js\'></script>\n<script type=\'text/javascript\'>\n\t(function(){\n\t\tvar corecss = document.createElement(\'link\');\n\t\tvar themecss = document.createElement(\'link\');\n\t\tvar corecssurl = "http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9b";\r\n\t\tif ( corecss.setAttribute ) {\r\n\t\t\t\tcorecss.setAttribute( "rel", "stylesheet" );\r\n\t\t\t\tcorecss.setAttribute( "type", "text/css" );\r\n\t\t\t\tcorecss.setAttribute( "href", corecssurl );\r\n\t\t} else {\r\n\t\t\t\tcorecss.rel = "stylesheet";\r\n\t\t\t\tcorecss.href = corecssurl;\r\n\t\t}\r\n\t\tdocument.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );\r\n\t\tvar themecssurl = "http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9b";\r\n\t\tif ( themecss.setAttribute ) {\r\n\t\t\t\tthemecss.setAttribute( "rel", "stylesheet" );\r\n\t\t\t\tthemecss.setAttribute( "type", "text/css" );\r\n\t\t\t\tthemecss.setAttribute( "href", themecssurl );\r\n\t\t} else {\r\n\t\t\t\tthemecss.rel = "stylesheet";\r\n\t\t\t\tthemecss.href = themecssurl;\r\n\t\t}\r\n\t\t//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);\r\n\t\tdocument.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );\r\n\t})();\n\tSyntaxHighlighter.config.strings.expandSource = \'+ expand source\';\n\tSyntaxHighlighter.config.strings.help = \'?\';\n\tSyntaxHighlighter.config.strings.alert = \'SyntaxHighlighter\\n\\n\';\n\tSyntaxHighlighter.config.strings.noBrush = \'Can\\\'t find brush for: \';\n\tSyntaxHighlighter.config.strings.brushNotHtmlScript = \'Brush wasn\\\'t configured for html-script option: \';\n\tSyntaxHighlighter.defaults[\'gutter\'] = false;\n\tSyntaxHighlighter.defaults[\'pad-line-numbers\'] = true;\n\tSyntaxHighlighter.defaults[\'toolbar\'] = false;\n\tSyntaxHighlighter.all();\r\n</script>\r\n<link rel=\'stylesheet\' id=\'tabby-print-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/tabby-responsive-tabs/css/tabby-print.css\' type=\'text/css\' media=\'all\' />\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/js/comment-reply.min.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/js/selectnav.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/js/jquery/jquery.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/js/jquery/jquery-migrate.min.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/tabby-responsive-tabs/js/tabby.js\'></script>\n\n<script>jQuery(document).ready(function($) { RESPONSIVEUI.responsiveTabs(); })</script>\n\r\n\r\n<script type="text/javascript">\r\n\r\n  var _gaq = _gaq || [];\r\n  _gaq.push([\'_setAccount\', \'UA-12148232-1\']);\r\n  _gaq.push([\'_trackPageview\']);\r\n\r\n  (function() {\r\n    var ga = document.createElement(\'script\'); ga.type = \'text/javascript\'; ga.async = true;\r\n    ga.src = (\'https:\' == document.location.protocol ? \'https://ssl\' : \'http://www\') + \'.google-analytics.com/ga.js\';\r\n    var s = document.getElementsByTagName(\'script\')[0]; s.parentNode.insertBefore(ga, s);\r\n  })();\r\n\r\n</script>  \r\n<script async type="text/javascript" src="//cdn.fancybar.net/ac/fancybar.js?zoneid=1502&serve=C6ADVKE&placement=geeksforgeeks" id="_fancybar_js"></script>\r\n</body>\r\n</html>\n<!-- Dynamic page generated in 0.358 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2016-02-28 07:48:34 -->\n\n<!-- Compression = gzip -->\n<!-- super cache -->'
p489
sb.