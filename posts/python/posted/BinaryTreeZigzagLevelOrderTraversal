<b>Title: </b>Binary Tree Zigzag Level Order Traversal  <b>Source: </b><a target='_blank' href='https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/'>leetcode.com</a><p><p>Given a binary tree, return the <i>zigzag level order</i> traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).</p><p>
For example:<br/>
Given binary tree <code>{3,9,20,#,#,15,7}</code>,<br/>
<pre>
    3
   / \
  9  20
    /  \
   15   7
</pre>
</p><p>
return its zigzag level order traversal as:<br/>
<pre>
[
  [3],
  [20,9],
  [15,7]
]
</pre>
</p><p class="showspoilers">confused what <code>"{1,#,2,3}"</code> means? <a href="#" onclick="showSpoilers(this); return false;">&gt; read more on how binary tree is serialized on OJ.</a></p><div class="spoilers"><br/><b>OJ's Binary Tree Serialization:</b>
<p>
The serialization of a binary tree follows a level order traversal, where '#' signifies a path terminator where no node exists below.
</p>
<p>
Here's an example:<br/>
<pre>
   1
  / \
 2   3
    /
   4
    \
     5
</pre>
The above binary tree is serialized as <code>"{1,2,3,#,#,4,#,#,5}"</code>. 
</p>
</div></p>

<h3>Python solution</h3><pre class="lang:python decode:true ">''' https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/ '''

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def __init__(self):
        self.res = []
        self.length = 0
        
    def helper(self, root, lvl):
        if self.length == lvl:
            self.res.append([root.val])
            self.length += 1
        else:
            if (lvl & 1) == 1: 
                self.res[lvl].insert(0,root.val)
            else:
                self.res[lvl].append(root.val)
        
        if root.left:
            self.helper(root.left, lvl + 1)
        if root.right:
            self.helper(root.right, lvl + 1)
            
    def zigzagLevelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        if not root:
            return self.res
            
        self.helper(root, 0)
        return self.res
</pre><br><br><h3>Java solution</h3><pre class="lang:java decode:true ">/* https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/ */
import java.util.*;
public class ZigZagLevelTraversalOrder
{
	public static void main(String args[])
	{
		ZigZagLevelTraversalOrder z= new ZigZagLevelTraversalOrder();
		TreeNode root = new TreeNode(3);
		root.left = new TreeNode(9);
		root.right = new TreeNode(20);
		root.left.left = new TreeNode(1);
		root.left.right = new TreeNode(2);
		root.right.left = new TreeNode(15);
		root.right.right = new TreeNode(7);
		System.out.println(z.zigzagLevelOrder(root));
	}

	public List<List<Integer>> zigzagLevelOrder(TreeNode root) 
	{
		List<List<Integer>> result = new ArrayList<>();
		if(root==null)
		{
			return null;
		}
		if(root.left == null && root.right == null)
		{
			List<Integer> list = new ArrayList<>();
			list.add(root.data);
			result.add(list);
			return result;
		}
    	Stack<TreeNode> curr;
    	Stack<TreeNode> next = new Stack<>();
    	next.push(root);
    	boolean leftToRight = true;
    	while(!next.isEmpty())
    	{
    		List<Integer> temp = new ArrayList<>(); 
    		curr = next;
    		next = new Stack<>();
    		while(!curr.isEmpty())
    		{
    			TreeNode node = curr.pop();
    			if(node != null)
    			{
    				temp.add(node.data);
    				if(!leftToRight)
    				{	
    					next.push(node.right);
    					next.push(node.left);
    				}
    				else
    				{
    					next.push(node.left);
    					next.push(node.right);
    				}
    			}
    		}
    		leftToRight = !leftToRight;
    		if(temp!=null && !temp.isEmpty())
    			result.add(temp);
    	}  
    	return result; 
    }
}

class TreeNode
{
	int data;
	TreeNode left;
	TreeNode right;

	TreeNode(int data)
	{
		this.data = data;
	}
}</pre>