<b>Title: </b>Linked List Cycle II  <b>Source: </b><a target='_blank' href='https://leetcode.com/problems/linked-list-cycle-ii/'>leetcode.com</a><p><p>
Given a linked list, return the node where the cycle begins. If there is no cycle, return <code>null</code>.
</p><p>
<b>Note:</b> Do not modify the linked list.</p><p>
<b>Follow up</b>:<br>
Can you solve it without using extra space?
</br></p></p>

<h3>Python solution</h3><pre class="lang:python decode:true ">''' https://leetcode.com/problems/linked-list-cycle-ii/ '''

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def detectCycle(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if not head:
            return None
        
        temp = head
        temp2 = head
        hasCycle = False
        while temp and temp2 and temp2.next:
            temp = temp.next
            temp2 = temp2.next.next
            if temp == temp2:
                hasCycle = True
                break
        if hasCycle:
            temp = head
            while temp != temp2:
                temp = temp.next
                temp2 = temp2.next
        else:
            return None
        return temp
</pre><br><br><h3>Java solution</h3><pre class="lang:java decode:true ">/* https://leetcode.com/problems/linked-list-cycle-ii/ */
public class LinkedListCycleII
{
	public static void main(String args[])
	{
		ListNode head = new ListNode(1);
		head.next = new ListNode(2);
		head.next.next = new ListNode(3);
		head.next.next.next = new ListNode(4);
		head.next.next.next.next = head.next.next;
		LinkedListCycleII l = new LinkedListCycleII();
		System.out.println(l.detectCycle(head).val);
	}

	public ListNode detectCycle(ListNode head) 
	{
		if(head==null || head.next ==null)
            return null;
        ListNode slow = head;
        ListNode fast = head;

        while(fast.next!=null)
        {
        	System.out.println(fast.val+" ");
        	fast = fast.next;
        	if(fast.next!=null)
        	{
        		slow = slow.next;
        		fast = fast.next;
        	}
        	if(slow == fast)
        		break;
        }
        if(fast.next==null)
        	return null;
        slow = head;
        while(slow!=fast)
        {
        	slow = slow.next;
        	fast = fast.next;
        }
        return fast;
    }

    public void print(ListNode head)
    {
    	while(head!=null)
    	{
    		System.out.print(head.val+" ");
    		head = head.next;
    	}
    	System.out.println();
    }	
}

class ListNode
{
	int val;
	ListNode next;
	ListNode(int x)
	{
		val = x;
	}
}</pre>