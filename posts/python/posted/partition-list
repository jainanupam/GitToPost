<b>Title: </b>Partition List  <b>Source: </b><a target='_blank' href='https://leetcode.com/problems/partition-list/'>leetcode.com</a><p><p>Given a linked list and a value <i>x</i>, partition it such that all nodes less than <i>x</i> come before nodes greater than or equal to <i>x</i>.
</p><p>
You should preserve the original relative order of the nodes in each of the two partitions.
</p><p>
For example,<br/>
Given <code>1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2</code> and <i>x</i> = 3,<br/>
return <code>1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5</code>.
</p></p>

<h3>Python solution</h3><pre class="lang:python decode:true ">''' https://leetcode.com/problems/partition-list/ '''

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def partition(self, head, x):
        """
        :type head: ListNode
        :type x: int
        :rtype: ListNode
        """
        if not (head and head.next):
            return head
        low = None
        high = None
        temp = head
        if head.val < x:
            low = head
            while temp.next and temp.next.val < x:
                temp = temp.next
        else:
            high = head
            while temp.next and temp.next.val >= x:
                temp = temp.next
        
        if not temp.next:
            return head
        temp_low = None
        temp_high = None
        if low:
            high = temp.next
            temp_high = high
            temp_low = temp
        else:
            low = temp.next
            temp_low = low
            temp_high = temp
        
        temp = temp.next.next
        while temp:
            #print temp.val
            if temp.val < x:
                temp_low.next = temp
                temp_low = temp
            else:
                temp_high.next = temp
                temp_high = temp
            temp = temp.next
        
        head = low
        temp_low.next = high
        temp_high.next = None
        #print head.val
        return head
</pre><br><br><h3>Java solution</h3><pre class="lang:java decode:true ">/* https://leetcode.com/problems/partition-list/ */

public class PartitionList
{
	//collect all the numbers greater than x and append them at the end of the list
	public ListNode partition(ListNode head, int x)
    {
    	if(head==null || head.next == null)
    		return head;

    	ListNode l1 = new ListNode(0);
    	l1.next = head;
    	ListNode p1 = l1;
    	//contains all the number greater than or equal to x
    	ListNode l2 = new ListNode(0);
    	ListNode p2 = l2;

    	while(p1.next!=null)
    	{
    		System.out.println("val: " + p1.next.val);
    		if(p1.next.val >= x)
    		{
    			p2.next = p1.next;
    			p1.next = p1.next.next;
    			p2 = p2.next;
    		}
    		else
    		{
    			p1 = p1.next;
    		}
    	}
    	p2.next = null;
    	p1.next = l2.next;
    	return l1.next;
    }

    public void printList(ListNode head)
    {
    	ListNode p = head;
    	while(p!=null)
    	{
    		System.out.print(p.val+" ");
    		p = p.next;
    	}
    	System.out.println();
    }

	public static void main(String args[])
	{
		PartitionList p = new PartitionList();
		ListNode head = new ListNode(1);
		head.next = new ListNode(4);
		head.next.next = new ListNode(3);
		head.next.next.next = new ListNode(2);
		head.next.next.next.next = new ListNode(5);
		head.next.next.next.next.next = new ListNode(2);
		System.out.println("before: "); 
		p.printList(head);
		head = p.partition(head, 3);
		System.out.println("after: ");
		p.printList(head);
	}
}

class ListNode 
{
    int val;
    ListNode next;
    ListNode(int x) 
    { 
    	val = x; 
    }
}</pre>