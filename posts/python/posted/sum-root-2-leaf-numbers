<b>Title: </b>Sum Root to Leaf Numbers  <b>Source: </b><a target='_blank' href='https://leetcode.com/problems/sum-root-to-leaf-numbers/'>leetcode.com</a><p><p>Given a binary tree containing digits from <code>0-9</code> only, each root-to-leaf path could represent a number.</p><p>An example is the root-to-leaf path <code>1-&gt;2-&gt;3</code> which represents the number <code>123</code>.</p><p>Find the total sum of all root-to-leaf numbers.</p><p>For example,
<pre>
    1
   / \
  2   3
</pre>
</p><p>
The root-to-leaf path <code>1-&gt;2</code> represents the number <code>12</code>.<br/>
The root-to-leaf path <code>1-&gt;3</code> represents the number <code>13</code>.
</p><p>
Return the sum = 12 + 13 = <code>25</code>.
</p></p>

<h3>Python solution</h3><pre class="lang:python decode:true ">''' https://leetcode.com/problems/sum-root-to-leaf-numbers/ '''

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def __init__(self):
        self.total = 0
        
    def helper(self, root, num):
        num = num * 10 + root.val
        
        if not (root.left or root.right):
            self.total += num
            return
        
        if root.left:
            self.helper(root.left, num)
        if root.right:
            self.helper(root.right, num)
            
    def sumNumbers(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if not root:
            return 0
        
        self.helper(root, 0)
        return self.total
</pre>