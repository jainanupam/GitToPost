<b>Title: </b>Combination Sum  <b>Source: </b><a target='_blank' href='https://leetcode.com/problems/combination-sum/'>leetcode.com</a><p><p>
Given a set of candidate numbers (<b><i>C</i></b>) and a target number (<b><i>T</i></b>), find all unique combinations in <b><i>C</i></b> where the candidate numbers sums to <b><i>T</i></b>. 
</p><p>The <b>same</b> repeated number may be chosen from <b><i>C</i></b> unlimited number of times.
</p><p><b>Note:</b><br/>
<ul>
<li>All numbers (including target) will be positive integers.</li>
<li>Elements in a combination (<i>a</i><sub>1</sub>, <i>a</i><sub>2</sub>, … , <i>a</i><sub>k</sub>) must be in non-descending order. (ie, <i>a</i><sub>1</sub> ≤ <i>a</i><sub>2</sub> ≤ … ≤ <i>a</i><sub>k</sub>).</li>
<li>The solution set must not contain duplicate combinations.</li>
</ul>
</p><p>
For example, given candidate set <code>2,3,6,7</code> and target <code>7</code>, <br/>
A solution set is: <br/>
<code>[7]</code> <br/>
<code>[2, 2, 3]</code> <br/>
</p></p>

<h3>Python solution</h3><pre class="lang:python decode:true ">''' https://leetcode.com/problems/combination-sum/ '''

class Solution(object):
    def __init__(self):
        self.res = []
        self.target = 0
        
    def helper(self, cur, rem, sm):
        if not rem:
            return
        
        if sm == self.target:
            self.res.append(sorted(cur))
        elif sm < self.target:
            self.helper(cur + [rem[0]], rem, sm + rem[0])
            self.helper(cur, rem[1:], sm)
        
    def combinationSum(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        self.target = target
        if not candidates:
            return self.res
        
        self.helper([], candidates, 0)
        return self.res
</pre>