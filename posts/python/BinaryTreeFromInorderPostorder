<b>Title: </b>
            106. Construct Binary Tree from Inorder and Postorder Traversal
            <b>Source: </b><a target='_blank' href='https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/'>leetcode.com</a><p><section class="action action-btn-set">
<a class="icon-btn btn" href="https://discuss.leetcode.com/category/114" onclick="ga('send', 'event', 'discuss', 'click', 'construct-binary-tree-from-inorder-and-postorder-traversal');" target="_blank">
<i aria-hidden="true" class="fa fa-commenting-o"></i>Discuss
          </a>
<button class="icon-btn disabled" data-placement="top" data-toggle="tooltip" title="Not available yet, please check back later." type="button">
<i aria-hidden="true" class="fa fa-book">
</i><span class="hidden-xs">Editorial </span>Solution
          </button>
<a class="icon-btn pull-right-sm btn" href="/problems/random-one-question/" onclick="ga('send', 'event', 'pick-one-detail', 'click');">
<i aria-hidden="true" class="fa fa-random"></i>Pick One
          </a>
</section><hr class="line dotted">
</hr></p>

<h3>Python solution</h3><pre class="lang:python decode:true ">''' https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/ '''

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def __init__(self):
        self.postorder = None
        self.inorder = None
        self.postIndex = 0
        
    def helper(self, in1, in2):
        if in1 >= in2:
            return None
        root = TreeNode(self.postorder[self.postIndex])
        self.postIndex -= 1
        
        if in2 - in1 == 1:
            return root
        
        i = in1
        while i < in2 and self.inorder[i] != root.val:
            i += 1
        
        root.right = self.helper(i+1, in2)
        root.left = self.helper(in1, i)
        return root
        
    def buildTree(self, inorder, postorder):
        """
        :type postorder: List[int]
        :type inorder: List[int]
        :rtype: TreeNode
        """
        self.postorder = postorder
        self.inorder = inorder
        lni = len(inorder)
        self.postIndex = lni-1
        return self.helper(0, lni)
        
</pre>