<b>Title: </b>Evaluate Reverse Polish Notation  <b>Source: </b><a target='_blank' href='https://leetcode.com/problems/evaluate-reverse-polish-notation/'>leetcode.com</a><p><p>
Evaluate the value of an arithmetic expression in <a href="http://en.wikipedia.org/wiki/Reverse_Polish_notation">Reverse Polish Notation</a>.
</p><p>
Valid operators are <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>. Each operand may be an integer or another expression.
</p><p>
Some examples:<br>
<pre>
  ["2", "1", "+", "3", "*"] -&gt; ((2 + 1) * 3) -&gt; 9
  ["4", "13", "5", "/", "+"] -&gt; (4 + (13 / 5)) -&gt; 6
</pre>
</br></p></p>

<h3>Python solution</h3><pre class="lang:python decode:true ">''' https://leetcode.com/problems/evaluate-reverse-polish-notation/ '''

class Solution(object):
    def evalRPN(self, tokens):
        """
        :type tokens: List[str]
        :rtype: int
        """
        num_stack = []
        for token in tokens:
            if token == '+':
                num2 = num_stack.pop()
                num1 = num_stack.pop()
                num_stack.append(num1 + num2)
            elif token == '-':
                num2 = num_stack.pop()
                num1 = num_stack.pop()
                num_stack.append(num1 - num2)
            elif token == '*':
                num2 = num_stack.pop()
                num1 = num_stack.pop()
                num_stack.append(num1 * num2)
            elif token == '/':
                num2 = num_stack.pop()
                num1 = num_stack.pop()
                num_stack.append(int(float(num1) / num2))
            else:
                num_stack.append(int(token))
            #print num_stack
        return int(num_stack[0])
</pre>