<b>Title: </b>Game of Life  <b>Source: </b><a target='_blank' href='https://leetcode.com/problems/game-of-life/'>leetcode.com</a><p><p>
According to the <a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life" target="_blank">Wikipedia's article</a>: "The <b>Game of Life</b>, also known simply as <b>Life</b>, is a cellular automaton devised by the British mathematician John Horton Conway in 1970."
</p><p>
Given a <i>board</i> with <i>m</i> by <i>n</i> cells, each cell has an initial state <i>live</i> (1) or <i>dead</i> (0). Each cell interacts with its <a href="https://en.wikipedia.org/wiki/Moore_neighborhood" target="_blank">eight neighbors</a> (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):
</p><p>
<ol>
<li>Any live cell with fewer than two live neighbors dies, as if caused by under-population.</li>
<li>Any live cell with two or three live neighbors lives on to the next generation.</li>
<li>Any live cell with more than three live neighbors dies, as if by over-population..</li>
<li>Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.</li>
</ol>
</p><p>
Write a function to compute the next state (after one update) of the board given its current state.</p><p>
<b>Follow up</b>: <br>
<ol>
<li>Could you solve it in-place? Remember that the board needs to be updated at the same time: You cannot update some cells first and then use their updated values to update other cells.</li>
<li>In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches the border of the array. How would you address these problems?</li>
</ol>
</br></p></p>

<h3>Python solution</h3><pre class="lang:python decode:true ">''' https://leetcode.com/problems/game-of-life/ '''
class Solution(object):
    def __init__(self):
        self.m = 0
        self.n = 0
    def getNextState(self, board, i, j):
        if i == self.m:
            return
        live_n = 0
        if (i-1) >= 0:
            if (j-1) >= 0:
                live_n += board[i-1][j-1]
            live_n += board[i-1][j]
            if (j+1) < self.n:
                live_n += board[i-1][j+1]
        if (i+1) < self.m:
            if (j-1) >= 0:
                live_n += board[i+1][j-1]
            live_n += board[i+1][j]
            if (j+1) < self.n:
                live_n += board[i+1][j+1]
        if (j-1) >= 0:
            live_n += board[i][j-1]
            
        if (j+1) < self.n:
            live_n += board[i][j+1]
            
        res = board[i][j]
        if res == 0 and live_n == 3:
            res = 1
        elif res == 1:
            if (live_n < 2) or (live_n > 3):
                res = 0
        #print board[i][j], i, j, res, live_n
        if (j+1) < self.n:
            self.getNextState(board, i, j + 1)
        else:
            self.getNextState(board, i + 1, 0)
        board[i][j] = res
        
    def gameOfLife(self, board):
        """
        :type board: List[List[int]]
        :rtype: void Do not return anything, modify board in-place instead.
        """
        self.m = len(board)
        self.n = len(board[0])
        if self.m == 0 or self.n==0:
            return
        self.getNextState(board, 0, 0)
        
</pre><br><br><h3>Python solution</h3><pre class="lang:python decode:true ">''' https://leetcode.com/problems/game-of-life/ '''

class Solution(object):
    def getNextState(self, board, i, j, m, n):
        live_n = 0
        if (i-1) >= 0:
            if (j-1) >= 0:
                live_n += board[i-1][j-1]
            live_n += board[i-1][j]
            if (j+1) < n:
                live_n += board[i-1][j+1]
        if (i+1) < m:
            if (j-1) >= 0:
                live_n += board[i+1][j-1]
            live_n += board[i+1][j]
            if (j+1) < n:
                live_n += board[i+1][j+1]
        if (j-1) >= 0:
            live_n += board[i][j-1]
            
        if (j+1) < n:
            live_n += board[i][j+1]
            
        res = board[i][j]
        if res == 0 and live_n == 3:
            res = 1
        elif res == 1:
            if (live_n < 2) or (live_n > 3):
                res = 0
        #print board[i][j], i, j, res, live_n
        return res
        
    def gameOfLife(self, board):
        """
        :type board: List[List[int]]
        :rtype: void Do not return anything, modify board in-place instead.
        """
        m = len(board)
        n = len(board[0])
        board2=[]
        for i in range(m):
            board2.append([])
            for j in range(n):
                board2[i].append(board[i][j])
        
        for i in range(m):
            for j in range(n):
                board[i][j] = self.getNextState(board2, i, j, m, n)
        
</pre><br><br><h3>Java solution</h3><pre class="lang:java decode:true ">/* https://leetcode.com/problems/game-of-life/ */

class GameOfLife
{
	public static void main(String args[])
	{
		int[][] board = {
							{1, 1, 1},
							{1, 0, 0},
							{0, 0, 0}
						};
		GameOfLife g = new GameOfLife();
		g.gameOfLife(board);
		for(int[] row: board)
		{
			for(int col: row)
				System.out.print(col);
			System.out.println();
		}

	}

	public void gameOfLife(int[][] board) 
	{
		 if(board.length!=0 && board[board.length-1].length!=0)
        	getNextState(board, 0, 0);
    }

    public void getNextState(int [][] board, int i, int j)
    {
    	int row = board.length;
    	int col = board[board.length-1].length;

    	int countLiveNeighbors = 0;
    	int countDeadNeighbors = 0;
    	int nextState = -1;

    	if(i>row-1)
    		return;
    	if(i+1<row )
    	{
    		if(board[i+1][j]==1)countLiveNeighbors++;
    	}
    	if(i-1>-1)
    	{
    		if(board[i-1][j]==1)countLiveNeighbors++;
    	}
    	if(j+1<col)
    	{
    		if(board[i][j+1]==1)countLiveNeighbors++;
    	}
    	if(j-1>-1)
    	{
    		if(board[i][j-1]==1)countLiveNeighbors++;
    	}
    	if(i-1>-1 && j-1 >-1)
    	{
    		if(board[i-1][j-1]==1)countLiveNeighbors++;
    	}
    	if(i+1<row && j-1 >-1)
    	{
    		if(board[i+1][j-1]==1)countLiveNeighbors++;
    	}
    	if(i-1>-1 && j+1 < col)
    	{
    		if(board[i-1][j+1]==1)countLiveNeighbors++;
    	}
    	if(i+1<row && j+1 < col)
    	{
    		if(board[i+1][j+1]==1)countLiveNeighbors++;
    	}
    	if(board[i][j]==1)
    	{
    		if(countLiveNeighbors<2)
    			nextState = 0;
    		else if(countLiveNeighbors >= 2 && countLiveNeighbors <= 3)
    			nextState = 1;
    		else if(countLiveNeighbors > 3) 
    			nextState = 0;
    	}
    	else
    	{
    		if(countLiveNeighbors==3)
    			nextState = 1;
    		else
    			nextState = 0;
    	}
    	// System.out.println(nextState);
    	if(j+1==col)
    		getNextState(board, i+1, 0);
    	else
    		getNextState(board, i, j+1);

    	board[i][j]=nextState;
    }
}</pre>