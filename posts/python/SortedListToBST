<b>Title: </b>
            109. Convert Sorted List to Binary Search Tree
            <b>Source: </b><a target='_blank' href='https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/'>leetcode.com</a><p><section class="action action-btn-set">
<a class="icon-btn btn" href="https://discuss.leetcode.com/category/117" onclick="ga('send', 'event', 'discuss', 'click', 'convert-sorted-list-to-binary-search-tree');" target="_blank">
<i aria-hidden="true" class="fa fa-commenting-o"></i>Discuss
          </a>
<button class="icon-btn disabled" data-placement="top" data-toggle="tooltip" title="Not available yet, please check back later." type="button">
<i aria-hidden="true" class="fa fa-book">
</i><span class="hidden-xs">Editorial </span>Solution
          </button>
<a class="icon-btn pull-right-sm btn" href="/problems/random-one-question/" onclick="ga('send', 'event', 'pick-one-detail', 'click');">
<i aria-hidden="true" class="fa fa-random"></i>Pick One
          </a>
</section><hr class="line dotted">
</hr></p>

<h3>Python solution</h3><pre class="lang:python decode:true ">''' https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/ '''
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def sortedListToBST(self, head):
        """
        :type head: ListNode
        :rtype: TreeNode
        """
        if not head:
            return None
        if not head.next:
            root = TreeNode(head.val)
            return root
        slow = head
        fast = head.next
        prev = slow
        while fast and fast.next:
            prev = slow
            fast = fast.next.next
            slow = slow.next
        
        root = TreeNode(slow.val)
        right = self.sortedListToBST(slow.next)
        prev.next = None
        if prev != slow:
            left = self.sortedListToBST(head)
            root.left = left
        root.right = right
        return root
</pre>