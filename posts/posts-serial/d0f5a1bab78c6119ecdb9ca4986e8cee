ccopy_reg
_reconstructor
p0
(cpost
Post
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'post_file'
p6
S'/Users/anupamjain/code/gitRepo/GitToPost/posts/Java/BinaryTreeDiameter'
p7
sS'files_covered'
p8
c__builtin__
set
p9
((lp10
S'/Users/anupamjain/code/gitRepo/Questions/Algo/Java/BinaryTreeDiameter.java'
p11
atp12
Rp13
sS'title'
p14
VDiameter of a Binary Tree
p15
sS'file_name'
p16
g11
sS'link'
p17
S'http://www.geeksforgeeks.org/diameter-of-a-binary-tree/'
p18
sS'host_name'
p19
S'www.geeksforgeeks.org'
p20
sS'problem_text'
p21
g0
(cbs4.element
Tag
p22
g2
Ntp23
Rp24
(dp25
S'can_be_empty_element'
p26
I00
sS'previous_element'
p27
NsS'next_sibling'
p28
NsS'name'
p29
S'p'
p30
sS'parent'
p31
NsS'namespace'
p32
NsS'prefix'
p33
NsS'previous_sibling'
p34
NsS'attrs'
p35
(dp36
sS'next_element'
p37
g0
(g22
g2
Ntp38
Rp39
(dp40
g26
I00
sg27
g24
sg28
g0
(g22
g2
Ntp41
Rp42
(dp43
g26
I00
sg27
g0
(cbs4.element
NavigableString
p44
c__builtin__
unicode
p45
VThe diagram below shows two trees each with diameter nine, the leaves that form the ends of a longest path are shaded (note that there is more than one path in each tree of length nine, but no path longer than nine nodes). 
p46
tp47
Rp48
(dp49
g34
g0
(g22
g2
Ntp50
Rp51
(dp52
g26
I00
sg27
g0
(g44
g45
VThe diameter of a tree (sometimes called the width) is the number of nodes on the longest path between two leaves in the tree.  
p53
tp54
Rp55
(dp56
g34
Nsg27
g39
sg28
g51
sg37
g51
sg31
g39
sbsg28
g48
sg29
Vspan
p57
sg31
g39
sg32
Nsg33
Nsg34
g55
sg35
(dp58
Vid
p59
Vmore-5687
p60
ssg37
g48
sS'parser_class'
p61
cbs4
BeautifulSoup
p62
sS'hidden'
p63
I00
sS'contents'
p64
(lp65
sbsg27
g51
sg28
Nsg37
g42
sg31
g39
sbsg28
g0
(g22
g2
Ntp66
Rp67
(dp68
g26
I00
sg27
g0
(g22
g2
Ntp69
Rp70
(dp71
g26
I01
sg27
g0
(g22
g2
Ntp72
Rp73
(dp74
g26
I00
sg27
g42
sg28
Nsg29
Va
p75
sg31
g42
sg32
Nsg33
Nsg34
Nsg35
(dp76
Vhref
p77
Vhttp://geeksforgeeks.org/wp-content/uploads/tree_diameter.GIF
p78
ssg37
g70
sg61
g62
sg63
I00
sg64
(lp79
g70
asbsg28
Nsg29
Vimg
p80
sg31
g73
sg32
Nsg33
Nsg34
Nsg35
(dp81
Vsrc
p82
Vhttp://geeksforgeeks.org/wp-content/uploads/tree_diameter.GIF
p83
sVtitle
p84
Vtree_diameter
p85
sVheight
p86
V236
p87
sVwidth
p88
V633
p89
sValt
p90
V
p91
sVclass
p92
(lp93
Valigncenter
p94
aVsize-full
p95
aVwp-image-5737
p96
assg37
g67
sg61
g62
sg63
I00
sg64
(lp97
sbsg28
g0
(g22
g2
Ntp98
Rp99
(dp100
g26
I00
sg27
g0
(g44
g45
VThe diameter of a tree T is the largest of the following quantities:
p101
tp102
Rp103
(dp104
g34
Nsg27
g67
sg28
Nsg37
g99
sg31
g67
sbsg28
g0
(g22
g2
Ntp105
Rp106
(dp107
g26
I00
sg27
g0
(g44
g45
V\u000a* the longest path between leaves that goes through the root of T (this can be computed from the heights of the subtrees of T) 
p108
tp109
Rp110
(dp111
g34
g0
(g22
g2
Ntp112
Rp113
(dp114
g26
I01
sg27
g0
(g44
g45
V\u000a* the diameter of T\u2019s right subtree
p115
tp116
Rp117
(dp118
g34
g0
(g22
g2
Ntp119
Rp120
(dp121
g26
I01
sg27
g0
(g44
g45
V* the diameter of T\u2019s left subtree
p122
tp123
Rp124
(dp125
g34
Nsg27
g99
sg28
g120
sg37
g120
sg31
g99
sbsg28
g117
sg29
Vbr
p126
sg31
g99
sg32
Nsg33
Nsg34
g124
sg35
(dp127
sg37
g117
sg61
g62
sg63
I00
sg64
(lp128
sbsg27
g120
sg28
g113
sg37
g113
sg31
g99
sbsg28
g110
sg29
Vbr
p129
sg31
g99
sg32
Nsg33
Nsg34
g117
sg35
(dp130
sg37
g110
sg61
g62
sg63
I00
sg64
(lp131
sbsg27
g113
sg28
Nsg37
g106
sg31
g99
sbsg28
g0
(g22
g2
Ntp132
Rp133
(dp134
g26
I00
sg27
g0
(g44
g45
V\u000a
p135
tp136
Rp137
(dp138
g34
Nsg27
g0
(g22
g2
Ntp139
Rp140
(dp141
g26
I00
sg27
g0
(g44
g45
V\u000a
p142
tp143
Rp144
(dp145
g34
g0
(g22
g2
Ntp146
Rp147
(dp148
g26
I00
sg27
g0
(g44
g45
V\u000a
p149
tp150
Rp151
(dp152
g34
Nsg27
g0
(g22
g2
Ntp153
Rp154
(dp155
g26
I00
sg27
g0
(g44
g45
V\u000a
p156
tp157
Rp158
(dp159
g34
g0
(g22
g2
Ntp160
Rp161
(dp162
g26
I01
sg27
g0
(g44
g45
VImplementation:
p163
tp164
Rp165
(dp166
g34
Nsg27
g106
sg28
g161
sg37
g161
sg31
g106
sbsg28
g158
sg29
Vbr
p167
sg31
g106
sg32
Nsg33
Nsg34
g165
sg35
(dp168
sg37
g158
sg61
g62
sg63
I00
sg64
(lp169
sbsg27
g161
sg28
g154
sg37
g154
sg31
g106
sbsg28
Nsg29
Vdiv
p170
sg31
g106
sg32
Nsg33
Nsg34
g158
sg35
(dp171
Vclass
p172
(lp173
Vresponsive-tabs
p174
assg37
g151
sg61
g62
sg63
I00
sg64
(lp175
g151
ag147
ag144
ag140
asbsg28
g147
sg37
g147
sg31
g154
sbsg28
g144
sg29
Vh2
p176
sg31
g154
sg32
Nsg33
Nsg34
g151
sg35
(dp177
Vclass
p178
(lp179
Vtabtitle
p180
assg37
g0
(g44
g45
VC
p181
tp182
Rp183
(dp184
g34
Nsg27
g147
sg28
Nsg37
g144
sg31
g147
sbsg61
g62
sg63
I00
sg64
(lp185
g183
asbsg27
g183
sg28
g140
sg37
g140
sg31
g154
sbsg28
Nsg29
Vdiv
p186
sg31
g154
sg32
Nsg33
Nsg34
g144
sg35
(dp187
Vclass
p188
(lp189
Vtabcontent
p190
assg37
g137
sg61
g62
sg63
I00
sg64
(lp191
g137
asbsg28
Nsg37
g133
sg31
g140
sbsg28
Nsg29
Vpre
p192
sg31
g24
sg32
Nsg33
Nsg34
g106
sg35
(dp193
Vclass
p194
(lp195
Vbrush:
p196
aVcpp;
p197
aVtitle:
p198
aV;
p199
aVnotranslate
p200
asVtitle
p201
g91
ssg37
g0
(g44
g45
V\u000a#include <stdio.h>\u000a#include <stdlib.h>\u000a\u000a/* A binary tree node has data, pointer to left child\u000a   and a pointer to right child */\u000astruct node\u000a{\u000a    int data;\u000a    struct node* left, *right;\u000a};\u000a\u000a/* function to create a new node of tree and returns pointer */\u000astruct node* newNode(int data);\u000a\u000a/* returns max of two integers */\u000aint max(int a, int b);\u000a\u000a/* function to Compute height of a tree. */\u000aint height(struct node* node);\u000a\u000a/* Function to get diameter of a binary tree */\u000aint diameter(struct node * tree)\u000a{\u000a   /* base case where tree is empty */\u000a   if (tree == 0)\u000a     return 0;\u000a\u000a  /* get the height of left and right sub-trees */\u000a  int lheight = height(tree->left);\u000a  int rheight = height(tree->right);\u000a\u000a  /* get the diameter of left and right sub-trees */\u000a  int ldiameter = diameter(tree->left);\u000a  int rdiameter = diameter(tree->right);\u000a\u000a  /* Return max of following three\u000a   1) Diameter of left subtree\u000a   2) Diameter of right subtree\u000a   3) Height of left subtree + height of right subtree + 1 */\u000a  return max(lheight + rheight + 1, max(ldiameter, rdiameter));\u000a} \u000a\u000a/* UTILITY FUNCTIONS TO TEST diameter() FUNCTION */\u000a\u000a/*  The function Compute the "height" of a tree. Height is the \u000a    number f nodes along the longest path from the root node \u000a    down to the farthest leaf node.*/\u000aint height(struct node* node)\u000a{\u000a   /* base case tree is empty */ \u000a   if(node == NULL)\u000a       return 0;\u000a\u000a   /* If tree is not empty then height = 1 + max of left \u000a      height and right heights */    \u000a   return 1 + max(height(node->left), height(node->right));\u000a} \u000a\u000a/* Helper function that allocates a new node with the\u000a   given data and NULL left and right pointers. */\u000astruct node* newNode(int data)\u000a{\u000a  struct node* node = (struct node*)\u000a                       malloc(sizeof(struct node));\u000a  node->data = data;\u000a  node->left = NULL;\u000a  node->right = NULL;\u000a\u000a  return(node);\u000a}\u000a\u000a/* returns maximum of two integers */\u000aint max(int a, int b)\u000a{\u000a  return (a >= b)? a: b;\u000a}    \u000a\u000a/* Driver program to test above functions*/\u000aint main()\u000a{\u000a\u000a  /* Constructed binary tree is \u000a            1\u000a          /   \u005c\u000a        2      3\u000a      /  \u005c\u000a    4     5\u000a  */\u000a  struct node *root = newNode(1);\u000a  root->left        = newNode(2);\u000a  root->right       = newNode(3);\u000a  root->left->left  = newNode(4);\u000a  root->left->right = newNode(5);\u000a\u000a  printf("Diameter of the given binary tree is %d\u005cn", diameter(root));\u000a\u000a  getchar();\u000a  return 0;\u000a}\u000a
p202
tp203
Rp204
(dp205
g34
Nsg27
g133
sg28
Nsg37
Nsg31
g133
sbsg61
g62
sg63
I00
sg64
(lp206
g204
asbsg29
Vp
p207
sg31
g24
sg32
Nsg33
Nsg34
g99
sg35
(dp208
sg37
g165
sg61
g62
sg63
I00
sg64
(lp209
g165
ag161
ag158
ag154
asbsg29
g207
sg31
g24
sg32
Nsg33
Nsg34
g67
sg35
(dp210
sg37
g124
sg61
g62
sg63
I00
sg64
(lp211
g124
ag120
ag117
ag113
ag110
asbsg29
g207
sg31
g24
sg32
Nsg33
Nsg34
g42
sg35
(dp212
sg37
g103
sg61
g62
sg63
I00
sg64
(lp213
g103
asbsg29
g207
sg31
g24
sg32
Nsg33
Nsg34
g39
sg35
(dp214
sg37
g73
sg61
g62
sg63
I00
sg64
(lp215
g73
asbsg29
g207
sg31
g24
sg32
Nsg33
Nsg34
Nsg35
(dp216
sg37
g55
sg61
g62
sg63
I00
sg64
(lp217
g55
ag51
ag48
asbsg61
Nsg63
I00
sg64
(lp218
g39
ag42
ag67
ag99
ag106
ag133
asbsS'raw_page'
p219
S'<!DOCTYPE html>\r\n<!--[if IE 7]>\r\n<html class="ie ie7" lang="en-US" prefix="og: http://ogp.me/ns#">\r\n<![endif]-->\r\n<!--[if IE 8]>\r\n<html class="ie ie8" lang="en-US" prefix="og: http://ogp.me/ns#">\r\n<![endif]-->\r\n<!--[if !(IE 7) | !(IE 8)  ]><!-->\r\n<html lang="en-US" prefix="og: http://ogp.me/ns#">\r\n<!--<![endif]-->\r\n<head>\r\n<meta charset="UTF-8" />\r\n<meta name="viewport" content="width=device-width" />\r\n\r\n<meta property="og:image" content="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/gfg_200X200.png">\r\n<meta property="og:image:type" content="image/png">\r\n<meta property="og:image:width" content="200">\r\n<meta property="og:image:height" content="200">\r\n\r\n<title>Diameter of a Binary Tree - GeeksforGeeks</title>\r\n<link rel="profile" href="http://gmpg.org/xfn/11" />\r\n<link rel="pingback" href="http://www.geeksforgeeks.org/xmlrpc.php" />\r\n<!--[if lt IE 9]>\r\n<script src="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/js/html5.js" type="text/javascript"></script>\r\n<![endif]-->\r\n\n<!-- This site is optimized with the Yoast SEO plugin v3.0.7 - https://yoast.com/wordpress/plugins/seo/ -->\n<link rel="canonical" href="http://www.geeksforgeeks.org/diameter-of-a-binary-tree/" />\n<meta property="og:locale" content="en_US" />\n<meta property="og:type" content="article" />\n<meta property="og:title" content="Diameter of a Binary Tree - GeeksforGeeks" />\n<meta property="og:description" content="The diameter of a tree (sometimes called the width) is the number of nodes on the longest path between two leaves in the tree. The diagram below shows two trees each with diameter nine, the leaves that form the ends of a longest path are shaded (note that there is more than one path in\xe2\x80\xa6 Read More &raquo;" />\n<meta property="og:url" content="http://www.geeksforgeeks.org/diameter-of-a-binary-tree/" />\n<meta property="og:site_name" content="GeeksforGeeks" />\n<meta property="article:section" content="Trees" />\n<meta property="article:published_time" content="2010-03-15T19:15:58+00:00" />\n<meta property="article:modified_time" content="2015-12-22T13:48:36+00:00" />\n<meta property="og:updated_time" content="2015-12-22T13:48:36+00:00" />\n<meta property="og:image" content="http://geeksforgeeks.org/wp-content/uploads/tree_diameter.GIF" />\n<!-- / Yoast SEO plugin. -->\n\n\t\t<script type="text/javascript">\n\t\t\twindow._wpemojiSettings = {"baseUrl":"http:\\/\\/s.w.org\\/images\\/core\\/emoji\\/72x72\\/","ext":".png","source":{"concatemoji":"http:\\/\\/www.geeksforgeeks.org\\/wp-includes\\/js\\/wp-emoji-release.min.js"}};\n\t\t\t!function(a,b,c){function d(a){var c=b.createElement("canvas"),d=c.getContext&&c.getContext("2d");return d&&d.fillText?(d.textBaseline="top",d.font="600 32px Arial","flag"===a?(d.fillText(String.fromCharCode(55356,56812,55356,56807),0,0),c.toDataURL().length>3e3):(d.fillText(String.fromCharCode(55357,56835),0,0),0!==d.getImageData(16,16,1,1).data[0])):!1}function e(a){var c=b.createElement("script");c.src=a,c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f,g;c.supports={simple:d("simple"),flag:d("flag")},c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.simple&&c.supports.flag||(g=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",g,!1),a.addEventListener("load",g,!1)):(a.attachEvent("onload",g),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&&f.twemoji&&(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);\n\t\t</script>\n\t\t<style type="text/css">\nimg.wp-smiley,\nimg.emoji {\n\tdisplay: inline !important;\n\tborder: none !important;\n\tbox-shadow: none !important;\n\theight: 1em !important;\n\twidth: 1em !important;\n\tmargin: 0 .07em !important;\n\tvertical-align: -0.1em !important;\n\tbackground: none !important;\n\tpadding: 0 !important;\n}\n</style>\n<link rel=\'stylesheet\' id=\'wp-pagenavi-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/wp-pagenavi/pagenavi-css.css\' type=\'text/css\' media=\'all\' />\n<link rel=\'stylesheet\' id=\'themonic-fonts-css\'  href=\'http://fonts.googleapis.com/css?family=Ubuntu:400,700&#038;subset=latin,latin-ext\' type=\'text/css\' media=\'all\' />\n<link rel=\'stylesheet\' id=\'themonic-style-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/style.css\' type=\'text/css\' media=\'all\' />\n<link rel=\'stylesheet\' id=\'custom-style-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/custom.css\' type=\'text/css\' media=\'all\' />\n<!--[if lt IE 9]>\n<link rel=\'stylesheet\' id=\'themonic-ie-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/css/ie.css\' type=\'text/css\' media=\'all\' />\n<![endif]-->\n<meta name="generator" content="WordPress 4.2.7" />\n<style type="text/css" id="custom-background-css">\nbody.custom-background { background-color: #ffffff; }\n</style>\n<style type="text/css" id="syntaxhighlighteranchor"></style>\n<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<script>\r\n  (adsbygoogle = window.adsbygoogle || []).push({\r\n    google_ad_client: "ca-pub-9465609616171866",\r\n    enable_page_level_ads: true\r\n  });\r\n</script>\r\n</head>\r\n<body class="single single-post postid-5687 single-format-standard custom-background custom-background-white custom-font-enabled">\r\n<div id="page" class="hfeed site">\r\n\t<header id="masthead" class="site-header" role="banner">\r\n\t\t\t\t\t<hgroup>\r\n\t\t\t<a href="http://www.geeksforgeeks.org/" title="GeeksforGeeks" rel="home">GeeksforGeeks</a>\r\n\t\t\t\t<br .../> <a class="site-description">A computer science portal for geeks</a>\r\n\t\t</hgroup>\r\n\r\n<div style="float:right;">\r\n<hgroup style="float:right;">   \r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://www.geeksforgeeks.org/campus-ambassador-program-by-geeksforgeeks/">CA</a>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://geeksquiz.com/gate-corner-2/">GATE CS</a>\r\n\r\n<strong><a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://practice.geeksforgeeks.org/">Practice</a></strong>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://www.geeksforgeeks.org/suggest/">Suggest</a>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://code.geeksforgeeks.org/">IDE</a>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://qa.geeksforgeeks.org/">Q&A</a>\r\n\r\n<a style="padding:0px 30px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://geeksquiz.com/">GeeksQuiz</a>\r\n\r\n</hgroup><br></br>\r\n\r\n<span style="display:inline-block; width:300px;float:right;">\r\n<script>\r\n  (function() {\r\n    var cx = \'009682134359037907028:tj6eafkv_be\';\r\n    var gcse = document.createElement(\'script\');\r\n    gcse.type = \'text/javascript\';\r\n    gcse.async = true;\r\n    gcse.src = (document.location.protocol == \'https:\' ? \'https:\' : \'http:\') +\r\n        \'//cse.google.com/cse.js?cx=\' + cx;\r\n    var s = document.getElementsByTagName(\'script\')[0];\r\n    s.parentNode.insertBefore(gcse, s);\r\n  })();\r\n</script>\r\n<gcse:search></gcse:search>\r\n\r\n<style type="text/css">\r\n  .gsc-control-cse {\r\n     padding: 0px 10px;\r\n  } \r\n\r\n  .gsc-control-cse {\r\n    font-family: "Trebuchet MS", sans-serif;\r\n    /*border-color: #E1F3DA;*/\r\n    /*background-color: #E1F3DA;*/\r\n  }\r\n  input.gsc-input {\r\n    border-color: #94CC7A;\r\n  }\r\n  input.gsc-search-button {\r\n    border-color: #94CC7A;\r\n    background-color: #4CB96B;\r\n    margin-top:7px;\r\n  }\r\n  .gsc-tabHeader.gsc-tabhInactive {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gsc-tabHeader.gsc-tabhActive {\r\n    border-color: #A9DA92;\r\n    background-color: #A9DA92;\r\n  }\r\n  .gsc-tabsArea {\r\n    border-color: #A9DA92;\r\n  }\r\n  .gsc-webResult.gsc-result {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gsc-webResult.gsc-result:hover {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:link,\r\n  .gs-webResult.gs-result a.gs-title:link b {\r\n    color: #009900;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:visited,\r\n  .gs-webResult.gs-result a.gs-title:visited b {\r\n    color: #009900;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:hover,\r\n  .gs-webResult.gs-result a.gs-title:hover b {\r\n    color: #003300;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:active,\r\n  .gs-webResult.gs-result a.gs-title:active b {\r\n    color: #009900;\r\n  }\r\n  .gsc-cursor-page {\r\n    color: #009900;\r\n  }\r\n  a.gsc-trailing-more-results:link {\r\n    color: #009900;\r\n  }\r\n  .gs-webResult.gs-result .gs-snippet {\r\n    color: #454545;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl {\r\n    color: #33cc00;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl-short {\r\n    color: #33cc00;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl-short {\r\n    display: none;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl-long {\r\n    display: block;\r\n  }\r\n  .gsc-cursor-box {\r\n    border-color: #A9DA92;\r\n  }\r\n  .gsc-results .gsc-cursor-page {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {\r\n    border-color: #A9DA92;\r\n    background-color: #A9DA92;\r\n  }\r\n  .gs-promotion.gs-result {\r\n    border-color: #94CC7A;\r\n    background-color: #CBE8B4;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:link {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:visited {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:hover {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:active {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result .gs-snippet {\r\n    color: #454545;\r\n  }\r\n  .gs-promotion.gs-result .gs-visibleUrl,\r\n  .gs-promotion.gs-result .gs-visibleUrl-short {\r\n    color: #815FA7;\r\n  }\r\n  .gsib_a {\r\n    padding : 2px;\r\n  }\r\n</style>    \r\n</span>\r\n</div>\r\n\r\n\t\t\r\n\t\t\r\n\t\t<nav id="site-navigation" class="themonic-nav" role="navigation">\r\n\t\t\t<a class="assistive-text" href="#content" title="Skip to content">Skip to content</a>\r\n\t\t\t<div class="menu-iconic-container"><ul id="menu-top" class="nav-menu"><li id="menu-item-135003" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-135003"><a href="http://www.geeksforgeeks.org/">Home</a></li>\n<li id="menu-item-135004" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-135004"><a title="Algorithms" href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algo</a>\n<ul class="sub-menu">\n\t<li id="menu-item-135030" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135030"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#AnalysisofAlgorithms">Analysis of Algorithms</a></li>\n\t<li id="menu-item-135031" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135031"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#SearchingandSorting">Searching and Sorting</a></li>\n\t<li id="menu-item-135032" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135032"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#GreedyAlgorithms">Greedy Algorithms</a></li>\n\t<li id="menu-item-135033" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135033"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#DynamicProgramming">Dynamic Programming</a></li>\n\t<li id="menu-item-135034" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135034"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#PatternSearching">Pattern Searching</a></li>\n\t<li id="menu-item-135035" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135035"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#OtherStringAlgorithms">Other String Algorithms</a></li>\n\t<li id="menu-item-135036" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135036"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#Backtracking">Backtracking</a></li>\n\t<li id="menu-item-135037" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135037"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#DivideandConquer">Divide and Conquer</a></li>\n\t<li id="menu-item-135038" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135038"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#GeometricAlgorithms">Geometric Algorithms</a></li>\n\t<li id="menu-item-135039" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135039"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#MathematicalAlgorithms">Mathematical Algorithms</a></li>\n\t<li id="menu-item-135040" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135040"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#BitAlgorithms">Bit Algorithms</a></li>\n\t<li id="menu-item-135041" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135041"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#GraphAlgorithms">Graph Algorithms</a></li>\n\t<li id="menu-item-135042" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135042"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#RandomizedAlgorithms">Randomized Algorithms</a></li>\n</ul>\n</li>\n<li id="menu-item-135010" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-135010"><a title="Data Structures" href="http://www.geeksforgeeks.org/data-structures/">DS</a>\n<ul class="sub-menu">\n\t<li id="menu-item-135045" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135045"><a href="http://www.geeksforgeeks.org/data-structures/#LinkedList">LinkedList</a></li>\n\t<li id="menu-item-135046" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135046"><a href="http://www.geeksforgeeks.org/data-structures/#Stack">Stack</a></li>\n\t<li id="menu-item-135047" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135047"><a href="http://www.geeksforgeeks.org/data-structures/#Queue">Queue</a></li>\n\t<li id="menu-item-135048" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135048"><a href="http://www.geeksforgeeks.org/data-structures/#BinaryTree">Binary Tree</a></li>\n\t<li id="menu-item-135049" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135049"><a href="http://www.geeksforgeeks.org/data-structures/#BinarySearchTree">Binary Search Tree</a></li>\n\t<li id="menu-item-135050" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135050"><a href="http://www.geeksforgeeks.org/data-structures/#Heap">Heap</a></li>\n\t<li id="menu-item-135051" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135051"><a href="http://www.geeksforgeeks.org/data-structures/#Hashing">Hashing</a></li>\n\t<li id="menu-item-135052" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135052"><a href="http://www.geeksforgeeks.org/data-structures/#Graph">Graph</a></li>\n\t<li id="menu-item-135053" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135053"><a href="http://www.geeksforgeeks.org/data-structures/#AdvancedDataStructure">Advanced Data Structure</a></li>\n\t<li id="menu-item-135054" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135054"><a href="http://www.geeksforgeeks.org/data-structures/#Array">Array</a></li>\n\t<li id="menu-item-135055" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135055"><a href="http://www.geeksforgeeks.org/data-structures/#Matrix">Matrix</a></li>\n\t<li id="menu-item-135056" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135056"><a href="http://www.geeksforgeeks.org/data-structures/#Misc">Misc</a></li>\n</ul>\n</li>\n<li id="menu-item-135014" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135014"><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview</a></li>\n<li id="menu-item-135006" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135006"><a href="http://www.geeksforgeeks.org/c/">C</a></li>\n<li id="menu-item-135007" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135007"><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>\n<li id="menu-item-135012" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135012"><a href="http://www.geeksforgeeks.org/java/">Java</a></li>\n<li id="menu-item-137004" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-137004"><a href="http://www.geeksforgeeks.org/python/">Python</a></li>\n<li id="menu-item-135009" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135009"><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>\n<li id="menu-item-135016" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135016"><a href="http://qa.geeksforgeeks.org/index.php?qa=ask">Ask a Q</a></li>\n<li id="menu-item-135077" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135077"><a href="https://play.google.com/store/apps/details?id=free.programming.programming">AndroidApp</a></li>\n<li id="menu-item-135367" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135367"><a href="http://www.geeksforgeeks.org/category/guestblogs/">GBlog</a></li>\n<li id="menu-item-135028" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135028"><a href="http://www.geeksforgeeks.org/category/gfact/">GFact</a></li>\n<li id="menu-item-136004" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-136004"><a href="http://www.geeksforgeeks.org/category/project/">Project</a></li>\n<li id="menu-item-136978" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-136978"><a href="http://www.geeksforgeeks.org/jobs/">Jobs</a></li>\n<li id="menu-item-135019" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135019"><a href="http://www.geeksforgeeks.org/category/c-arrays/">Arr</a></li>\n<li id="menu-item-135022" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135022"><a href="http://www.geeksforgeeks.org/category/c-strings/">String</a></li>\n<li id="menu-item-135937" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135937"><a href="http://www.geeksforgeeks.org/category/matrix/">Matrix</a></li>\n<li id="menu-item-135023" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135023"><a href="http://www.geeksforgeeks.org/category/linked-list/">Linked List</a></li>\n<li id="menu-item-135029" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135029"><a href="http://www.geeksforgeeks.org/category/stack/">Stack</a></li>\n<li id="menu-item-135932" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135932"><a href="http://www.geeksforgeeks.org/category/queue/">Q</a></li>\n<li id="menu-item-136299" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-136299"><a href="http://www.geeksforgeeks.org/category/hash/">Hash</a></li>\n<li id="menu-item-135941" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135941"><a href="http://www.geeksforgeeks.org/category/heap/">Heap</a></li>\n<li id="menu-item-135020" class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-parent current-post-parent menu-item-135020"><a href="http://www.geeksforgeeks.org/category/tree/">Tree</a></li>\n<li id="menu-item-135940" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135940"><a href="http://www.geeksforgeeks.org/category/binary-search-tree/">BST</a></li>\n<li id="menu-item-135024" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135024"><a href="http://www.geeksforgeeks.org/category/graph/">Graph</a></li>\n<li id="menu-item-135017" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135017"><a href="http://www.geeksforgeeks.org/category/c-puzzles/">C/C++</a></li>\n<li id="menu-item-135027" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135027"><a href="http://www.geeksforgeeks.org/category/bit-magic/">Bit</a></li>\n<li id="menu-item-135021" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135021"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/">MCQ</a></li>\n<li id="menu-item-135018" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135018"><a href="http://www.geeksforgeeks.org/category/c-programs/">Misc</a></li>\n<li id="menu-item-135025" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135025"><a href="http://www.geeksforgeeks.org/category/program-output/">O/P</a></li>\n</ul></div>\t\t</nav><!-- #site-navigation -->\r\n\t\t<div class="clear"></div>\r\n\t</header><!-- #masthead -->\r\n\r\n\t<div id="main" class="wrapper">\t<div id="primary" class="site-content">\r\n\t\t<div id="content" role="main">\r\n\r\n\t\t\t\t\t\t\t\r\n\t<article id="post-5687" class="post-5687 post type-post status-publish format-standard hentry category-tree">\r\n\t\t\t\t<header class="entry-header">\r\n\t\t\t\t\t\t<h1 class="entry-title">Diameter of a Binary Tree</h1>\r\n\t\t\t\t\r\n\t\t\t</header><!-- .entry-header -->\r\n\r\n\t\t\t\t<div class="entry-content">\r\n\t\t\t<p>The diameter of a tree (sometimes called the width) is the number of nodes on the longest path between two leaves in the tree.  <span id="more-5687"></span>The diagram below shows two trees each with diameter nine, the leaves that form the ends of a longest path are shaded (note that there is more than one path in each tree of length nine, but no path longer than nine nodes). </p>\n<p><a href="http://geeksforgeeks.org/wp-content/uploads/tree_diameter.GIF"><img src="http://geeksforgeeks.org/wp-content/uploads/tree_diameter.GIF" alt="" title="tree_diameter" width="633" height="236" class="aligncenter size-full wp-image-5737" /></a></p>\n<p>The diameter of a tree T is the largest of the following quantities:</p>\n<p>* the diameter of T&#8217;s left subtree<br />\n* the diameter of T&#8217;s right subtree<br />\n* the longest path between leaves that goes through the root of T (this can be computed from the heights of the subtrees of T) </p>\n<p>Implementation:<br />\n<div class="responsive-tabs">\n<h2 class="tabtitle">C</h2>\n<div class="tabcontent">\n</p>\n<pre class="brush: cpp; title: ; notranslate" title="">\r\n#include &lt;stdio.h&gt;\r\n#include &lt;stdlib.h&gt;\r\n\r\n/* A binary tree node has data, pointer to left child\r\n   and a pointer to right child */\r\nstruct node\r\n{\r\n    int data;\r\n    struct node* left, *right;\r\n};\r\n\r\n/* function to create a new node of tree and returns pointer */\r\nstruct node* newNode(int data);\r\n\r\n/* returns max of two integers */\r\nint max(int a, int b);\r\n\r\n/* function to Compute height of a tree. */\r\nint height(struct node* node);\r\n\r\n/* Function to get diameter of a binary tree */\r\nint diameter(struct node * tree)\r\n{\r\n   /* base case where tree is empty */\r\n   if (tree == 0)\r\n     return 0;\r\n\r\n  /* get the height of left and right sub-trees */\r\n  int lheight = height(tree-&gt;left);\r\n  int rheight = height(tree-&gt;right);\r\n\r\n  /* get the diameter of left and right sub-trees */\r\n  int ldiameter = diameter(tree-&gt;left);\r\n  int rdiameter = diameter(tree-&gt;right);\r\n\r\n  /* Return max of following three\r\n   1) Diameter of left subtree\r\n   2) Diameter of right subtree\r\n   3) Height of left subtree + height of right subtree + 1 */\r\n  return max(lheight + rheight + 1, max(ldiameter, rdiameter));\r\n} \r\n\r\n/* UTILITY FUNCTIONS TO TEST diameter() FUNCTION */\r\n\r\n/*  The function Compute the &quot;height&quot; of a tree. Height is the \r\n    number f nodes along the longest path from the root node \r\n    down to the farthest leaf node.*/\r\nint height(struct node* node)\r\n{\r\n   /* base case tree is empty */ \r\n   if(node == NULL)\r\n       return 0;\r\n\r\n   /* If tree is not empty then height = 1 + max of left \r\n      height and right heights */    \r\n   return 1 + max(height(node-&gt;left), height(node-&gt;right));\r\n} \r\n\r\n/* Helper function that allocates a new node with the\r\n   given data and NULL left and right pointers. */\r\nstruct node* newNode(int data)\r\n{\r\n  struct node* node = (struct node*)\r\n                       malloc(sizeof(struct node));\r\n  node-&gt;data = data;\r\n  node-&gt;left = NULL;\r\n  node-&gt;right = NULL;\r\n\r\n  return(node);\r\n}\r\n\r\n/* returns maximum of two integers */\r\nint max(int a, int b)\r\n{\r\n  return (a &gt;= b)? a: b;\r\n}    \r\n\r\n/* Driver program to test above functions*/\r\nint main()\r\n{\r\n\r\n  /* Constructed binary tree is \r\n            1\r\n          /   \\\r\n        2      3\r\n      /  \\\r\n    4     5\r\n  */\r\n  struct node *root = newNode(1);\r\n  root-&gt;left        = newNode(2);\r\n  root-&gt;right       = newNode(3);\r\n  root-&gt;left-&gt;left  = newNode(4);\r\n  root-&gt;left-&gt;right = newNode(5);\r\n\r\n  printf(&quot;Diameter of the given binary tree is %d\\n&quot;, diameter(root));\r\n\r\n  getchar();\r\n  return 0;\r\n}\r\n</pre>\n\n</div><h2 class="tabtitle">Java</h2>\n<div class="tabcontent">\n\n<pre class="brush: java; title: ; notranslate" title="">\r\n// Recursive optimized Java program to find the diameter of a\r\n// Binary Tree\r\n\r\n/* Class containing left and right child of current\r\n node and key value*/\r\nclass Node\r\n{\r\n    int data;\r\n    Node left, right;\r\n\r\n    public Node(int item)\r\n    {\r\n        data = item;\r\n        left = right = null;\r\n    }\r\n}\r\n\r\n/* Class to print the Diameter */\r\nclass BinaryTree\r\n{\r\n    Node root;\r\n\r\n    /* Method to calculate the diameter and return it to main */\r\n    int diameter(Node root)\r\n    {\r\n        /* base case if tree is empty */\r\n        if (root == null)\r\n            return 0;\r\n\r\n        /* get the height of left and right sub trees */\r\n        int lheight = height(root.left);\r\n        int rheight = height(root.right);\r\n\r\n        /* get the diameter of left and right subtrees */\r\n        int ldiameter = diameter(root.left);\r\n        int rdiameter = diameter(root.right);\r\n\r\n        /* Return max of following three\r\n          1) Diameter of left subtree\r\n         2) Diameter of right subtree\r\n         3) Height of left subtree + height of right subtree + 1 */\r\n        return Math.max(lheight + rheight + 1,\r\n                        Math.max(ldiameter, rdiameter));\r\n\r\n    }\r\n\r\n    /* A wrapper over diameter(Node root) */\r\n    int diameter()\r\n    {\r\n        return diameter(root);\r\n    }\r\n\r\n    /*The function Compute the &quot;height&quot; of a tree. Height is the\r\n      number f nodes along the longest path from the root node\r\n      down to the farthest leaf node.*/\r\n    static int height(Node node)\r\n    {\r\n        /* base case tree is empty */\r\n        if (node == null)\r\n            return 0;\r\n\r\n        /* If tree is not empty then height = 1 + max of left\r\n           height and right heights */\r\n        return (1 + Math.max(height(node.left), height(node.right)));\r\n    }\r\n\r\n    public static void main(String args[])\r\n    {\r\n        /* creating a binary tree and entering the nodes */\r\n        BinaryTree tree = new BinaryTree();\r\n        tree.root = new Node(1);\r\n        tree.root.left = new Node(2);\r\n        tree.root.right = new Node(3);\r\n        tree.root.left.left = new Node(4);\r\n        tree.root.left.right = new Node(5);\r\n\r\n        System.out.println(&quot;The diameter of given binary tree is : &quot;\r\n                           + tree.diameter());\r\n    }\r\n}\r\n</pre>\n<p></div></div><br />\nTime Complexity: O(n^2)</p>\n<p></br><br />\n<strong>Optimized implementation:</strong> The above implementation can be optimized by calculating the height in the same recursion rather than calling a height() separately. Thanks to Amar  for suggesting this optimized version. This optimization reduces time complexity to O(n).</p>\n<div class="responsive-tabs">\n<h2 class="tabtitle">C</h2>\n<div class="tabcontent">\n\n<pre class="brush: cpp; title: ; notranslate" title="">\r\n/*The second parameter is to store the height of tree.\r\n   Initially, we need to pass a pointer to a location with value\r\n   as 0. So, function should be used as follows:\r\n\r\n   int height = 0;\r\n   struct node *root = SomeFunctionToMakeTree();\r\n   int diameter = diameterOpt(root, &amp;height); */\r\nint diameterOpt(struct node *root, int* height)\r\n{\r\n  /* lh --&gt; Height of left subtree\r\n     rh --&gt; Height of right subtree */\r\n  int lh = 0, rh = 0;\r\n \r\n  /* ldiameter  --&gt; diameter of left subtree\r\n     rdiameter  --&gt; Diameter of right subtree */\r\n  int ldiameter = 0, rdiameter = 0;\r\n \r\n  if(root == NULL)\r\n  {\r\n    *height = 0;\r\n     return 0; /* diameter is also 0 */\r\n  }\r\n \r\n  /* Get the heights of left and right subtrees in lh and rh\r\n    And store the returned values in ldiameter and ldiameter */\r\n  ldiameter = diameterOpt(root-&gt;left, &amp;lh);\r\n  rdiameter = diameterOpt(root-&gt;right, &amp;rh);\r\n \r\n  /* Height of current node is max of heights of left and\r\n     right subtrees plus 1*/\r\n  *height = max(lh, rh) + 1;\r\n \r\n  return max(lh + rh + 1, max(ldiameter, rdiameter));\r\n}\r\n</pre>\n\n</div><h2 class="tabtitle">Java</h2>\n<div class="tabcontent">\n\n<pre class="brush: java; highlight: [29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56]; title: ; notranslate" title="">\r\n// Recursive Java program to find the diameter of a\r\n// Binary Tree\r\n\r\n/* Class containing left and right child of current\r\n node and key value*/\r\nclass Node\r\n{\r\n    int data;\r\n    Node left, right;\r\n\r\n    public Node(int item)\r\n    {\r\n        data = item;\r\n        left = right = null;\r\n    }\r\n}\r\n\r\n// A utility class to pass heigh object\r\nclass Height\r\n{\r\n    int h;\r\n}\r\n\r\n/* Class to print the Diameter */\r\nclass BinaryTree\r\n{\r\n    Node root;\r\n\r\n    /* define height =0 globally and  call diameterOpt(root,height)\r\n       from main */\r\n    int diameterOpt(Node root, Height height)\r\n    {\r\n        /* lh --&gt; Height of left subtree\r\n           rh --&gt; Height of right subtree */\r\n        Height lh = new Height(), rh = new Height();\r\n\r\n        if (root == null)\r\n        {\r\n            height.h = 0;\r\n            return 0; /* diameter is also 0 */\r\n        }\r\n        \r\n        /* ldiameter  --&gt; diameter of left subtree\r\n           rdiameter  --&gt; Diameter of right subtree */  \r\n        /* Get the heights of left and right subtrees in lh and rh\r\n         And store the returned values in ldiameter and ldiameter */\r\n        lh.h++;     rh.h++; \r\n        int ldiameter = diameterOpt(root.left, lh);\r\n        int rdiameter = diameterOpt(root.right, rh);\r\n\r\n        /* Height of current node is max of heights of left and\r\n         right subtrees plus 1*/\r\n        height.h = Math.max(lh.h, rh.h) + 1;\r\n\r\n        return Math.max(lh.h + rh.h + 1, Math.max(ldiameter, rdiameter));\r\n    }\r\n\r\n    /* A wrapper over diameter(Node root) */\r\n    int diameter()\r\n    {\r\n        Height height = new Height();\r\n        return diameterOpt(root, height);\r\n    }\r\n\r\n    /*The function Compute the &quot;height&quot; of a tree. Height is the\r\n      number f nodes along the longest path from the root node\r\n      down to the farthest leaf node.*/\r\n    static int height(Node node)\r\n    {\r\n        /* base case tree is empty */\r\n        if (node == null)\r\n            return 0;\r\n\r\n        /* If tree is not empty then height = 1 + max of left\r\n           height and right heights */\r\n        return (1 + Math.max(height(node.left), height(node.right)));\r\n    }\r\n\r\n    public static void main(String args[])\r\n    {\r\n        /* creating a binary tree and entering the nodes */\r\n        BinaryTree tree = new BinaryTree();\r\n        tree.root = new Node(1);\r\n        tree.root.left = new Node(2);\r\n        tree.root.right = new Node(3);\r\n        tree.root.left.left = new Node(4);\r\n        tree.root.left.right = new Node(5);\r\n\r\n        System.out.println(&quot;The diameter of given binary tree is : &quot;\r\n                           + tree.diameter());\r\n    }\r\n}\r\n</pre>\n<p></div></div><br />\nTime Complexity: O(n)<br />\nOutput:\n<pre> 4 \r\n</pre>\n<p>References:<br />\n<a href="http://www.cs.duke.edu/courses/spring00/cps100/assign/trees/diameter.html">http://www.cs.duke.edu/courses/spring00/cps100/assign/trees/diameter.html</a></p>\n<p>Please write comments if you find any of the above codes/algorithms incorrect, or find other ways to solve the same problem.</p>\n\r\n\t\t\t<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<!-- Big Rectangle Blog Bottom -->\r\n<ins class="adsbygoogle"\r\n     style="display:inline-block;width:336px;height:280px"\r\n     data-ad-client="ca-pub-9465609616171866"\r\n     data-ad-slot="4061219431"></ins>\r\n<script>\r\n(adsbygoogle = window.adsbygoogle || []).push({});\r\n</script>\r\n<br></br>\r\n\t\t</div><!-- .entry-content -->\r\n\t\t\t\t\r\n\t\t\r\n\r\n\t\t<footer class="entry-meta">\r\n\t\t<span class="post-comment"><a href="http://www.geeksforgeeks.org/diameter-of-a-binary-tree/#comments" class="commentslink" ><span class="dsq-postid" data-dsqidentifier="5687 http://geeksforgeeks.org/?p=5687">95 Comments</span></a> <!--added for comments by Shubham-->\r\n\t\t</span><span>Category: <a href="http://www.geeksforgeeks.org/category/tree/" rel="category tag">Trees</a></span> <span></span> \r\n           \t          \t\r\n\t\t\t\t\t</footer><!-- .entry-meta -->\r\n\t</article><!-- #post -->\r\n<div class="related_posts"><h3>Related Posts:</h3><ul><li><a href="http://www.geeksforgeeks.org/bfs-vs-dfs-binary-tree/" title="BFS vs DFS for Binary Tree">BFS vs DFS for Binary Tree</a></li><li><a href="http://www.geeksforgeeks.org/maximum-difference-between-node-and-its-ancestor-in-binary-tree/" title="Maximum difference between node and its ancestor in Binary Tree">Maximum difference between node and its ancestor in Binary Tree</a></li><li><a href="http://www.geeksforgeeks.org/inorder-non-threaded-binary-tree-traversal-without-recursion-or-stack/" title="Inorder Non-threaded Binary Tree Traversal without Recursion or Stack">Inorder Non-threaded Binary Tree Traversal without Recursion or Stack</a></li><li><a href="http://www.geeksforgeeks.org/check-if-leaf-traversal-of-two-binary-trees-is-same/" title="Check if leaf traversal of two Binary Trees is same?">Check if leaf traversal of two Binary Trees is same?</a></li><li><a href="http://www.geeksforgeeks.org/closest-leaf-to-a-given-node-in-binary-tree/" title="Closest leaf to a given node in Binary Tree">Closest leaf to a given node in Binary Tree</a></li><li><a href="http://www.geeksforgeeks.org/locking-and-unlocking-of-resources-in-the-form-of-n-ary-tree/" title="Locking and Unlocking of Resources arranged in the form of n-ary Tree">Locking and Unlocking of Resources arranged in the form of n-ary Tree</a></li><li><a href="http://www.geeksforgeeks.org/find-all-possible-trees-with-given-inorder-traversal/" title="Find all possible binary trees with given Inorder Traversal">Find all possible binary trees with given Inorder Traversal</a></li><li><a href="http://www.geeksforgeeks.org/find-lca-in-binary-tree-using-rmq/" title="Find LCA in Binary Tree using RMQ">Find LCA in Binary Tree using RMQ</a></li></ul></div><br></br>\r\n\r\n<!-- Added on 29 Oct 2015 for next and previous from same category -->\r\n<nav class="nav-single">\r\n\t\t\t\t\t<div class="assistive-text">Post navigation</div>\r\n\t\t\t\t\t<span class="nav-previous"><a href="http://www.geeksforgeeks.org/convert-an-arbitrary-binary-tree-to-a-tree-that-holds-children-sum-property/" rel="prev">Previous post in category</a></span>\r\n\t\t\t\t\t<span class="nav-next"><a href="http://www.geeksforgeeks.org/how-to-determine-if-a-binary-tree-is-balanced/" rel="next">Next post in category</a></span>\r\n\t\t\t\t</nav><!-- .nav-single -->\r\n\r\n\r\n<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>\r\n    <script type="text/javascript">\r\n    $(document).ready(function(){\r\n        $.ajax({\r\n            url:"http://courses.geeksforgeeks.org/plugin.php",\r\n            method:"POST",\r\n            dataType:"json",\r\n            data:{post_id:$("#ratePlugin").attr("pid"),url:window.location.href},\r\n            xhrFields:{withCredentials:true},\r\n            success:function(response){\r\n                $("#ratePlugin").html(response.rate);\r\n                $("#markPlugin").html(response.mark);\r\n            },\r\n            complete:function(){\r\n                $(".box").click(function(){\r\n                    rrequest({post_id:$("#ratePlugin").attr("pid"),post_title:$("#ratePlugin").attr("ptitle"),rating:$(this).attr("rating"),url:window.location.href});\r\n                });\r\n                $(".mark").click(function(){\r\n                    mrequest({post_id:$("#markPlugin").attr("pid"),post_title:$("#markPlugin").attr("ptitle"),op:$(this).attr("id"),url:window.location.href});\r\n                });\r\n            }\r\n        });\r\n        function rrequest(payload){\r\n            $.ajax({\r\n                url:"http://courses.geeksforgeeks.org/gfgRatings.php",\r\n                method:"POST",\r\n                dataType:"html",\r\n                data:payload,\r\n                xhrFields:{withCredentials:true},\r\n                success:function(response){\r\n                    $("#ratePlugin").html(response);\r\n                },\r\n                complete:function(){\r\n                    $(".box").click(function(){\r\n                        rrequest({post_id:$("#ratePlugin").attr("pid"),post_title:$("#ratePlugin").attr("ptitle"),rating:$(this).attr("rating"),url:window.location.href});\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        //rrequest({post_id:$("#ratePlugin").attr("pid"),url:window.location.href});\r\n        function mrequest(payload){\r\n            $.ajax({\r\n                url:"http://courses.geeksforgeeks.org/gfgMarking.php",\r\n                method:"POST",\r\n                dataType:"html",\r\n                data:payload,\r\n                xhrFields:{withCredentials:true},\r\n                success:function(response){\r\n                    $("#markPlugin").html(response);\r\n                },\r\n                complete:function(){\r\n                    $(".mark").click(function(){\r\n                        mrequest({post_id:$("#markPlugin").attr("pid"),post_title:$("#markPlugin").attr("ptitle"),op:$(this).attr("id"),url:window.location.href});\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        //mrequest({post_id:$("#markPlugin").attr("pid"),url:window.location.href});\r\n    });\r\n</script>\r\n\r\n<div class="plugins">\r\n<div pid="5687" ptitle="Diameter of a Binary Tree" id="ratePlugin"></div>\r\n<div pid="5687" ptitle="Diameter of a Binary Tree" id="markPlugin"></div>\r\n</div>\r\n\r\n<br></br>\r\n\r\n<script>\r\n  window.fbAsyncInit=function() {\r\n    FB.init({\r\n      appId      : \\\'380853768781431\\\',\r\n      xfbml      : true,\r\n      version    : \\\'v2.3\\\'\r\n    });\r\n  };\r\n\r\n  (function(d, s, id){\r\n     var js, fjs = d.getElementsByTagName(s)[0];\r\n     if (d.getElementById(id)) {return;}\r\n     js = d.createElement(s); js.id = id;\r\n     js.src = "//connect.facebook.net/en_US/sdk.js";\r\n     fjs.parentNode.insertBefore(js, fjs);\r\n   }(document, \\\'script\\\', \\\'facebook-jssdk\\\'));\r\n</script>\r\n<div class="fb-like" data-share="true" data-width="450" data-show-faces="true"></div>\r\n\r\n<br></br>\r\n<p>Writing code in comment? Please use <a href="http://code.geeksforgeeks.org/">code.geeksforgeeks.org</a>, generate link and share the link here.</a>\r\n\t\t\t\t\r\n<div id="disqus_thread">\r\n            <div id="dsq-content">\r\n\r\n\r\n            <ul id="dsq-comments">\r\n                    <li class="comment even thread-even depth-1" id="dsq-comment-35769">\r\n        <div id="dsq-comment-header-35769" class="dsq-comment-header">\r\n            <cite id="dsq-cite-35769">\r\n                <span id="dsq-author-user-35769">raagav</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-35769" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-35769" class="dsq-comment-message"><p>int height(struct node *root,int *max,struct node **n)</p>\n<p>{</p>\n<p>    int lheight=0,rheight=0;</p>\n<p>     if(root==NULL)</p>\n<p>       return 0;</p>\n<p>     if(root-&gt;left)</p>\n<p>        lheight=height(root-&gt;left,max,n);</p>\n<p>     if(root-&gt;right)</p>\n<p>        rheight=height(root-&gt;right,max,n);</p>\n<p>     if((*max)rheight?lheight:rheight)+1;</p>\n<p>}</p>\n<p>//in main()</p>\n<p>{</p>\n<p> printf(&#8220;nthe diameter is :&#8221;);</p>\n<p>    height(head,maxptr,&amp;n);</p>\n<p>    printf(&#8220;%d  node is %d&#8221;,*maxptr,n-&gt;data);</p>\n<p>}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-35161">\r\n        <div id="dsq-comment-header-35161" class="dsq-comment-header">\r\n            <cite id="dsq-cite-35161">\r\nhttp://about.me/tg9963                <span id="dsq-author-user-35161">GOPI GOPINATH</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-35161" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-35161" class="dsq-comment-message"><p>even now i dn get a clear idea of wat actually is the diameter of a tree ??<br />\ncan any one explain ??? with testcases plz</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-32992">\r\n        <div id="dsq-comment-header-32992" class="dsq-comment-header">\r\n            <cite id="dsq-cite-32992">\r\n                <span id="dsq-author-user-32992">achiever01</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-32992" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-32992" class="dsq-comment-message"><p>Thank you, excellent explanation</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-32549">\r\n        <div id="dsq-comment-header-32549" class="dsq-comment-header">\r\n            <cite id="dsq-cite-32549">\r\n                <span id="dsq-author-user-32549">sakimahesh</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-32549" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-32549" class="dsq-comment-message"><p>how would the complexity differ if the tree is a BST in both the solutions mentioned above?<br />\nwould it be O(nlogn) for first solution?</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-31610">\r\n        <div id="dsq-comment-header-31610" class="dsq-comment-header">\r\n            <cite id="dsq-cite-31610">\r\n                <span id="dsq-author-user-31610">Nitin</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-31610" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-31610" class="dsq-comment-message"><p>is this correct??</p>\n<p>int d=0;<br />\nint dia(node *root)<br />\n{<br />\n    if(!root)<br />\n    return 0;<br />\n    int h1=dia(root-&gt;left);<br />\n    int h2=dia(root-&gt;right);<br />\n    d=max(d,h1+h2+1);<br />\n    return d;<br />\n}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-29738">\r\n        <div id="dsq-comment-header-29738" class="dsq-comment-header">\r\n            <cite id="dsq-cite-29738">\r\nhttp://www.TechProceed.com                <span id="dsq-author-user-29738">Snehal Masne</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-29738" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-29738" class="dsq-comment-message"><p>The most easy algo for this is:<br />\nDo a BFS from root.. then find out the node with the largest distance assigned(assuming each edge to be of length = 1) then Do a BFS from that node, the largest assigned node in this case is the Diameter of tree&#8230;.<br />\nLet me know if m incorrect!!</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-30317">\r\n        <div id="dsq-comment-header-30317" class="dsq-comment-header">\r\n            <cite id="dsq-cite-30317">\r\n                <span id="dsq-author-user-30317">babar</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-30317" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-30317" class="dsq-comment-message"><p>u are correct.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt depth-2" id="dsq-comment-30534">\r\n        <div id="dsq-comment-header-30534" class="dsq-comment-header">\r\n            <cite id="dsq-cite-30534">\r\n                <span id="dsq-author-user-30534">sachin</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-30534" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-30534" class="dsq-comment-message"><p>Can you explain a little more? I didn&#8217;t get your solution. Thanks in advance.<br />\nThanks</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even depth-2" id="dsq-comment-30568">\r\n        <div id="dsq-comment-header-30568" class="dsq-comment-header">\r\n            <cite id="dsq-cite-30568">\r\n                <span id="dsq-author-user-30568">Gaurav Ramesh</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-30568" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-30568" class="dsq-comment-message"><p>what about the direction of the links ? how will you reach any other node from a leaf ?.. the idea is good though</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-3" id="dsq-comment-30607">\r\n        <div id="dsq-comment-header-30607" class="dsq-comment-header">\r\n            <cite id="dsq-cite-30607">\r\n                <span id="dsq-author-user-30607">its_dark</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-30607" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-30607" class="dsq-comment-message"><p>the algo can be used for calculating diameter for an undirected  graph, rather than tree</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-28975">\r\n        <div id="dsq-comment-header-28975" class="dsq-comment-header">\r\n            <cite id="dsq-cite-28975">\r\n                <span id="dsq-author-user-28975">DarkProtocol</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-28975" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-28975" class="dsq-comment-message"><p>Can any one explain how come the solution provided is O(N^2) &#8230; and optimition is O(n),, ,i dnt see much diff</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-29011">\r\n        <div id="dsq-comment-header-29011" class="dsq-comment-header">\r\n            <cite id="dsq-cite-29011">\r\n                <span id="dsq-author-user-29011">vishal11</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-29011" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-29011" class="dsq-comment-message"><p>for a skewed tree the height function has to be called each time for every node and it is doing this for every node that why the first method is o(n^2) and for the second method height of a node is calculated in the function itself and that why the second method is o(n)</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-28817">\r\n        <div id="dsq-comment-header-28817" class="dsq-comment-header">\r\n            <cite id="dsq-cite-28817">\r\n                <span id="dsq-author-user-28817">Ashok</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-28817" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-28817" class="dsq-comment-message"><p>why can&#8217;t we interpret as levelOf(leftSubTree)+levelOf(RightSubTree)+1.</p>\n<p>+1 for root. Essentially, we need to traverse the tree in level order. So complexity will be O(n).</p>\n<p>Any thoughts ?</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-28820">\r\n        <div id="dsq-comment-header-28820" class="dsq-comment-header">\r\n            <cite id="dsq-cite-28820">\r\n                <span id="dsq-author-user-28820">Ashok</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-28820" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-28820" class="dsq-comment-message"><p>never mind, this may not be true always, as the longest path need not to go thru root always..</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-28479">\r\n        <div id="dsq-comment-header-28479" class="dsq-comment-header">\r\n            <cite id="dsq-cite-28479">\r\n                <span id="dsq-author-user-28479">Vivek</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-28479" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-28479" class="dsq-comment-message"><p>#include<br />\n#include<br />\nstruct node<br />\n{<br />\n    int data;<br />\n    struct node* left;<br />\n    struct node* right;<br />\n};</p>\n<p>/* function to create a new node of tree and returns pointer */<br />\nstruct node* newNode(int data);</p>\n<p>/* returns max of two integers */<br />\nint max(int a, int b);</p>\n<p>/* function to Compute height of a tree. */<br />\nint height(struct node* node);<br />\nint max(int a, int b)<br />\n{<br />\n\treturn b&gt;a?b:a;<br />\n}</p>\n<p>int get_height(struct node *root)<br />\n{<br />\n\tif(root)<br />\n\t{<br />\n\t\treturn 1+max(get_height(root-&gt;left),get_height(root-&gt;right));<br />\n\t}<br />\n\telse<br />\n\treturn 0;<br />\n}</p>\n<p>int get_diameter(struct node *root)<br />\n{<br />\n\tif(root)</p>\n<p>\treturn (max((1 + get_height(root-&gt;left) + get_height(root-&gt;right)),max(get_diameter(root-&gt;left),get_diameter(root-&gt;right))));<br />\n\telse<br />\n\treturn 0;<br />\n}</p>\n<p>struct node* newNode(int data)<br />\n{<br />\n  struct node* node = (struct node*)<br />\n                       malloc(sizeof(struct node));<br />\n  node-&gt;data = data;<br />\n  node-&gt;left = NULL;<br />\n  node-&gt;right = NULL;</p>\n<p>  return(node);<br />\n}</p>\n<p>int main()<br />\n{</p>\n<p>  /* Constructed binary tree is<br />\n            1<br />\n          /<br />\n        2      3<br />\n      /<br />\n    4     5<br />\n  */<br />\n  struct node *root = newNode(1);<br />\n  root-&gt;left        = newNode(2);<br />\n  root-&gt;right       = newNode(3);<br />\n  root-&gt;left-&gt;left  = newNode(4);<br />\n  root-&gt;left-&gt;right = newNode(5);</p>\n<p>  printf(&#8220;Diameter of the given binary tree is %dn&#8221;, get_diameter(root));</p>\n<p>  getchar();<br />\n  return 0;<br />\n}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-28158">\r\n        <div id="dsq-comment-header-28158" class="dsq-comment-header">\r\n            <cite id="dsq-cite-28158">\r\n                <span id="dsq-author-user-28158">Neha Garg</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-28158" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-28158" class="dsq-comment-message"><p>i have one doubt &#8230; please somebody clear it<br />\nin optimized soluton where we are updating the values of lh and rh ????</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-29539">\r\n        <div id="dsq-comment-header-29539" class="dsq-comment-header">\r\n            <cite id="dsq-cite-29539">\r\n                <span id="dsq-author-user-29539">Anon</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-29539" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-29539" class="dsq-comment-message"><p>I think they&#8217;re passed by ref, so they&#8217;re being updating already.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-24963">\r\n        <div id="dsq-comment-header-24963" class="dsq-comment-header">\r\n            <cite id="dsq-cite-24963">\r\n                <span id="dsq-author-user-24963">sumit dey</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-24963" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-24963" class="dsq-comment-message"><p>The above solution will not work because for skewed tree the diameter should be zero and tree for example should have diameter 3.</p>\n<p>1<br />\n  \\<br />\n   2<br />\n    \\<br />\n     4<br />\n    / \\<br />\n   3   5</p>\n<pre> <code language="C">\npublic class FindDiameter{\n\n\tclass Tree{\n\t\n\t\tObject data;\n\t\tTree lftChild;\n\t\tTree rhtChild;\n\t}\n    class MaxLengthSoFar{\n\t\n\t\tTree node; // to store the root node that give rise to the diameter\n\t\tint maxLength;// to store the diameter \n\t\t\n\t\tpublic int getMaxLength(){\n\t\t\treturn maxLength;\n\t\t}\n\t\n\t\tpublic void setMaxLength(int maxLen){\n\t\t\tmaxLength=maxLen;\n\t\t}\n\t\tpublic void setNode(Tree pNode){\n\t\t\tnode=pNaode;\n\t\t}\n\t}\n\n\n\tpublic int getDiameter(Tree root){\n\n\t\tint heightOfTree=getDiameter(root,this.new MaxLengthSoFar());\n\t\treturn maxLengthSofar.getMaxLength();\n\t}\t\n\n\tprivate int getDiameter(Tree root,MaxLengthSoFar dataTracker){\n\t\n\t\tif(root==null)\n\t\t\treturn 0;\n\t\t\n\t\tint hieghtLch=getDiameter(root.lftChild,dataTracker);\n\t\tint heightRch=getDiameter(root.rhtChild,dataTracker);\n\t//these two conditions for left-height and right-height foe non zero is added because the solution for skewed tree should be zero\n\t\tif(hieghtLch!=0 &amp;&amp; heightRch!=0 &amp;&amp; (hieghtLch+heightRch+1)&gt;dataTracker.getMaxLength()){\n\t\t\tdataTracker.setMaxLength(hieghtLch+heightRch+1);\n\t\t\tdataTracker.setNode(root);\n\t\t}\n\t\t\n\t\treturn (hieghtLch&gt;heightRch?heightLch:heightRch)+1;\n\t}\n\n\n}\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-sumit5113 even thread-odd thread-alt depth-1" id="dsq-comment-24962">\r\n        <div id="dsq-comment-header-24962" class="dsq-comment-header">\r\n            <cite id="dsq-cite-24962">\r\n                <span id="dsq-author-user-24962">sumit5113</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-24962" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-24962" class="dsq-comment-message"><p>The following solution is elegant and simple. It calculates both height and diameter of the tree.</p>\n<pre> <code language="C">\npublic class FindDiameter{\n\n\tclass Tree{\n\t\n\t\tObject data;\n\t\tTree lftChild;\n\t\tTree rhtChild;\n\t}\n    class MaxLengthSoFar{\n\t\n\t\tTree node; // to store the root node that give rise to the diameter\n\t\tint maxLength;// to store the diameter \n\t\t\n\t\tpublic int getMaxLength(){\n\t\t\treturn maxLength;\n\t\t}\n\t\n\t\tpublic void setMaxLength(int maxLen){\n\t\t\tmaxLength=maxLen;\n\t\t}\n\t\tpublic void setNode(Tree pNode){\n\t\t\tnode=pNaode;\n\t\t}\n\t}\n\n\n\tpublic int getDiameter(Tree root){\n\n\t\tint heightOfTree=getDiameter(root,this.new MaxLengthSoFar());\n\t\treturn maxLengthSofar.getMaxLength();\n\t}\t\n\n\tprivate int getDiameter(Tree root,MaxLengthSoFar dataTracker){\n\t\n\t\tif(root==null)\n\t\t\treturn 0;\n\t\t\n\t\tint hieghtLch=getDiameter(root.lftChild,dataTracker);\n\t\tint heightRch=getDiameter(root.rhtChild,dataTracker);\n\n\t\tif((hieghtLch+heightRch+1)&gt;dataTracker.getMaxLength()){\n\t\t\tdataTracker.setMaxLength(hieghtLch+heightRch+1);\n\t\t\tdataTracker.setNode(root);\n\t\t}\n\t\t\n\t\treturn (hieghtLch&gt;heightRch?heightLch:heightRch)+1;\n\t}\n\n\n}\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-sumit5113 odd alt thread-even depth-1" id="dsq-comment-24958">\r\n        <div id="dsq-comment-header-24958" class="dsq-comment-header">\r\n            <cite id="dsq-cite-24958">\r\n                <span id="dsq-author-user-24958">sumit5113</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-24958" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-24958" class="dsq-comment-message"><p>Here is the code that is simple and elegant, it calculate both height and diameter of the tree.</p>\n<p>It&#8217;s my request to you guys if you find any test case that invalidate the logic. Please suggest me that case.</p>\n<pre> <code language="C">\npublic class FindDiameter{\n\n\tclass Tree{\n\t\n\t\tObject data;\n\t\tTree lftChild;\n\t\tTree rhtChild;\n\t}\n    class MaxLengthSoFar{\n\t\n\t\tTree node;\n\t\tint maxLength;\n\t\t\n\t\tpublic int getMaxLength(){\n\t\t\treturn maxLength;\n\t\t}\n\t\n\t\tpublic void setMaxLength(int maxLen){\n\t\t\tmaxLength=maxLen;\n\t\t}\n\t\tpublic void setNode(Tree pNode){\n\t\t\tnode=pNaode;\n\t\t}\n\t}\n\n\n\tpublic int getDiameter(Tree root){\n\n\t\tint heightOfTree=getDiameter(root,this.new MaxLengthSoFar());\n\t\treturn maxLengthSofar.getMaxLength();\n\t}\t\n\n\tprivate int getDiameter(Tree root,MaxLengthSoFar dataTracker){\n\t\n\t\tif(root==null)\n\t\t\treturn 0;\n\t\t\n\t\tint hieghtLch=getDiameter(root.lftChild,dataTracker);\n\t\tint heightRch=getDiameter(root.rhtChild,dataTracker);\n\n\t\tif((hieghtLch+heightRch+1)&gt;dataTracker.getMaxLength()){\n\t\t\tdataTracker.setMaxLength(hieghtLch+heightRch+1);\n\t\t\tdataTracker.setNode(root);\n\t\t}\n\t\t\n\t\treturn (hieghtLch&gt;heightRch?heightLch:heightRch)+1;\n\t}\n\n\n}\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-30688">\r\n        <div id="dsq-comment-header-30688" class="dsq-comment-header">\r\n            <cite id="dsq-cite-30688">\r\n                <span id="dsq-author-user-30688">Code_Addict</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-30688" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-30688" class="dsq-comment-message"><p>awesome man!!</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt depth-2" id="dsq-comment-31548">\r\n        <div id="dsq-comment-header-31548" class="dsq-comment-header">\r\n            <cite id="dsq-cite-31548">\r\n                <span id="dsq-author-user-31548">srinu</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-31548" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-31548" class="dsq-comment-message"><p>i did n&#8217;t understand this line &#8211;&gt; maxLengthSofar.getMaxLength()</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment byuser comment-author-harshbalyan even thread-odd thread-alt depth-1" id="dsq-comment-24805">\r\n        <div id="dsq-comment-header-24805" class="dsq-comment-header">\r\n            <cite id="dsq-cite-24805">\r\n                <span id="dsq-author-user-24805">HarshBalyan</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-24805" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-24805" class="dsq-comment-message"><pre> <code language="Java">\nint maxNum=0;\nstatic int diameter(TreeNode root).\n{\nif(root==null) return 0;.\nint left=diameter(root.left);\nint right=diameter(root.right);\nif(left+right+1&gt;maxNum)\n{\nmaxNum=left+right+1;\n}\nreturn Math.max(maxNum,1+Math.max(left, right));\n}\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-28032">\r\n        <div id="dsq-comment-header-28032" class="dsq-comment-header">\r\n            <cite id="dsq-cite-28032">\r\n                <span id="dsq-author-user-28032">sunil</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-28032" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-28032" class="dsq-comment-message"><p>last line 1+Math.max(left, right));<br />\n&#8220;1+&#8221; should not be there right?</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-22193">\r\n        <div id="dsq-comment-header-22193" class="dsq-comment-header">\r\n            <cite id="dsq-cite-22193">\r\n                <span id="dsq-author-user-22193">saurabh</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-22193" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-22193" class="dsq-comment-message"><p>We can also calculate diameter by making small<br />\nmodification in max_depth code .</p>\n<p>concept: Maximize diameter at every node when calculating max_depth</p>\n<pre> <code language="C">\r\nint diameter=0;\r\nint max_depth(struct node* root){\r\n    if(root==NULL)return 0;\r\n    \r\n    int h1= max_depth(root-&gt;left);\r\n    int h2= max_depth(root-&gt;right);\r\n    \r\n    diameter = max(diameter,h1+h2+1);\r\n    \r\n    return max(h1,h2)+1;\r\n    }\r\n</code> </pre>\n<p>comment if you find this incorrect.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-22251">\r\n        <div id="dsq-comment-header-22251" class="dsq-comment-header">\r\n            <cite id="dsq-cite-22251">\r\n                <span id="dsq-author-user-22251">ankitesh</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-22251" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-22251" class="dsq-comment-message"><p>it&#8217;s correct &#8230; </p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even depth-2" id="dsq-comment-22252">\r\n        <div id="dsq-comment-header-22252" class="dsq-comment-header">\r\n            <cite id="dsq-cite-22252">\r\n                <span id="dsq-author-user-22252">ankitesh</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-22252" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-22252" class="dsq-comment-message"><p>i also thought d same &#8230;. It&#8217;s correct </p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt depth-2" id="dsq-comment-31608">\r\n        <div id="dsq-comment-header-31608" class="dsq-comment-header">\r\n            <cite id="dsq-cite-31608">\r\n                <span id="dsq-author-user-31608">Nitin</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-31608" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-31608" class="dsq-comment-message"><p>can u plz explain this?</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even depth-2" id="dsq-comment-31609">\r\n        <div id="dsq-comment-header-31609" class="dsq-comment-header">\r\n            <cite id="dsq-cite-31609">\r\n                <span id="dsq-author-user-31609">Nitin</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-31609" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-31609" class="dsq-comment-message"><p>why r u returning max(h1,h2)+1</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment byuser comment-author-pranjalgupta odd alt thread-odd thread-alt depth-1" id="dsq-comment-22044">\r\n        <div id="dsq-comment-header-22044" class="dsq-comment-header">\r\n            <cite id="dsq-cite-22044">\r\n                <span id="dsq-author-user-22044">pranjalgupta</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-22044" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-22044" class="dsq-comment-message"><p>To simplify the implementation of this question, we can return a structure consisting of diameter and height of a node.Following is the function to accomplish this:<br />\nFirstly we create a node that we will return by our function<br />\ntypedef struct di<br />\n{<br />\n    int h;<br />\n    int d;<br />\n}<br />\ndiam;</p>\n<p>diam diameter(tree* root)<br />\n{<br />\n    if(root==NULL)<br />\n    {<br />\n        diam temp;<br />\n        temp.h=0;<br />\n        temp.d=0;<br />\n        return temp;<br />\n    }</p>\n<p>    int lh=diameter(root->left).h;<br />\n    int rh=diameter(root->right).h;<br />\n    int ld=diameter(root->left).d;<br />\n    int rd=diameter(root->right).d;</p>\n<p>    int height=max(lh,rh)+1;<br />\n    diam temp;<br />\n    temp.h=height;<br />\n    temp.d=max3(lh+rh+1,ld,rd);<br />\n    return temp;</p>\n<p>}<br />\nWe can access the final answer using diameter(root).d.<br />\nThis technique simplifies most of the questions in trees, with only identification of the type of traversal to be identified.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n<ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-31607">\r\n        <div id="dsq-comment-header-31607" class="dsq-comment-header">\r\n            <cite id="dsq-cite-31607">\r\n                <span id="dsq-author-user-31607">Nitn</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-31607" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-31607" class="dsq-comment-message"><p>its 5 only(1-2-5-7-8)</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment byuser comment-author-abhishek08aug odd alt thread-even depth-1" id="dsq-comment-18082">\r\n        <div id="dsq-comment-header-18082" class="dsq-comment-header">\r\n            <cite id="dsq-cite-18082">\r\n                <span id="dsq-author-user-18082">abhishek08aug</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-18082" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-18082" class="dsq-comment-message"><p>C++ code:</p>\n<pre> <code language="C">\n#include &lt;iostream&gt;\n#include &lt;stdlib.h&gt;\nusing namespace std;\n \nclass tree_node {\n  private:\n    int data;\n    tree_node * left;\n    tree_node * right;\n  public:\n    tree_node() {\n      left=NULL;\n      right=NULL;\n    }\n    void set_data(int data) {\n      this-&gt;data=data;\n    }\n    int get_data() {\n      return this-&gt;data;\n    }\n    void set_left(tree_node * left) {\n      this-&gt;left=left;\n    }\n    tree_node * get_left() {\n      return this-&gt;left;\n    }\n    void set_right(tree_node * right) {\n      this-&gt;right=right;\n    }\n    tree_node * get_right() {\n      return this-&gt;right;\n    }\n    tree_node ** get_left_ref() {\n      return &amp;(this-&gt;left);\n    }\n    tree_node ** get_right_ref() {\n      return &amp;(this-&gt;right);\n    }\n};\n \nclass tree {\n  private:\n    tree_node * root;\n    int size;\n    void _recursive_insert(tree_node ** root_ref, int value);\n    void _print_preorder(tree_node * root);\n    void _print_inorder(tree_node * root);\n    void _print_postorder(tree_node * root);\n    int _find_size(tree_node * root);\n    int _are_identical(tree_node * tn1, tree_node * tn2);\n    int _find_height(tree_node * root);\n    void _delete_tree(tree_node ** root);\n    void _mirror(tree_node * root);\n    void _print_paths(tree_node * root, int * path_nodes, int next_vacant_position);\n    void _print_array(int * array, int len);\n    tree_node * _lowest_common_ancestor(tree_node * parent, tree_node * root, int a, int b);\n    tree_node * _find_node(tree_node * root, int value);\n    tree_node * _min_node(tree_node * root);\n    void _print_level_order(tree_node * root);\n    int _count_leaf_nodes(tree_node * root);\n    int _is_bst(tree_node * root);\n    int _children_sum(tree_node * root);\n    void _ensure_children_sum(tree_node * root);\n    int _diameter(tree_node * root);\n  public:\n    tree() {\n      root=NULL;\n      size=0;\n    }\n    void insert(int value);\n    void recursive_insert(int value);\n    void print_preorder();\n    void print_inorder();\n    void print_postorder();\n    int find_size();\n    int get_size() {\n      return this-&gt;size;\n    }\n    int are_identical(tree t);\n    int find_height();\n    void delete_tree();\n    void mirror();\n    void print_paths();\n    tree_node * lowest_common_ancestor(int a, int b);\n    tree_node * find_node(int value);\n    tree_node * min_node();\n    void print_level_order();\n    int count_leaf_nodes();\n    int is_bst();\n    int children_sum();\n    void ensure_children_sum();\n    int diameter();\n};\n \nvoid tree::insert(int value) {\n  if(root==NULL) {\n    root=new tree_node;\n    root-&gt;set_data(value);\n  } else {\n    tree_node * parent=NULL;\n    tree_node * current=root;\n    tree_node * new_node=new tree_node;\n    new_node-&gt;set_data(value);\n    while(current!=NULL) {\n      if(value&lt;=current-&gt;get_data()) {\n        parent=current;\n        current=current-&gt;get_left();\n      } else {\n        parent=current;\n        current=current-&gt;get_right();\n      }\n    }\n    if(value&lt;=parent-&gt;get_data() &amp;&amp; parent-&gt;get_left()==NULL) {\n      parent-&gt;set_left(new_node);\n    } else if(value&gt;parent-&gt;get_data() &amp;&amp; parent-&gt;get_right()==NULL) {\n      parent-&gt;set_right(new_node);\n    }\n  }\n  size++;\n}\n \nvoid tree::recursive_insert(int value) {\n  _recursive_insert(&amp;root, value);\n  size++;\n}\n \nvoid tree::_recursive_insert(tree_node ** root_ref, int value) {\n  if(*root_ref==NULL) {\n    tree_node * new_node=new tree_node;\n    new_node-&gt;set_data(value);\n    *root_ref=new_node;   \n  } else {\n    if(value&lt;=(*root_ref)-&gt;get_data()) {\n      _recursive_insert((*root_ref)-&gt;get_left_ref(), value);\n    } else {\n      _recursive_insert((*root_ref)-&gt;get_right_ref(), value);\n    }\n  }\n}\n \nvoid tree::print_preorder() {\n  if(root==NULL) {\n    return;\n  }\n  _print_preorder(root);\n  cout&lt;&lt;endl;\n}\n \nvoid tree::_print_preorder(tree_node * root) {\n  if(root==NULL) {\n    return;\n  }\n  cout&lt;&lt;root-&gt;get_data()&lt;&lt;&quot; &quot;;\n  if(root-&gt;get_left()!=NULL)\n    _print_preorder(root-&gt;get_left());\n  if(root-&gt;get_right()!=NULL)\n    _print_preorder(root-&gt;get_right());\n}\n \nvoid tree::print_inorder() {\n  if(root==NULL) {\n    return;\n  }\n  _print_inorder(root);\n  cout&lt;&lt;endl;\n}\n \nvoid tree::_print_inorder(tree_node * root) {\n  if(root==NULL) {\n    return;\n  }\n  if(root-&gt;get_left()!=NULL)\n    _print_inorder(root-&gt;get_left());\n  cout&lt;&lt;root-&gt;get_data()&lt;&lt;&quot; &quot;;\n  if(root-&gt;get_right()!=NULL)\n    _print_inorder(root-&gt;get_right());\n}\n \nvoid tree::print_postorder() {\n  if(root==NULL) {\n    return;\n  }\n  _print_postorder(root);\n  cout&lt;&lt;endl;\n}\n \nvoid tree::_print_postorder(tree_node * root) {\n  if(root==NULL) {\n    return;\n  }\n  if(root-&gt;get_left()!=NULL)\n    _print_postorder(root-&gt;get_left());\n  if(root-&gt;get_right()!=NULL)\n    _print_postorder(root-&gt;get_right());\n  cout&lt;&lt;root-&gt;get_data()&lt;&lt;&quot; &quot;;\n}\n\nint tree::find_size() {\n  return _find_size(root);\n}\n\nint tree::_find_size(tree_node * root) {\n  if(root==NULL) {\n    return 0;\n  } else {\n    return 1+_find_size(root-&gt;get_left())+_find_size(root-&gt;get_right());\n  }\n}\n\nint tree::are_identical(tree t) {\n  return _are_identical(this-&gt;root, t.root);\n}\n\nint tree::_are_identical(tree_node * tn1, tree_node * tn2) {\n  if(tn1==NULL &amp;&amp; tn2==NULL) {\n    return 1;\n  } else if((tn1==NULL &amp;&amp; tn2!=NULL) || (tn1!=NULL &amp;&amp; tn2==NULL) || (tn1-&gt;get_data()!=tn2-&gt;get_data())) {\n    return 0;\n  } else {\n    return _are_identical(tn1-&gt;get_left(), tn2-&gt;get_left()) &amp;&amp; _are_identical(tn1-&gt;get_right(), tn2-&gt;get_right());\n  }\n}\n\nint tree::find_height() {\n  return _find_height(root);\n}\n\nint tree::_find_height(tree_node * root) {\n  if(root==NULL) {\n    return 0;\n  }\n  else {\n    return 1+max(_find_height(root-&gt;get_left()), _find_height(root-&gt;get_right()));\n  }\n}\n\nvoid tree::delete_tree() {\n  _delete_tree(&amp;root);\n  size=0;\n}\n\nvoid tree::_delete_tree(tree_node ** root) {\n  if(*root==NULL) {\n    return;\n  } else {\n    if((*root)-&gt;get_left()!=NULL) {\n      _delete_tree((*root)-&gt;get_left_ref());\n    }\n    if((*root)-&gt;get_right()!=NULL) {\n      _delete_tree((*root)-&gt;get_right_ref());\n    }\n    delete(*root);\n    *root=NULL;\n  }\n}\n\n/* alternate _delete_tree */\n/*\nvoid tree::_delete_tree(tree_node ** root) {\n  if(*root==NULL) {\n    return;\n  } else {\n    if((*root)-&gt;get_left()!=NULL) {\n      tree_node * left_ref=(*root)-&gt;get_left();\n      _delete_tree(&amp;left_ref);\n    }\n    if((*root)-&gt;get_right()!=NULL) {\n      tree_node * right_ref=(*root)-&gt;get_right();\n      _delete_tree(&amp;right_ref);\n    }\n    delete(*root);\n    *root=NULL;\n  }\n}\n*/\n\nvoid tree::mirror() {\n  _mirror(root);\n}\n\nvoid tree::_mirror(tree_node * root) {\n  if(root==NULL) {\n    return;\n  }\n\n  tree_node * temp=root-&gt;get_left();\n  root-&gt;set_left(root-&gt;get_right());\n  root-&gt;set_right(temp);\n  _mirror(root-&gt;get_left());\n  _mirror(root-&gt;get_right());\n}\n\nvoid tree::print_paths(){\n   int max_path_length=find_height();\n   int * path_nodes=(int *)calloc(sizeof(int), max_path_length);\n  _print_paths(root, path_nodes, 0);\n}\n\nvoid tree::_print_paths(tree_node * root, int * path_nodes, int next_vacant_position){\n  if(root==NULL) {\n    return;\n  } else if(root-&gt;get_left()==NULL &amp;&amp; root-&gt;get_right()==NULL) {\n    *(path_nodes+next_vacant_position)=root-&gt;get_data();\n    _print_array(path_nodes, next_vacant_position);\n  } else {\n    *(path_nodes+next_vacant_position)=root-&gt;get_data();\n    _print_paths(root-&gt;get_left(), path_nodes, next_vacant_position+1);\n    _print_paths(root-&gt;get_right(), path_nodes, next_vacant_position+1);\n  }\n}\n\nvoid tree::_print_array(int * array, int len) {\n  int i;\n  for(i=0; i&lt;=len; i++) {\n    cout&lt;&lt;*(array+i)&lt;&lt;&quot; &quot;;\n  }\n  cout&lt;&lt;endl;\n}\n\ntree_node * tree::find_node(int value) {\n  return _find_node(root, value);\n}\n\ntree_node * tree::_find_node(tree_node * root, int value) {\n  if(root==NULL || root-&gt;get_data()==value) {\n    return root;\n  } else if(value&lt;=root-&gt;get_data()) {\n    return _find_node(root-&gt;get_left(), value);\n  } else {\n    return _find_node(root-&gt;get_right(), value);\n  }\n}\n\ntree_node * tree::lowest_common_ancestor(int a, int b) {\n  return _lowest_common_ancestor(NULL, root, a, b);\n}\n\ntree_node * tree::_lowest_common_ancestor(tree_node * parent, tree_node * root, int a, int b) {\n  if(root==NULL) {\n    return root;\n  } else if((root-&gt;get_data()==a &amp;&amp; (root-&gt;get_left()-&gt;get_data()==b || root-&gt;get_right()-&gt;get_data()==b))\n             || (root-&gt;get_data()==b &amp;&amp; (root-&gt;get_left()-&gt;get_data()==a || root-&gt;get_right()-&gt;get_data()==a))) {\n    return parent;\n  } else if((_find_node(root-&gt;get_left(), a)!=NULL &amp;&amp; _find_node(root-&gt;get_right(), b)!=NULL)\n        || (_find_node(root-&gt;get_left(), b)!=NULL &amp;&amp; _find_node(root-&gt;get_right(), a)!=NULL)) {\n    return root; \n  } else if(_find_node(root-&gt;get_left(), a)!=NULL &amp;&amp; _find_node(root-&gt;get_left(), b)!=NULL) {\n    return _lowest_common_ancestor(root, root-&gt;get_left(), a, b);\n  } else if(_find_node(root-&gt;get_right(), a)!=NULL &amp;&amp; _find_node(root-&gt;get_right(), b)!=NULL) {\n    return _lowest_common_ancestor(root, root-&gt;get_right(), a, b);\n  } else {\n    return NULL;\n  }\n}\n\ntree_node * tree::min_node() {\n  return _min_node(root);\n}\n\ntree_node * tree::_min_node(tree_node * root) {\n  if(root==NULL || root-&gt;get_left()==NULL) {\n    return root;\n  } else {\n    return _min_node(root-&gt;get_left());\n  }\n}\n\nint tree::count_leaf_nodes() {\n  return _count_leaf_nodes(root);\n}\n\nint tree::_count_leaf_nodes(tree_node * root) {\n  if(root==NULL) {\n    return 0;\n  } else if(root-&gt;get_left()==NULL &amp;&amp; root-&gt;get_right()==NULL) {\n    return 1;\n  } else {\n    return _count_leaf_nodes(root-&gt;get_left())+_count_leaf_nodes(root-&gt;get_right());\n  }\n}\n\n\nint tree::is_bst() {\n  return _is_bst(root);\n}\n\nint tree::_is_bst(tree_node * root) {\n  static tree_node * previous=NULL;\n  if(root==NULL) {\n    return 1;\n  } else {\n    if(!_is_bst(root-&gt;get_left())) {\n      return 0;\n    }\n    if(previous!=NULL &amp;&amp; (previous-&gt;get_data())&gt;(root-&gt;get_data())) {\n      return 0;\n    }\n    previous=root;\n    if(!_is_bst(root-&gt;get_right())) {\n      return 0;\n    }    \n  }\n}\n\nint tree::children_sum() {\n  return _children_sum(root);\n}\n\nint tree::_children_sum(tree_node * root) {\n  if(root==NULL) {\n    return 1;\n  }\n  if(root-&gt;get_left()==NULL &amp;&amp; root-&gt;get_right()==NULL) {\n    return 1;\n  }\n  else if(_children_sum(root-&gt;get_left()) &amp;&amp; _children_sum(root-&gt;get_right())){\n    int left_data;\n    int right_data;\n    if(root-&gt;get_left()!=NULL) {\n      left_data=root-&gt;get_left()-&gt;get_data();\n    } else {\n      left_data=0;\n    }\n    if(root-&gt;get_right()!=NULL) {\n      right_data=root-&gt;get_right()-&gt;get_data();\n    } else {\n      right_data=0;\n    }\n\n    if(left_data+right_data==root-&gt;get_data()) {\n      return 1;\n    } else {\n      return 0;\n    }\n  } else {\n    return 0;\n  }\n}\n\nvoid tree::ensure_children_sum() {\n  _ensure_children_sum(root);\n}\n\nvoid tree::_ensure_children_sum(tree_node * root) {\n  if(root==NULL || (root-&gt;get_left()==NULL &amp;&amp; root-&gt;get_right()==NULL)) {\n    return;\n  } else {\n    _ensure_children_sum(root-&gt;get_left());\n    _ensure_children_sum(root-&gt;get_right());\n    int left_data;\n    int right_data;\n    if(root-&gt;get_left()!=NULL) {\n      left_data=root-&gt;get_left()-&gt;get_data();\n    } else {\n      left_data=0;\n    }\n    if(root-&gt;get_right()!=NULL) {\n      right_data=root-&gt;get_right()-&gt;get_data();\n    } else {\n      right_data=0;\n    }\n    root-&gt;set_data(left_data+right_data);\n  }\n}\n\nint tree::diameter() {\n  return _diameter(root);\n}\n\nint tree::_diameter(tree_node * root) {\n  if(root==NULL) {\n    return 0;\n  } else {\n    return max(_find_height(root-&gt;get_left())+_find_height(root-&gt;get_right())+1, max(_diameter(root-&gt;get_left()), _diameter(root-&gt;get_left())));\n  }\n}\n\nint main() {\n  tree t1;\n\n  t1.recursive_insert(5);\n  t1.recursive_insert(3);\n  t1.insert(10);\n  t1.insert(7);\n  t1.recursive_insert(50);\n  t1.recursive_insert(6);\n  t1.recursive_insert(1);\n  t1.recursive_insert(45);\n  t1.recursive_insert(55);\n  t1.recursive_insert(4);\n  t1.recursive_insert(70);\n\n  t1.print_inorder();\n\n  cout&lt;&lt;&quot;Diameter of the tree is: &quot;&lt;&lt;t1.diameter()&lt;&lt;endl;\n\n  return 0;\n}\n</code> </pre>\n<p>1 3 4 5 6 7 10 45 50 55 70<br />\nDiameter of the tree is: 7</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</li><!-- #comment-## -->\n    <li class="comment byuser comment-author-bhengra-amit even thread-odd thread-alt depth-1" id="dsq-comment-17004">\r\n        <div id="dsq-comment-header-17004" class="dsq-comment-header">\r\n            <cite id="dsq-cite-17004">\r\n                <span id="dsq-author-user-17004">bhengra.amit</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-17004" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-17004" class="dsq-comment-message"><p>Why isn&#8217;t diameter of a node = lh + rh +2 ?</p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-shailraj odd alt thread-even depth-1" id="dsq-comment-16693">\r\n        <div id="dsq-comment-header-16693" class="dsq-comment-header">\r\n            <cite id="dsq-cite-16693">\r\n                <span id="dsq-author-user-16693">shailraj</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-16693" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-16693" class="dsq-comment-message"><p>will it work ?<br />\nint path(struct binary *tree,int &#038;len){<br />\n    if(tree==NULL)<br />\n        return 0;<br />\n    int p1,p2;<br />\n    p1=p2=0;<br />\n    if(tree-> left){<br />\n        p1=path(tree->left);<br />\n    }<br />\n    if(tree-> right){<br />\n        p2=path(tree->right);<br />\n    }<br />\n    if(len < p1+p2+1)\n        len=p1+p2+1;\n    return max(p1,p2)+1;\n }\n</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-16437">\r\n        <div id="dsq-comment-header-16437" class="dsq-comment-header">\r\n            <cite id="dsq-cite-16437">\r\n                <span id="dsq-author-user-16437">rohit</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-16437" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-16437" class="dsq-comment-message"><p>/*have a look at this O(n) solution*/<br />\n#include<br />\n#include<br />\n#include<br />\n#define max(a,b) (a&gt;b?a:b)<br />\nstruct node<br />\n{<br />\nint data;<br />\nstruct node *left;<br />\nstruct node *right;<br />\n};<br />\nstruct node *newnode(int val)<br />\n{<br />\nstruct node *l=(struct node *)malloc(sizeof(struct node));<br />\nl-&gt;data=val;<br />\nl-&gt;left=NULL;<br />\nl-&gt;right=NULL;<br />\nreturn(l);<br />\n}<br />\nint maxi=0;<br />\nint height(struct node *root)<br />\n{<br />\nint h1=0,h2=0;<br />\nif(root==NULL)<br />\nreturn(0);<br />\nh1=height(root-&gt;left);<br />\nh2=height(root-&gt;right);<br />\nroot-&gt;data=max(h1,h2);<br />\nreturn(root-&gt;data+1);<br />\n}<br />\nvoid dia(struct node *root)<br />\n{<br />\nint h1=0,h2=0;<br />\nif((root==NULL)||((root-&gt;left==NULL)&amp;&amp;(root-&gt;right==NULL)))<br />\nreturn;<br />\nif(root-&gt;left!=NULL)<br />\nh1=root-&gt;left-&gt;data+1;<br />\nif(root-&gt;right!=NULL)<br />\nh2=root-&gt;right-&gt;data+1;<br />\nif(h1+h2+1&gt;maxi)<br />\nmaxi=h1+h2+1;<br />\ndia(root-&gt;left);<br />\ndia(root-&gt;right);<br />\n}<br />\nint main()<br />\n{<br />\nint k;<br />\nstruct node *root=newnode(1);<br />\nroot-&gt;left=newnode(2);<br />\nroot-&gt;right=newnode(3);<br />\nroot-&gt;left-&gt;left=newnode(4);<br />\nroot-&gt;left-&gt;right=newnode(5);<br />\nroot-&gt;left-&gt;right-&gt;right=newnode(8);<br />\nk=height(root);<br />\ndia(root);<br />\nprintf(&#8220;%d\\n&#8221;,maxi);<br />\nreturn(0);<br />\n}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-16334">\r\n        <div id="dsq-comment-header-16334" class="dsq-comment-header">\r\n            <cite id="dsq-cite-16334">\r\n                <span id="dsq-author-user-16334">Navneet</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-16334" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-16334" class="dsq-comment-message"><p>I m not very good with recursion and all . Please some body explain me how the lh and rh values increase in the optimized value . Please explain in detail. You can also email me at <a href="mailto:nnavneet.sinha10@gmail.com">nnavneet.sinha10@gmail.com</a><br />\nThanks.</p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-15026">\r\n        <div id="dsq-comment-header-15026" class="dsq-comment-header">\r\n            <cite id="dsq-cite-15026">\r\n                <span id="dsq-author-user-15026">akshat215</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-15026" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-15026" class="dsq-comment-message"><p>@geeks4geeks:<br />\ncan you help me figure out,in what aspects Optimised algo O(n) is different from Naive approach O(n^2)</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-kartik odd alt depth-2" id="dsq-comment-15592">\r\n        <div id="dsq-comment-header-15592" class="dsq-comment-header">\r\n            <cite id="dsq-cite-15592">\r\n                <span id="dsq-author-user-15592">kartik</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-15592" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-15592" class="dsq-comment-message"><p>Take a closer look at both implementations.  </p>\n<p>The code for optimized implementation is just tree traversal type where every node is visited once and O(1) work is done for every node being visited.</p>\n<p>In naive implementation, for every node being visited, O(k) work is node where k is number of nodes under it.  This O(k) work is done to find heights of left and right subtrees. Consider skewed tree like following for worst case analysis.  The total time for following tree would be O(n) + O(n-1) + &#8230;&#8230; O(1) which is O(n^2)</p>\n<p>If we consider the optimized implementation for following tree, we get the time complexity as O(1) + O(1) + &#8230;.. + O(1) which is O(n).</p>\n<pre>\r\n             1\r\n            /\r\n           2\r\n          /\r\n         3\r\n        /\r\n \r\n     n       \r\n</pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-3" id="dsq-comment-23022">\r\n        <div id="dsq-comment-header-23022" class="dsq-comment-header">\r\n            <cite id="dsq-cite-23022">\r\n                <span id="dsq-author-user-23022">Vikrant</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-23022" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-23022" class="dsq-comment-message"><p>thanks kartik <img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/images/smilies/simple-smile.png" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-14894">\r\n        <div id="dsq-comment-header-14894" class="dsq-comment-header">\r\n            <cite id="dsq-cite-14894">\r\n                <span id="dsq-author-user-14894">mrn</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-14894" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-14894" class="dsq-comment-message"><pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\nint d_so_far=0;\n\nint dmtr(Node *nd,int *d)\n{\n\tif(nd==NULL)\n\t\t{*d=0;return 0;}\n\t\t\n\tint dl=0,dr=0;\n\tint hl=dmtr(nd-&gt;l,&amp;dl);\n\tint hr=dmtr(nd-&gt;r,&amp;dr);\n\tif(hl!=0 &amp;&amp; hr!=0)\n\t{\n\t\t*d=maxx(hl+hr+1 , maxx(dl , dr));\n\t\td_so_far=d_so_far &lt; *d ? *d : d_so_far;\n\t}\n\treturn maxx(hl+1, hr+1);\n}\n\nin main() - \ncout&lt;&lt;d_so_far&lt;&lt;endl;\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-15581">\r\n        <div id="dsq-comment-header-15581" class="dsq-comment-header">\r\n            <cite id="dsq-cite-15581">\r\n                <span id="dsq-author-user-15581">mrn</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-15581" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-15581" class="dsq-comment-message"><pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\nint diameter(Node n,int *d)\n{\n\tif(n==NULL) {return 0;}\n\tint dl=0,dr=0;\n\tint lh=diameter(n-&gt;l,&amp;dl);\n\tint lr=diameter(n-&gt;r,&amp;dr);\n\tint newl=lh+lr+1;\n\tint newd=dl&gt;dr?(dl&gt;newl?dl:newl):(dr&gt;newl?dr:newl);\n\tif(newd &gt; *d) *d=newd;\n\treturn lh&gt;lr?lh+1:lr+1;\n}\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-14591">\r\n        <div id="dsq-comment-header-14591" class="dsq-comment-header">\r\n            <cite id="dsq-cite-14591">\r\n                <span id="dsq-author-user-14591">kkkmaurya</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-14591" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-14591" class="dsq-comment-message"><pre> <code language="C">\nint diameter(struct tree *node, *dia)\n{\n\tif(node == NULL)return 0;\n\tlh= diameter(node-&gt;left,dia);\n\trh=diameter(node-&gt;right,dia);\n\ttotal=lh+rh+1;\n\tif(total &gt;*dia)\n\t*dia=total;\n\treturn max(lh,rh)+1;\n}\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-14474">\r\n        <div id="dsq-comment-header-14474" class="dsq-comment-header">\r\n            <cite id="dsq-cite-14474">\r\n                <span id="dsq-author-user-14474">AT</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-14474" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-14474" class="dsq-comment-message"><p>While I agree with your solution, I am having hard find figuring out why my solution might be incorrect. Please share your comments.</p>\n<p>As I see, we can maintain a max_sum variable and count the height of the left subtree (lh), height of right subtree (rh) and update the max_sum if lh + rh + 1 is its greater. We calculate this sum at each of the nodes in the tree.</p>\n<p>From your solution, ultimately the diameters will be calculated based on heights of the left and right subtrees at some point of time in the code.</p>\n<p>I am only removing the calculation of Max of diameters of left and right subtrees. I think my solution might take a hit in terms of time complexity.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-13426">\r\n        <div id="dsq-comment-header-13426" class="dsq-comment-header">\r\n            <cite id="dsq-cite-13426">\r\n                <span id="dsq-author-user-13426">Vivek</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-13426" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-13426" class="dsq-comment-message"><p>This method is passing both cases through root and not through root.<br />\nIn this temp is having the result of maximum diameter so far and it gets updated.<br />\nHeight is also recursively found. Then pointer *dia contains the max dia and not the value returned by function.</p>\n<p>Please check if its failing in some scenario.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-13425">\r\n        <div id="dsq-comment-header-13425" class="dsq-comment-header">\r\n            <cite id="dsq-cite-13425">\r\n                <span id="dsq-author-user-13425">Vivek</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-13425" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-13425" class="dsq-comment-message"><pre> <code language="C">\n//to get the diameter of given tree \nint diameter(node *nodeptr, int *dia) \n{ \n int left_h,right_h,temp; \n if(!nodeptr) \n \treturn 0;\t \n left_h = diameter(nodeptr-&gt;left,dia); \n right_h = diameter(nodeptr-&gt;right,dia); \n temp = left_h + right_h + 1; \n if(temp &gt; *dia) \n \t*dia = temp; \n return (max(left_h,right_h) + 1); \n} \n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-13427">\r\n        <div id="dsq-comment-header-13427" class="dsq-comment-header">\r\n            <cite id="dsq-cite-13427">\r\n                <span id="dsq-author-user-13427">Vivek</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-13427" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-13427" class="dsq-comment-message"><p>Here temp contains the diameter till current level and *dia contains the max diameter. Its fulfilling above two cases with root and without root.<br />\nIts calculating left subtree height and right subtree height through recursion.<br />\nThe function doesn&#8217;t return the max diameter , it returns max height.<br />\nPlease check if something is wrong.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-3" id="dsq-comment-19954">\r\n        <div id="dsq-comment-header-19954" class="dsq-comment-header">\r\n            <cite id="dsq-cite-19954">\r\n                <span id="dsq-author-user-19954">Saurabh Vats</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-19954" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-19954" class="dsq-comment-message"><pre> <code language="C">\nint diameter(node *nodeptr, int *dia) \n{ \n int left_h,right_h,temp; \n if(!nodeptr) \n    return 0;    \n left_h = diameter(nodeptr-&gt;left,dia); \n right_h = diameter(nodeptr-&gt;right,dia); \n temp = left_h + right_h;  // here was the problem\n if(temp &gt; *dia) \n    *dia = temp; \n return (max(left_h,right_h) + 1); \n} \n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-12109">\r\n        <div id="dsq-comment-header-12109" class="dsq-comment-header">\r\n            <cite id="dsq-cite-12109">\r\n                <span id="dsq-author-user-12109">rsingh</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-12109" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-12109" class="dsq-comment-message"><p>Is anything wrong this way ?</p>\n<pre> <code language="C">\nvoid converttree(node * root){\n    if(root==NULL||root-&gt;left==NULL&amp;&amp;root-&gt;right==NULL)\n        return;\n    int leftdata = 0,rightdata = 0;\n    if(root-&gt;left!=NULL)\n        leftdata = root-&gt;left-&gt;key;\n    if(root-&gt;right!=NULL)\n        rightdata = root-&gt;right-&gt;key;\n\n    int diff,sum;\n    sum = leftdata+rightdata;\n\n    if(root-&gt;key &gt; sum){\n        diff = root-&gt;key - sum;\n        root-&gt;left-&gt;key += diff;\n    }\n    converttree(root-&gt;left);\n    converttree(root-&gt;right);\n    root-&gt;key = root-&gt;left-&gt;key + root-&gt;right-&gt;key;\n}\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-12110">\r\n        <div id="dsq-comment-header-12110" class="dsq-comment-header">\r\n            <cite id="dsq-cite-12110">\r\n                <span id="dsq-author-user-12110">rsingh</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-12110" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-12110" class="dsq-comment-message"><p>replace last line with the following lines</p>\n<p>    if(root-&gt;left!=NULL)<br />\n        root-&gt;key += root-&gt;left-&gt;key;<br />\n    if(root-&gt;right!=NULL)<br />\n        root-&gt;key += root-&gt;right-&gt;key;</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-12108">\r\n        <div id="dsq-comment-header-12108" class="dsq-comment-header">\r\n            <cite id="dsq-cite-12108">\r\n                <span id="dsq-author-user-12108">rsingh</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-12108" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-12108" class="dsq-comment-message"><p>Is anything is wrong with following code ?</p>\n<pre> <code language="C">\nvoid converttree(node * root){\n    if(root==NULL||root-&gt;left==NULL&amp;&amp;root-&gt;right==NULL)\n        return;\n    int leftdata = 0,rightdata = 0;\n    if(root-&gt;left!=NULL)\n        leftdata = root-&gt;left-&gt;key;\n    if(root-&gt;right!=NULL)\n        rightdata = root-&gt;right-&gt;key;\n\n    int diff,sum;\n    sum = leftdata+rightdata;\n\n    if(root-&gt;key &gt; sum){\n        diff = root-&gt;key - sum;\n        root-&gt;left-&gt;key += diff;\n    }\n    converttree(root-&gt;left);\n    converttree(root-&gt;right);\n    root-&gt;key = root-&gt;left-&gt;key + root-&gt;right-&gt;key;\n}\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-10420">\r\n        <div id="dsq-comment-header-10420" class="dsq-comment-header">\r\n            <cite id="dsq-cite-10420">\r\n                <span id="dsq-author-user-10420">leet</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-10420" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-10420" class="dsq-comment-message"><p>What if the tree is skewed ? then longest path between two leaves ?<br />\nAs there is only one leaf.<br />\nAccording to your algo it will return height of the tree.<br />\nor the definition should change to longest path in the tree</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-10304">\r\n        <div id="dsq-comment-header-10304" class="dsq-comment-header">\r\n            <cite id="dsq-cite-10304">\r\n                <span id="dsq-author-user-10304">piyush</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-10304" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-10304" class="dsq-comment-message"><pre> <code language="C">\nint max_dia=0;\ndiameter(struct node *T)\n{\n if(T)\n {\n  l=diameter(T-&gt;lptr);\n  r=diameter(T-&gt;rptr);\n  max_dia=maxValue(l+r+1,max);\n  return maxValue(l,r)+1; \n }\n else\n {\n return 0;\n }\n}\n\n//tell me if something wrong in this logic....\n//maxValue is the function which will return max value\n\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-14466">\r\n        <div id="dsq-comment-header-14466" class="dsq-comment-header">\r\n            <cite id="dsq-cite-14466">\r\n                <span id="dsq-author-user-14466">Piyush Kunal</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-14466" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-14466" class="dsq-comment-message"><p>Your logic is incorrect as you are always assuming that diameter will go through the root itself. The diameter may be maximum in the sub-tree itself. </p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-10303">\r\n        <div id="dsq-comment-header-10303" class="dsq-comment-header">\r\n            <cite id="dsq-cite-10303">\r\n                <span id="dsq-author-user-10303">piyush</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-10303" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-10303" class="dsq-comment-message"><p>int max_dia=0;<br />\ndiameter(struct node *T)<br />\n{<br />\n if(T)<br />\n {<br />\n  l=diameter(T-&gt;lptr);<br />\n  r=diameter(T-&gt;rptr);<br />\n  max_dia=maxValue(l+r+1,max);<br />\n  return maxValue(l,r)+1;<br />\n }<br />\n else<br />\n {<br />\n return 0;<br />\n }<br />\n}</p>\n<p>//tell me if something wrong in this logic&#8230;.<br />\n//maxValue is the function which will return max value</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-10302">\r\n        <div id="dsq-comment-header-10302" class="dsq-comment-header">\r\n            <cite id="dsq-cite-10302">\r\n                <span id="dsq-author-user-10302">piyush</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-10302" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-10302" class="dsq-comment-message"><p>int max_dia=0;<br />\ndiameter(struct node *T)<br />\n{<br />\n if(T)<br />\n {<br />\n  l=diameter(T-&gt;lptr);<br />\n  r=diameter(T-&gt;rptr);<br />\n  max_dia=maxValue(l+r+1,max);<br />\n  return maxValue(l,r)+1;<br />\n }<br />\n else<br />\n {<br />\n return 0;<br />\n }<br />\n}</p>\n<p>//tell me if something wrong in this logic&#8230;.<br />\n//maxValue is the function which will return max value</p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-10144">\r\n        <div id="dsq-comment-header-10144" class="dsq-comment-header">\r\n            <cite id="dsq-cite-10144">\r\n                <span id="dsq-author-user-10144">seabird</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-10144" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-10144" class="dsq-comment-message"><pre> <code language="C">\n#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n\ntypedef struct node{\n    int data;\n    struct node *left;\n    struct node *right;\n} node;\n\nvoid print(node *root)\n{\n    if(root!=NULL) {\n        print(root-&gt;left);\n        printf(&quot;%d &quot;,root-&gt;data);\n        print(root-&gt;right);\n    }\n}\n\nint diameter(node *root,int *max)\n{\n    if(root==NULL)return 0;\n    else {\n        int l=diameter(root-&gt;left,max);\n        int r=diameter(root-&gt;right,max);\n        if(*max &lt; l+r+1)*max=l+r+1;\n        if(l&gt;r) {\n            return l+1;\n        } else {\n            return r+1;\n        }\n    }\n}\n\nnode *make_tree(node *root,int num)\n{\n    if(root==NULL) {\n        node *newnode=malloc(sizeof(node));\n        newnode-&gt;data=num;\n        newnode-&gt;left=NULL;\n        newnode-&gt;right=NULL;\n        root=newnode;\n    } else {\n        if((root-&gt;data) &lt;= num ) {\n            root-&gt;right=make_tree(root-&gt;right,num);\n        } else {\n            root-&gt;left=make_tree(root-&gt;left,num);\n        }\n    }\n    return root;\n}\n\nint main()\n{\n    int n;\n    scanf(&quot;%d&quot;,&amp;n);\n    int i;\n    node *root=NULL;\n    int num;\n    for(i=0;i&lt;n;i++) {\n        scanf(&quot;%d&quot;,&amp;num);\n        root=make_tree(root,num);\n    }\n    int max=0;\n    diameter(root,&amp;max);\n    printf(&quot;%d\\n&quot;,max);\n    return 0;\n}\n\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-9742">\r\n        <div id="dsq-comment-header-9742" class="dsq-comment-header">\r\n            <cite id="dsq-cite-9742">\r\n                <span id="dsq-author-user-9742">Aj</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-9742" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-9742" class="dsq-comment-message"><p>Quick question,<br />\n  why do we even calculate diameter of left and right subtrees? Wouldn&#8217;t the height of the left and right subtrees suffice? I ran the algorithm on the second example and in every step, the diameter of left/right st never won the max predicate.</p>\n<p>Any helpful insight(s) most welcome!</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-9228">\r\n        <div id="dsq-comment-header-9228" class="dsq-comment-header">\r\n            <cite id="dsq-cite-9228">\r\n                <span id="dsq-author-user-9228">harsh jain</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-9228" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-9228" class="dsq-comment-message"><pre> <code language="C">\n\nproblem can be easily solved if we take a global variable and \nuse a same function to calculate the height with little modification here is code\n\n#include&lt;cstdio&gt;\n#include&lt;cstdlib&gt;\n\n\n\nstruct node {\n       int data;\n       node *left;\n       node *right;\n};\n\nint m;\nint max( int  a , int b )\n{\n    if( a &gt; b )\n        return a;\n    else\n        return b;\n}\nvoid insert( struct node **x , int n ) {\n     if ( *x == NULL ) {\n          *x = ( struct node*)malloc( sizeof( struct node ) );\n          (*x)-&gt;data = n;\n          (*x)-&gt;left = NULL;\n          (*x)-&gt;right = NULL;\n     } else {\n            if( (*x)-&gt;data &gt; n ) {\n                insert( &amp;(*x)-&gt;left , n );\n            } else {\n                insert( &amp;(*x)-&gt;right , n );\n            }\n     }\n}\n\nint hight( struct node *x ) \n{\n    \n     int p;\n     if( x == NULL )\n        return 0;\n    \n     int l , r;\n     l = hight( x-&gt;left );\n     r = hight( x-&gt;right );\n     p = l + r + 1;\n    if( p &gt; m )\n        m = p;\n    \n    \n    return ( max( l , r ) + 1 );\n    \n}\n\nvoid print( struct node *x )\n{\n     if( x == NULL )\n         return;\n         \n     print( x-&gt;left );\n     \n     printf(&quot;%d\\n&quot; , x-&gt;data );\n     \n     print( x-&gt;right );\n}\nint main()\n{\n    struct node *root;\n    \n    root = NULL;\n    \n    \n    m = 0;\n    int t , k , i;\n    scanf(&quot;%d&quot; , &amp;t );\n    for (  i = 0; i &lt; t; i++  ) {\n        scanf(&quot;%d&quot; , &amp;k );\n        insert( &amp;root , k );\n    }\n    \n    hight( root );\n    printf(&quot;%d&quot; , m );\n    \n    return 0;\n}\n\n\n\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-9203">\r\n        <div id="dsq-comment-header-9203" class="dsq-comment-header">\r\n            <cite id="dsq-cite-9203">\r\n                <span id="dsq-author-user-9203">MV</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-9203" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-9203" class="dsq-comment-message"><pre> <code language="C">\nint mx=0;\nstruct node *res=NULL;\n\nint diameter(struct node *nd)\n{\n\tif(nd==NULL) \treturn 0;\n\tint ld=diameter(nd-&gt;l);\n\tint rd=diameter(nd-&gt;r);\n\tif(mx &lt; ld+rd+1)\n\t{\n\t\tres=nd;\n\t\tmx=ld+rd+1;\n\t}\nreturn ld&gt;rd?ld+1:rd+1;\n}\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-9023">\r\n        <div id="dsq-comment-header-9023" class="dsq-comment-header">\r\n            <cite id="dsq-cite-9023">\r\n                <span id="dsq-author-user-9023">Sam</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-9023" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-9023" class="dsq-comment-message"><p>in the optimized version shouldn&#8217;t the return statement be </p>\n<p> return max(height, max(ldiameter, rdiameter)); </p>\n<p>instead of  return max(lh + rh + 1, max(ldiameter, rdiameter));</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-9026">\r\n        <div id="dsq-comment-header-9026" class="dsq-comment-header">\r\n            <cite id="dsq-cite-9026">\r\n                <span id="dsq-author-user-9026">Sam</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-9026" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-9026" class="dsq-comment-message"><p>not height&#8230;but I am not really sure why height is computed in this function&#8230;</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt depth-2" id="dsq-comment-9027">\r\n        <div id="dsq-comment-header-9027" class="dsq-comment-header">\r\n            <cite id="dsq-cite-9027">\r\n                <span id="dsq-author-user-9027">sam</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-9027" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-9027" class="dsq-comment-message"><p>it should not be replaced with height&#8230;but i am not sure why height is used&#8230;.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-8745">\r\n        <div id="dsq-comment-header-8745" class="dsq-comment-header">\r\n            <cite id="dsq-cite-8745">\r\n                <span id="dsq-author-user-8745">sachin</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-8745" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-8745" class="dsq-comment-message"><p>Can somebody tell me how to find the nodes which are farthest?</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-atul007 odd alt thread-odd thread-alt depth-1" id="dsq-comment-7906">\r\n        <div id="dsq-comment-header-7906" class="dsq-comment-header">\r\n            <cite id="dsq-cite-7906">\r\n                <span id="dsq-author-user-7906">atul007</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-7906" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-7906" class="dsq-comment-message"><p>in optimized version , i didnt get what is the use of last return<br />\ncomparison i.e max(ldiameter, rdiameter)</p>\n<p>replacing return max(lh + rh + 1, max(ldiameter, rdiameter));<br />\nwith below will give correct ouput<br />\nreturn lh + rh + 1;</p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-atul007 even depth-2" id="dsq-comment-7907">\r\n        <div id="dsq-comment-header-7907" class="dsq-comment-header">\r\n            <cite id="dsq-cite-7907">\r\n                <span id="dsq-author-user-7907">atul007</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-7907" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-7907" class="dsq-comment-message"><p>ok it wont work!!</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment byuser comment-author-cracker odd alt thread-even depth-1" id="dsq-comment-7768">\r\n        <div id="dsq-comment-header-7768" class="dsq-comment-header">\r\n            <cite id="dsq-cite-7768">\r\nhttp://algods-cracker.blogspot.com/                <span id="dsq-author-user-7768">Cracker</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-7768" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-7768" class="dsq-comment-message"><p><a href="http://algods-cracker.blogspot.in/2012/03/microsoft-question-find-diameter-of.html" rel="nofollow">http://algods-cracker.blogspot.in/2012/03/microsoft-question-find-diameter-of.html</a></p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-pphanireddy even thread-odd thread-alt depth-1" id="dsq-comment-6652">\r\n        <div id="dsq-comment-header-6652" class="dsq-comment-header">\r\n            <cite id="dsq-cite-6652">\r\n                <span id="dsq-author-user-6652">pphanireddy</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-6652" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-6652" class="dsq-comment-message"><p>    /****************************************************************************<br />\n     * Calculate the diameter of the Binary tree<br />\n     ****************************************************************************/<br />\n    public int getDiameter() {<br />\n\tint[] diameter = new int[1];<br />\n\tgetDiameter(root, diameter);<br />\n\treturn diameter[0];<br />\n    }</p>\n<p>    private int getDiameter(Node currNode, int[] diameter) {<br />\n\tif(currNode.left == null &amp;&amp; currNode.right == null) {<br />\n\t    return 0;<br />\n\t}</p>\n<p>\tint myHeight = 0;<br />\n\tint myDiameter = 0;<br />\n\tint maxHeight;<br />\n\tint leftHeight = -1, rightHeight = -1;</p>\n<p>\tif(currNode.left != null) {<br />\n\t    leftHeight = getDiameter(currNode.left, diameter);<br />\n\t    myDiameter = leftHeight + 1;<br />\n\t}<br />\n\tif(currNode.right != null) {<br />\n\t    rightHeight = getDiameter(currNode.right, diameter);<br />\n\t    myDiameter = rightHeight + 1;<br />\n\t} </p>\n<p>\tmaxHeight = Math.max(leftHeight, rightHeight);<br />\n\tif (maxHeight != -1) {<br />\n\t    myHeight =  maxHeight + 1;<br />\n\t}</p>\n<p>\tif(diameter[0] &lt; myDiameter) {<br />\n\t    diameter[0] = myDiameter;<br />\n\t}</p>\n<p>\treturn myHeight;<br />\n    }</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-6646">\r\n        <div id="dsq-comment-header-6646" class="dsq-comment-header">\r\n            <cite id="dsq-cite-6646">\r\n                <span id="dsq-author-user-6646">Hi</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-6646" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-6646" class="dsq-comment-message"><p>The most easy algo for this is:<br />\nDo a BFS from root.. then find out the node with the largest distance assigned(assuming each edge to be of length = 1) then Do a BFS from that node, the largest assigned node in this case is the Diameter of tree&#8230;.<br />\nLet me know if m incorrect!!</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-6365">\r\n        <div id="dsq-comment-header-6365" class="dsq-comment-header">\r\n            <cite id="dsq-cite-6365">\r\n                <span id="dsq-author-user-6365">mohit</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-6365" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-6365" class="dsq-comment-message"><pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\nint diameter_tree(Node n)\n{\n\tif(n==NULL) return 0;\n\t\n\tint l=0,r=0;\n\t\n\tl=diameter_tree(n-&gt;l);\n\tr=diameter_tree(n-&gt;r);\n\tif(l+r &gt; new_diameter) new_diameter=l+r+1;\n\treturn max(l,r)+1;\n}\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-6366">\r\n        <div id="dsq-comment-header-6366" class="dsq-comment-header">\r\n            <cite id="dsq-cite-6366">\r\n                <span id="dsq-author-user-6366">mohit</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-6366" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-6366" class="dsq-comment-message"><p>if condition should be :<br />\n if(l+r+1 &gt; new_diameter) new_diameter=l+r+1;</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even depth-2" id="dsq-comment-7082">\r\n        <div id="dsq-comment-header-7082" class="dsq-comment-header">\r\n            <cite id="dsq-cite-7082">\r\n                <span id="dsq-author-user-7082">geek</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-7082" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-7082" class="dsq-comment-message"><p>It wont work for the second tree diagram given on the top. It only works for tree diameter via root.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-4973">\r\n        <div id="dsq-comment-header-4973" class="dsq-comment-header">\r\n            <cite id="dsq-cite-4973">\r\n                <span id="dsq-author-user-4973">Karthick</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-4973" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-4973" class="dsq-comment-message"><p>Well, is the following algorithm correct for the given problem?</p>\n<p>//cur_max is a variable declared above the function</p>\n<pre> <code language="C">diameter(Node cur)\n{\n     if(cur==null)\n     {\n        return 0;\n      }\n      l=diameter(cur.left);\n      r=diameter(cur.right);\n      if(l+r+1&gt;cur_max&amp;&amp;l!=0&amp;r!=0)\n      {\n          cur_max=l+r+1;\n      }\n      return Math.max(l+r)+1;\n   }\n}</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-hackme even depth-2" id="dsq-comment-5763">\r\n        <div id="dsq-comment-header-5763" class="dsq-comment-header">\r\n            <cite id="dsq-cite-5763">\r\n                <span id="dsq-author-user-5763">Hackme</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-5763" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-5763" class="dsq-comment-message"><p>wrong!!<br />\nheights of left and right trees are added to get diameter.<br />\nNot diameters.<br />\ncheck it again.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt depth-2" id="dsq-comment-10173">\r\n        <div id="dsq-comment-header-10173" class="dsq-comment-header">\r\n            <cite id="dsq-cite-10173">\r\n                <span id="dsq-author-user-10173">atul</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-10173" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-10173" class="dsq-comment-message"><p>diameter(Node cur)<br />\n{<br />\n     if(cur==null)<br />\n     {<br />\n        return 0;<br />\n      }<br />\n      l=diameter(cur.left);<br />\n      r=diameter(cur.right);<br />\n      if(l+r+1&gt;cur_max)<br />\n      {<br />\n          cur_max=l+r+1;<br />\n      }<br />\n      return Math.max(l,r)+1;<br />\n   }<br />\n}<br />\nthis should work</p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-4718">\r\n        <div id="dsq-comment-header-4718" class="dsq-comment-header">\r\n            <cite id="dsq-cite-4718">\r\n                <span id="dsq-author-user-4718">k</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-4718" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-4718" class="dsq-comment-message"><pre> <code language="C">\r\n\r\nstruct node\r\n{\r\n    int value;\r\n    struct node * left;\r\n    struct node * right;\r\n};\r\n\r\nint func( struct node* root,int *diameter);\r\n\r\n\r\nint main()\r\n{\r\n   int depth_returned;\r\n   int dia=0;\r\n\r\n   struct node * A= (struct node*)malloc(sizeof(struct node ));\r\n   struct node * B= (struct node*)malloc(sizeof(struct node ));\r\n   struct node * C= (struct node*)malloc(sizeof(struct node ));\r\n   struct node * D= (struct node*)malloc(sizeof(struct node ));\r\n   struct node * E= (struct node*)malloc(sizeof(struct node ));\r\n   struct node * F= (struct node*)malloc(sizeof(struct node ));\r\n   struct node * G= (struct node*)malloc(sizeof(struct node ));\r\n   struct node * H= (struct node*)malloc(sizeof(struct node ));\r\n   struct node * I= (struct node*)malloc(sizeof(struct node ));\r\n\r\n\r\n   \r\n   I-&gt;value=9;\r\n   I-&gt;left=NULL;\r\n   I-&gt;right=NULL;\r\n   \r\n   H-&gt;value=8;\r\n   H-&gt;left=NULL;\r\n   H-&gt;right=NULL;\r\n   \r\n   G-&gt;value=7;\r\n   G-&gt;left=NULL;\r\n   G-&gt;right=H;\r\n\r\n   F-&gt;value=6;\r\n   F-&gt;left=NULL;\r\n   F-&gt;right=G;\r\n\r\n   E-&gt;value=5;\r\n   E-&gt;left=NULL;\r\n   E-&gt;right=NULL;\r\n   \r\n   D-&gt;value=4;\r\n   D-&gt;left=E;\r\n   D-&gt;right=NULL;\r\n   \r\n   C-&gt;value=3;\r\n   C-&gt;left=D;\r\n   C-&gt;right=NULL;\r\n\r\n   B-&gt;value=2;\r\n   B-&gt;left=C;\r\n   B-&gt;right=F;\r\n\r\n   A-&gt;value=1;\r\n   A-&gt;left=B;\r\n   A-&gt;right=I;\r\n\r\n   depth_returned=func(A,&amp;dia);\r\n\r\n   printf(&quot;The maximum  diameter observed is %d&quot;,dia);\r\n   \r\n   return 0;\r\n}\r\n\r\nint func( struct node* root,int *diameter)\r\n{ \r\n    int l=0;\r\n    int r=0;\r\n    int depth;\r\n    if(root-&gt;left==NULL &amp;&amp; root-&gt;right==NULL)\r\n        return 1;\r\n    if(root-&gt;left)\r\n        l=func(root-&gt;left,diameter);\r\n    *diameter=l;\r\n    if(root-&gt;right)\r\n        r=func(root-&gt;right,diameter);\r\n    \r\n    if(l&gt;r)\r\n        depth=l+1;\r\n    else \r\n        depth=r+1;\r\n    \r\n    if((*diameter)&lt;l+r)\r\n      *diameter=l+r;\r\n    return depth;\r\n}\r\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-4675">\r\n        <div id="dsq-comment-header-4675" class="dsq-comment-header">\r\n            <cite id="dsq-cite-4675">\r\n                <span id="dsq-author-user-4675">SymbolofSilence</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-4675" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-4675" class="dsq-comment-message"><p>There is one more way to do this <img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/images/smilies/simple-smile.png" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;" /> You can do DFS twice! <img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/images/smilies/simple-smile.png" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;" /> First, take an arbirary node in the tree and travel to the farthest point, and then from that farthest point, do a DFS again to find the longest path in the tree! \xf0\x9f\x98\x80</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-12718">\r\n        <div id="dsq-comment-header-12718" class="dsq-comment-header">\r\n            <cite id="dsq-cite-12718">\r\n                <span id="dsq-author-user-12718">sumit</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-12718" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-12718" class="dsq-comment-message"><p>can u please elaborate on your logic</p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt depth-2" id="dsq-comment-16436">\r\n        <div id="dsq-comment-header-16436" class="dsq-comment-header">\r\n            <cite id="dsq-cite-16436">\r\n                <span id="dsq-author-user-16436">rohit</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-16436" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-16436" class="dsq-comment-message"><p>it is not necessary that the arbitary node is included in final answer&#8230;.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-3911">\r\n        <div id="dsq-comment-header-3911" class="dsq-comment-header">\r\n            <cite id="dsq-cite-3911">\r\n                <span id="dsq-author-user-3911">Raja</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-3911" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-3911" class="dsq-comment-message"><p>I dont see any where in the code &#8220;height&#8221; variable is used except the below initialization.</p>\n<p>*height = 0;</p>\n<p>Please correct me if i&#8217;m wrong.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-3912">\r\n        <div id="dsq-comment-header-3912" class="dsq-comment-header">\r\n            <cite id="dsq-cite-3912">\r\n                <span id="dsq-author-user-3912">Raja</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-3912" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-3912" class="dsq-comment-message"><p>I mean, height is not used in any calculations.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-vineel567 even depth-2" id="dsq-comment-4243">\r\n        <div id="dsq-comment-header-4243" class="dsq-comment-header">\r\n            <cite id="dsq-cite-4243">\r\nhttp://vineelkumarreddy.blogspot.com                <span id="dsq-author-user-4243">Vineel Kumar Reddy</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-4243" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-4243" class="dsq-comment-message"><p>height is not a local variable of function diameterOpt. its a reference to a variable in the caller function. so when ever u modify *height =  u are passing the height info to its caller variables lh or rh &#8230;..<br />\nhope u got it&#8230;</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-3691">\r\n        <div id="dsq-comment-header-3691" class="dsq-comment-header">\r\n            <cite id="dsq-cite-3691">\r\n                <span id="dsq-author-user-3691">reader1</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-3691" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-3691" class="dsq-comment-message"><p>This solution doesn&#8217;t work. </p>\n<p>Imagine if you have a BST in preorder {1,2,4,3,5}</p>\n<pre>\r\n 1\r\n  \\\r\n   2\r\n    \\\r\n     4\r\n    / \\\r\n   3   5\r\n</pre>\n<p>The algorithm gives 4 but the correct answer would be 3.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-vineel567 even depth-2" id="dsq-comment-4242">\r\n        <div id="dsq-comment-header-4242" class="dsq-comment-header">\r\n            <cite id="dsq-cite-4242">\r\nhttp://vineelkumarreddy.blogspot.com                <span id="dsq-author-user-4242">Vineel Kumar Reddy</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-4242" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-4242" class="dsq-comment-message"><p>boss the algo counts number of nodes in the path, not the path length itself&#8230;</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-3" id="dsq-comment-4253">\r\n        <div id="dsq-comment-header-4253" class="dsq-comment-header">\r\n            <cite id="dsq-cite-4253">\r\n                <span id="dsq-author-user-4253">reader1</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-4253" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-4253" class="dsq-comment-message"><p>According to the top of the webpage,</p>\n<p>Defn: The diameter of a tree (sometimes called the width) is the number of nodes on the longest path between two leaves in the tree. </p>\n<p>Between leaf &#8216;3&#8217; and leaf &#8216;5&#8217;, how many nodes are there on the longest path?</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-4" id="dsq-comment-4368">\r\n        <div id="dsq-comment-header-4368" class="dsq-comment-header">\r\n            <cite id="dsq-cite-4368">\r\n                <span id="dsq-author-user-4368">tyro</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-4368" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-4368" class="dsq-comment-message"><p>@reader1..Good one.<br />\nWe need to check at every stage that none of lh and rh should be zero. Only then it&#8217;ll be used in calculating<br />\nmax(lh+rh+1,max(rdiam,ldiam)).</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt depth-4" id="dsq-comment-12719">\r\n        <div id="dsq-comment-header-12719" class="dsq-comment-header">\r\n            <cite id="dsq-cite-12719">\r\n                <span id="dsq-author-user-12719">sumit</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-12719" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-12719" class="dsq-comment-message"><p>nyc catch</p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-898">\r\n        <div id="dsq-comment-header-898" class="dsq-comment-header">\r\n            <cite id="dsq-cite-898">\r\n                <span id="dsq-author-user-898">Himanshu Aggarwal</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-898" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-898" class="dsq-comment-message"><p>Hi,</p>\n<p>Is there any way be which I can use the above algorithm to find the diameter of an n-ary tree.</p>\n<p>Thanks and Regards,<br />\nHimanshu</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-nesamani1822 odd alt thread-even depth-1" id="dsq-comment-753">\r\n        <div id="dsq-comment-header-753" class="dsq-comment-header">\r\n            <cite id="dsq-cite-753">\r\n                <span id="dsq-author-user-753">nesamani1822</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-753" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-753" class="dsq-comment-message"><p>we can find the diameter of tree using the problem &#8220;print root to leaf..&#8221;</p>\n<p>Find the two highest length from the path and add those lengths and subtract with 1 to get diameter of tree with including the root node. if we subtract with 2 then we will get the diameter of tree without including the root node.</p>\n<pre>\r\nprintPathsRecur(tree, path[], pathlen)\r\n   1) If node is not NULL then\r\n         a) push data to path array:\r\n                path[pathlen] = node-&gt;data.\r\n         b) increment pathlen\r\n                pathlen++\r\n   2) If node is a leaf node then <strong>find the two highest lengths</strong>\r\n   3) Else\r\n        a) Call printPathsRecur for left subtree\r\n                 printPathsRecur(node-&gt;left, path, pathLen)\r\n        b) Call printPathsRecur for right subtree.\r\n                printPathsRecur(node-&gt;right, path, pathLen)\r\n</pre>\n<pre> <code language="C">\r\nint first=0;\r\nint second=0;\r\nvoid printPathsRecur(struct node* node, int path[], int pathLen)\r\n{\r\n  if (node==NULL) return;\r\n \r\n  /* append this node to the path array */\r\n  path[pathLen] = node-&gt;data;\r\n  pathLen++;\r\n \r\n  /* it\'s a leaf, so print the path that led to here */\r\n  if (node-&gt;left==NULL &amp;&amp; node-&gt;right==NULL)\r\n  {\r\n    printArray(pathLen);\r\n  }\r\n  else\r\n  {\r\n  /* otherwise try both subtrees */\r\n    printPathsRecur(node-&gt;left, path, pathLen);\r\n    printPathsRecur(node-&gt;right, path, pathLen);\r\n  }\r\n}\r\n \r\n\r\nvoid printArray(int len)\r\n{\r\n  if(len&gt;first)\r\n   {\r\n      second=first;\r\n      first=len\r\n   }\r\n  else if(len&gt;secon)\r\n   {\r\n      second=len;\r\n   }\r\n} \r\n//diameter of tree\r\ndiameter=first+second-1;\r\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-798">\r\n        <div id="dsq-comment-header-798" class="dsq-comment-header">\r\n            <cite id="dsq-cite-798">\r\n                <span id="dsq-author-user-798">Nithish</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-798" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-798" class="dsq-comment-message"><p>@nesamani: That is a cool efficient way to solve the problem.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-sandeep odd alt depth-3" id="dsq-comment-813">\r\n        <div id="dsq-comment-header-813" class="dsq-comment-header">\r\n            <cite id="dsq-cite-813">\r\n                <span id="dsq-author-user-813">Sandeep</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-813" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-813" class="dsq-comment-message"><p>@nesamani1822: The code doesn&#8217;t work for the cases where root is not in path of diameter, like second tree in the diagram given in post. Let me know if I am wrong.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-4" id="dsq-comment-2079">\r\n        <div id="dsq-comment-header-2079" class="dsq-comment-header">\r\n            <cite id="dsq-cite-2079">\r\n                <span id="dsq-author-user-2079">Abhijith K</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-2079" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-2079" class="dsq-comment-message"><p>@Sandeep You are right. The code doesn\xe2\x80\x99t work for the cases where root is not in path.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-5" id="dsq-comment-2200">\r\n        <div id="dsq-comment-header-2200" class="dsq-comment-header">\r\n            <cite id="dsq-cite-2200">\r\n                <span id="dsq-author-user-2200">gk_manutd</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-2200" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-2200" class="dsq-comment-message"><p>In the &#8220;optimized implementation&#8221; above:</p>\n<p>if you initialize left &amp; right as 0 everytime\xe2\x80\xa6 then max always returns 1, right?</p>\n<p>Shouldn\xe2\x80\x99t left &amp; right be initialized outside the function altogether?</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even depth-4" id="dsq-comment-4251">\r\n        <div id="dsq-comment-header-4251" class="dsq-comment-header">\r\n            <cite id="dsq-cite-4251">\r\n                <span id="dsq-author-user-4251">satya</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-4251" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-4251" class="dsq-comment-message"><p>@sandeep&#8230;can you guide how we can find the diameter of tree without recursion..?? i mean in O(N) without using recursion</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n            </ul>\r\n\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n<script type="text/javascript">\r\nvar disqus_url = \'http://www.geeksforgeeks.org/diameter-of-a-binary-tree/\';\r\nvar disqus_identifier = \'5687 http://geeksforgeeks.org/?p=5687\';\r\nvar disqus_container_id = \'disqus_thread\';\r\nvar disqus_shortname = \'geeksforgeeks\';\r\nvar disqus_title = "Diameter of a Binary Tree";\r\nvar disqus_config_custom = window.disqus_config;\r\nvar disqus_config = function () {\r\n    /*\r\n    All currently supported events:\r\n    onReady: fires when everything is ready,\r\n    onNewComment: fires when a new comment is posted,\r\n    onIdentify: fires when user is authenticated\r\n    */\r\n    \r\n    \r\n    this.language = \'\';\r\n    \r\n    if (disqus_config_custom) {\r\n        disqus_config_custom.call(this);\r\n    }\r\n};\r\n\r\n(function() {\r\n    var dsq = document.createElement(\'script\'); dsq.type = \'text/javascript\';\r\n    dsq.async = true;\r\n    dsq.src = \'//\' + disqus_shortname + \'.disqus.com/embed.js\';\r\n    (document.getElementsByTagName(\'head\')[0] || document.getElementsByTagName(\'body\')[0]).appendChild(dsq);\r\n})();\r\n</script>\r\n\r\n\r\n\t\t\t\r\n\t\t</div><!-- #content -->\r\n\t</div><!-- #primary -->\r\n\r\n\r\n\t\t\t<div id="secondary" class="widget-area" role="complementary">\r\n\t\t\t<aside id="text-9" class="widget widget_text">\t\t\t<div class="textwidget"><div id="fb-root"></div>\r\n<script>(function(d, s, id) {\r\n  var js, fjs = d.getElementsByTagName(s)[0];\r\n  if (d.getElementById(id)) return;\r\n  js = d.createElement(s); js.id = id;\r\n  js.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.3&appId=138031159685820";\r\n  fjs.parentNode.insertBefore(js, fjs);\r\n}(document, \'script\', \'facebook-jssdk\'));</script>\r\n\r\n<div class="fb-page" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="300" data-height="180" data-small-header="true" data-adapt-container-width="false" data-hide-cover="true" data-show-facepile="true" data-show-posts="false"><div class="fb-xfbml-parse-ignore"><blockquote cite="https://www.facebook.com/pages/GeeksforGeeks/316764689022"><a href="https://www.facebook.com/pages/GeeksforGeeks/316764689022">GeeksforGeeks</a></blockquote></div></div>\r\n</div>\n\t\t</aside><aside id="text-33" class="widget widget_text">\t\t\t<div class="textwidget"><a href="http://www.springpeople.com/gfg-landing">\r\n<img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/GfG-2.jpg" alt="SpringPeople Ad">\r\n</a>\r\n</div>\n\t\t</aside><aside id="text-14" class="widget widget_text"><p class="widget-title">Popular Posts</p>\t\t\t<div class="textwidget"><ul>\r\n<li><a href="http://www.geeksforgeeks.org/top-algorithms-and-data-structures-for-competitive-programming/">Top 10 Algorithms and Data Structures for Competitive Programming</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/top-10-algorithms-in-interview-questions/">Top 10 algorithms in Interview Questions</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/how-to-begin-with-competitive-programming/">How to begin with Competitive Programming?</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>\r\n<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>\r\n<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding \xe2\x80\x9cextern\xe2\x80\x9d keyword in C</a> </li>\r\n<li><a href="http://www.geeksforgeeks.org/heavy-light-decomposition-set-1-introduction/"> Heavy Light Decomposition</a> </li>\r\n<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>\r\n</ul></div>\n\t\t</aside><aside id="text-17" class="widget widget_text">\t\t\t<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<!-- Big 300x600 Sidebar -->\r\n<ins class="adsbygoogle"\r\n     style="display:inline-block;width:300px;height:600px"\r\n     data-ad-client="ca-pub-9465609616171866"\r\n     data-ad-slot="4402736037"></ins>\r\n<script>\r\n(adsbygoogle = window.adsbygoogle || []).push({});\r\n</script></div>\n\t\t</aside><aside id="text-32" class="widget widget_text">\t\t\t<div class="textwidget"><form style="border:1px solid #ccc;padding:3px;text-align:center;" action="https://feedburner.google.com/fb/a/mailverify" method="post" target="popupwindow" onsubmit="window.open(\'https://feedburner.google.com/fb/a/mailverify?uri=Geeksforgeeks\', \'popupwindow\', \'scrollbars=yes,width=550,height=520\');return true"><p>Subscribe and Never Miss an Article</p><input type="text" style="width:140px" placeholder="Email Address" name="email"/><input type="hidden" value="Geeksforgeeks" name="uri"/><input type="hidden" name="loc" value="en_US"/>&nbsp;&nbsp;<input type="submit" style="background-color: #4cb96b;" value="Subscribe" /></form></div>\n\t\t</aside><aside id="text-18" class="widget widget_text">\t\t\t<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<!-- LargeRectangleSide -->\r\n<ins class="adsbygoogle"\r\n     style="display:inline-block;width:336px;height:280px"\r\n     data-ad-client="ca-pub-9465609616171866"\r\n     data-ad-slot="1884636833"></ins>\r\n<script>\r\n(adsbygoogle = window.adsbygoogle || []).push({});\r\n</script></div>\n\t\t</aside><aside id="text-13" class="widget widget_text">\t\t\t<div class="textwidget"><ul><li><a href="http://geeksquiz.com/category/articles/puzzle/">Common Interview Puzzles</a></li><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/advanced-data-structure/">Advanced Data Structures</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/pattern-searching/">Pattern Searching</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li><li><a href="http://www.geeksforgeeks.org/category/searching/">Searching</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/sorting/">Sorting</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/Hash/">Hashing</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/algorithm/analysis/">Analysis of Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/algorithm/mathematical/">Mathematical Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/algorithm/randomized/">Randomized Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>\r\n</ul>\r\n\r\n\r\n\r\n\r\n</div>\n\t\t</aside><aside id="categories-384568212" class="widget widget_categories"><p class="widget-title">All Categories</p><label class="screen-reader-text" for="cat">All Categories</label><select name=\'cat\' id=\'cat\' class=\'postform\' >\n\t<option value=\'-1\'>Select Category</option>\n\t<option class="level-0" value="1762">Advanced Data Structure&nbsp;&nbsp;(69)</option>\n\t<option class="level-0" value="1744">Algorithm&nbsp;&nbsp;(403)</option>\n\t<option class="level-1" value="1745">&nbsp;&nbsp;&nbsp;Analysis&nbsp;&nbsp;(16)</option>\n\t<option class="level-1" value="1748">&nbsp;&nbsp;&nbsp;Backtracking&nbsp;&nbsp;(11)</option>\n\t<option class="level-1" value="1750">&nbsp;&nbsp;&nbsp;Divide and Conquer&nbsp;&nbsp;(29)</option>\n\t<option class="level-1" value="1746">&nbsp;&nbsp;&nbsp;Dynamic Programming&nbsp;&nbsp;(91)</option>\n\t<option class="level-1" value="1754">&nbsp;&nbsp;&nbsp;Geometric&nbsp;&nbsp;(14)</option>\n\t<option class="level-1" value="1747">&nbsp;&nbsp;&nbsp;Greedy&nbsp;&nbsp;(20)</option>\n\t<option class="level-1" value="1753">&nbsp;&nbsp;&nbsp;Mathematical&nbsp;&nbsp;(123)</option>\n\t<option class="level-1" value="1749">&nbsp;&nbsp;&nbsp;Pattern Searching&nbsp;&nbsp;(29)</option>\n\t<option class="level-1" value="1757">&nbsp;&nbsp;&nbsp;Randomized&nbsp;&nbsp;(19)</option>\n\t<option class="level-1" value="1751">&nbsp;&nbsp;&nbsp;Searching&nbsp;&nbsp;(43)</option>\n\t<option class="level-1" value="1752">&nbsp;&nbsp;&nbsp;Sorting&nbsp;&nbsp;(40)</option>\n\t<option class="level-0" value="3">Arrays&nbsp;&nbsp;(80)</option>\n\t<option class="level-0" value="18">Articles&nbsp;&nbsp;(25)</option>\n\t<option class="level-0" value="1761">Binary Search Tree&nbsp;&nbsp;(37)</option>\n\t<option class="level-0" value="17">Bit Magic&nbsp;&nbsp;(56)</option>\n\t<option class="level-0" value="14">C/C++ Puzzles&nbsp;&nbsp;(244)</option>\n\t<option class="level-0" value="1790">Competitive Programming&nbsp;&nbsp;(4)</option>\n\t<option class="level-0" value="1710">GBlog&nbsp;&nbsp;(55)</option>\n\t<option class="level-0" value="67">GFacts&nbsp;&nbsp;(43)</option>\n\t<option class="level-0" value="97">Graph&nbsp;&nbsp;(74)</option>\n\t<option class="level-0" value="1756">Hash&nbsp;&nbsp;(21)</option>\n\t<option class="level-0" value="1755">Heap&nbsp;&nbsp;(18)</option>\n\t<option class="level-0" value="1140">Interview Experiences&nbsp;&nbsp;(1,050)</option>\n\t<option class="level-0" value="87">Java&nbsp;&nbsp;(55)</option>\n\t<option class="level-0" value="8">Linked Lists&nbsp;&nbsp;(70)</option>\n\t<option class="level-0" value="1760">Matrix&nbsp;&nbsp;(39)</option>\n\t<option class="level-0" value="66">MCQ&nbsp;&nbsp;(95)</option>\n\t<option class="level-0" value="4">Misc&nbsp;&nbsp;(40)</option>\n\t<option class="level-0" value="5">Output&nbsp;&nbsp;(55)</option>\n\t<option class="level-0" value="1767">Project&nbsp;&nbsp;(21)</option>\n\t<option class="level-0" value="1789">Python&nbsp;&nbsp;(5)</option>\n\t<option class="level-0" value="1743">Queue&nbsp;&nbsp;(16)</option>\n\t<option class="level-0" value="1742">Stack&nbsp;&nbsp;(25)</option>\n\t<option class="level-0" value="7">Strings&nbsp;&nbsp;(61)</option>\n\t<option class="level-0" value="1788">Technical Scripter&nbsp;&nbsp;(13)</option>\n\t<option class="level-0" value="19">Trees&nbsp;&nbsp;(114)</option>\n</select>\n\n<script type=\'text/javascript\'>\n/* <![CDATA[ */\n(function() {\n\tvar dropdown = document.getElementById( "cat" );\n\tfunction onCatChange() {\n\t\tif ( dropdown.options[ dropdown.selectedIndex ].value > 0 ) {\n\t\t\tlocation.href = "http://www.geeksforgeeks.org/?cat=" + dropdown.options[ dropdown.selectedIndex ].value;\n\t\t}\n\t}\n\tdropdown.onchange = onCatChange;\n})();\n/* ]]> */\n</script>\n\n</aside><aside id="text-21" class="widget widget_text"><p class="widget-title">Recent Comments</p>\t\t\t<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>\n\t\t</aside><aside id="tag_cloud-3" class="widget widget_tag_cloud"><p class="widget-title">Tags</p><div class="tagcloud"><a href=\'http://www.geeksforgeeks.org/tag/adobe/\' class=\'tag-link-148\' title=\'32 topics\' style=\'font-size: 12.941176470588pt;\'>Adobe</a>\n<a href=\'http://www.geeksforgeeks.org/tag/advance-data-structures/\' class=\'tag-link-152\' title=\'31 topics\' style=\'font-size: 12.838235294118pt;\'>Advance Data Structures</a>\n<a href=\'http://www.geeksforgeeks.org/tag/advanced-data-structures/\' class=\'tag-link-150\' title=\'38 topics\' style=\'font-size: 13.661764705882pt;\'>Advanced Data Structures</a>\n<a href=\'http://www.geeksforgeeks.org/tag/amazon/\' class=\'tag-link-141\' title=\'253 topics\' style=\'font-size: 22pt;\'>Amazon</a>\n<a href=\'http://www.geeksforgeeks.org/tag/array/\' class=\'tag-link-68\' title=\'12 topics\' style=\'font-size: 8.7205882352941pt;\'>array</a>\n<a href=\'http://www.geeksforgeeks.org/tag/backtracking/\' class=\'tag-link-112\' title=\'11 topics\' style=\'font-size: 8.4117647058824pt;\'>Backtracking</a>\n<a href=\'http://www.geeksforgeeks.org/tag/bharti-softbank-hike/\' class=\'tag-link-1214\' title=\'10 topics\' style=\'font-size: 8pt;\'>Bharti SoftBank (HIKE)</a>\n<a href=\'http://www.geeksforgeeks.org/tag/bit-magic/\' class=\'tag-link-17\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>Bit Magic</a>\n<a href=\'http://www.geeksforgeeks.org/tag/c/\' class=\'tag-link-86\' title=\'18 topics\' style=\'font-size: 10.470588235294pt;\'>C++</a>\n<a href=\'http://www.geeksforgeeks.org/tag/cn/\' class=\'tag-link-142\' title=\'12 topics\' style=\'font-size: 8.7205882352941pt;\'>CN</a>\n<a href=\'http://www.geeksforgeeks.org/tag/c-puzzle/\' class=\'tag-link-69\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>c puzzle</a>\n<a href=\'http://www.geeksforgeeks.org/tag/d-e-shaw/\' class=\'tag-link-823\' title=\'17 topics\' style=\'font-size: 10.264705882353pt;\'>D-E-Shaw</a>\n<a href=\'http://www.geeksforgeeks.org/tag/dbms/\' class=\'tag-link-139\' title=\'11 topics\' style=\'font-size: 8.4117647058824pt;\'>DBMS</a>\n<a href=\'http://www.geeksforgeeks.org/tag/divide-and-conquer/\' class=\'tag-link-113\' title=\'27 topics\' style=\'font-size: 12.220588235294pt;\'>Divide and Conquer</a>\n<a href=\'http://www.geeksforgeeks.org/tag/dynamic-programming/\' class=\'tag-link-111\' title=\'83 topics\' style=\'font-size: 17.058823529412pt;\'>Dynamic Programming</a>\n<a href=\'http://www.geeksforgeeks.org/tag/flipkart/\' class=\'tag-link-173\' title=\'46 topics\' style=\'font-size: 14.485294117647pt;\'>Flipkart</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate/\' class=\'tag-link-114\' title=\'88 topics\' style=\'font-size: 17.367647058824pt;\'>GATE</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-2012/\' class=\'tag-link-133\' title=\'10 topics\' style=\'font-size: 8pt;\'>GATE-CS-2012</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-c-language/\' class=\'tag-link-72\' title=\'10 topics\' style=\'font-size: 8pt;\'>GATE-CS-C-Language</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-ds-algo/\' class=\'tag-link-79\' title=\'35 topics\' style=\'font-size: 13.352941176471pt;\'>GATE-CS-DS-&amp;-Algo</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-older/\' class=\'tag-link-145\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>GATE-CS-Older</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gfact/\' class=\'tag-link-67\' title=\'20 topics\' style=\'font-size: 10.882352941176pt;\'>GFacts</a>\n<a href=\'http://www.geeksforgeeks.org/tag/goldman-sachs/\' class=\'tag-link-590\' title=\'20 topics\' style=\'font-size: 10.882352941176pt;\'>Goldman Sachs</a>\n<a href=\'http://www.geeksforgeeks.org/tag/google/\' class=\'tag-link-155\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>Google</a>\n<a href=\'http://www.geeksforgeeks.org/tag/graph/\' class=\'tag-link-97\' title=\'45 topics\' style=\'font-size: 14.382352941176pt;\'>Graph</a>\n<a href=\'http://www.geeksforgeeks.org/tag/greedy-algorithm/\' class=\'tag-link-159\' title=\'20 topics\' style=\'font-size: 10.882352941176pt;\'>Greedy Algorithm</a>\n<a href=\'http://www.geeksforgeeks.org/tag/hashing/\' class=\'tag-link-250\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>Hashing</a>\n<a href=\'http://www.geeksforgeeks.org/tag/interview-experience/\' class=\'tag-link-126\' title=\'216 topics\' style=\'font-size: 21.382352941176pt;\'>Interview Experience</a>\n<a href=\'http://www.geeksforgeeks.org/tag/java/\' class=\'tag-link-87\' title=\'61 topics\' style=\'font-size: 15.720588235294pt;\'>Java</a>\n<a href=\'http://www.geeksforgeeks.org/tag/maq-software/\' class=\'tag-link-1392\' title=\'11 topics\' style=\'font-size: 8.4117647058824pt;\'>MAQ Software</a>\n<a href=\'http://www.geeksforgeeks.org/tag/mathematicalalgo/\' class=\'tag-link-154\' title=\'73 topics\' style=\'font-size: 16.544117647059pt;\'>MathematicalAlgo</a>\n<a href=\'http://www.geeksforgeeks.org/tag/matrix/\' class=\'tag-link-211\' title=\'21 topics\' style=\'font-size: 11.088235294118pt;\'>Matrix</a>\n<a href=\'http://www.geeksforgeeks.org/tag/microsoft/\' class=\'tag-link-104\' title=\'95 topics\' style=\'font-size: 17.676470588235pt;\'>Microsoft</a>\n<a href=\'http://www.geeksforgeeks.org/tag/morgan-stanley/\' class=\'tag-link-167\' title=\'17 topics\' style=\'font-size: 10.264705882353pt;\'>Morgan Stanley</a>\n<a href=\'http://www.geeksforgeeks.org/tag/operating-systems/\' class=\'tag-link-110\' title=\'19 topics\' style=\'font-size: 10.676470588235pt;\'>Operating systems</a>\n<a href=\'http://www.geeksforgeeks.org/tag/oracle/\' class=\'tag-link-171\' title=\'24 topics\' style=\'font-size: 11.705882352941pt;\'>Oracle</a>\n<a href=\'http://www.geeksforgeeks.org/tag/pattern-searching/\' class=\'tag-link-107\' title=\'26 topics\' style=\'font-size: 12.014705882353pt;\'>Pattern Searching</a>\n<a href=\'http://www.geeksforgeeks.org/tag/puzzle/\' class=\'tag-link-70\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>puzzle</a>\n<a href=\'http://www.geeksforgeeks.org/tag/python/\' class=\'tag-link-1770\' title=\'21 topics\' style=\'font-size: 11.088235294118pt;\'>Python</a>\n<a href=\'http://www.geeksforgeeks.org/tag/recursion/\' class=\'tag-link-85\' title=\'21 topics\' style=\'font-size: 11.088235294118pt;\'>Recursion</a>\n<a href=\'http://www.geeksforgeeks.org/tag/samsung/\' class=\'tag-link-180\' title=\'12 topics\' style=\'font-size: 8.7205882352941pt;\'>Samsung</a>\n<a href=\'http://www.geeksforgeeks.org/tag/sap-labs/\' class=\'tag-link-1414\' title=\'23 topics\' style=\'font-size: 11.5pt;\'>SAP Labs</a>\n<a href=\'http://www.geeksforgeeks.org/tag/snapdeal/\' class=\'tag-link-1246\' title=\'16 topics\' style=\'font-size: 9.9558823529412pt;\'>SnapDeal</a>\n<a href=\'http://www.geeksforgeeks.org/tag/stack/\' class=\'tag-link-94\' title=\'17 topics\' style=\'font-size: 10.264705882353pt;\'>stack</a>\n<a href=\'http://www.geeksforgeeks.org/tag/stack-queue/\' class=\'tag-link-899\' title=\'12 topics\' style=\'font-size: 8.7205882352941pt;\'>Stack-Queue</a></div>\n</aside><aside id="text-25" class="widget widget_text">\t\t\t<div class="textwidget"><ul>\r\n<li><h2><a href="http://geeksquiz.com/">GeeksQuiz</a></h2></li>\r\n\r\n<li><h2><a href="http://code.geeksforgeeks.org/">GeeksforGeeksIDE</a></h2></li>\r\n\r\n<li><h2><a href="http://www.practice.geeksforgeeks.org/">GeeksforGeeks Practice</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/data-structures/">Data Structures</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/c/">C Programming</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++ Programming</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/java/">Java Programming</a></h2></li>\r\n\r\n<li><h2><a href="http://geeksquiz.com/books/">Books</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Experiences</a></h2></li>\r\n\r\n<li><h2><a href="http://geeksquiz.com/gate-corner-2/">GATE CS</a></h2></li>\r\n\r\n<li><h2><a href="http://www.gatecs.geeksquiz.com">GATE CS Forum</a></h2></li>\r\n\r\n<li><h2><a href="https://play.google.com/store/apps/details?id=free.programming.programming">Android App</a></h2></li>\r\n</ul>\r\n\r\n</div>\n\t\t</aside>\t\t</div><!-- #secondary -->\r\n\t\t</div><!-- #main .wrapper -->\r\n\t<footer id="colophon" role="contentinfo">\r\n\t\t<div class="site-info">\r\n\t\t<div class="clear"></div>\r\n\t\t</div><!-- .site-info -->\r\n\t\t</footer><!-- #colophon -->\r\n<center>\r\n<div class="iconic-footer">\r\n\r\n@geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>  <a href="http://www.geeksforgeeks.org/about/"> &nbsp; &nbsp; &nbsp; &nbsp;About Us!&nbsp; &nbsp; &nbsp; &nbsp;</a><a href="http://www.geeksforgeeks.org/new/ad.htm"> &nbsp; &nbsp; &nbsp; &nbsp;Advertise with us!&nbsp; &nbsp; &nbsp; &nbsp;</a>\r\n\r\n      \t\t\t</div></center><!-- .site-info -->\r\n\r\n\t\t\t\t<div class="clear"></div>\r\n</div><!-- #page -->\r\n\r\n        <script type="text/javascript">\r\n        // <![CDATA[\r\n        var disqus_shortname = \'geeksforgeeks\';\r\n        (function () {\r\n            var nodes = document.getElementsByTagName(\'span\');\r\n            for (var i = 0, url; i < nodes.length; i++) {\r\n                if (nodes[i].className.indexOf(\'dsq-postid\') != -1) {\r\n                    nodes[i].parentNode.setAttribute(\'data-disqus-identifier\', nodes[i].getAttribute(\'data-dsqidentifier\'));\r\n                    url = nodes[i].parentNode.href.split(\'#\', 1);\r\n                    if (url.length == 1) { url = url[0]; }\r\n                    else { url = url[1]; }\r\n                    nodes[i].parentNode.href = url + \'#disqus_thread\';\r\n                }\r\n            }\r\n            var s = document.createElement(\'script\'); \r\n            s.async = true;\r\n            s.type = \'text/javascript\';\r\n            s.src = \'//\' + disqus_shortname + \'.disqus.com/count.js\';\r\n            (document.getElementsByTagName(\'HEAD\')[0] || document.getElementsByTagName(\'BODY\')[0]).appendChild(s);\r\n        }());\r\n        // ]]>\r\n        </script>\r\n        <script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushJava.js\'></script>\n<script type=\'text/javascript\'>\n\t(function(){\n\t\tvar corecss = document.createElement(\'link\');\n\t\tvar themecss = document.createElement(\'link\');\n\t\tvar corecssurl = "http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9b";\r\n\t\tif ( corecss.setAttribute ) {\r\n\t\t\t\tcorecss.setAttribute( "rel", "stylesheet" );\r\n\t\t\t\tcorecss.setAttribute( "type", "text/css" );\r\n\t\t\t\tcorecss.setAttribute( "href", corecssurl );\r\n\t\t} else {\r\n\t\t\t\tcorecss.rel = "stylesheet";\r\n\t\t\t\tcorecss.href = corecssurl;\r\n\t\t}\r\n\t\tdocument.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );\r\n\t\tvar themecssurl = "http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9b";\r\n\t\tif ( themecss.setAttribute ) {\r\n\t\t\t\tthemecss.setAttribute( "rel", "stylesheet" );\r\n\t\t\t\tthemecss.setAttribute( "type", "text/css" );\r\n\t\t\t\tthemecss.setAttribute( "href", themecssurl );\r\n\t\t} else {\r\n\t\t\t\tthemecss.rel = "stylesheet";\r\n\t\t\t\tthemecss.href = themecssurl;\r\n\t\t}\r\n\t\t//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);\r\n\t\tdocument.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );\r\n\t})();\n\tSyntaxHighlighter.config.strings.expandSource = \'+ expand source\';\n\tSyntaxHighlighter.config.strings.help = \'?\';\n\tSyntaxHighlighter.config.strings.alert = \'SyntaxHighlighter\\n\\n\';\n\tSyntaxHighlighter.config.strings.noBrush = \'Can\\\'t find brush for: \';\n\tSyntaxHighlighter.config.strings.brushNotHtmlScript = \'Brush wasn\\\'t configured for html-script option: \';\n\tSyntaxHighlighter.defaults[\'gutter\'] = false;\n\tSyntaxHighlighter.defaults[\'pad-line-numbers\'] = true;\n\tSyntaxHighlighter.defaults[\'toolbar\'] = false;\n\tSyntaxHighlighter.all();\r\n</script>\r\n<link rel=\'stylesheet\' id=\'tabby-print-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/tabby-responsive-tabs/css/tabby-print.css\' type=\'text/css\' media=\'all\' />\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/js/comment-reply.min.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/js/selectnav.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/js/jquery/jquery.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/js/jquery/jquery-migrate.min.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/tabby-responsive-tabs/js/tabby.js\'></script>\n\n<script>jQuery(document).ready(function($) { RESPONSIVEUI.responsiveTabs(); })</script>\n\r\n\r\n<script type="text/javascript">\r\n\r\n  var _gaq = _gaq || [];\r\n  _gaq.push([\'_setAccount\', \'UA-12148232-1\']);\r\n  _gaq.push([\'_trackPageview\']);\r\n\r\n  (function() {\r\n    var ga = document.createElement(\'script\'); ga.type = \'text/javascript\'; ga.async = true;\r\n    ga.src = (\'https:\' == document.location.protocol ? \'https://ssl\' : \'http://www\') + \'.google-analytics.com/ga.js\';\r\n    var s = document.getElementsByTagName(\'script\')[0]; s.parentNode.insertBefore(ga, s);\r\n  })();\r\n\r\n</script>  \r\n<script async type="text/javascript" src="//cdn.fancybar.net/ac/fancybar.js?zoneid=1502&serve=C6ADVKE&placement=geeksforgeeks" id="_fancybar_js"></script>\r\n</body>\r\n</html>\n<!-- Dynamic page generated in 0.393 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2016-02-29 07:28:34 -->\n\n<!-- Compression = gzip -->\n<!-- super cache -->'
p220
sb.