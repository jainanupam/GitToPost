ccopy_reg
_reconstructor
p0
(cpost
Post
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'post_file'
p6
S'/Users/anupamjain/code/gitRepo/GitToPost/posts/Java/PatternSearchingUsingSuffixTree'
p7
sS'files_covered'
p8
c__builtin__
set
p9
((lp10
S'/Users/anupamjain/code/gitRepo/Questions/Algo/Java/PatternSearchingUsingSuffixTree.java'
p11
atp12
Rp13
sS'title'
p14
VPattern Searching using a Trie of all Suffixes
p15
sS'file_name'
p16
g11
sS'link'
p17
S'http://www.geeksforgeeks.org/pattern-searching-using-trie-suffixes/'
p18
sS'host_name'
p19
S'www.geeksforgeeks.org'
p20
sS'problem_text'
p21
g0
(cbs4.element
Tag
p22
g2
Ntp23
Rp24
(dp25
S'can_be_empty_element'
p26
I00
sS'previous_element'
p27
NsS'next_sibling'
p28
NsS'name'
p29
S'p'
p30
sS'parent'
p31
NsS'namespace'
p32
NsS'prefix'
p33
NsS'previous_sibling'
p34
NsS'attrs'
p35
(dp36
sS'next_element'
p37
g0
(g22
g2
Ntp38
Rp39
(dp40
g26
I00
sg27
g24
sg28
g0
(g22
g2
Ntp41
Rp42
(dp43
g26
I00
sg27
g0
(g22
g2
Ntp44
Rp45
(dp46
g26
I00
sg27
g0
(cbs4.element
NavigableString
p47
c__builtin__
unicode
p48
VProblem Statement: Given a text txt[0..n-1] and a pattern pat[0..m-1], write a function search(char pat[], char txt[]) that prints all occurrences of pat[] in txt[]. You may assume that n > m.
p49
tp50
Rp51
(dp52
g34
Nsg27
g39
sg28
g45
sg37
g45
sg31
g39
sbsg28
Nsg29
Vspan
p53
sg31
g39
sg32
Nsg33
Nsg34
g51
sg35
(dp54
Vid
p55
Vmore-131035
p56
ssg37
g42
sS'parser_class'
p57
cbs4
BeautifulSoup
p58
sS'hidden'
p59
I00
sS'contents'
p60
(lp61
sbsg28
g0
(g22
g2
Ntp62
Rp63
(dp64
g26
I00
sg27
g0
(g47
g48
V, we discussed that there are two ways efficiently solve the above problem.
p65
tp66
Rp67
(dp68
g34
g0
(g22
g2
Ntp69
Rp70
(dp71
g26
I00
sg27
g0
(g47
g48
VAs discussed in the  
p72
tp73
Rp74
(dp75
g34
Nsg27
g42
sg28
g70
sg37
g70
sg31
g42
sbsg28
g67
sg29
Va
p76
sg31
g42
sg32
Nsg33
Nsg34
g74
sg35
(dp77
Vhref
p78
Vhttp://www.geeksforgeeks.org/pattern-searching-set-8-suffix-tree-introduction/
p79
sVtarget
p80
V_blank
p81
ssg37
g0
(g47
g48
Vprevious post
p82
tp83
Rp84
(dp85
g34
Nsg27
g70
sg28
Nsg37
g67
sg31
g70
sbsg57
g58
sg59
I00
sg60
(lp86
g84
asbsg27
g84
sg28
Nsg37
g63
sg31
g42
sbsg28
g0
(g22
g2
Ntp87
Rp88
(dp89
g26
I00
sg27
g0
(g47
g48
V.  
p90
tp91
Rp92
(dp93
g34
g0
(g22
g2
Ntp94
Rp95
(dp96
g26
I00
sg27
g0
(g47
g48
V, 
p97
tp98
Rp99
(dp100
g34
g0
(g22
g2
Ntp101
Rp102
(dp103
g26
I00
sg27
g0
(g47
g48
V, 
p104
tp105
Rp106
(dp107
g34
g0
(g22
g2
Ntp108
Rp109
(dp110
g26
I00
sg27
g0
(g47
g48
V,  
p111
tp112
Rp113
(dp114
g34
g0
(g22
g2
Ntp115
Rp116
(dp117
g26
I00
sg27
g0
(g47
g48
V Preprocess Pattern:  
p118
tp119
Rp120
(dp121
g34
g0
(g22
g2
Ntp122
Rp123
(dp124
g26
I00
sg27
g63
sg28
g120
sg29
Vstrong
p125
sg31
g63
sg32
Nsg33
Nsg34
Nsg35
(dp126
sg37
g0
(g47
g48
V1)
p127
tp128
Rp129
(dp130
g34
Nsg27
g123
sg28
Nsg37
g120
sg31
g123
sbsg57
g58
sg59
I00
sg60
(lp131
g129
asbsg27
g129
sg28
g116
sg37
g116
sg31
g63
sbsg28
g113
sg29
g76
sg31
g63
sg32
Nsg33
Nsg34
g120
sg35
(dp132
Vhref
p133
Vhttp://www.geeksforgeeks.org/searching-for-patterns-set-2-kmp-algorithm/
p134
sVtarget
p135
V_blank
p136
ssg37
g0
(g47
g48
VKMP Algorithm
p137
tp138
Rp139
(dp140
g34
Nsg27
g116
sg28
Nsg37
g113
sg31
g116
sbsg57
g58
sg59
I00
sg60
(lp141
g139
asbsg27
g139
sg28
g109
sg37
g109
sg31
g63
sbsg28
g106
sg29
g76
sg31
g63
sg32
Nsg33
Nsg34
g113
sg35
(dp142
Vhref
p143
Vhttp://www.geeksforgeeks.org/searching-for-patterns-set-3-rabin-karp-algorithm/
p144
sVtarget
p145
V_blank
p146
ssg37
g0
(g47
g48
VRabin Karp Algorithm
p147
tp148
Rp149
(dp150
g34
Nsg27
g109
sg28
Nsg37
g106
sg31
g109
sbsg57
g58
sg59
I00
sg60
(lp151
g149
asbsg27
g149
sg28
g102
sg37
g102
sg31
g63
sbsg28
g99
sg29
g76
sg31
g63
sg32
Nsg33
Nsg34
g106
sg35
(dp152
Vhref
p153
Vhttp://www.geeksforgeeks.org/searching-for-patterns-set-5-finite-automata/
p154
sVtarget
p155
V_blank
p156
ssg37
g0
(g47
g48
VFinite Automata
p157
tp158
Rp159
(dp160
g34
Nsg27
g102
sg28
Nsg37
g99
sg31
g102
sbsg57
g58
sg59
I00
sg60
(lp161
g159
asbsg27
g159
sg28
g95
sg37
g95
sg31
g63
sbsg28
g92
sg29
g76
sg31
g63
sg32
Nsg33
Nsg34
g99
sg35
(dp162
Vhref
p163
Vhttp://www.geeksforgeeks.org/pattern-searching-set-7-boyer-moore-algorithm-bad-character-heuristic/
p164
sVtarget
p165
V_blank
p166
ssg37
g0
(g47
g48
VBoyer Moore Algorithm
p167
tp168
Rp169
(dp170
g34
Nsg27
g95
sg28
Nsg37
g92
sg31
g95
sbsg57
g58
sg59
I00
sg60
(lp171
g169
asbsg27
g169
sg28
Nsg37
g88
sg31
g63
sbsg28
g0
(g22
g2
Ntp172
Rp173
(dp174
g26
I00
sg27
g0
(g47
g48
VSuffix Tree
p175
tp176
Rp177
(dp178
g34
Nsg27
g0
(g22
g2
Ntp179
Rp180
(dp181
g26
I00
sg27
g0
(g47
g48
V Preoprocess Text: 
p182
tp183
Rp184
(dp185
g34
g0
(g22
g2
Ntp186
Rp187
(dp188
g26
I00
sg27
g88
sg28
g184
sg29
Vstrong
p189
sg31
g88
sg32
Nsg33
Nsg34
Nsg35
(dp190
sg37
g0
(g47
g48
V2)
p191
tp192
Rp193
(dp194
g34
Nsg27
g187
sg28
Nsg37
g184
sg31
g187
sbsg57
g58
sg59
I00
sg60
(lp195
g193
asbsg27
g193
sg28
g180
sg37
g180
sg31
g88
sbsg28
Nsg29
g76
sg31
g88
sg32
Nsg33
Nsg34
g184
sg35
(dp196
Vhref
p197
Vhttp://www.geeksforgeeks.org/pattern-searching-set-8-suffix-tree-introduction/
p198
sVtarget
p199
V_blank
p200
ssg37
g177
sg57
g58
sg59
I00
sg60
(lp201
g177
asbsg28
Nsg37
g173
sg31
g180
sbsg28
g0
(g22
g2
Ntp202
Rp203
(dp204
g26
I00
sg27
g0
(g47
g48
VThe best possible time complexity achieved by first (preprocssing pattern) is O(n) and by second (preprocessing text) is O(m) where m and n are lengths of pattern and text respectively.  
p205
tp206
Rp207
(dp208
g34
Nsg27
g173
sg28
Nsg37
g203
sg31
g173
sbsg28
g0
(g22
g2
Ntp209
Rp210
(dp211
g26
I00
sg27
g0
(g47
g48
V.  
p212
tp213
Rp214
(dp215
g34
g0
(g22
g2
Ntp216
Rp217
(dp218
g26
I00
sg27
g0
(g47
g48
VNote that the second way does the searching only in O(m) time and it is preferred when text doesn\u2019t doesn\u2019t change very frequently and there are many search queries.  We have discussed 
p219
tp220
Rp221
(dp222
g34
Nsg27
g203
sg28
g217
sg37
g217
sg31
g203
sbsg28
g214
sg29
g76
sg31
g203
sg32
Nsg33
Nsg34
g221
sg35
(dp223
Vhref
p224
Vhttp://www.geeksforgeeks.org/pattern-searching-set-8-suffix-tree-introduction/
p225
sVtarget
p226
V_blank
p227
ssg37
g0
(g47
g48
VSuffix Tree (A compressed Trie of all suffixes of Text) 
p228
tp229
Rp230
(dp231
g34
Nsg27
g217
sg28
Nsg37
g214
sg31
g217
sbsg57
g58
sg59
I00
sg60
(lp232
g230
asbsg27
g230
sg28
Nsg37
g210
sg31
g203
sbsg28
g0
(g22
g2
Ntp233
Rp234
(dp235
g26
I00
sg27
g0
(g47
g48
V instead of compressed Trie.
p236
tp237
Rp238
(dp239
g34
g0
(g22
g2
Ntp240
Rp241
(dp242
g26
I00
sg27
g0
(g47
g48
V of all Suffixes is discussed.   The implementation is close to suffix tree, the only thing is, it\u2019s a 
p243
tp244
Rp245
(dp246
g34
g0
(g22
g2
Ntp247
Rp248
(dp249
g26
I00
sg27
g0
(g47
g48
VImplementation of Suffix Tree may be time consuming for problems to be coded in a technical interview or programming contexts.  In this post simple implementation of a 
p250
tp251
Rp252
(dp253
g34
Nsg27
g210
sg28
g248
sg37
g248
sg31
g210
sbsg28
g245
sg29
g76
sg31
g210
sg32
Nsg33
Nsg34
g252
sg35
(dp254
Vhref
p255
Vhttp://www.geeksforgeeks.org/trie-insert-and-search/
p256
sVtarget
p257
V_blank
p258
ssg37
g0
(g47
g48
VStandard Trie
p259
tp260
Rp261
(dp262
g34
Nsg27
g248
sg28
Nsg37
g245
sg31
g248
sbsg57
g58
sg59
I00
sg60
(lp263
g261
asbsg27
g261
sg28
g241
sg37
g241
sg31
g210
sbsg28
g238
sg29
g76
sg31
g210
sg32
Nsg33
Nsg34
g245
sg35
(dp264
Vhref
p265
Vhttp://www.geeksforgeeks.org/trie-insert-and-search/
p266
sVtarget
p267
V_blank
p268
ssg37
g0
(g47
g48
Vsimple Trie
p269
tp270
Rp271
(dp272
g34
Nsg27
g241
sg28
Nsg37
g238
sg31
g241
sbsg57
g58
sg59
I00
sg60
(lp273
g271
asbsg27
g271
sg28
Nsg37
g234
sg31
g210
sbsg28
g0
(g22
g2
Ntp274
Rp275
(dp276
g26
I00
sg27
g0
(g47
g48
V post, the idea is, every pattern that is present in text (or we can say every substring of text) must be a prefix of one of all possible suffixes.   So if we build a Trie of all suffixes, we can find the pattern in O(m) time where m is pattern length.
p277
tp278
Rp279
(dp280
g34
g0
(g22
g2
Ntp281
Rp282
(dp283
g26
I00
sg27
g0
(g47
g48
VAs discussed in 
p284
tp285
Rp286
(dp287
g34
Nsg27
g234
sg28
g282
sg37
g282
sg31
g234
sbsg28
g279
sg29
g76
sg31
g234
sg32
Nsg33
Nsg34
g286
sg35
(dp288
Vhref
p289
Vhttp://www.geeksforgeeks.org/pattern-searching-set-8-suffix-tree-introduction/
p290
sVtarget
p291
V_blank
p292
ssg37
g0
(g47
g48
VSuffix Tree
p293
tp294
Rp295
(dp296
g34
Nsg27
g282
sg28
Nsg37
g279
sg31
g282
sbsg57
g58
sg59
I00
sg60
(lp297
g295
asbsg27
g295
sg28
Nsg37
g275
sg31
g234
sbsg28
g0
(g22
g2
Ntp298
Rp299
(dp300
g26
I00
sg27
g0
(g47
g48
V\u000a2) Consider all suffixes as individual words and build a trie.
p301
tp302
Rp303
(dp304
g34
g0
(g22
g2
Ntp305
Rp306
(dp307
g26
I01
sg27
g0
(g47
g48
V\u000a1) Generate all suffixes of given text.
p308
tp309
Rp310
(dp311
g34
g0
(g22
g2
Ntp312
Rp313
(dp314
g26
I01
sg27
g0
(g47
g48
VBuilding a Trie of Suffixes
p315
tp316
Rp317
(dp318
g34
Nsg27
g0
(g22
g2
Ntp319
Rp320
(dp321
g26
I00
sg27
g275
sg28
g313
sg29
Vstrong
p322
sg31
g275
sg32
Nsg33
Nsg34
Nsg35
(dp323
sg37
g317
sg57
g58
sg59
I00
sg60
(lp324
g317
asbsg28
Nsg37
g313
sg31
g320
sbsg28
g310
sg29
Vbr
p325
sg31
g275
sg32
Nsg33
Nsg34
g320
sg35
(dp326
sg37
g310
sg57
g58
sg59
I00
sg60
(lp327
sbsg27
g313
sg28
g306
sg37
g306
sg31
g275
sbsg28
g303
sg29
Vbr
p328
sg31
g275
sg32
Nsg33
Nsg34
g310
sg35
(dp329
sg37
g303
sg57
g58
sg59
I00
sg60
(lp330
sbsg27
g306
sg28
Nsg37
g299
sg31
g275
sbsg28
Nsg29
Vp
p331
sg31
g24
sg32
Nsg33
Nsg34
g275
sg35
(dp332
sg37
g0
(g47
g48
VLet us consider an example text \u201cbanana\u005c0\u2033 where \u2018\u005c0\u2032 is string termination character.  Following are all suffixes of \u201cbanana\u005c0\u2033\u000a
p333
tp334
Rp335
(dp336
g34
Nsg27
g299
sg28
g0
(g22
g2
Ntp337
Rp338
(dp339
g26
I00
sg27
g335
sg28
g0
(g47
g48
V\u000a
p340
tp341
Rp342
(dp343
g34
g338
sg27
g0
(g47
g48
V\u000abanana\u005c0\u000aanana\u005c0\u000anana\u005c0\u000aana\u005c0\u000ana\u005c0\u000aa\u005c0\u000a\u005c0
p344
tp345
Rp346
(dp347
g34
Nsg27
g338
sg28
Nsg37
g342
sg31
g338
sbsg28
g0
(g22
g2
Ntp348
Rp349
(dp350
g26
I00
sg27
g342
sg28
g0
(g47
g48
V\u000a
p351
tp352
Rp353
(dp354
g34
g349
sg27
g0
(g22
g2
Ntp355
Rp356
(dp357
g26
I01
sg27
g0
(g22
g2
Ntp358
Rp359
(dp360
g26
I00
sg27
g0
(g47
g48
V\u000a
p361
tp362
Rp363
(dp364
g34
g0
(g22
g2
Ntp365
Rp366
(dp367
g26
I01
sg27
g0
(g47
g48
VIf we consider all of the above suffixes as individual words and build a Trie, we get following.
p368
tp369
Rp370
(dp371
g34
Nsg27
g349
sg28
g366
sg37
g366
sg31
g349
sbsg28
g363
sg29
Vbr
p372
sg31
g349
sg32
Nsg33
Nsg34
g370
sg35
(dp373
sg37
g363
sg57
g58
sg59
I00
sg60
(lp374
sbsg27
g366
sg28
g359
sg37
g359
sg31
g349
sbsg28
Nsg29
g76
sg31
g349
sg32
Nsg33
Nsg34
g363
sg35
(dp375
Vhref
p376
Vhttp://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/suffixtrie.png
p377
ssg37
g356
sg57
g58
sg59
I00
sg60
(lp378
g356
asbsg28
Nsg29
Vimg
p379
sg31
g359
sg32
Nsg33
Nsg34
Nsg35
(dp380
Vsrc
p381
Vhttp://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/suffixtrie.png
p382
sVtitle
p383
Vsuffixtrie
p384
sVheight
p385
V275
p386
sVwidth
p387
V500
p388
sValt
p389
V
p390
sVclass
p391
(lp392
Valigncenter
p393
aVsize-full
p394
aVwp-image-29287
p395
assg37
g353
sg57
g58
sg59
I00
sg60
(lp396
sbsg28
g0
(g22
g2
Ntp397
Rp398
(dp399
g26
I00
sg27
g353
sg28
g0
(g47
g48
V\u000a
p400
tp401
Rp402
(dp403
g34
g398
sg27
g0
(g47
g48
V If all characters of pattern have been processed, i.e., there is a path from root for characters of the given pattern, then print print all indexes where pattern is present.  To store indexes, we use a list with every node that stores indexes of suffixes starting at the node.
p404
tp405
Rp406
(dp407
g34
g0
(g22
g2
Ntp408
Rp409
(dp410
g26
I00
sg27
g0
(g47
g48
V\u000a
p411
tp412
Rp413
(dp414
g34
g0
(g22
g2
Ntp415
Rp416
(dp417
g26
I01
sg27
g0
(g47
g48
V If there is no edge, print \u201cpattern doesn\u2019t exist in text\u201d and return.
p418
tp419
Rp420
(dp421
g34
g0
(g22
g2
Ntp422
Rp423
(dp424
g26
I00
sg27
g0
(g47
g48
V\u000a\u2026..
p425
tp426
Rp427
(dp428
g34
g0
(g22
g2
Ntp429
Rp430
(dp431
g26
I01
sg27
g0
(g47
g48
V For the current character of pattern, if there is an edge from the current node, follow the edge.
p432
tp433
Rp434
(dp435
g34
g0
(g22
g2
Ntp436
Rp437
(dp438
g26
I00
sg27
g0
(g47
g48
V\u000a\u2026..
p439
tp440
Rp441
(dp442
g34
g0
(g22
g2
Ntp443
Rp444
(dp445
g26
I01
sg27
g0
(g47
g48
V Starting from the first character of the pattern and root of the Trie,  do following for every character.
p446
tp447
Rp448
(dp449
g34
g0
(g22
g2
Ntp450
Rp451
(dp452
g26
I00
sg27
g0
(g47
g48
V\u000a
p453
tp454
Rp455
(dp456
g34
g0
(g22
g2
Ntp457
Rp458
(dp459
g26
I01
sg27
g0
(g47
g48
V\u000aFollowing are steps to search a pattern in the built Trie.
p460
tp461
Rp462
(dp463
g34
g0
(g22
g2
Ntp464
Rp465
(dp466
g26
I01
sg27
g0
(g47
g48
VHow to search a pattern in the built Trie?
p467
tp468
Rp469
(dp470
g34
Nsg27
g0
(g22
g2
Ntp471
Rp472
(dp473
g26
I00
sg27
g398
sg28
g465
sg29
Vstrong
p474
sg31
g398
sg32
Nsg33
Nsg34
Nsg35
(dp475
sg37
g469
sg57
g58
sg59
I00
sg60
(lp476
g469
asbsg28
Nsg37
g465
sg31
g472
sbsg28
g462
sg29
Vbr
p477
sg31
g398
sg32
Nsg33
Nsg34
g472
sg35
(dp478
sg37
g462
sg57
g58
sg59
I00
sg60
(lp479
sbsg27
g465
sg28
g458
sg37
g458
sg31
g398
sbsg28
g455
sg29
Vbr
p480
sg31
g398
sg32
Nsg33
Nsg34
g462
sg35
(dp481
sg37
g455
sg57
g58
sg59
I00
sg60
(lp482
sbsg27
g458
sg28
g451
sg37
g451
sg31
g398
sbsg28
g448
sg29
Vstrong
p483
sg31
g398
sg32
Nsg33
Nsg34
g455
sg35
(dp484
sg37
g0
(g47
g48
V1)
p485
tp486
Rp487
(dp488
g34
Nsg27
g451
sg28
Nsg37
g448
sg31
g451
sbsg57
g58
sg59
I00
sg60
(lp489
g487
asbsg27
g487
sg28
g444
sg37
g444
sg31
g398
sbsg28
g441
sg29
Vbr
p490
sg31
g398
sg32
Nsg33
Nsg34
g448
sg35
(dp491
sg37
g441
sg57
g58
sg59
I00
sg60
(lp492
sbsg27
g444
sg28
g437
sg37
g437
sg31
g398
sbsg28
g434
sg29
Vstrong
p493
sg31
g398
sg32
Nsg33
Nsg34
g441
sg35
(dp494
sg37
g0
(g47
g48
Va)
p495
tp496
Rp497
(dp498
g34
Nsg27
g437
sg28
Nsg37
g434
sg31
g437
sbsg57
g58
sg59
I00
sg60
(lp499
g497
asbsg27
g497
sg28
g430
sg37
g430
sg31
g398
sbsg28
g427
sg29
Vbr
p500
sg31
g398
sg32
Nsg33
Nsg34
g434
sg35
(dp501
sg37
g427
sg57
g58
sg59
I00
sg60
(lp502
sbsg27
g430
sg28
g423
sg37
g423
sg31
g398
sbsg28
g420
sg29
Vstrong
p503
sg31
g398
sg32
Nsg33
Nsg34
g427
sg35
(dp504
sg37
g0
(g47
g48
Vb)
p505
tp506
Rp507
(dp508
g34
Nsg27
g423
sg28
Nsg37
g420
sg31
g423
sbsg57
g58
sg59
I00
sg60
(lp509
g507
asbsg27
g507
sg28
g416
sg37
g416
sg31
g398
sbsg28
g413
sg29
Vbr
p510
sg31
g398
sg32
Nsg33
Nsg34
g420
sg35
(dp511
sg37
g413
sg57
g58
sg59
I00
sg60
(lp512
sbsg27
g416
sg28
g409
sg37
g409
sg31
g398
sbsg28
g406
sg29
Vstrong
p513
sg31
g398
sg32
Nsg33
Nsg34
g413
sg35
(dp514
sg37
g0
(g47
g48
V2)
p515
tp516
Rp517
(dp518
g34
Nsg27
g409
sg28
Nsg37
g406
sg31
g409
sbsg57
g58
sg59
I00
sg60
(lp519
g517
asbsg27
g517
sg28
Nsg37
g402
sg31
g398
sbsg28
g0
(g22
g2
Ntp520
Rp521
(dp522
g26
I00
sg27
g402
sg28
g0
(g47
g48
V\u000a
p523
tp524
Rp525
(dp526
g34
g521
sg27
g0
(g47
g48
VFollowing is C++ implementation of the above idea.  
p527
tp528
Rp529
(dp530
g34
Nsg27
g521
sg28
Nsg37
g525
sg31
g521
sbsg28
g0
(g22
g2
Ntp531
Rp532
(dp533
g26
I00
sg27
g525
sg28
g0
(g47
g48
V\u000a
p534
tp535
Rp536
(dp537
g34
g532
sg27
g0
(g47
g48
V\u000a// A simple C++ implementation of substring search using trie of suffixes\u000a#include<iostream>\u000a#include<list>\u000a#define MAX_CHAR 256\u000ausing namespace std;\u000a\u000a// A Suffix Trie (A Trie of all suffixes) Node\u000aclass SuffixTrieNode\u000a{\u000aprivate:\u000a    SuffixTrieNode *children[MAX_CHAR];\u000a    list<int> *indexes;\u000apublic:\u000a    SuffixTrieNode() // Constructor\u000a    {\u000a        // Create an empty linked list for indexes of\u000a        // suffixes starting from this node\u000a        indexes = new list<int>;\u000a\u000a        // Initialize all child pointers as NULL\u000a        for (int i = 0; i < MAX_CHAR; i++)\u000a          children[i] = NULL;\u000a    }\u000a\u000a    // A recursive function to insert a suffix of the txt\u000a    // in subtree rooted with this node\u000a    void insertSuffix(string suffix, int index);\u000a\u000a    // A function to search a pattern in subtree rooted\u000a    // with this node.The function returns pointer to a linked\u000a    // list containing all indexes where pattern is present.\u000a    // The returned indexes are indexes of last characters\u000a    // of matched text.\u000a    list<int>* search(string pat);\u000a};\u000a\u000a// A Trie of all suffixes\u000aclass SuffixTrie\u000a{\u000aprivate:\u000a    SuffixTrieNode root;\u000apublic:\u000a    // Constructor (Builds a trie of suffies of the given text)\u000a    SuffixTrie(string txt)\u000a    {\u000a        // Consider all suffixes of given string and insert\u000a        // them into the Suffix Trie using recursive function\u000a        // insertSuffix() in SuffixTrieNode class\u000a        for (int i = 0; i < txt.length(); i++)\u000a            root.insertSuffix(txt.substr(i), i);\u000a    }\u000a\u000a    // Function to searches a pattern in this suffix trie.\u000a    void search(string pat);\u000a};\u000a\u000a// A recursive function to insert a suffix of the txt in\u000a// subtree rooted with this node\u000avoid SuffixTrieNode::insertSuffix(string s, int index)\u000a{\u000a    // Store index in linked list\u000a    indexes->push_front(index);\u000a\u000a    // If string has more characters\u000a    if (s.length() > 0)\u000a    {\u000a        // Find the first character\u000a        char cIndex = s.at(0);\u000a\u000a        // If there is no edge for this character, add a new edge\u000a        if (children[cIndex] == NULL)\u000a            children[cIndex] = new SuffixTrieNode();\u000a\u000a        // Recur for next suffix\u000a        children[cIndex]->insertSuffix(s.substr(1), index+1);\u000a    }\u000a}\u000a\u000a// A recursive function to search a pattern in subtree rooted with\u000a// this node\u000alist<int>* SuffixTrieNode::search(string s)\u000a{\u000a    // If all characters of pattern have been processed,\u000a    if (s.length() == 0)\u000a        return indexes;\u000a\u000a    // if there is an edge from the current node of suffix trie,\u000a    // follow the edge.\u000a    if (children[s.at(0)] != NULL)\u000a        return (children[s.at(0)])->search(s.substr(1));\u000a\u000a    // If there is no edge, pattern doesn\u2019t exist in text\u000a    else return NULL;\u000a}\u000a\u000a/* Prints all occurrences of pat in the Suffix Trie S (built for text)*/\u000avoid SuffixTrie::search(string pat)\u000a{\u000a    // Let us call recursive search function for root of Trie.\u000a    // We get a list of all indexes (where pat is present in text) in\u000a    // variable 'result'\u000a    list<int> *result = root.search(pat);\u000a\u000a    // Check if the list of indexes is empty or not\u000a    if (result == NULL)\u000a        cout << "Pattern not found" << endl;\u000a    else\u000a    {\u000a       list<int>::iterator i;\u000a       int patLen = pat.length();\u000a       for (i = result->begin(); i != result->end(); ++i)\u000a         cout << "Pattern found at position " << *i - patLen<< endl;\u000a    }\u000a}\u000a\u000a// driver program to test above functions\u000aint main()\u000a{\u000a    // Let us build a suffix trie for text "geeksforgeeks.org"\u000a    string txt = "geeksforgeeks.org";\u000a    SuffixTrie S(txt);\u000a\u000a    cout << "Search for 'ee'" << endl;\u000a    S.search("ee");\u000a\u000a    cout << "\u005cnSearch for 'geek'" << endl;\u000a    S.search("geek");\u000a\u000a    cout << "\u005cnSearch for 'quiz'" << endl;\u000a    S.search("quiz");\u000a\u000a    cout << "\u005cnSearch for 'forgeeks'" << endl;\u000a    S.search("forgeeks");\u000a\u000a    return 0;\u000a} 
p538
tp539
Rp540
(dp541
g34
Nsg27
g532
sg28
Nsg37
g536
sg31
g532
sbsg28
g0
(g22
g2
Ntp542
Rp543
(dp544
g26
I00
sg27
g536
sg28
Nsg29
g331
sg31
g299
sg32
Nsg33
Nsg34
g536
sg35
(dp545
sg37
g0
(g47
g48
VOutput:\u000a
p546
tp547
Rp548
(dp549
g34
Nsg27
g543
sg28
g0
(g22
g2
Ntp550
Rp551
(dp552
g26
I00
sg27
g548
sg28
g0
(g47
g48
V\u000a
p553
tp554
Rp555
(dp556
g34
g551
sg27
g0
(g47
g48
VSearch for 'ee'\u000aPattern found at position 9\u000aPattern found at position 1\u000a\u000aSearch for 'geek'\u000aPattern found at position 8\u000aPattern found at position 0\u000a\u000aSearch for 'quiz'\u000aPattern not found\u000a\u000aSearch for 'forgeeks'\u000aPattern found at position 5\u000a
p557
tp558
Rp559
(dp560
g34
Nsg27
g551
sg28
Nsg37
g555
sg31
g551
sbsg28
g0
(g22
g2
Ntp561
Rp562
(dp563
g26
I00
sg27
g555
sg28
g0
(g47
g48
V\u000a
p564
tp565
Rp566
(dp567
g34
g562
sg27
g0
(g47
g48
VTime Complexity of the above search function is O(m+k) where m is length of the pattern and k is the number of occurrences of pattern in text.
p568
tp569
Rp570
(dp571
g34
Nsg27
g562
sg28
Nsg37
g566
sg31
g562
sbsg28
g0
(g22
g2
Ntp572
Rp573
(dp574
g26
I00
sg27
g566
sg28
g0
(g47
g48
V\u000a
p575
tp576
Rp577
(dp578
g34
g573
sg27
g0
(g47
g48
VThis article is contributed by Ashish Anand. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.
p579
tp580
Rp581
(dp582
g34
Nsg27
g573
sg28
Nsg37
g577
sg31
g573
sbsg28
g0
(g22
g2
Ntp583
Rp584
(dp585
g26
I00
sg27
g577
sg28
g0
(g47
g48
V\u000a
p586
tp587
Rp588
(dp589
g34
g584
sg27
g584
sg28
g0
(cbs4.element
Comment
p590
g48
V Big Rectangle Blog Bottom 
p591
tp592
Rp593
(dp594
g34
g588
sg27
g588
sg28
g0
(g47
g48
V\u000a
p595
tp596
Rp597
(dp598
g34
g593
sg27
g593
sg28
g0
(g22
g2
Ntp599
Rp600
(dp601
g26
I00
sg27
g597
sg28
g0
(g47
g48
V\u000a
p602
tp603
Rp604
(dp605
g34
g600
sg27
g600
sg28
g0
(g22
g2
Ntp606
Rp607
(dp608
g26
I00
sg27
g604
sg28
g0
(g47
g48
V\u000a
p609
tp610
Rp611
(dp612
g34
g607
sg27
g0
(g47
g48
V\u000a(adsbygoogle = window.adsbygoogle || []).push({});\u000a
p613
tp614
Rp615
(dp616
g34
Nsg27
g607
sg28
Nsg37
g611
sg31
g607
sbsg28
g0
(g22
g2
Ntp617
Rp618
(dp619
g26
I01
sg27
g611
sg28
g0
(g47
g48
V\u000a
p620
tp621
Rp622
(dp623
g34
g618
sg27
g618
sg28
Nsg37
Nsg31
g543
sbsg29
Vbr
p624
sg31
g543
sg32
Nsg33
Nsg34
g611
sg35
(dp625
sg37
g622
sg57
g58
sg59
I00
sg60
(lp626
sbsg37
g618
sg31
g543
sbsg29
Vscript
p627
sg31
g543
sg32
Nsg33
Nsg34
g604
sg35
(dp628
sg37
g615
sg57
g58
sg59
I00
sg60
(lp629
g615
asbsg37
g607
sg31
g543
sbsg29
Vins
p630
sg31
g543
sg32
Nsg33
Nsg34
g597
sg35
(dp631
Vstyle
p632
Vdisplay:inline-block;width:336px;height:280px
p633
sVdata-ad-client
p634
Vca-pub-9465609616171866
p635
sVclass
p636
(lp637
Vadsbygoogle
p638
asVdata-ad-slot
p639
V4061219431
p640
ssg37
g604
sg57
g58
sg59
I00
sg60
(lp641
sbsg37
g600
sg31
g543
sbsg37
g597
sg31
g543
sbsg37
g593
sg31
g543
sbsg29
Vscript
p642
sg31
g543
sg32
Nsg33
Nsg34
g577
sg35
(dp643
Vasync
p644
S''
p645
sVsrc
p646
V//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js
p647
ssg37
g588
sg57
g58
sg59
I00
sg60
(lp648
sbsg37
g584
sg31
g543
sbsg29
g331
sg31
g543
sg32
Nsg33
Nsg34
g566
sg35
(dp649
sg37
g581
sg57
g58
sg59
I00
sg60
(lp650
g581
asbsg37
g573
sg31
g543
sbsg29
g331
sg31
g543
sg32
Nsg33
Nsg34
g555
sg35
(dp651
sg37
g570
sg57
g58
sg59
I00
sg60
(lp652
g570
asbsg37
g562
sg31
g543
sbsg29
Vpre
p653
sg31
g543
sg32
Nsg33
Nsg34
g548
sg35
(dp654
sg37
g559
sg57
g58
sg59
I00
sg60
(lp655
g559
asbsg37
g551
sg31
g543
sbsg57
g58
sg59
I00
sg60
(lp656
g548
ag551
ag555
ag562
ag566
ag573
ag577
ag584
ag588
ag593
ag597
ag600
ag604
ag607
ag611
ag618
ag622
asbsg37
g543
sg31
g299
sbsg29
Vpre
p657
sg31
g299
sg32
Nsg33
Nsg34
g525
sg35
(dp658
Vclass
p659
(lp660
Vbrush:
p661
aVcpp;
p662
aVhighlight:
p663
aV[79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114];
p664
aVtitle:
p665
aV;
p666
aVnotranslate
p667
asVtitle
p668
g390
ssg37
g540
sg57
g58
sg59
I00
sg60
(lp669
g540
asbsg37
g532
sg31
g299
sbsg29
g331
sg31
g299
sg32
Nsg33
Nsg34
g402
sg35
(dp670
sg37
g529
sg57
g58
sg59
I00
sg60
(lp671
g529
asbsg37
g521
sg31
g299
sbsg29
g331
sg31
g299
sg32
Nsg33
Nsg34
g353
sg35
(dp672
sg37
g472
sg57
g58
sg59
I00
sg60
(lp673
g472
ag465
ag462
ag458
ag455
ag451
ag448
ag444
ag441
ag437
ag434
ag430
ag427
ag423
ag420
ag416
ag413
ag409
ag406
asbsg37
g398
sg31
g299
sbsg29
g331
sg31
g299
sg32
Nsg33
Nsg34
g342
sg35
(dp674
sg37
g370
sg57
g58
sg59
I00
sg60
(lp675
g370
ag366
ag363
ag359
asbsg37
g349
sg31
g299
sbsg29
Vpre
p676
sg31
g299
sg32
Nsg33
Nsg34
g335
sg35
(dp677
sg37
g346
sg57
g58
sg59
I00
sg60
(lp678
g346
asbsg37
g338
sg31
g299
sbsg57
g58
sg59
I00
sg60
(lp679
g335
ag338
ag342
ag349
ag353
ag398
ag402
ag521
ag525
ag532
ag536
ag543
asbsg29
g331
sg31
g24
sg32
Nsg33
Nsg34
g234
sg35
(dp680
sg37
g320
sg57
g58
sg59
I00
sg60
(lp681
g320
ag313
ag310
ag306
ag303
asbsg29
g331
sg31
g24
sg32
Nsg33
Nsg34
g210
sg35
(dp682
sg37
g286
sg57
g58
sg59
I00
sg60
(lp683
g286
ag282
ag279
asbsg29
g331
sg31
g24
sg32
Nsg33
Nsg34
g203
sg35
(dp684
sg37
g252
sg57
g58
sg59
I00
sg60
(lp685
g252
ag248
ag245
ag241
ag238
asbsg29
g331
sg31
g24
sg32
Nsg33
Nsg34
g173
sg35
(dp686
sg37
g221
sg57
g58
sg59
I00
sg60
(lp687
g221
ag217
ag214
asbsg29
g331
sg31
g24
sg32
Nsg33
Nsg34
g88
sg35
(dp688
sg37
g207
sg57
g58
sg59
I00
sg60
(lp689
g207
asbsg29
g331
sg31
g24
sg32
Nsg33
Nsg34
g63
sg35
(dp690
sg37
g187
sg57
g58
sg59
I00
sg60
(lp691
g187
ag184
ag180
asbsg29
g331
sg31
g24
sg32
Nsg33
Nsg34
g42
sg35
(dp692
sg37
g123
sg57
g58
sg59
I00
sg60
(lp693
g123
ag120
ag116
ag113
ag109
ag106
ag102
ag99
ag95
ag92
asbsg29
g331
sg31
g24
sg32
Nsg33
Nsg34
g39
sg35
(dp694
sg37
g74
sg57
g58
sg59
I00
sg60
(lp695
g74
ag70
ag67
asbsg29
g331
sg31
g24
sg32
Nsg33
Nsg34
Nsg35
(dp696
sg37
g51
sg57
g58
sg59
I00
sg60
(lp697
g51
ag45
asbsg57
Nsg59
I00
sg60
(lp698
g39
ag42
ag63
ag88
ag173
ag203
ag210
ag234
ag275
ag299
asbsS'raw_page'
p699
S'<!DOCTYPE html>\r\n<!--[if IE 7]>\r\n<html class="ie ie7" lang="en-US" prefix="og: http://ogp.me/ns#">\r\n<![endif]-->\r\n<!--[if IE 8]>\r\n<html class="ie ie8" lang="en-US" prefix="og: http://ogp.me/ns#">\r\n<![endif]-->\r\n<!--[if !(IE 7) | !(IE 8)  ]><!-->\r\n<html lang="en-US" prefix="og: http://ogp.me/ns#">\r\n<!--<![endif]-->\r\n<head>\r\n<meta charset="UTF-8" />\r\n<meta name="viewport" content="width=device-width" />\r\n\r\n<meta property="og:image" content="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/gfg_200X200.png">\r\n<meta property="og:image:type" content="image/png">\r\n<meta property="og:image:width" content="200">\r\n<meta property="og:image:height" content="200">\r\n\r\n<title>Pattern Searching using a Trie of all Suffixes - GeeksforGeeks</title>\r\n<link rel="profile" href="http://gmpg.org/xfn/11" />\r\n<link rel="pingback" href="http://www.geeksforgeeks.org/xmlrpc.php" />\r\n<!--[if lt IE 9]>\r\n<script src="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/js/html5.js" type="text/javascript"></script>\r\n<![endif]-->\r\n\n<!-- This site is optimized with the Yoast SEO plugin v3.0.7 - https://yoast.com/wordpress/plugins/seo/ -->\n<link rel="canonical" href="http://www.geeksforgeeks.org/pattern-searching-using-trie-suffixes/" />\n<meta property="og:locale" content="en_US" />\n<meta property="og:type" content="article" />\n<meta property="og:title" content="Pattern Searching using a Trie of all Suffixes - GeeksforGeeks" />\n<meta property="og:description" content="Problem Statement: Given a text txt[0..n-1] and a pattern pat[0..m-1], write a function search(char pat[], char txt[]) that prints all occurrences of pat[] in txt[]. You may assume that n &gt; m. As discussed in the previous post, we discussed that there are two ways efficiently solve the above problem. 1) Preprocess Pattern: KMP Algorithm,\xe2\x80\xa6 Read More &raquo;" />\n<meta property="og:url" content="http://www.geeksforgeeks.org/pattern-searching-using-trie-suffixes/" />\n<meta property="og:site_name" content="GeeksforGeeks" />\n<meta property="article:tag" content="Pattern Searching" />\n<meta property="article:section" content="Advanced Data Structure" />\n<meta property="article:published_time" content="2014-08-29T10:04:09+00:00" />\n<meta property="article:modified_time" content="2015-10-30T03:09:59+00:00" />\n<meta property="og:updated_time" content="2015-10-30T03:09:59+00:00" />\n<meta property="og:image" content="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/suffixtrie.png" />\n<!-- / Yoast SEO plugin. -->\n\n\t\t<script type="text/javascript">\n\t\t\twindow._wpemojiSettings = {"baseUrl":"http:\\/\\/s.w.org\\/images\\/core\\/emoji\\/72x72\\/","ext":".png","source":{"concatemoji":"http:\\/\\/www.geeksforgeeks.org\\/wp-includes\\/js\\/wp-emoji-release.min.js"}};\n\t\t\t!function(a,b,c){function d(a){var c=b.createElement("canvas"),d=c.getContext&&c.getContext("2d");return d&&d.fillText?(d.textBaseline="top",d.font="600 32px Arial","flag"===a?(d.fillText(String.fromCharCode(55356,56812,55356,56807),0,0),c.toDataURL().length>3e3):(d.fillText(String.fromCharCode(55357,56835),0,0),0!==d.getImageData(16,16,1,1).data[0])):!1}function e(a){var c=b.createElement("script");c.src=a,c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f,g;c.supports={simple:d("simple"),flag:d("flag")},c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.simple&&c.supports.flag||(g=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",g,!1),a.addEventListener("load",g,!1)):(a.attachEvent("onload",g),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&&f.twemoji&&(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);\n\t\t</script>\n\t\t<style type="text/css">\nimg.wp-smiley,\nimg.emoji {\n\tdisplay: inline !important;\n\tborder: none !important;\n\tbox-shadow: none !important;\n\theight: 1em !important;\n\twidth: 1em !important;\n\tmargin: 0 .07em !important;\n\tvertical-align: -0.1em !important;\n\tbackground: none !important;\n\tpadding: 0 !important;\n}\n</style>\n<link rel=\'stylesheet\' id=\'wp-pagenavi-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/wp-pagenavi/pagenavi-css.css\' type=\'text/css\' media=\'all\' />\n<link rel=\'stylesheet\' id=\'themonic-fonts-css\'  href=\'http://fonts.googleapis.com/css?family=Ubuntu:400,700&#038;subset=latin,latin-ext\' type=\'text/css\' media=\'all\' />\n<link rel=\'stylesheet\' id=\'themonic-style-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/style.css\' type=\'text/css\' media=\'all\' />\n<link rel=\'stylesheet\' id=\'custom-style-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/custom.css\' type=\'text/css\' media=\'all\' />\n<!--[if lt IE 9]>\n<link rel=\'stylesheet\' id=\'themonic-ie-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/css/ie.css\' type=\'text/css\' media=\'all\' />\n<![endif]-->\n<meta name="generator" content="WordPress 4.2.7" />\n<style type="text/css" id="custom-background-css">\nbody.custom-background { background-color: #ffffff; }\n</style>\n<style type="text/css" id="syntaxhighlighteranchor"></style>\n<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<script>\r\n  (adsbygoogle = window.adsbygoogle || []).push({\r\n    google_ad_client: "ca-pub-9465609616171866",\r\n    enable_page_level_ads: true\r\n  });\r\n</script>\r\n</head>\r\n<body class="single single-post postid-131035 single-format-standard custom-background custom-background-white custom-font-enabled">\r\n<div id="page" class="hfeed site">\r\n\t<header id="masthead" class="site-header" role="banner">\r\n\t\t\t\t\t<hgroup>\r\n\t\t\t<a href="http://www.geeksforgeeks.org/" title="GeeksforGeeks" rel="home">GeeksforGeeks</a>\r\n\t\t\t\t<br .../> <a class="site-description">A computer science portal for geeks</a>\r\n\t\t</hgroup>\r\n\r\n<div style="float:right;">\r\n<hgroup style="float:right;">   \r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://www.geeksforgeeks.org/campus-ambassador-program-by-geeksforgeeks/">CA</a>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://geeksquiz.com/gate-corner-2/">GATE CS</a>\r\n\r\n<strong><a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://practice.geeksforgeeks.org/">Practice</a></strong>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://www.geeksforgeeks.org/suggest/">Suggest</a>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://code.geeksforgeeks.org/">IDE</a>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://qa.geeksforgeeks.org/">Q&A</a>\r\n\r\n<a style="padding:0px 30px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://geeksquiz.com/">GeeksQuiz</a>\r\n\r\n</hgroup><br></br>\r\n\r\n<span style="display:inline-block; width:300px;float:right;">\r\n<script>\r\n  (function() {\r\n    var cx = \'009682134359037907028:tj6eafkv_be\';\r\n    var gcse = document.createElement(\'script\');\r\n    gcse.type = \'text/javascript\';\r\n    gcse.async = true;\r\n    gcse.src = (document.location.protocol == \'https:\' ? \'https:\' : \'http:\') +\r\n        \'//cse.google.com/cse.js?cx=\' + cx;\r\n    var s = document.getElementsByTagName(\'script\')[0];\r\n    s.parentNode.insertBefore(gcse, s);\r\n  })();\r\n</script>\r\n<gcse:search></gcse:search>\r\n\r\n<style type="text/css">\r\n  .gsc-control-cse {\r\n     padding: 0px 10px;\r\n  } \r\n\r\n  .gsc-control-cse {\r\n    font-family: "Trebuchet MS", sans-serif;\r\n    /*border-color: #E1F3DA;*/\r\n    /*background-color: #E1F3DA;*/\r\n  }\r\n  input.gsc-input {\r\n    border-color: #94CC7A;\r\n  }\r\n  input.gsc-search-button {\r\n    border-color: #94CC7A;\r\n    background-color: #4CB96B;\r\n    margin-top:7px;\r\n  }\r\n  .gsc-tabHeader.gsc-tabhInactive {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gsc-tabHeader.gsc-tabhActive {\r\n    border-color: #A9DA92;\r\n    background-color: #A9DA92;\r\n  }\r\n  .gsc-tabsArea {\r\n    border-color: #A9DA92;\r\n  }\r\n  .gsc-webResult.gsc-result {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gsc-webResult.gsc-result:hover {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:link,\r\n  .gs-webResult.gs-result a.gs-title:link b {\r\n    color: #009900;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:visited,\r\n  .gs-webResult.gs-result a.gs-title:visited b {\r\n    color: #009900;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:hover,\r\n  .gs-webResult.gs-result a.gs-title:hover b {\r\n    color: #003300;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:active,\r\n  .gs-webResult.gs-result a.gs-title:active b {\r\n    color: #009900;\r\n  }\r\n  .gsc-cursor-page {\r\n    color: #009900;\r\n  }\r\n  a.gsc-trailing-more-results:link {\r\n    color: #009900;\r\n  }\r\n  .gs-webResult.gs-result .gs-snippet {\r\n    color: #454545;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl {\r\n    color: #33cc00;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl-short {\r\n    color: #33cc00;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl-short {\r\n    display: none;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl-long {\r\n    display: block;\r\n  }\r\n  .gsc-cursor-box {\r\n    border-color: #A9DA92;\r\n  }\r\n  .gsc-results .gsc-cursor-page {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {\r\n    border-color: #A9DA92;\r\n    background-color: #A9DA92;\r\n  }\r\n  .gs-promotion.gs-result {\r\n    border-color: #94CC7A;\r\n    background-color: #CBE8B4;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:link {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:visited {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:hover {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:active {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result .gs-snippet {\r\n    color: #454545;\r\n  }\r\n  .gs-promotion.gs-result .gs-visibleUrl,\r\n  .gs-promotion.gs-result .gs-visibleUrl-short {\r\n    color: #815FA7;\r\n  }\r\n  .gsib_a {\r\n    padding : 2px;\r\n  }\r\n</style>    \r\n</span>\r\n</div>\r\n\r\n\t\t\r\n\t\t\r\n\t\t<nav id="site-navigation" class="themonic-nav" role="navigation">\r\n\t\t\t<a class="assistive-text" href="#content" title="Skip to content">Skip to content</a>\r\n\t\t\t<div class="menu-iconic-container"><ul id="menu-top" class="nav-menu"><li id="menu-item-135003" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-135003"><a href="http://www.geeksforgeeks.org/">Home</a></li>\n<li id="menu-item-135004" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-135004"><a title="Algorithms" href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algo</a>\n<ul class="sub-menu">\n\t<li id="menu-item-135030" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135030"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#AnalysisofAlgorithms">Analysis of Algorithms</a></li>\n\t<li id="menu-item-135031" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135031"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#SearchingandSorting">Searching and Sorting</a></li>\n\t<li id="menu-item-135032" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135032"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#GreedyAlgorithms">Greedy Algorithms</a></li>\n\t<li id="menu-item-135033" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135033"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#DynamicProgramming">Dynamic Programming</a></li>\n\t<li id="menu-item-135034" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135034"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#PatternSearching">Pattern Searching</a></li>\n\t<li id="menu-item-135035" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135035"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#OtherStringAlgorithms">Other String Algorithms</a></li>\n\t<li id="menu-item-135036" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135036"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#Backtracking">Backtracking</a></li>\n\t<li id="menu-item-135037" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135037"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#DivideandConquer">Divide and Conquer</a></li>\n\t<li id="menu-item-135038" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135038"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#GeometricAlgorithms">Geometric Algorithms</a></li>\n\t<li id="menu-item-135039" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135039"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#MathematicalAlgorithms">Mathematical Algorithms</a></li>\n\t<li id="menu-item-135040" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135040"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#BitAlgorithms">Bit Algorithms</a></li>\n\t<li id="menu-item-135041" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135041"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#GraphAlgorithms">Graph Algorithms</a></li>\n\t<li id="menu-item-135042" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135042"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#RandomizedAlgorithms">Randomized Algorithms</a></li>\n</ul>\n</li>\n<li id="menu-item-135010" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-135010"><a title="Data Structures" href="http://www.geeksforgeeks.org/data-structures/">DS</a>\n<ul class="sub-menu">\n\t<li id="menu-item-135045" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135045"><a href="http://www.geeksforgeeks.org/data-structures/#LinkedList">LinkedList</a></li>\n\t<li id="menu-item-135046" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135046"><a href="http://www.geeksforgeeks.org/data-structures/#Stack">Stack</a></li>\n\t<li id="menu-item-135047" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135047"><a href="http://www.geeksforgeeks.org/data-structures/#Queue">Queue</a></li>\n\t<li id="menu-item-135048" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135048"><a href="http://www.geeksforgeeks.org/data-structures/#BinaryTree">Binary Tree</a></li>\n\t<li id="menu-item-135049" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135049"><a href="http://www.geeksforgeeks.org/data-structures/#BinarySearchTree">Binary Search Tree</a></li>\n\t<li id="menu-item-135050" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135050"><a href="http://www.geeksforgeeks.org/data-structures/#Heap">Heap</a></li>\n\t<li id="menu-item-135051" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135051"><a href="http://www.geeksforgeeks.org/data-structures/#Hashing">Hashing</a></li>\n\t<li id="menu-item-135052" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135052"><a href="http://www.geeksforgeeks.org/data-structures/#Graph">Graph</a></li>\n\t<li id="menu-item-135053" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135053"><a href="http://www.geeksforgeeks.org/data-structures/#AdvancedDataStructure">Advanced Data Structure</a></li>\n\t<li id="menu-item-135054" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135054"><a href="http://www.geeksforgeeks.org/data-structures/#Array">Array</a></li>\n\t<li id="menu-item-135055" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135055"><a href="http://www.geeksforgeeks.org/data-structures/#Matrix">Matrix</a></li>\n\t<li id="menu-item-135056" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135056"><a href="http://www.geeksforgeeks.org/data-structures/#Misc">Misc</a></li>\n</ul>\n</li>\n<li id="menu-item-135014" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135014"><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview</a></li>\n<li id="menu-item-135006" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135006"><a href="http://www.geeksforgeeks.org/c/">C</a></li>\n<li id="menu-item-135007" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135007"><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>\n<li id="menu-item-135012" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135012"><a href="http://www.geeksforgeeks.org/java/">Java</a></li>\n<li id="menu-item-137004" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-137004"><a href="http://www.geeksforgeeks.org/python/">Python</a></li>\n<li id="menu-item-135009" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135009"><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>\n<li id="menu-item-135016" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135016"><a href="http://qa.geeksforgeeks.org/index.php?qa=ask">Ask a Q</a></li>\n<li id="menu-item-135077" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135077"><a href="https://play.google.com/store/apps/details?id=free.programming.programming">AndroidApp</a></li>\n<li id="menu-item-135367" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135367"><a href="http://www.geeksforgeeks.org/category/guestblogs/">GBlog</a></li>\n<li id="menu-item-135028" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135028"><a href="http://www.geeksforgeeks.org/category/gfact/">GFact</a></li>\n<li id="menu-item-136004" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-136004"><a href="http://www.geeksforgeeks.org/category/project/">Project</a></li>\n<li id="menu-item-136978" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-136978"><a href="http://www.geeksforgeeks.org/jobs/">Jobs</a></li>\n<li id="menu-item-135019" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135019"><a href="http://www.geeksforgeeks.org/category/c-arrays/">Arr</a></li>\n<li id="menu-item-135022" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135022"><a href="http://www.geeksforgeeks.org/category/c-strings/">String</a></li>\n<li id="menu-item-135937" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135937"><a href="http://www.geeksforgeeks.org/category/matrix/">Matrix</a></li>\n<li id="menu-item-135023" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135023"><a href="http://www.geeksforgeeks.org/category/linked-list/">Linked List</a></li>\n<li id="menu-item-135029" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135029"><a href="http://www.geeksforgeeks.org/category/stack/">Stack</a></li>\n<li id="menu-item-135932" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135932"><a href="http://www.geeksforgeeks.org/category/queue/">Q</a></li>\n<li id="menu-item-136299" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-136299"><a href="http://www.geeksforgeeks.org/category/hash/">Hash</a></li>\n<li id="menu-item-135941" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135941"><a href="http://www.geeksforgeeks.org/category/heap/">Heap</a></li>\n<li id="menu-item-135020" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135020"><a href="http://www.geeksforgeeks.org/category/tree/">Tree</a></li>\n<li id="menu-item-135940" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135940"><a href="http://www.geeksforgeeks.org/category/binary-search-tree/">BST</a></li>\n<li id="menu-item-135024" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135024"><a href="http://www.geeksforgeeks.org/category/graph/">Graph</a></li>\n<li id="menu-item-135017" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135017"><a href="http://www.geeksforgeeks.org/category/c-puzzles/">C/C++</a></li>\n<li id="menu-item-135027" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135027"><a href="http://www.geeksforgeeks.org/category/bit-magic/">Bit</a></li>\n<li id="menu-item-135021" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135021"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/">MCQ</a></li>\n<li id="menu-item-135018" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135018"><a href="http://www.geeksforgeeks.org/category/c-programs/">Misc</a></li>\n<li id="menu-item-135025" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135025"><a href="http://www.geeksforgeeks.org/category/program-output/">O/P</a></li>\n</ul></div>\t\t</nav><!-- #site-navigation -->\r\n\t\t<div class="clear"></div>\r\n\t</header><!-- #masthead -->\r\n\r\n\t<div id="main" class="wrapper">\t<div id="primary" class="site-content">\r\n\t\t<div id="content" role="main">\r\n\r\n\t\t\t\t\t\t\t\r\n\t<article id="post-131035" class="post-131035 post type-post status-publish format-standard hentry category-advanced-data-structure category-pattern-searching tag-pattern-searching">\r\n\t\t\t\t<header class="entry-header">\r\n\t\t\t\t\t\t<h1 class="entry-title">Pattern Searching using a Trie of all Suffixes</h1>\r\n\t\t\t\t\r\n\t\t\t</header><!-- .entry-header -->\r\n\r\n\t\t\t\t<div class="entry-content">\r\n\t\t\t<p>Problem Statement: Given a text txt[0..n-1] and a pattern pat[0..m-1], write a function search(char pat[], char txt[]) that prints all occurrences of pat[] in txt[]. You may assume that n > m.<span id="more-131035"></span></p>\n<p>As discussed in the  <a href="http://www.geeksforgeeks.org/pattern-searching-set-8-suffix-tree-introduction/" target="_blank">previous post</a>, we discussed that there are two ways efficiently solve the above problem.</p>\n<p><strong>1)</strong> Preprocess Pattern:  <a href="http://www.geeksforgeeks.org/searching-for-patterns-set-2-kmp-algorithm/" target="_blank">KMP Algorithm</a>,  <a href="http://www.geeksforgeeks.org/searching-for-patterns-set-3-rabin-karp-algorithm/" target="_blank">Rabin Karp Algorithm</a>, <a href="http://www.geeksforgeeks.org/searching-for-patterns-set-5-finite-automata/" target="_blank">Finite Automata</a>, <a href="http://www.geeksforgeeks.org/pattern-searching-set-7-boyer-moore-algorithm-bad-character-heuristic/" target="_blank">Boyer Moore Algorithm</a>.  </p>\n<p><strong>2)</strong> Preoprocess Text: <a href="http://www.geeksforgeeks.org/pattern-searching-set-8-suffix-tree-introduction/" target="_blank">Suffix Tree</a></p>\n<p>The best possible time complexity achieved by first (preprocssing pattern) is O(n) and by second (preprocessing text) is O(m) where m and n are lengths of pattern and text respectively.  </p>\n<p>Note that the second way does the searching only in O(m) time and it is preferred when text doesn&#8217;t doesn&#8217;t change very frequently and there are many search queries.  We have discussed <a href="http://www.geeksforgeeks.org/pattern-searching-set-8-suffix-tree-introduction/" target="_blank">Suffix Tree (A compressed Trie of all suffixes of Text) </a>.  </p>\n<p>Implementation of Suffix Tree may be time consuming for problems to be coded in a technical interview or programming contexts.  In this post simple implementation of a <a href="http://www.geeksforgeeks.org/trie-insert-and-search/" target="_blank">Standard Trie</a> of all Suffixes is discussed.   The implementation is close to suffix tree, the only thing is, it&#8217;s a <a href="http://www.geeksforgeeks.org/trie-insert-and-search/" target="_blank">simple Trie</a> instead of compressed Trie.</p>\n<p>As discussed in <a href="http://www.geeksforgeeks.org/pattern-searching-set-8-suffix-tree-introduction/" target="_blank">Suffix Tree</a> post, the idea is, every pattern that is present in text (or we can say every substring of text) must be a prefix of one of all possible suffixes.   So if we build a Trie of all suffixes, we can find the pattern in O(m) time where m is pattern length.</p>\n<p><strong>Building a Trie of Suffixes</strong><br />\n1) Generate all suffixes of given text.<br />\n2) Consider all suffixes as individual words and build a trie.</p>\n<p>Let us consider an example text &#8220;banana\\0&#8243; where &#8216;\\0&#8242; is string termination character.  Following are all suffixes of &#8220;banana\\0&#8243;\n<pre>\r\nbanana\\0\r\nanana\\0\r\nnana\\0\r\nana\\0\r\nna\\0\r\na\\0\r\n\\0</pre>\n<p>If we consider all of the above suffixes as individual words and build a Trie, we get following.<br />\n<a href="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/suffixtrie.png"><img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/suffixtrie.png" alt="" title="suffixtrie" width="500" height="275" class="aligncenter size-full wp-image-29287" /></a></p>\n<p><strong>How to search a pattern in the built Trie?</strong><br />\nFollowing are steps to search a pattern in the built Trie.<br />\n<strong>1)</strong> Starting from the first character of the pattern and root of the Trie,  do following for every character.<br />\n&#8230;..<strong>a)</strong> For the current character of pattern, if there is an edge from the current node, follow the edge.<br />\n&#8230;..<strong>b)</strong> If there is no edge, print &#8220;pattern doesn&#8217;t exist in text&#8221; and return.<br />\n<strong>2)</strong> If all characters of pattern have been processed, i.e., there is a path from root for characters of the given pattern, then print print all indexes where pattern is present.  To store indexes, we use a list with every node that stores indexes of suffixes starting at the node.</p>\n<p>Following is C++ implementation of the above idea.  </p>\n<pre class="brush: cpp; highlight: [79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114]; title: ; notranslate" title="">\r\n// A simple C++ implementation of substring search using trie of suffixes\r\n#include&lt;iostream&gt;\r\n#include&lt;list&gt;\r\n#define MAX_CHAR 256\r\nusing namespace std;\r\n\r\n// A Suffix Trie (A Trie of all suffixes) Node\r\nclass SuffixTrieNode\r\n{\r\nprivate:\r\n    SuffixTrieNode *children[MAX_CHAR];\r\n    list&lt;int&gt; *indexes;\r\npublic:\r\n    SuffixTrieNode() // Constructor\r\n    {\r\n        // Create an empty linked list for indexes of\r\n        // suffixes starting from this node\r\n        indexes = new list&lt;int&gt;;\r\n\r\n        // Initialize all child pointers as NULL\r\n        for (int i = 0; i &lt; MAX_CHAR; i++)\r\n          children[i] = NULL;\r\n    }\r\n\r\n    // A recursive function to insert a suffix of the txt\r\n    // in subtree rooted with this node\r\n    void insertSuffix(string suffix, int index);\r\n\r\n    // A function to search a pattern in subtree rooted\r\n    // with this node.The function returns pointer to a linked\r\n    // list containing all indexes where pattern is present.\r\n    // The returned indexes are indexes of last characters\r\n    // of matched text.\r\n    list&lt;int&gt;* search(string pat);\r\n};\r\n\r\n// A Trie of all suffixes\r\nclass SuffixTrie\r\n{\r\nprivate:\r\n    SuffixTrieNode root;\r\npublic:\r\n    // Constructor (Builds a trie of suffies of the given text)\r\n    SuffixTrie(string txt)\r\n    {\r\n        // Consider all suffixes of given string and insert\r\n        // them into the Suffix Trie using recursive function\r\n        // insertSuffix() in SuffixTrieNode class\r\n        for (int i = 0; i &lt; txt.length(); i++)\r\n            root.insertSuffix(txt.substr(i), i);\r\n    }\r\n\r\n    // Function to searches a pattern in this suffix trie.\r\n    void search(string pat);\r\n};\r\n\r\n// A recursive function to insert a suffix of the txt in\r\n// subtree rooted with this node\r\nvoid SuffixTrieNode::insertSuffix(string s, int index)\r\n{\r\n    // Store index in linked list\r\n    indexes-&gt;push_front(index);\r\n\r\n    // If string has more characters\r\n    if (s.length() &gt; 0)\r\n    {\r\n        // Find the first character\r\n        char cIndex = s.at(0);\r\n\r\n        // If there is no edge for this character, add a new edge\r\n        if (children[cIndex] == NULL)\r\n            children[cIndex] = new SuffixTrieNode();\r\n\r\n        // Recur for next suffix\r\n        children[cIndex]-&gt;insertSuffix(s.substr(1), index+1);\r\n    }\r\n}\r\n\r\n// A recursive function to search a pattern in subtree rooted with\r\n// this node\r\nlist&lt;int&gt;* SuffixTrieNode::search(string s)\r\n{\r\n    // If all characters of pattern have been processed,\r\n    if (s.length() == 0)\r\n        return indexes;\r\n\r\n    // if there is an edge from the current node of suffix trie,\r\n    // follow the edge.\r\n    if (children[s.at(0)] != NULL)\r\n        return (children[s.at(0)])-&gt;search(s.substr(1));\r\n\r\n    // If there is no edge, pattern doesn\xe2\x80\x99t exist in text\r\n    else return NULL;\r\n}\r\n\r\n/* Prints all occurrences of pat in the Suffix Trie S (built for text)*/\r\nvoid SuffixTrie::search(string pat)\r\n{\r\n    // Let us call recursive search function for root of Trie.\r\n    // We get a list of all indexes (where pat is present in text) in\r\n    // variable \'result\'\r\n    list&lt;int&gt; *result = root.search(pat);\r\n\r\n    // Check if the list of indexes is empty or not\r\n    if (result == NULL)\r\n        cout &lt;&lt; &quot;Pattern not found&quot; &lt;&lt; endl;\r\n    else\r\n    {\r\n       list&lt;int&gt;::iterator i;\r\n       int patLen = pat.length();\r\n       for (i = result-&gt;begin(); i != result-&gt;end(); ++i)\r\n         cout &lt;&lt; &quot;Pattern found at position &quot; &lt;&lt; *i - patLen&lt;&lt; endl;\r\n    }\r\n}\r\n\r\n// driver program to test above functions\r\nint main()\r\n{\r\n    // Let us build a suffix trie for text &quot;geeksforgeeks.org&quot;\r\n    string txt = &quot;geeksforgeeks.org&quot;;\r\n    SuffixTrie S(txt);\r\n\r\n    cout &lt;&lt; &quot;Search for \'ee\'&quot; &lt;&lt; endl;\r\n    S.search(&quot;ee&quot;);\r\n\r\n    cout &lt;&lt; &quot;\\nSearch for \'geek\'&quot; &lt;&lt; endl;\r\n    S.search(&quot;geek&quot;);\r\n\r\n    cout &lt;&lt; &quot;\\nSearch for \'quiz\'&quot; &lt;&lt; endl;\r\n    S.search(&quot;quiz&quot;);\r\n\r\n    cout &lt;&lt; &quot;\\nSearch for \'forgeeks\'&quot; &lt;&lt; endl;\r\n    S.search(&quot;forgeeks&quot;);\r\n\r\n    return 0;\r\n} </pre>\n<p>Output:\n<pre>Search for \'ee\'\r\nPattern found at position 9\r\nPattern found at position 1\r\n\r\nSearch for \'geek\'\r\nPattern found at position 8\r\nPattern found at position 0\r\n\r\nSearch for \'quiz\'\r\nPattern not found\r\n\r\nSearch for \'forgeeks\'\r\nPattern found at position 5\r\n</pre>\n<p>Time Complexity of the above search function is O(m+k) where m is length of the pattern and k is the number of occurrences of pattern in text.</p>\n<p>This article is contributed by Ashish Anand. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.</p>\n\r\n\t\t\t<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<!-- Big Rectangle Blog Bottom -->\r\n<ins class="adsbygoogle"\r\n     style="display:inline-block;width:336px;height:280px"\r\n     data-ad-client="ca-pub-9465609616171866"\r\n     data-ad-slot="4061219431"></ins>\r\n<script>\r\n(adsbygoogle = window.adsbygoogle || []).push({});\r\n</script>\r\n<br></br>\r\n\t\t</div><!-- .entry-content -->\r\n\t\t\t\t\r\n\t\t\r\n\r\n\t\t<footer class="entry-meta">\r\n\t\t<span class="post-comment"><a href="http://www.geeksforgeeks.org/pattern-searching-using-trie-suffixes/#respond" class="commentslink" ><span class="dsq-postid" data-dsqidentifier="131035 http://www.geeksforgeeks.org/?p=131035">Leave a comment</span></a> <!--added for comments by Shubham-->\r\n\t\t</span><span>Category: <a href="http://www.geeksforgeeks.org/category/advanced-data-structure/" rel="category tag">Advanced Data Structure</a> <a href="http://www.geeksforgeeks.org/category/algorithm/pattern-searching/" rel="category tag">Pattern Searching</a></span> <span>Tags: <a href="http://www.geeksforgeeks.org/tag/pattern-searching/" rel="tag">Pattern Searching</a></span> \r\n           \t          \t\r\n\t\t\t\t\t</footer><!-- .entry-meta -->\r\n\t</article><!-- #post -->\r\n<div class="related_posts"><h3>Related Posts:</h3><ul><li><a href="http://www.geeksforgeeks.org/%c2%ad%c2%adkasais-algorithm-for-construction-of-lcp-array-from-suffix-array/" title="\xc2\xad\xc2\xadkasai\xe2\x80\x99s Algorithm for Construction of LCP array from Suffix Array">\xc2\xad\xc2\xadkasai\xe2\x80\x99s Algorithm for Construction of LCP array from Suffix Array</a></li><li><a href="http://www.geeksforgeeks.org/overview-of-data-structures-set-3-graph-trie-segment-tree-and-suffix-tree/" title="Overview of Data Structures | Set 3 (Graph, Trie, Segment Tree and Suffix Tree)">Overview of Data Structures | Set 3 (Graph, Trie, Segment Tree and Suffix Tree)</a></li><li><a href="http://www.geeksforgeeks.org/heavy-light-decomposition-set-2-implementation/" title="Heavy Light Decomposition | Set 2 (Implementation)">Heavy Light Decomposition | Set 2 (Implementation)</a></li><li><a href="http://www.geeksforgeeks.org/heavy-light-decomposition-set-1-introduction/" title="Heavy Light Decomposition | Set 1 (Introduction)">Heavy Light Decomposition | Set 1 (Introduction)</a></li><li><a href="http://www.geeksforgeeks.org/count-inversions-of-size-three-in-a-give-array/" title="Count Inversions of size three in a give array">Count Inversions of size three in a give array</a></li><li><a href="http://www.geeksforgeeks.org/count-inversions-array-set-3-using-bit/" title="Count inversions in an array | Set 3 (Using BIT)">Count inversions in an array | Set 3 (Using BIT)</a></li><li><a href="http://www.geeksforgeeks.org/find-lca-in-binary-tree-using-rmq/" title="Find LCA in Binary Tree using RMQ">Find LCA in Binary Tree using RMQ</a></li><li><a href="http://www.geeksforgeeks.org/range-minimum-query-for-static-array/" title="Range Minimum Query (Square Root Decomposition and Sparse Table)">Range Minimum Query (Square Root Decomposition and Sparse Table)</a></li></ul></div><br></br>\r\n\r\n<!-- Added on 29 Oct 2015 for next and previous from same category -->\r\n<nav class="nav-single">\r\n\t\t\t\t\t<div class="assistive-text">Post navigation</div>\r\n\t\t\t\t\t<span class="nav-previous"><a href="http://www.geeksforgeeks.org/data-structure-dictionary-spell-checker/" rel="prev">Previous post in category</a></span>\r\n\t\t\t\t\t<span class="nav-next"><a href="http://www.geeksforgeeks.org/ukkonens-suffix-tree-construction-part-1/" rel="next">Next post in category</a></span>\r\n\t\t\t\t</nav><!-- .nav-single -->\r\n\r\n\r\n<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>\r\n    <script type="text/javascript">\r\n    $(document).ready(function(){\r\n        $.ajax({\r\n            url:"http://courses.geeksforgeeks.org/plugin.php",\r\n            method:"POST",\r\n            dataType:"json",\r\n            data:{post_id:$("#ratePlugin").attr("pid"),url:window.location.href},\r\n            xhrFields:{withCredentials:true},\r\n            success:function(response){\r\n                $("#ratePlugin").html(response.rate);\r\n                $("#markPlugin").html(response.mark);\r\n            },\r\n            complete:function(){\r\n                $(".box").click(function(){\r\n                    rrequest({post_id:$("#ratePlugin").attr("pid"),post_title:$("#ratePlugin").attr("ptitle"),rating:$(this).attr("rating"),url:window.location.href});\r\n                });\r\n                $(".mark").click(function(){\r\n                    mrequest({post_id:$("#markPlugin").attr("pid"),post_title:$("#markPlugin").attr("ptitle"),op:$(this).attr("id"),url:window.location.href});\r\n                });\r\n            }\r\n        });\r\n        function rrequest(payload){\r\n            $.ajax({\r\n                url:"http://courses.geeksforgeeks.org/gfgRatings.php",\r\n                method:"POST",\r\n                dataType:"html",\r\n                data:payload,\r\n                xhrFields:{withCredentials:true},\r\n                success:function(response){\r\n                    $("#ratePlugin").html(response);\r\n                },\r\n                complete:function(){\r\n                    $(".box").click(function(){\r\n                        rrequest({post_id:$("#ratePlugin").attr("pid"),post_title:$("#ratePlugin").attr("ptitle"),rating:$(this).attr("rating"),url:window.location.href});\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        //rrequest({post_id:$("#ratePlugin").attr("pid"),url:window.location.href});\r\n        function mrequest(payload){\r\n            $.ajax({\r\n                url:"http://courses.geeksforgeeks.org/gfgMarking.php",\r\n                method:"POST",\r\n                dataType:"html",\r\n                data:payload,\r\n                xhrFields:{withCredentials:true},\r\n                success:function(response){\r\n                    $("#markPlugin").html(response);\r\n                },\r\n                complete:function(){\r\n                    $(".mark").click(function(){\r\n                        mrequest({post_id:$("#markPlugin").attr("pid"),post_title:$("#markPlugin").attr("ptitle"),op:$(this).attr("id"),url:window.location.href});\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        //mrequest({post_id:$("#markPlugin").attr("pid"),url:window.location.href});\r\n    });\r\n</script>\r\n\r\n<div class="plugins">\r\n<div pid="131035" ptitle="Pattern Searching using a Trie of all Suffixes" id="ratePlugin"></div>\r\n<div pid="131035" ptitle="Pattern Searching using a Trie of all Suffixes" id="markPlugin"></div>\r\n</div>\r\n\r\n<br></br>\r\n\r\n<script>\r\n  window.fbAsyncInit=function() {\r\n    FB.init({\r\n      appId      : \\\'380853768781431\\\',\r\n      xfbml      : true,\r\n      version    : \\\'v2.3\\\'\r\n    });\r\n  };\r\n\r\n  (function(d, s, id){\r\n     var js, fjs = d.getElementsByTagName(s)[0];\r\n     if (d.getElementById(id)) {return;}\r\n     js = d.createElement(s); js.id = id;\r\n     js.src = "//connect.facebook.net/en_US/sdk.js";\r\n     fjs.parentNode.insertBefore(js, fjs);\r\n   }(document, \\\'script\\\', \\\'facebook-jssdk\\\'));\r\n</script>\r\n<div class="fb-like" data-share="true" data-width="450" data-show-faces="true"></div>\r\n\r\n<br></br>\r\n<p>Writing code in comment? Please use <a href="http://code.geeksforgeeks.org/">code.geeksforgeeks.org</a>, generate link and share the link here.</a>\r\n\t\t\t\t\r\n<div id="disqus_thread">\r\n    </div>\r\n\r\n<script type="text/javascript">\r\nvar disqus_url = \'http://www.geeksforgeeks.org/pattern-searching-using-trie-suffixes/\';\r\nvar disqus_identifier = \'131035 http://www.geeksforgeeks.org/?p=131035\';\r\nvar disqus_container_id = \'disqus_thread\';\r\nvar disqus_shortname = \'geeksforgeeks\';\r\nvar disqus_title = "Pattern Searching using a Trie of all Suffixes";\r\nvar disqus_config_custom = window.disqus_config;\r\nvar disqus_config = function () {\r\n    /*\r\n    All currently supported events:\r\n    onReady: fires when everything is ready,\r\n    onNewComment: fires when a new comment is posted,\r\n    onIdentify: fires when user is authenticated\r\n    */\r\n    \r\n    \r\n    this.language = \'\';\r\n    \r\n    if (disqus_config_custom) {\r\n        disqus_config_custom.call(this);\r\n    }\r\n};\r\n\r\n(function() {\r\n    var dsq = document.createElement(\'script\'); dsq.type = \'text/javascript\';\r\n    dsq.async = true;\r\n    dsq.src = \'//\' + disqus_shortname + \'.disqus.com/embed.js\';\r\n    (document.getElementsByTagName(\'head\')[0] || document.getElementsByTagName(\'body\')[0]).appendChild(dsq);\r\n})();\r\n</script>\r\n\r\n\r\n\t\t\t\r\n\t\t</div><!-- #content -->\r\n\t</div><!-- #primary -->\r\n\r\n\r\n\t\t\t<div id="secondary" class="widget-area" role="complementary">\r\n\t\t\t<aside id="text-9" class="widget widget_text">\t\t\t<div class="textwidget"><div id="fb-root"></div>\r\n<script>(function(d, s, id) {\r\n  var js, fjs = d.getElementsByTagName(s)[0];\r\n  if (d.getElementById(id)) return;\r\n  js = d.createElement(s); js.id = id;\r\n  js.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.3&appId=138031159685820";\r\n  fjs.parentNode.insertBefore(js, fjs);\r\n}(document, \'script\', \'facebook-jssdk\'));</script>\r\n\r\n<div class="fb-page" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="300" data-height="180" data-small-header="true" data-adapt-container-width="false" data-hide-cover="true" data-show-facepile="true" data-show-posts="false"><div class="fb-xfbml-parse-ignore"><blockquote cite="https://www.facebook.com/pages/GeeksforGeeks/316764689022"><a href="https://www.facebook.com/pages/GeeksforGeeks/316764689022">GeeksforGeeks</a></blockquote></div></div>\r\n</div>\n\t\t</aside><aside id="text-33" class="widget widget_text">\t\t\t<div class="textwidget"><a href="http://www.springpeople.com/gfg-landing">\r\n<img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/GfG-2.jpg" alt="SpringPeople Ad">\r\n</a>\r\n</div>\n\t\t</aside><aside id="text-14" class="widget widget_text"><p class="widget-title">Popular Posts</p>\t\t\t<div class="textwidget"><ul>\r\n<li><a href="http://www.geeksforgeeks.org/top-algorithms-and-data-structures-for-competitive-programming/">Top 10 Algorithms and Data Structures for Competitive Programming</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/top-10-algorithms-in-interview-questions/">Top 10 algorithms in Interview Questions</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/how-to-begin-with-competitive-programming/">How to begin with Competitive Programming?</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>\r\n<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>\r\n<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding \xe2\x80\x9cextern\xe2\x80\x9d keyword in C</a> </li>\r\n<li><a href="http://www.geeksforgeeks.org/heavy-light-decomposition-set-1-introduction/"> Heavy Light Decomposition</a> </li>\r\n<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>\r\n</ul></div>\n\t\t</aside><aside id="text-17" class="widget widget_text">\t\t\t<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<!-- Big 300x600 Sidebar -->\r\n<ins class="adsbygoogle"\r\n     style="display:inline-block;width:300px;height:600px"\r\n     data-ad-client="ca-pub-9465609616171866"\r\n     data-ad-slot="4402736037"></ins>\r\n<script>\r\n(adsbygoogle = window.adsbygoogle || []).push({});\r\n</script></div>\n\t\t</aside><aside id="text-32" class="widget widget_text">\t\t\t<div class="textwidget"><form style="border:1px solid #ccc;padding:3px;text-align:center;" action="https://feedburner.google.com/fb/a/mailverify" method="post" target="popupwindow" onsubmit="window.open(\'https://feedburner.google.com/fb/a/mailverify?uri=Geeksforgeeks\', \'popupwindow\', \'scrollbars=yes,width=550,height=520\');return true"><p>Subscribe and Never Miss an Article</p><input type="text" style="width:140px" placeholder="Email Address" name="email"/><input type="hidden" value="Geeksforgeeks" name="uri"/><input type="hidden" name="loc" value="en_US"/>&nbsp;&nbsp;<input type="submit" style="background-color: #4cb96b;" value="Subscribe" /></form></div>\n\t\t</aside><aside id="text-18" class="widget widget_text">\t\t\t<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<!-- LargeRectangleSide -->\r\n<ins class="adsbygoogle"\r\n     style="display:inline-block;width:336px;height:280px"\r\n     data-ad-client="ca-pub-9465609616171866"\r\n     data-ad-slot="1884636833"></ins>\r\n<script>\r\n(adsbygoogle = window.adsbygoogle || []).push({});\r\n</script></div>\n\t\t</aside><aside id="text-13" class="widget widget_text">\t\t\t<div class="textwidget"><ul><li><a href="http://geeksquiz.com/category/articles/puzzle/">Common Interview Puzzles</a></li><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/advanced-data-structure/">Advanced Data Structures</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/pattern-searching/">Pattern Searching</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li><li><a href="http://www.geeksforgeeks.org/category/searching/">Searching</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/sorting/">Sorting</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/Hash/">Hashing</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/algorithm/analysis/">Analysis of Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/algorithm/mathematical/">Mathematical Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/algorithm/randomized/">Randomized Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>\r\n</ul>\r\n\r\n\r\n\r\n\r\n</div>\n\t\t</aside><aside id="categories-384568212" class="widget widget_categories"><p class="widget-title">All Categories</p><label class="screen-reader-text" for="cat">All Categories</label><select name=\'cat\' id=\'cat\' class=\'postform\' >\n\t<option value=\'-1\'>Select Category</option>\n\t<option class="level-0" value="1762">Advanced Data Structure&nbsp;&nbsp;(69)</option>\n\t<option class="level-0" value="1744">Algorithm&nbsp;&nbsp;(399)</option>\n\t<option class="level-1" value="1745">&nbsp;&nbsp;&nbsp;Analysis&nbsp;&nbsp;(15)</option>\n\t<option class="level-1" value="1748">&nbsp;&nbsp;&nbsp;Backtracking&nbsp;&nbsp;(11)</option>\n\t<option class="level-1" value="1750">&nbsp;&nbsp;&nbsp;Divide and Conquer&nbsp;&nbsp;(29)</option>\n\t<option class="level-1" value="1746">&nbsp;&nbsp;&nbsp;Dynamic Programming&nbsp;&nbsp;(91)</option>\n\t<option class="level-1" value="1754">&nbsp;&nbsp;&nbsp;Geometric&nbsp;&nbsp;(14)</option>\n\t<option class="level-1" value="1747">&nbsp;&nbsp;&nbsp;Greedy&nbsp;&nbsp;(20)</option>\n\t<option class="level-1" value="1753">&nbsp;&nbsp;&nbsp;Mathematical&nbsp;&nbsp;(122)</option>\n\t<option class="level-1" value="1749">&nbsp;&nbsp;&nbsp;Pattern Searching&nbsp;&nbsp;(29)</option>\n\t<option class="level-1" value="1757">&nbsp;&nbsp;&nbsp;Randomized&nbsp;&nbsp;(18)</option>\n\t<option class="level-1" value="1751">&nbsp;&nbsp;&nbsp;Searching&nbsp;&nbsp;(43)</option>\n\t<option class="level-1" value="1752">&nbsp;&nbsp;&nbsp;Sorting&nbsp;&nbsp;(39)</option>\n\t<option class="level-0" value="3">Arrays&nbsp;&nbsp;(80)</option>\n\t<option class="level-0" value="18">Articles&nbsp;&nbsp;(25)</option>\n\t<option class="level-0" value="1761">Binary Search Tree&nbsp;&nbsp;(37)</option>\n\t<option class="level-0" value="17">Bit Magic&nbsp;&nbsp;(56)</option>\n\t<option class="level-0" value="14">C/C++ Puzzles&nbsp;&nbsp;(244)</option>\n\t<option class="level-0" value="1790">Competitive Programming&nbsp;&nbsp;(4)</option>\n\t<option class="level-0" value="1710">GBlog&nbsp;&nbsp;(54)</option>\n\t<option class="level-0" value="67">GFacts&nbsp;&nbsp;(43)</option>\n\t<option class="level-0" value="97">Graph&nbsp;&nbsp;(74)</option>\n\t<option class="level-0" value="1756">Hash&nbsp;&nbsp;(21)</option>\n\t<option class="level-0" value="1755">Heap&nbsp;&nbsp;(18)</option>\n\t<option class="level-0" value="1140">Interview Experiences&nbsp;&nbsp;(1,049)</option>\n\t<option class="level-0" value="87">Java&nbsp;&nbsp;(55)</option>\n\t<option class="level-0" value="8">Linked Lists&nbsp;&nbsp;(70)</option>\n\t<option class="level-0" value="1760">Matrix&nbsp;&nbsp;(39)</option>\n\t<option class="level-0" value="66">MCQ&nbsp;&nbsp;(95)</option>\n\t<option class="level-0" value="4">Misc&nbsp;&nbsp;(41)</option>\n\t<option class="level-0" value="5">Output&nbsp;&nbsp;(55)</option>\n\t<option class="level-0" value="1767">Project&nbsp;&nbsp;(21)</option>\n\t<option class="level-0" value="1789">Python&nbsp;&nbsp;(5)</option>\n\t<option class="level-0" value="1743">Queue&nbsp;&nbsp;(16)</option>\n\t<option class="level-0" value="1742">Stack&nbsp;&nbsp;(25)</option>\n\t<option class="level-0" value="7">Strings&nbsp;&nbsp;(61)</option>\n\t<option class="level-0" value="1788">Technical Scripter&nbsp;&nbsp;(13)</option>\n\t<option class="level-0" value="19">Trees&nbsp;&nbsp;(114)</option>\n</select>\n\n<script type=\'text/javascript\'>\n/* <![CDATA[ */\n(function() {\n\tvar dropdown = document.getElementById( "cat" );\n\tfunction onCatChange() {\n\t\tif ( dropdown.options[ dropdown.selectedIndex ].value > 0 ) {\n\t\t\tlocation.href = "http://www.geeksforgeeks.org/?cat=" + dropdown.options[ dropdown.selectedIndex ].value;\n\t\t}\n\t}\n\tdropdown.onchange = onCatChange;\n})();\n/* ]]> */\n</script>\n\n</aside><aside id="text-21" class="widget widget_text"><p class="widget-title">Recent Comments</p>\t\t\t<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>\n\t\t</aside><aside id="tag_cloud-3" class="widget widget_tag_cloud"><p class="widget-title">Tags</p><div class="tagcloud"><a href=\'http://www.geeksforgeeks.org/tag/adobe/\' class=\'tag-link-148\' title=\'32 topics\' style=\'font-size: 12.941176470588pt;\'>Adobe</a>\n<a href=\'http://www.geeksforgeeks.org/tag/advance-data-structures/\' class=\'tag-link-152\' title=\'31 topics\' style=\'font-size: 12.838235294118pt;\'>Advance Data Structures</a>\n<a href=\'http://www.geeksforgeeks.org/tag/advanced-data-structures/\' class=\'tag-link-150\' title=\'38 topics\' style=\'font-size: 13.661764705882pt;\'>Advanced Data Structures</a>\n<a href=\'http://www.geeksforgeeks.org/tag/amazon/\' class=\'tag-link-141\' title=\'253 topics\' style=\'font-size: 22pt;\'>Amazon</a>\n<a href=\'http://www.geeksforgeeks.org/tag/array/\' class=\'tag-link-68\' title=\'12 topics\' style=\'font-size: 8.7205882352941pt;\'>array</a>\n<a href=\'http://www.geeksforgeeks.org/tag/backtracking/\' class=\'tag-link-112\' title=\'11 topics\' style=\'font-size: 8.4117647058824pt;\'>Backtracking</a>\n<a href=\'http://www.geeksforgeeks.org/tag/bharti-softbank-hike/\' class=\'tag-link-1214\' title=\'10 topics\' style=\'font-size: 8pt;\'>Bharti SoftBank (HIKE)</a>\n<a href=\'http://www.geeksforgeeks.org/tag/bit-magic/\' class=\'tag-link-17\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>Bit Magic</a>\n<a href=\'http://www.geeksforgeeks.org/tag/c/\' class=\'tag-link-86\' title=\'18 topics\' style=\'font-size: 10.470588235294pt;\'>C++</a>\n<a href=\'http://www.geeksforgeeks.org/tag/cn/\' class=\'tag-link-142\' title=\'12 topics\' style=\'font-size: 8.7205882352941pt;\'>CN</a>\n<a href=\'http://www.geeksforgeeks.org/tag/c-puzzle/\' class=\'tag-link-69\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>c puzzle</a>\n<a href=\'http://www.geeksforgeeks.org/tag/d-e-shaw/\' class=\'tag-link-823\' title=\'17 topics\' style=\'font-size: 10.264705882353pt;\'>D-E-Shaw</a>\n<a href=\'http://www.geeksforgeeks.org/tag/dbms/\' class=\'tag-link-139\' title=\'11 topics\' style=\'font-size: 8.4117647058824pt;\'>DBMS</a>\n<a href=\'http://www.geeksforgeeks.org/tag/divide-and-conquer/\' class=\'tag-link-113\' title=\'27 topics\' style=\'font-size: 12.220588235294pt;\'>Divide and Conquer</a>\n<a href=\'http://www.geeksforgeeks.org/tag/dynamic-programming/\' class=\'tag-link-111\' title=\'83 topics\' style=\'font-size: 17.058823529412pt;\'>Dynamic Programming</a>\n<a href=\'http://www.geeksforgeeks.org/tag/flipkart/\' class=\'tag-link-173\' title=\'46 topics\' style=\'font-size: 14.485294117647pt;\'>Flipkart</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate/\' class=\'tag-link-114\' title=\'88 topics\' style=\'font-size: 17.367647058824pt;\'>GATE</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-2012/\' class=\'tag-link-133\' title=\'10 topics\' style=\'font-size: 8pt;\'>GATE-CS-2012</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-c-language/\' class=\'tag-link-72\' title=\'10 topics\' style=\'font-size: 8pt;\'>GATE-CS-C-Language</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-ds-algo/\' class=\'tag-link-79\' title=\'35 topics\' style=\'font-size: 13.352941176471pt;\'>GATE-CS-DS-&amp;-Algo</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-older/\' class=\'tag-link-145\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>GATE-CS-Older</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gfact/\' class=\'tag-link-67\' title=\'20 topics\' style=\'font-size: 10.882352941176pt;\'>GFacts</a>\n<a href=\'http://www.geeksforgeeks.org/tag/goldman-sachs/\' class=\'tag-link-590\' title=\'20 topics\' style=\'font-size: 10.882352941176pt;\'>Goldman Sachs</a>\n<a href=\'http://www.geeksforgeeks.org/tag/google/\' class=\'tag-link-155\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>Google</a>\n<a href=\'http://www.geeksforgeeks.org/tag/graph/\' class=\'tag-link-97\' title=\'45 topics\' style=\'font-size: 14.382352941176pt;\'>Graph</a>\n<a href=\'http://www.geeksforgeeks.org/tag/greedy-algorithm/\' class=\'tag-link-159\' title=\'20 topics\' style=\'font-size: 10.882352941176pt;\'>Greedy Algorithm</a>\n<a href=\'http://www.geeksforgeeks.org/tag/hashing/\' class=\'tag-link-250\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>Hashing</a>\n<a href=\'http://www.geeksforgeeks.org/tag/interview-experience/\' class=\'tag-link-126\' title=\'216 topics\' style=\'font-size: 21.382352941176pt;\'>Interview Experience</a>\n<a href=\'http://www.geeksforgeeks.org/tag/java/\' class=\'tag-link-87\' title=\'61 topics\' style=\'font-size: 15.720588235294pt;\'>Java</a>\n<a href=\'http://www.geeksforgeeks.org/tag/maq-software/\' class=\'tag-link-1392\' title=\'11 topics\' style=\'font-size: 8.4117647058824pt;\'>MAQ Software</a>\n<a href=\'http://www.geeksforgeeks.org/tag/mathematicalalgo/\' class=\'tag-link-154\' title=\'73 topics\' style=\'font-size: 16.544117647059pt;\'>MathematicalAlgo</a>\n<a href=\'http://www.geeksforgeeks.org/tag/matrix/\' class=\'tag-link-211\' title=\'21 topics\' style=\'font-size: 11.088235294118pt;\'>Matrix</a>\n<a href=\'http://www.geeksforgeeks.org/tag/microsoft/\' class=\'tag-link-104\' title=\'95 topics\' style=\'font-size: 17.676470588235pt;\'>Microsoft</a>\n<a href=\'http://www.geeksforgeeks.org/tag/morgan-stanley/\' class=\'tag-link-167\' title=\'17 topics\' style=\'font-size: 10.264705882353pt;\'>Morgan Stanley</a>\n<a href=\'http://www.geeksforgeeks.org/tag/operating-systems/\' class=\'tag-link-110\' title=\'19 topics\' style=\'font-size: 10.676470588235pt;\'>Operating systems</a>\n<a href=\'http://www.geeksforgeeks.org/tag/oracle/\' class=\'tag-link-171\' title=\'24 topics\' style=\'font-size: 11.705882352941pt;\'>Oracle</a>\n<a href=\'http://www.geeksforgeeks.org/tag/pattern-searching/\' class=\'tag-link-107\' title=\'26 topics\' style=\'font-size: 12.014705882353pt;\'>Pattern Searching</a>\n<a href=\'http://www.geeksforgeeks.org/tag/puzzle/\' class=\'tag-link-70\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>puzzle</a>\n<a href=\'http://www.geeksforgeeks.org/tag/python/\' class=\'tag-link-1770\' title=\'21 topics\' style=\'font-size: 11.088235294118pt;\'>Python</a>\n<a href=\'http://www.geeksforgeeks.org/tag/recursion/\' class=\'tag-link-85\' title=\'21 topics\' style=\'font-size: 11.088235294118pt;\'>Recursion</a>\n<a href=\'http://www.geeksforgeeks.org/tag/samsung/\' class=\'tag-link-180\' title=\'12 topics\' style=\'font-size: 8.7205882352941pt;\'>Samsung</a>\n<a href=\'http://www.geeksforgeeks.org/tag/sap-labs/\' class=\'tag-link-1414\' title=\'23 topics\' style=\'font-size: 11.5pt;\'>SAP Labs</a>\n<a href=\'http://www.geeksforgeeks.org/tag/snapdeal/\' class=\'tag-link-1246\' title=\'16 topics\' style=\'font-size: 9.9558823529412pt;\'>SnapDeal</a>\n<a href=\'http://www.geeksforgeeks.org/tag/stack/\' class=\'tag-link-94\' title=\'17 topics\' style=\'font-size: 10.264705882353pt;\'>stack</a>\n<a href=\'http://www.geeksforgeeks.org/tag/stack-queue/\' class=\'tag-link-899\' title=\'12 topics\' style=\'font-size: 8.7205882352941pt;\'>Stack-Queue</a></div>\n</aside><aside id="text-25" class="widget widget_text">\t\t\t<div class="textwidget"><ul>\r\n<li><h2><a href="http://geeksquiz.com/">GeeksQuiz</a></h2></li>\r\n\r\n<li><h2><a href="http://code.geeksforgeeks.org/">GeeksforGeeksIDE</a></h2></li>\r\n\r\n<li><h2><a href="http://www.practice.geeksforgeeks.org/">GeeksforGeeks Practice</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/data-structures/">Data Structures</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/c/">C Programming</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++ Programming</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/java/">Java Programming</a></h2></li>\r\n\r\n<li><h2><a href="http://geeksquiz.com/books/">Books</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Experiences</a></h2></li>\r\n\r\n<li><h2><a href="http://geeksquiz.com/gate-corner-2/">GATE CS</a></h2></li>\r\n\r\n<li><h2><a href="http://www.gatecs.geeksquiz.com">GATE CS Forum</a></h2></li>\r\n\r\n<li><h2><a href="https://play.google.com/store/apps/details?id=free.programming.programming">Android App</a></h2></li>\r\n</ul>\r\n\r\n</div>\n\t\t</aside>\t\t</div><!-- #secondary -->\r\n\t\t</div><!-- #main .wrapper -->\r\n\t<footer id="colophon" role="contentinfo">\r\n\t\t<div class="site-info">\r\n\t\t<div class="clear"></div>\r\n\t\t</div><!-- .site-info -->\r\n\t\t</footer><!-- #colophon -->\r\n<center>\r\n<div class="iconic-footer">\r\n\r\n@geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>  <a href="http://www.geeksforgeeks.org/about/"> &nbsp; &nbsp; &nbsp; &nbsp;About Us!&nbsp; &nbsp; &nbsp; &nbsp;</a><a href="http://www.geeksforgeeks.org/new/ad.htm"> &nbsp; &nbsp; &nbsp; &nbsp;Advertise with us!&nbsp; &nbsp; &nbsp; &nbsp;</a>\r\n\r\n      \t\t\t</div></center><!-- .site-info -->\r\n\r\n\t\t\t\t<div class="clear"></div>\r\n</div><!-- #page -->\r\n\r\n        <script type="text/javascript">\r\n        // <![CDATA[\r\n        var disqus_shortname = \'geeksforgeeks\';\r\n        (function () {\r\n            var nodes = document.getElementsByTagName(\'span\');\r\n            for (var i = 0, url; i < nodes.length; i++) {\r\n                if (nodes[i].className.indexOf(\'dsq-postid\') != -1) {\r\n                    nodes[i].parentNode.setAttribute(\'data-disqus-identifier\', nodes[i].getAttribute(\'data-dsqidentifier\'));\r\n                    url = nodes[i].parentNode.href.split(\'#\', 1);\r\n                    if (url.length == 1) { url = url[0]; }\r\n                    else { url = url[1]; }\r\n                    nodes[i].parentNode.href = url + \'#disqus_thread\';\r\n                }\r\n            }\r\n            var s = document.createElement(\'script\'); \r\n            s.async = true;\r\n            s.type = \'text/javascript\';\r\n            s.src = \'//\' + disqus_shortname + \'.disqus.com/count.js\';\r\n            (document.getElementsByTagName(\'HEAD\')[0] || document.getElementsByTagName(\'BODY\')[0]).appendChild(s);\r\n        }());\r\n        // ]]>\r\n        </script>\r\n        <script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js\'></script>\n<script type=\'text/javascript\'>\n\t(function(){\n\t\tvar corecss = document.createElement(\'link\');\n\t\tvar themecss = document.createElement(\'link\');\n\t\tvar corecssurl = "http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9b";\r\n\t\tif ( corecss.setAttribute ) {\r\n\t\t\t\tcorecss.setAttribute( "rel", "stylesheet" );\r\n\t\t\t\tcorecss.setAttribute( "type", "text/css" );\r\n\t\t\t\tcorecss.setAttribute( "href", corecssurl );\r\n\t\t} else {\r\n\t\t\t\tcorecss.rel = "stylesheet";\r\n\t\t\t\tcorecss.href = corecssurl;\r\n\t\t}\r\n\t\tdocument.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );\r\n\t\tvar themecssurl = "http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9b";\r\n\t\tif ( themecss.setAttribute ) {\r\n\t\t\t\tthemecss.setAttribute( "rel", "stylesheet" );\r\n\t\t\t\tthemecss.setAttribute( "type", "text/css" );\r\n\t\t\t\tthemecss.setAttribute( "href", themecssurl );\r\n\t\t} else {\r\n\t\t\t\tthemecss.rel = "stylesheet";\r\n\t\t\t\tthemecss.href = themecssurl;\r\n\t\t}\r\n\t\t//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);\r\n\t\tdocument.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );\r\n\t})();\n\tSyntaxHighlighter.config.strings.expandSource = \'+ expand source\';\n\tSyntaxHighlighter.config.strings.help = \'?\';\n\tSyntaxHighlighter.config.strings.alert = \'SyntaxHighlighter\\n\\n\';\n\tSyntaxHighlighter.config.strings.noBrush = \'Can\\\'t find brush for: \';\n\tSyntaxHighlighter.config.strings.brushNotHtmlScript = \'Brush wasn\\\'t configured for html-script option: \';\n\tSyntaxHighlighter.defaults[\'gutter\'] = false;\n\tSyntaxHighlighter.defaults[\'pad-line-numbers\'] = true;\n\tSyntaxHighlighter.defaults[\'toolbar\'] = false;\n\tSyntaxHighlighter.all();\r\n</script>\r\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/js/comment-reply.min.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/js/selectnav.js\'></script>\n\r\n\r\n<script type="text/javascript">\r\n\r\n  var _gaq = _gaq || [];\r\n  _gaq.push([\'_setAccount\', \'UA-12148232-1\']);\r\n  _gaq.push([\'_trackPageview\']);\r\n\r\n  (function() {\r\n    var ga = document.createElement(\'script\'); ga.type = \'text/javascript\'; ga.async = true;\r\n    ga.src = (\'https:\' == document.location.protocol ? \'https://ssl\' : \'http://www\') + \'.google-analytics.com/ga.js\';\r\n    var s = document.getElementsByTagName(\'script\')[0]; s.parentNode.insertBefore(ga, s);\r\n  })();\r\n\r\n</script>  \r\n<script async type="text/javascript" src="//cdn.fancybar.net/ac/fancybar.js?zoneid=1502&serve=C6ADVKE&placement=geeksforgeeks" id="_fancybar_js"></script>\r\n</body>\r\n</html>\n<!-- Dynamic page generated in 0.300 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2016-02-27 08:59:59 -->\n\n<!-- Compression = gzip -->\n<!-- super cache -->'
p700
sb.