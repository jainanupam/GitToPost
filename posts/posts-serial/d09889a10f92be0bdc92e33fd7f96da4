ccopy_reg
_reconstructor
p0
(cpost
Post
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'post_file'
p6
S'/Users/anupamjain/code/gitRepo/GitToPost/posts/Java/SegmentTree'
p7
sS'files_covered'
p8
c__builtin__
set
p9
((lp10
S'/Users/anupamjain/code/gitRepo/Questions/Algo/Java/SegmentTree.java'
p11
atp12
Rp13
sS'title'
p14
VSegment Tree | Set 1 (Sum of given range)
p15
sS'file_name'
p16
g11
sS'link'
p17
S'http://www.geeksforgeeks.org/segment-tree-set-1-sum-of-given-range/'
p18
sS'host_name'
p19
S'www.geeksforgeeks.org'
p20
sS'problem_text'
p21
g0
(cbs4.element
Tag
p22
g2
Ntp23
Rp24
(dp25
S'can_be_empty_element'
p26
I00
sS'previous_element'
p27
NsS'next_sibling'
p28
NsS'name'
p29
S'p'
p30
sS'parent'
p31
NsS'namespace'
p32
NsS'prefix'
p33
NsS'previous_sibling'
p34
NsS'attrs'
p35
(dp36
sS'next_element'
p37
g0
(g22
g2
Ntp38
Rp39
(dp40
g26
I00
sg27
g24
sg28
g0
(g22
g2
Ntp41
Rp42
(dp43
g26
I00
sg27
g0
(cbs4.element
NavigableString
p44
c__builtin__
unicode
p45
VLet us consider the following problem to understand Segment Trees.
p46
tp47
Rp48
(dp49
g34
Nsg27
g39
sg28
Nsg37
g42
sg31
g39
sbsg28
g0
(g22
g2
Ntp50
Rp51
(dp52
g26
I00
sg27
g0
(g22
g2
Ntp53
Rp54
(dp55
g26
I00
sg27
g0
(g44
g45
V Change value of a specified element of the array arr[i] = x where 0 <= i <= n-1.
p56
tp57
Rp58
(dp59
g34
g0
(g22
g2
Ntp60
Rp61
(dp62
g26
I00
sg27
g0
(g44
g45
V Find the sum of elements from index l to r where 0 <= l <= r <= n-1\u000a
p63
tp64
Rp65
(dp66
g34
g0
(g22
g2
Ntp67
Rp68
(dp69
g26
I00
sg27
g0
(g44
g45
V\u000a
p70
tp71
Rp72
(dp73
g34
g0
(g22
g2
Ntp74
Rp75
(dp76
g26
I01
sg27
g0
(g44
g45
VWe have an array arr[0 . . . n-1]. We should be able to
p77
tp78
Rp79
(dp80
g34
Nsg27
g42
sg28
g75
sg37
g75
sg31
g42
sbsg28
g72
sg29
Vbr
p81
sg31
g42
sg32
Nsg33
Nsg34
g79
sg35
(dp82
sg37
g72
sS'parser_class'
p83
cbs4
BeautifulSoup
p84
sS'hidden'
p85
I00
sS'contents'
p86
(lp87
sbsg27
g75
sg28
g68
sg37
g68
sg31
g42
sbsg28
g65
sg29
Vstrong
p88
sg31
g42
sg32
Nsg33
Nsg34
g72
sg35
(dp89
sg37
g0
(g44
g45
V1
p90
tp91
Rp92
(dp93
g34
Nsg27
g68
sg28
Nsg37
g65
sg31
g68
sbsg83
g84
sg85
I00
sg86
(lp94
g92
asbsg27
g92
sg28
g61
sg37
g61
sg31
g42
sbsg28
g58
sg29
Vstrong
p95
sg31
g42
sg32
Nsg33
Nsg34
g65
sg35
(dp96
sg37
g0
(g44
g45
V2
p97
tp98
Rp99
(dp100
g34
Nsg27
g61
sg28
Nsg37
g58
sg31
g61
sbsg83
g84
sg85
I00
sg86
(lp101
g99
asbsg27
g99
sg28
g54
sg37
g54
sg31
g42
sbsg28
Nsg29
Vspan
p102
sg31
g42
sg32
Nsg33
Nsg34
g58
sg35
(dp103
Vid
p104
Vmore-29503
p105
ssg37
g51
sg83
g84
sg85
I00
sg86
(lp106
sbsg28
g0
(g22
g2
Ntp107
Rp108
(dp109
g26
I00
sg27
g0
(g44
g45
V is to run a loop from l to r and calculate sum of elements in given range.  To update a value, simply do arr[i] = x.  The first operation takes O(n) time and second operation takes O(1) time.  
p110
tp111
Rp112
(dp113
g34
g0
(g22
g2
Ntp114
Rp115
(dp116
g26
I00
sg27
g0
(g44
g45
VA 
p117
tp118
Rp119
(dp120
g34
Nsg27
g51
sg28
g115
sg37
g115
sg31
g51
sbsg28
g112
sg29
Vstrong
p121
sg31
g51
sg32
Nsg33
Nsg34
g119
sg35
(dp122
sg37
g0
(g44
g45
Vsimple solution
p123
tp124
Rp125
(dp126
g34
Nsg27
g115
sg28
Nsg37
g112
sg31
g115
sbsg83
g84
sg85
I00
sg86
(lp127
g125
asbsg27
g125
sg28
Nsg37
g108
sg31
g51
sbsg28
g0
(g22
g2
Ntp128
Rp129
(dp130
g26
I00
sg27
g0
(g44
g45
V is to create another array and store sum from start to i at the ith index in this array. Sum of a given range can now be calculated in O(1) time, but update operation takes O(n) time now.  This works well if the number of query operations are large and very few updates.
p131
tp132
Rp133
(dp134
g34
g0
(g22
g2
Ntp135
Rp136
(dp137
g26
I00
sg27
g108
sg28
g133
sg29
Vstrong
p138
sg31
g108
sg32
Nsg33
Nsg34
Nsg35
(dp139
sg37
g0
(g44
g45
VAnother solution
p140
tp141
Rp142
(dp143
g34
Nsg27
g136
sg28
Nsg37
g133
sg31
g136
sbsg83
g84
sg85
I00
sg86
(lp144
g142
asbsg27
g142
sg28
Nsg37
g129
sg31
g108
sbsg28
g0
(g22
g2
Ntp145
Rp146
(dp147
g26
I00
sg27
g0
(g44
g45
V We can use a Segment Tree to do both operations in O(Logn) time.
p148
tp149
Rp150
(dp151
g34
g0
(g22
g2
Ntp152
Rp153
(dp154
g26
I00
sg27
g0
(g44
g45
VWhat if the number of query and updates are equal? 
p155
tp156
Rp157
(dp158
g34
Nsg27
g129
sg28
g153
sg37
g153
sg31
g129
sbsg28
g150
sg29
Vstrong
p159
sg31
g129
sg32
Nsg33
Nsg34
g157
sg35
(dp160
sg37
g0
(g44
g45
VCan we perform both the operations in O(log n) time once given the array?
p161
tp162
Rp163
(dp164
g34
Nsg27
g153
sg28
Nsg37
g150
sg31
g153
sbsg83
g84
sg85
I00
sg86
(lp165
g163
asbsg27
g163
sg28
Nsg37
g146
sg31
g129
sbsg28
g0
(g22
g2
Ntp166
Rp167
(dp168
g26
I00
sg27
g0
(g44
g45
V Each internal node represents some merging of the leaf nodes.  The merging may be different for different problems. For this problem, merging is sum of leaves under a node.
p169
tp170
Rp171
(dp172
g34
g0
(g22
g2
Ntp173
Rp174
(dp175
g26
I00
sg27
g0
(g44
g45
V\u000a
p176
tp177
Rp178
(dp179
g34
g0
(g22
g2
Ntp180
Rp181
(dp182
g26
I01
sg27
g0
(g44
g45
V Leaf Nodes are the elements of the input array.
p183
tp184
Rp185
(dp186
g34
g0
(g22
g2
Ntp187
Rp188
(dp189
g26
I00
sg27
g0
(g44
g45
V\u000a
p190
tp191
Rp192
(dp193
g34
g0
(g22
g2
Ntp194
Rp195
(dp196
g26
I01
sg27
g0
(g44
g45
VRepresentation of Segment trees
p197
tp198
Rp199
(dp200
g34
Nsg27
g0
(g22
g2
Ntp201
Rp202
(dp203
g26
I00
sg27
g146
sg28
g195
sg29
Vstrong
p204
sg31
g146
sg32
Nsg33
Nsg34
Nsg35
(dp205
sg37
g199
sg83
g84
sg85
I00
sg86
(lp206
g199
asbsg28
Nsg37
g195
sg31
g202
sbsg28
g192
sg29
Vbr
p207
sg31
g146
sg32
Nsg33
Nsg34
g202
sg35
(dp208
sg37
g192
sg83
g84
sg85
I00
sg86
(lp209
sbsg27
g195
sg28
g188
sg37
g188
sg31
g146
sbsg28
g185
sg29
Vstrong
p210
sg31
g146
sg32
Nsg33
Nsg34
g192
sg35
(dp211
sg37
g0
(g44
g45
V1.
p212
tp213
Rp214
(dp215
g34
Nsg27
g188
sg28
Nsg37
g185
sg31
g188
sbsg83
g84
sg85
I00
sg86
(lp216
g214
asbsg27
g214
sg28
g181
sg37
g181
sg31
g146
sbsg28
g178
sg29
Vbr
p217
sg31
g146
sg32
Nsg33
Nsg34
g185
sg35
(dp218
sg37
g178
sg83
g84
sg85
I00
sg86
(lp219
sbsg27
g181
sg28
g174
sg37
g174
sg31
g146
sbsg28
g171
sg29
Vstrong
p220
sg31
g146
sg32
Nsg33
Nsg34
g178
sg35
(dp221
sg37
g0
(g44
g45
V2.
p222
tp223
Rp224
(dp225
g34
Nsg27
g174
sg28
Nsg37
g171
sg31
g174
sbsg83
g84
sg85
I00
sg86
(lp226
g224
asbsg27
g224
sg28
Nsg37
g167
sg31
g146
sbsg28
g0
(g22
g2
Ntp227
Rp228
(dp229
g26
I00
sg27
g0
(g44
g45
V.
p230
tp231
Rp232
(dp233
g34
g0
(g22
g2
Ntp234
Rp235
(dp236
g26
I00
sg27
g0
(g44
g45
VAn array representation of tree is used to represent Segment Trees. For each node at index i, the left child is at index 2*i+1, right child at 2*i+2 and the parent is at 
p237
tp238
Rp239
(dp240
g34
Nsg27
g167
sg28
g235
sg37
g235
sg31
g167
sbsg28
g232
sg29
Va
p241
sg31
g167
sg32
Nsg33
Nsg34
g239
sg35
(dp242
Vhref
p243
Vhttp://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/st1.png
p244
ssg37
g0
(g22
g2
Ntp245
Rp246
(dp247
g26
I01
sg27
g235
sg28
Nsg29
Vimg
p248
sg31
g235
sg32
Nsg33
Nsg34
Nsg35
(dp249
Vsrc
p250
Vhttp://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/st1.png
p251
sValt
p252
Vst1
p253
sVheight
p254
V19
p255
sVclass
p256
(lp257
Valignnone
p258
aVsize-full
p259
aVwp-image-134875
p260
asVwidth
p261
V79
p262
ssg37
g232
sg83
g84
sg85
I00
sg86
(lp263
sbsg83
g84
sg85
I00
sg86
(lp264
g246
asbsg27
g246
sg28
Nsg37
g228
sg31
g167
sbsg28
g0
(g22
g2
Ntp265
Rp266
(dp267
g26
I00
sg27
g0
(g22
g2
Ntp268
Rp269
(dp270
g26
I01
sg27
g0
(g22
g2
Ntp271
Rp272
(dp273
g26
I00
sg27
g228
sg28
Nsg29
g241
sg31
g228
sg32
Nsg33
Nsg34
Nsg35
(dp274
Vhref
p275
Vhttp://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/segment-tree1.png
p276
ssg37
g269
sg83
g84
sg85
I00
sg86
(lp277
g269
asbsg28
Nsg29
Vimg
p278
sg31
g272
sg32
Nsg33
Nsg34
Nsg35
(dp279
Vsrc
p280
Vhttp://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/segment-tree1.png
p281
sVtitle
p282
Vsegment-tree
p283
sVheight
p284
V318
p285
sVwidth
p286
V460
p287
sValt
p288
V
p289
sVclass
p290
(lp291
Valigncenter
p292
aVsize-full
p293
aVwp-image-29594
p294
assg37
g266
sg83
g84
sg85
I00
sg86
(lp295
sbsg28
g0
(g22
g2
Ntp296
Rp297
(dp298
g26
I00
sg27
g0
(g44
g45
g230
tp299
Rp300
(dp301
g34
g0
(g22
g2
Ntp302
Rp303
(dp304
g26
I00
sg27
g0
(g44
g45
V.  Since the tree is represented using array and relation between parent and child indexes must be maintained, size of memory allocated for segment tree will be 
p305
tp306
Rp307
(dp308
g34
g0
(g22
g2
Ntp309
Rp310
(dp311
g26
I00
sg27
g0
(g44
g45
V\u000aHeight of the segment tree will be 
p312
tp313
Rp314
(dp315
g34
g0
(g22
g2
Ntp316
Rp317
(dp318
g26
I01
sg27
g0
(g44
g45
V because we always divide segments in two halves at every level. Since the constructed tree is always full binary tree with n leaves, there will be n-1 internal nodes. So total number of nodes will be 2*n \u2013 1.
p319
tp320
Rp321
(dp322
g34
g0
(g22
g2
Ntp323
Rp324
(dp325
g26
I00
sg27
g0
(g44
g45
V\u000aAll levels of the constructed segment tree will be completely filled except the last level. Also, the tree will be a 
p326
tp327
Rp328
(dp329
g34
g0
(g22
g2
Ntp330
Rp331
(dp332
g26
I01
sg27
g0
(g44
g45
V\u000aWe start with a segment arr[0 . . . n-1]. and every time we divide the current segment into two halves(if it has not yet become a segment of length 1), and then call the same procedure on both halves, and for each such segment we store the sum in corresponding node.
p333
tp334
Rp335
(dp336
g34
g0
(g22
g2
Ntp337
Rp338
(dp339
g26
I01
sg27
g0
(g44
g45
VConstruction of Segment Tree from given array
p340
tp341
Rp342
(dp343
g34
Nsg27
g0
(g22
g2
Ntp344
Rp345
(dp346
g26
I00
sg27
g266
sg28
g338
sg29
Vstrong
p347
sg31
g266
sg32
Nsg33
Nsg34
Nsg35
(dp348
sg37
g342
sg83
g84
sg85
I00
sg86
(lp349
g342
asbsg28
Nsg37
g338
sg31
g345
sbsg28
g335
sg29
Vbr
p350
sg31
g266
sg32
Nsg33
Nsg34
g345
sg35
(dp351
sg37
g335
sg83
g84
sg85
I00
sg86
(lp352
sbsg27
g338
sg28
g331
sg37
g331
sg31
g266
sbsg28
g328
sg29
Vbr
p353
sg31
g266
sg32
Nsg33
Nsg34
g335
sg35
(dp354
sg37
g328
sg83
g84
sg85
I00
sg86
(lp355
sbsg27
g331
sg28
g324
sg37
g324
sg31
g266
sbsg28
g321
sg29
g241
sg31
g266
sg32
Nsg33
Nsg34
g328
sg35
(dp356
Vhref
p357
Vhttp://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees
p358
sVtarget
p359
V_blank
p360
ssg37
g0
(g44
g45
VFull Binary Tree
p361
tp362
Rp363
(dp364
g34
Nsg27
g324
sg28
Nsg37
g321
sg31
g324
sbsg83
g84
sg85
I00
sg86
(lp365
g363
asbsg27
g363
sg28
g317
sg37
g317
sg31
g266
sbsg28
g314
sg29
Vbr
p366
sg31
g266
sg32
Nsg33
Nsg34
g321
sg35
(dp367
sg37
g314
sg83
g84
sg85
I00
sg86
(lp368
sbsg27
g317
sg28
g310
sg37
g310
sg31
g266
sbsg28
g307
sg29
g241
sg31
g266
sg32
Nsg33
Nsg34
g314
sg35
(dp369
Vhref
p370
Vhttp://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/st2.png
p371
ssg37
g0
(g22
g2
Ntp372
Rp373
(dp374
g26
I01
sg27
g310
sg28
Nsg29
Vimg
p375
sg31
g310
sg32
Nsg33
Nsg34
Nsg35
(dp376
Vsrc
p377
Vhttp://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/st2.png
p378
sValt
p379
Vst2
p380
sVheight
p381
V19
p382
sVclass
p383
(lp384
Valignnone
p385
aVsize-full
p386
aVwp-image-134876
p387
asVwidth
p388
V54
p389
ssg37
g307
sg83
g84
sg85
I00
sg86
(lp390
sbsg83
g84
sg85
I00
sg86
(lp391
g373
asbsg27
g373
sg28
g303
sg37
g303
sg31
g266
sbsg28
g300
sg29
g241
sg31
g266
sg32
Nsg33
Nsg34
g307
sg35
(dp392
Vhref
p393
Vhttp://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/st3.png
p394
ssg37
g0
(g22
g2
Ntp395
Rp396
(dp397
g26
I01
sg27
g303
sg28
Nsg29
Vimg
p398
sg31
g303
sg32
Nsg33
Nsg34
Nsg35
(dp399
Vsrc
p400
Vhttp://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/st3.png
p401
sValt
p402
Vst3
p403
sVheight
p404
V17
p405
sVclass
p406
(lp407
Valignnone
p408
aVsize-full
p409
aVwp-image-134877
p410
asVwidth
p411
V112
p412
ssg37
g300
sg83
g84
sg85
I00
sg86
(lp413
sbsg83
g84
sg85
I00
sg86
(lp414
g396
asbsg27
g396
sg28
Nsg37
g297
sg31
g266
sbsg28
g0
(g22
g2
Ntp415
Rp416
(dp417
g26
I00
sg27
g0
(g44
g45
V\u000aOnce the tree is constructed, how to get the sum using the constructed segment tree.  Following is algorithm to get the sum of elements.
p418
tp419
Rp420
(dp421
g34
g0
(g22
g2
Ntp422
Rp423
(dp424
g26
I01
sg27
g0
(g44
g45
VQuery for Sum of given range
p425
tp426
Rp427
(dp428
g34
Nsg27
g0
(g22
g2
Ntp429
Rp430
(dp431
g26
I00
sg27
g297
sg28
g423
sg29
Vstrong
p432
sg31
g297
sg32
Nsg33
Nsg34
Nsg35
(dp433
sg37
g427
sg83
g84
sg85
I00
sg86
(lp434
g427
asbsg28
Nsg37
g423
sg31
g430
sbsg28
g420
sg29
Vbr
p435
sg31
g297
sg32
Nsg33
Nsg34
g430
sg35
(dp436
sg37
g420
sg83
g84
sg85
I00
sg86
(lp437
sbsg27
g423
sg28
Nsg37
g416
sg31
g297
sbsg28
g0
(g22
g2
Ntp438
Rp439
(dp440
g26
I00
sg27
g0
(g44
g45
V\u000aint getSum(node, l, r) \u000a{\u000a   if range of node is within l and r\u000a        return value in node\u000a   else if range of node is completely outside l and r\u000a        return 0\u000a   else\u000a    return getSum(node's left child, l, r) + \u000a           getSum(node's right child, l, r)\u000a}
p441
tp442
Rp443
(dp444
g34
Nsg27
g416
sg28
Nsg37
g439
sg31
g416
sbsg28
g0
(g22
g2
Ntp445
Rp446
(dp447
g26
I00
sg27
g0
(g44
g45
Vto all nodes which have given index in their range.   If a node doesn\u2019t have given index in its range, we don\u2019t make any changes to that node.
p448
tp449
Rp450
(dp451
g34
g0
(g22
g2
Ntp452
Rp453
(dp454
g26
I00
sg27
g0
(g44
g45
Vbe the value to be added.   We start from root of the segment tree, and add 
p455
tp456
Rp457
(dp458
g34
g0
(g22
g2
Ntp459
Rp460
(dp461
g26
I00
sg27
g0
(g44
g45
V\u000aLike tree construction and query operations, update can also be done recursively.  We are given an index which needs to updated.  Let 
p462
tp463
Rp464
(dp465
g34
g0
(g22
g2
Ntp466
Rp467
(dp468
g26
I01
sg27
g0
(g44
g45
VUpdate a value
p469
tp470
Rp471
(dp472
g34
Nsg27
g0
(g22
g2
Ntp473
Rp474
(dp475
g26
I00
sg27
g439
sg28
g467
sg29
Vstrong
p476
sg31
g439
sg32
Nsg33
Nsg34
Nsg35
(dp477
sg37
g471
sg83
g84
sg85
I00
sg86
(lp478
g471
asbsg28
Nsg37
g467
sg31
g474
sbsg28
g464
sg29
Vbr
p479
sg31
g439
sg32
Nsg33
Nsg34
g474
sg35
(dp480
sg37
g464
sg83
g84
sg85
I00
sg86
(lp481
sbsg27
g467
sg28
g460
sg37
g460
sg31
g439
sbsg28
g457
sg29
Vem
p482
sg31
g439
sg32
Nsg33
Nsg34
g464
sg35
(dp483
sg37
g0
(g44
g45
Vdiff 
p484
tp485
Rp486
(dp487
g34
Nsg27
g460
sg28
Nsg37
g457
sg31
g460
sbsg83
g84
sg85
I00
sg86
(lp488
g486
asbsg27
g486
sg28
g453
sg37
g453
sg31
g439
sbsg28
g450
sg29
Vem
p489
sg31
g439
sg32
Nsg33
Nsg34
g457
sg35
(dp490
sg37
g0
(g44
g45
Vdiff 
p491
tp492
Rp493
(dp494
g34
Nsg27
g453
sg28
Nsg37
g450
sg31
g453
sbsg83
g84
sg85
I00
sg86
(lp495
g493
asbsg27
g493
sg28
Nsg37
g446
sg31
g439
sbsg28
g0
(g22
g2
Ntp496
Rp497
(dp498
g26
I00
sg27
g0
(g44
g45
V\u000aFollowing is implementation of segment tree.  The program implements construction of segment tree for any given array. It also implements query and update operations.
p499
tp500
Rp501
(dp502
g34
g0
(g22
g2
Ntp503
Rp504
(dp505
g26
I01
sg27
g0
(g44
g45
VImplementation:
p506
tp507
Rp508
(dp509
g34
Nsg27
g0
(g22
g2
Ntp510
Rp511
(dp512
g26
I00
sg27
g446
sg28
g504
sg29
Vstrong
p513
sg31
g446
sg32
Nsg33
Nsg34
Nsg35
(dp514
sg37
g508
sg83
g84
sg85
I00
sg86
(lp515
g508
asbsg28
Nsg37
g504
sg31
g511
sbsg28
g501
sg29
Vbr
p516
sg31
g446
sg32
Nsg33
Nsg34
g511
sg35
(dp517
sg37
g501
sg83
g84
sg85
I00
sg86
(lp518
sbsg27
g504
sg28
Nsg37
g497
sg31
g446
sbsg28
g0
(g22
g2
Ntp519
Rp520
(dp521
g26
I00
sg27
g0
(g22
g2
Ntp522
Rp523
(dp524
g26
I00
sg27
g0
(g44
g45
V\u000a
p525
tp526
Rp527
(dp528
g34
g0
(g22
g2
Ntp529
Rp530
(dp531
g26
I00
sg27
g0
(g44
g45
V\u000a
p532
tp533
Rp534
(dp535
g34
Nsg27
g0
(g22
g2
Ntp536
Rp537
(dp538
g26
I00
sg27
g0
(g44
g45
V\u000a
p539
tp540
Rp541
(dp542
g34
g0
(g22
g2
Ntp543
Rp544
(dp545
g26
I00
sg27
g0
(g44
g45
V\u000a
p546
tp547
Rp548
(dp549
g34
g0
(g22
g2
Ntp550
Rp551
(dp552
g26
I00
sg27
g0
(g44
g45
V\u000a
p553
tp554
Rp555
(dp556
g34
Nsg27
g0
(g22
g2
Ntp557
Rp558
(dp559
g26
I00
sg27
g0
(g44
g45
V\u000a
p560
tp561
Rp562
(dp563
g34
g0
(g22
g2
Ntp564
Rp565
(dp566
g26
I00
sg27
g0
(g44
g45
V\u000a
p567
tp568
Rp569
(dp570
g34
Nsg27
g497
sg28
g565
sg37
g565
sg31
g497
sbsg28
g562
sg29
Vh2
p571
sg31
g497
sg32
Nsg33
Nsg34
g569
sg35
(dp572
Vclass
p573
(lp574
Vtabtitle
p575
assg37
g0
(g44
g45
VC
p576
tp577
Rp578
(dp579
g34
Nsg27
g565
sg28
Nsg37
g562
sg31
g565
sbsg83
g84
sg85
I00
sg86
(lp580
g578
asbsg27
g578
sg28
g558
sg37
g558
sg31
g497
sbsg28
g544
sg29
Vdiv
p581
sg31
g497
sg32
Nsg33
Nsg34
g562
sg35
(dp582
Vclass
p583
(lp584
Vtabcontent
p585
assg37
g555
sg83
g84
sg85
I00
sg86
(lp586
g555
ag551
ag548
asbsg28
g551
sg37
g551
sg31
g558
sbsg28
g548
sg29
Vpre
p587
sg31
g558
sg32
Nsg33
Nsg34
g555
sg35
(dp588
Vclass
p589
(lp590
Vbrush:
p591
aVcpp;
p592
aVtitle:
p593
aV;
p594
aVnotranslate
p595
asVtitle
p596
g289
ssg37
g0
(g44
g45
V\u000a// C program to show segment tree operations like construction, query\u000a// and update\u000a#include <stdio.h>\u000a#include <math.h>\u000a\u000a// A utility function to get the middle index from corner indexes.\u000aint getMid(int s, int e) {  return s + (e -s)/2;  }\u000a\u000a/*  A recursive function to get the sum of values in given range\u000a    of the array. The following are parameters for this function.\u000a\u000a    st    --> Pointer to segment tree\u000a    si    --> Index of current node in the segment tree. Initially\u000a              0 is passed as root is always at index 0\u000a    ss & se  --> Starting and ending indexes of the segment represented\u000a                 by current node, i.e., st[si]\u000a    qs & qe  --> Starting and ending indexes of query range */\u000aint getSumUtil(int *st, int ss, int se, int qs, int qe, int si)\u000a{\u000a    // If segment of this node is a part of given range, then return\u000a    // the sum of the segment\u000a    if (qs <= ss && qe >= se)\u000a        return st[si];\u000a\u000a    // If segment of this node is outside the given range\u000a    if (se < qs || ss > qe)\u000a        return 0;\u000a\u000a    // If a part of this segment overlaps with the given range\u000a    int mid = getMid(ss, se);\u000a    return getSumUtil(st, ss, mid, qs, qe, 2*si+1) +\u000a           getSumUtil(st, mid+1, se, qs, qe, 2*si+2);\u000a}\u000a\u000a/* A recursive function to update the nodes which have the given \u000a   index in their range. The following are parameters\u000a    st, si, ss and se are same as getSumUtil()\u000a    i    --> index of the element to be updated. This index is \u000a             in input array.\u000a   diff --> Value to be added to all nodes which have i in range */\u000avoid updateValueUtil(int *st, int ss, int se, int i, int diff, int si)\u000a{\u000a    // Base Case: If the input index lies outside the range of \u000a    // this segment\u000a    if (i < ss || i > se)\u000a        return;\u000a\u000a    // If the input index is in range of this node, then update \u000a    // the value of the node and its children\u000a    st[si] = st[si] + diff;\u000a    if (se != ss)\u000a    {\u000a        int mid = getMid(ss, se);\u000a        updateValueUtil(st, ss, mid, i, diff, 2*si + 1);\u000a        updateValueUtil(st, mid+1, se, i, diff, 2*si + 2);\u000a    }\u000a}\u000a\u000a// The function to update a value in input array and segment tree.\u000a// It uses updateValueUtil() to update the value in segment tree\u000avoid updateValue(int arr[], int *st, int n, int i, int new_val)\u000a{\u000a    // Check for erroneous input index\u000a    if (i < 0 || i > n-1)\u000a    {\u000a        printf("Invalid Input");\u000a        return;\u000a    }\u000a\u000a    // Get the difference between new value and old value\u000a    int diff = new_val - arr[i];\u000a\u000a    // Update the value in array\u000a    arr[i] = new_val;\u000a\u000a    // Update the values of nodes in segment tree\u000a    updateValueUtil(st, 0, n-1, i, diff, 0);\u000a}\u000a\u000a// Return sum of elements in range from index qs (quey start)\u000a// to qe (query end).  It mainly uses getSumUtil()\u000aint getSum(int *st, int n, int qs, int qe)\u000a{\u000a    // Check for erroneous input values\u000a    if (qs < 0 || qe > n-1 || qs > qe)\u000a    {\u000a        printf("Invalid Input");\u000a        return -1;\u000a    }\u000a\u000a    return getSumUtil(st, 0, n-1, qs, qe, 0);\u000a}\u000a\u000a// A recursive function that constructs Segment Tree for array[ss..se].\u000a// si is index of current node in segment tree st\u000aint constructSTUtil(int arr[], int ss, int se, int *st, int si)\u000a{\u000a    // If there is one element in array, store it in current node of\u000a    // segment tree and return\u000a    if (ss == se)\u000a    {\u000a        st[si] = arr[ss];\u000a        return arr[ss];\u000a    }\u000a\u000a    // If there are more than one elements, then recur for left and\u000a    // right subtrees and store the sum of values in this node\u000a    int mid = getMid(ss, se);\u000a    st[si] =  constructSTUtil(arr, ss, mid, st, si*2+1) +\u000a              constructSTUtil(arr, mid+1, se, st, si*2+2);\u000a    return st[si];\u000a}\u000a\u000a/* Function to construct segment tree from given array. This function\u000a   allocates memory for segment tree and calls constructSTUtil() to\u000a   fill the allocated memory */\u000aint *constructST(int arr[], int n)\u000a{\u000a    // Allocate memory for segment tree\u000a\u000a    //Height of segment tree\u000a    int x = (int)(ceil(log2(n))); \u000a\u000a    //Maximum size of segment tree\u000a    int max_size = 2*(int)pow(2, x) - 1; \u000a\u000a    // Allocate memory\u000a    int *st = new int[max_size];\u000a\u000a    // Fill the allocated memory st\u000a    constructSTUtil(arr, 0, n-1, st, 0);\u000a\u000a    // Return the constructed segment tree\u000a    return st;\u000a}\u000a\u000a// Driver program to test above functions\u000aint main()\u000a{\u000a    int arr[] = {1, 3, 5, 7, 9, 11};\u000a    int n = sizeof(arr)/sizeof(arr[0]);\u000a\u000a    // Build segment tree from given array\u000a    int *st = constructST(arr, n);\u000a\u000a    // Print sum of values in array from index 1 to 3\u000a    printf("Sum of values in given range = %d\u005cn", \u000a            getSum(st, n, 1, 3));\u000a\u000a    // Update: set arr[1] = 10 and update corresponding \u000a    // segment tree nodes\u000a    updateValue(arr, st, n, 1, 10);\u000a\u000a    // Find sum after the value is updated\u000a    printf("Updated sum of values in given range = %d\u005cn",\u000a             getSum(st, n, 1, 3));\u000a    return 0;\u000a}\u000a
p597
tp598
Rp599
(dp600
g34
Nsg27
g551
sg28
Nsg37
g548
sg31
g551
sbsg83
g84
sg85
I00
sg86
(lp601
g599
asbsg27
g599
sg28
Nsg37
g544
sg31
g558
sbsg28
g541
sg29
Vh2
p602
sg31
g497
sg32
Nsg33
Nsg34
g558
sg35
(dp603
Vclass
p604
(lp605
Vtabtitle
p606
assg37
g0
(g44
g45
VJava
p607
tp608
Rp609
(dp610
g34
Nsg27
g544
sg28
Nsg37
g541
sg31
g544
sbsg83
g84
sg85
I00
sg86
(lp611
g609
asbsg27
g609
sg28
g537
sg37
g537
sg31
g497
sbsg28
Nsg29
Vdiv
p612
sg31
g497
sg32
Nsg33
Nsg34
g541
sg35
(dp613
Vclass
p614
(lp615
Vtabcontent
p616
assg37
g534
sg83
g84
sg85
I00
sg86
(lp617
g534
ag530
ag527
ag523
asbsg28
g530
sg37
g530
sg31
g537
sbsg28
g527
sg29
Vpre
p618
sg31
g537
sg32
Nsg33
Nsg34
g534
sg35
(dp619
Vclass
p620
(lp621
Vbrush:
p622
aVjava;
p623
aVtitle:
p624
ag594
aVnotranslate
p625
asVtitle
p626
g289
ssg37
g0
(g44
g45
V\u000a// Java Program to show segment tree operations like construction,\u000a// query and update\u000aclass SegmentTree \u000a{\u000a    int st[]; // The array that stores segment tree nodes\u000a\u000a    /* Constructor to construct segment tree from given array. This\u000a       constructor  allocates memory for segment tree and calls\u000a       constructSTUtil() to  fill the allocated memory */\u000a    SegmentTree(int arr[], int n)\u000a    {\u000a        // Allocate memory for segment tree\u000a        //Height of segment tree\u000a        int x = (int) (Math.ceil(Math.log(n) / Math.log(2)));\u000a\u000a        //Maximum size of segment tree\u000a        int max_size = 2 * (int) Math.pow(2, x) - 1;\u000a\u000a        st = new int[max_size]; // Memory allocation\u000a\u000a        constructSTUtil(arr, 0, n - 1, 0);\u000a    }\u000a\u000a    // A utility function to get the middle index from corner indexes.\u000a    int getMid(int s, int e) {\u000a        return s + (e - s) / 2;\u000a    }\u000a\u000a    /*  A recursive function to get the sum of values in given range\u000a        of the array.  The following are parameters for this function.\u000a\u000a      st    --> Pointer to segment tree\u000a      si    --> Index of current node in the segment tree. Initially\u000a                0 is passed as root is always at index 0\u000a      ss & se  --> Starting and ending indexes of the segment represented\u000a                    by current node, i.e., st[si]\u000a      qs & qe  --> Starting and ending indexes of query range */\u000a    int getSumUtil(int ss, int se, int qs, int qe, int si)\u000a    {\u000a        // If segment of this node is a part of given range, then return\u000a        // the sum of the segment\u000a        if (qs <= ss && qe >= se)\u000a            return st[si];\u000a\u000a        // If segment of this node is outside the given range\u000a        if (se < qs || ss > qe)\u000a            return 0;\u000a\u000a        // If a part of this segment overlaps with the given range\u000a        int mid = getMid(ss, se);\u000a        return getSumUtil(ss, mid, qs, qe, 2 * si + 1) +\u000a                getSumUtil(mid + 1, se, qs, qe, 2 * si + 2);\u000a    }\u000a\u000a    /* A recursive function to update the nodes which have the given \u000a       index in their range. The following are parameters\u000a        st, si, ss and se are same as getSumUtil()\u000a        i    --> index of the element to be updated. This index is in\u000a                 input array.\u000a       diff --> Value to be added to all nodes which have i in range */\u000a    void updateValueUtil(int ss, int se, int i, int diff, int si)\u000a    {\u000a        // Base Case: If the input index lies outside the range of \u000a        // this segment\u000a        if (i < ss || i > se)\u000a            return;\u000a\u000a        // If the input index is in range of this node, then update the\u000a        // value of the node and its children\u000a        st[si] = st[si] + diff;\u000a        if (se != ss) {\u000a            int mid = getMid(ss, se);\u000a            updateValueUtil(ss, mid, i, diff, 2 * si + 1);\u000a            updateValueUtil(mid + 1, se, i, diff, 2 * si + 2);\u000a        }\u000a    }\u000a\u000a    // The function to update a value in input array and segment tree.\u000a   // It uses updateValueUtil() to update the value in segment tree\u000a    void updateValue(int arr[], int n, int i, int new_val)\u000a    {\u000a        // Check for erroneous input index\u000a        if (i < 0 || i > n - 1) {\u000a            System.out.println("Invalid Input");\u000a            return;\u000a        }\u000a\u000a        // Get the difference between new value and old value\u000a        int diff = new_val - arr[i];\u000a\u000a        // Update the value in array\u000a        arr[i] = new_val;\u000a\u000a        // Update the values of nodes in segment tree\u000a        updateValueUtil(0, n - 1, i, diff, 0);\u000a    }\u000a\u000a    // Return sum of elements in range from index qs (quey start) to\u000a   // qe (query end).  It mainly uses getSumUtil()\u000a    int getSum(int n, int qs, int qe)\u000a    {\u000a        // Check for erroneous input values\u000a        if (qs < 0 || qe > n - 1 || qs > qe) {\u000a            System.out.println("Invalid Input");\u000a            return -1;\u000a        }\u000a        return getSumUtil(0, n - 1, qs, qe, 0);\u000a    }\u000a\u000a    // A recursive function that constructs Segment Tree for array[ss..se].\u000a    // si is index of current node in segment tree st\u000a    int constructSTUtil(int arr[], int ss, int se, int si)\u000a    {\u000a        // If there is one element in array, store it in current node of\u000a        // segment tree and return\u000a        if (ss == se) {\u000a            st[si] = arr[ss];\u000a            return arr[ss];\u000a        }\u000a\u000a        // If there are more than one elements, then recur for left and\u000a        // right subtrees and store the sum of values in this node\u000a        int mid = getMid(ss, se);\u000a        st[si] = constructSTUtil(arr, ss, mid, si * 2 + 1) +\u000a                 constructSTUtil(arr, mid + 1, se, si * 2 + 2);\u000a        return st[si];\u000a    }\u000a\u000a    // Driver program to test above functions\u000a    public static void main(String args[])\u000a    {\u000a        int arr[] = {1, 3, 5, 7, 9, 11};\u000a        int n = arr.length;\u000a        SegmentTree  tree = new SegmentTree(arr, n);\u000a\u000a        // Build segment tree from given array\u000a\u000a        // Print sum of values in array from index 1 to 3\u000a        System.out.println("Sum of values in given range = " +\u000a                           tree.getSum(n, 1, 3));\u000a\u000a        // Update: set arr[1] = 10 and update corresponding segment\u000a        // tree nodes\u000a        tree.updateValue(arr, n, 1, 10);\u000a\u000a        // Find sum after the value is updated\u000a        System.out.println("Updated sum of values in given range = " +\u000a                tree.getSum(n, 1, 3));\u000a    }\u000a}\u000a//This code is contributed by Ankur Narain Verma\u000a
p627
tp628
Rp629
(dp630
g34
Nsg27
g530
sg28
Nsg37
g527
sg31
g530
sbsg83
g84
sg85
I00
sg86
(lp631
g629
asbsg27
g629
sg28
g523
sg37
g523
sg31
g537
sbsg28
Nsg29
Vp
p632
sg31
g537
sg32
Nsg33
Nsg34
g527
sg35
(dp633
sg37
g520
sg83
g84
sg85
I00
sg86
(lp634
sbsg28
g0
(g22
g2
Ntp635
Rp636
(dp637
g26
I00
sg27
g0
(g44
g45
V \u000aSum of values in given range = 15\u000aUpdated sum of values in given range = 22
p638
tp639
Rp640
(dp641
g34
Nsg27
g520
sg28
Nsg37
g636
sg31
g520
sbsg28
g0
(g22
g2
Ntp642
Rp643
(dp644
g26
I00
sg27
g0
(g44
g45
V\u000aTime Complexity for tree construction is O(n).  There are total 2n-1 nodes, and value of every node is calculated only once in tree construction.
p645
tp646
Rp647
(dp648
g34
g0
(g22
g2
Ntp649
Rp650
(dp651
g26
I01
sg27
g0
(g44
g45
VTime Complexity:
p652
tp653
Rp654
(dp655
g34
Nsg27
g0
(g22
g2
Ntp656
Rp657
(dp658
g26
I00
sg27
g636
sg28
g650
sg29
Vstrong
p659
sg31
g636
sg32
Nsg33
Nsg34
Nsg35
(dp660
sg37
g654
sg83
g84
sg85
I00
sg86
(lp661
g654
asbsg28
Nsg37
g650
sg31
g657
sbsg28
g647
sg29
Vbr
p662
sg31
g636
sg32
Nsg33
Nsg34
g657
sg35
(dp663
sg37
g647
sg83
g84
sg85
I00
sg86
(lp664
sbsg27
g650
sg28
Nsg37
g643
sg31
g636
sbsg28
g0
(g22
g2
Ntp665
Rp666
(dp667
g26
I00
sg27
g0
(g44
g45
VTime complexity to query is O(Logn).  To query a sum, we process at most four nodes at every level and number of levels is O(Logn).  
p668
tp669
Rp670
(dp671
g34
Nsg27
g643
sg28
Nsg37
g666
sg31
g643
sbsg28
g0
(g22
g2
Ntp672
Rp673
(dp674
g26
I00
sg27
g0
(g44
g45
VThe time complexity of update is also O(Logn). To update a leaf value, we process one node at every level and number of levels is O(Logn).
p675
tp676
Rp677
(dp678
g34
Nsg27
g666
sg28
Nsg37
g673
sg31
g666
sbsg28
g0
(g22
g2
Ntp679
Rp680
(dp681
g26
I00
sg27
g0
(g44
g45
V\u000aSegment Tree | Set 2 (Range Minimum Query)
p682
tp683
Rp684
(dp685
g34
g0
(g22
g2
Ntp686
Rp687
(dp688
g26
I01
sg27
g0
(g22
g2
Ntp689
Rp690
(dp691
g26
I00
sg27
g0
(g22
g2
Ntp692
Rp693
(dp694
g26
I00
sg27
g673
sg28
Nsg29
Vstrong
p695
sg31
g673
sg32
Nsg33
Nsg34
Nsg35
(dp696
sg37
g690
sg83
g84
sg85
I00
sg86
(lp697
g690
asbsg28
Nsg29
g241
sg31
g693
sg32
Nsg33
Nsg34
Nsg35
(dp698
Vhref
p699
Vhttp://www.geeksforgeeks.org/segment-tree-set-1-range-minimum-query/
p700
sVtarget
p701
V_blank
p702
ssg37
g687
sg83
g84
sg85
I00
sg86
(lp703
g687
ag684
asbsg28
g684
sg29
Vbr
p704
sg31
g690
sg32
Nsg33
Nsg34
Nsg35
(dp705
sg37
g684
sg83
g84
sg85
I00
sg86
(lp706
sbsg27
g687
sg28
Nsg37
g680
sg31
g690
sbsg28
g0
(g22
g2
Ntp707
Rp708
(dp709
g26
I00
sg27
g0
(g44
g45
Vhttp://www.cse.iitk.ac.in/users/aca/lop12/slides/06.pdf
p710
tp711
Rp712
(dp713
g34
Nsg27
g0
(g22
g2
Ntp714
Rp715
(dp716
g26
I00
sg27
g0
(g44
g45
V\u000a
p717
tp718
Rp719
(dp720
g34
g0
(g22
g2
Ntp721
Rp722
(dp723
g26
I01
sg27
g0
(g44
g45
VReferences:
p724
tp725
Rp726
(dp727
g34
Nsg27
g0
(g22
g2
Ntp728
Rp729
(dp730
g26
I00
sg27
g680
sg28
g722
sg29
Vstrong
p731
sg31
g680
sg32
Nsg33
Nsg34
Nsg35
(dp732
sg37
g726
sg83
g84
sg85
I00
sg86
(lp733
g726
asbsg28
Nsg37
g722
sg31
g729
sbsg28
g719
sg29
Vbr
p734
sg31
g680
sg32
Nsg33
Nsg34
g729
sg35
(dp735
sg37
g719
sg83
g84
sg85
I00
sg86
(lp736
sbsg27
g722
sg28
g715
sg37
g715
sg31
g680
sbsg28
Nsg29
g241
sg31
g680
sg32
Nsg33
Nsg34
g719
sg35
(dp737
Vhref
p738
Vhttp://www.cse.iitk.ac.in/users/aca/lop12/slides/06.pdf
p739
sVtarget
p740
V_blank
p741
ssg37
g712
sg83
g84
sg85
I00
sg86
(lp742
g712
asbsg28
Nsg37
g708
sg31
g715
sbsg28
g0
(g22
g2
Ntp743
Rp744
(dp745
g26
I00
sg27
g0
(g44
g45
VPlease write comments if you find anything incorrect, or you want to share more information about the topic discussed above.
p746
tp747
Rp748
(dp749
g34
Nsg27
g708
sg28
Nsg37
g744
sg31
g708
sbsg28
g0
(g22
g2
Ntp750
Rp751
(dp752
g26
I00
sg27
g744
sg28
g0
(g22
g2
Ntp753
Rp754
(dp755
g26
I00
sg27
g751
sg28
g0
(g22
g2
Ntp756
Rp757
(dp758
g26
I01
sg27
g0
(g44
g45
V\u000a(adsbygoogle = window.adsbygoogle || []).push({});\u000a
p759
tp760
Rp761
(dp762
g34
Nsg27
g754
sg28
Nsg37
g757
sg31
g754
sbsg28
Nsg29
Vbr
p763
sg31
g24
sg32
Nsg33
Nsg34
g754
sg35
(dp764
sg37
Nsg83
g84
sg85
I00
sg86
(lp765
sbsg29
Vscript
p766
sg31
g24
sg32
Nsg33
Nsg34
g751
sg35
(dp767
sg37
g761
sg83
g84
sg85
I00
sg86
(lp768
g761
asbsg29
Vins
p769
sg31
g24
sg32
Nsg33
Nsg34
g744
sg35
(dp770
Vstyle
p771
Vdisplay:inline-block;width:336px;height:280px
p772
sVdata-ad-client
p773
Vca-pub-9465609616171866
p774
sVclass
p775
(lp776
Vadsbygoogle
p777
asVdata-ad-slot
p778
V4061219431
p779
ssg37
g754
sg83
g84
sg85
I00
sg86
(lp780
sbsg29
Vscript
p781
sg31
g24
sg32
Nsg33
Nsg34
g708
sg35
(dp782
Vasync
p783
S''
p784
sVsrc
p785
V//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js
p786
ssg37
g751
sg83
g84
sg85
I00
sg86
(lp787
sbsg29
g632
sg31
g24
sg32
Nsg33
Nsg34
g680
sg35
(dp788
sg37
g748
sg83
g84
sg85
I00
sg86
(lp789
g748
asbsg29
g632
sg31
g24
sg32
Nsg33
Nsg34
g673
sg35
(dp790
sg37
g729
sg83
g84
sg85
I00
sg86
(lp791
g729
ag722
ag719
ag715
asbsg29
g632
sg31
g24
sg32
Nsg33
Nsg34
g666
sg35
(dp792
sg37
g693
sg83
g84
sg85
I00
sg86
(lp793
g693
asbsg29
g632
sg31
g24
sg32
Nsg33
Nsg34
g643
sg35
(dp794
sg37
g677
sg83
g84
sg85
I00
sg86
(lp795
g677
asbsg29
g632
sg31
g24
sg32
Nsg33
Nsg34
g636
sg35
(dp796
sg37
g670
sg83
g84
sg85
I00
sg86
(lp797
g670
asbsg29
g632
sg31
g24
sg32
Nsg33
Nsg34
g520
sg35
(dp798
sg37
g657
sg83
g84
sg85
I00
sg86
(lp799
g657
ag650
ag647
asbsg29
Vpre
p800
sg31
g24
sg32
Nsg33
Nsg34
g497
sg35
(dp801
sg37
g640
sg83
g84
sg85
I00
sg86
(lp802
g640
asbsg29
Vdiv
p803
sg31
g24
sg32
Nsg33
Nsg34
g446
sg35
(dp804
Vclass
p805
(lp806
Vresponsive-tabs
p807
assg37
g569
sg83
g84
sg85
I00
sg86
(lp808
g569
ag565
ag562
ag558
ag544
ag541
ag537
asbsg29
g632
sg31
g24
sg32
Nsg33
Nsg34
g439
sg35
(dp809
sg37
g511
sg83
g84
sg85
I00
sg86
(lp810
g511
ag504
ag501
asbsg29
g632
sg31
g24
sg32
Nsg33
Nsg34
g416
sg35
(dp811
sg37
g474
sg83
g84
sg85
I00
sg86
(lp812
g474
ag467
ag464
ag460
ag457
ag453
ag450
asbsg29
Vpre
p813
sg31
g24
sg32
Nsg33
Nsg34
g297
sg35
(dp814
sg37
g443
sg83
g84
sg85
I00
sg86
(lp815
g443
asbsg29
g632
sg31
g24
sg32
Nsg33
Nsg34
g266
sg35
(dp816
sg37
g430
sg83
g84
sg85
I00
sg86
(lp817
g430
ag423
ag420
asbsg29
g632
sg31
g24
sg32
Nsg33
Nsg34
g228
sg35
(dp818
sg37
g345
sg83
g84
sg85
I00
sg86
(lp819
g345
ag338
ag335
ag331
ag328
ag324
ag321
ag317
ag314
ag310
ag307
ag303
ag300
asbsg29
g632
sg31
g24
sg32
Nsg33
Nsg34
g167
sg35
(dp820
sg37
g272
sg83
g84
sg85
I00
sg86
(lp821
g272
asbsg29
g632
sg31
g24
sg32
Nsg33
Nsg34
g146
sg35
(dp822
sg37
g239
sg83
g84
sg85
I00
sg86
(lp823
g239
ag235
ag232
asbsg29
g632
sg31
g24
sg32
Nsg33
Nsg34
g129
sg35
(dp824
sg37
g202
sg83
g84
sg85
I00
sg86
(lp825
g202
ag195
ag192
ag188
ag185
ag181
ag178
ag174
ag171
asbsg29
g632
sg31
g24
sg32
Nsg33
Nsg34
g108
sg35
(dp826
sg37
g157
sg83
g84
sg85
I00
sg86
(lp827
g157
ag153
ag150
asbsg29
g632
sg31
g24
sg32
Nsg33
Nsg34
g51
sg35
(dp828
sg37
g136
sg83
g84
sg85
I00
sg86
(lp829
g136
ag133
asbsg29
g632
sg31
g24
sg32
Nsg33
Nsg34
g42
sg35
(dp830
sg37
g119
sg83
g84
sg85
I00
sg86
(lp831
g119
ag115
ag112
asbsg29
g632
sg31
g24
sg32
Nsg33
Nsg34
g39
sg35
(dp832
sg37
g79
sg83
g84
sg85
I00
sg86
(lp833
g79
ag75
ag72
ag68
ag65
ag61
ag58
ag54
asbsg29
g632
sg31
g24
sg32
Nsg33
Nsg34
Nsg35
(dp834
sg37
g48
sg83
g84
sg85
I00
sg86
(lp835
g48
asbsg83
Nsg85
I00
sg86
(lp836
g39
ag42
ag51
ag108
ag129
ag146
ag167
ag228
ag266
ag297
ag416
ag439
ag446
ag497
ag520
ag636
ag643
ag666
ag673
ag680
ag708
ag744
ag751
ag754
ag757
asbsS'raw_page'
p837
S'<!DOCTYPE html>\r\n<!--[if IE 7]>\r\n<html class="ie ie7" lang="en-US" prefix="og: http://ogp.me/ns#">\r\n<![endif]-->\r\n<!--[if IE 8]>\r\n<html class="ie ie8" lang="en-US" prefix="og: http://ogp.me/ns#">\r\n<![endif]-->\r\n<!--[if !(IE 7) | !(IE 8)  ]><!-->\r\n<html lang="en-US" prefix="og: http://ogp.me/ns#">\r\n<!--<![endif]-->\r\n<head>\r\n<meta charset="UTF-8" />\r\n<meta name="viewport" content="width=device-width" />\r\n\r\n<meta property="og:image" content="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/gfg_200X200.png">\r\n<meta property="og:image:type" content="image/png">\r\n<meta property="og:image:width" content="200">\r\n<meta property="og:image:height" content="200">\r\n\r\n<title>Segment Tree | Set 1 (Sum of given range) - GeeksforGeeks</title>\r\n<link rel="profile" href="http://gmpg.org/xfn/11" />\r\n<link rel="pingback" href="http://www.geeksforgeeks.org/xmlrpc.php" />\r\n<!--[if lt IE 9]>\r\n<script src="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/js/html5.js" type="text/javascript"></script>\r\n<![endif]-->\r\n\n<!-- This site is optimized with the Yoast SEO plugin v3.0.7 - https://yoast.com/wordpress/plugins/seo/ -->\n<link rel="canonical" href="http://www.geeksforgeeks.org/segment-tree-set-1-sum-of-given-range/" />\n<meta property="og:locale" content="en_US" />\n<meta property="og:type" content="article" />\n<meta property="og:title" content="Segment Tree | Set 1 (Sum of given range) - GeeksforGeeks" />\n<meta property="og:description" content="Let us consider the following problem to understand Segment Trees. We have an array arr[0 . . . n-1]. We should be able to 1 Find the sum of elements from index l to r where 0" />\n<meta property="og:url" content="http://www.geeksforgeeks.org/segment-tree-set-1-sum-of-given-range/" />\n<meta property="og:site_name" content="GeeksforGeeks" />\n<meta property="article:tag" content="Advance Data Structures" />\n<meta property="article:tag" content="Advanced Data Structures" />\n<meta property="article:tag" content="SegmentTree" />\n<meta property="article:section" content="Advanced Data Structure" />\n<meta property="article:published_time" content="2013-01-16T20:16:23+00:00" />\n<meta property="article:modified_time" content="2015-10-30T01:56:17+00:00" />\n<meta property="og:updated_time" content="2015-10-30T01:56:17+00:00" />\n<meta property="og:image" content="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/st1.png" />\n<meta property="og:image" content="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/segment-tree1.png" />\n<meta property="og:image" content="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/st2.png" />\n<meta property="og:image" content="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/st3.png" />\n<!-- / Yoast SEO plugin. -->\n\n\t\t<script type="text/javascript">\n\t\t\twindow._wpemojiSettings = {"baseUrl":"http:\\/\\/s.w.org\\/images\\/core\\/emoji\\/72x72\\/","ext":".png","source":{"concatemoji":"http:\\/\\/www.geeksforgeeks.org\\/wp-includes\\/js\\/wp-emoji-release.min.js"}};\n\t\t\t!function(a,b,c){function d(a){var c=b.createElement("canvas"),d=c.getContext&&c.getContext("2d");return d&&d.fillText?(d.textBaseline="top",d.font="600 32px Arial","flag"===a?(d.fillText(String.fromCharCode(55356,56812,55356,56807),0,0),c.toDataURL().length>3e3):(d.fillText(String.fromCharCode(55357,56835),0,0),0!==d.getImageData(16,16,1,1).data[0])):!1}function e(a){var c=b.createElement("script");c.src=a,c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f,g;c.supports={simple:d("simple"),flag:d("flag")},c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.simple&&c.supports.flag||(g=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",g,!1),a.addEventListener("load",g,!1)):(a.attachEvent("onload",g),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&&f.twemoji&&(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);\n\t\t</script>\n\t\t<style type="text/css">\nimg.wp-smiley,\nimg.emoji {\n\tdisplay: inline !important;\n\tborder: none !important;\n\tbox-shadow: none !important;\n\theight: 1em !important;\n\twidth: 1em !important;\n\tmargin: 0 .07em !important;\n\tvertical-align: -0.1em !important;\n\tbackground: none !important;\n\tpadding: 0 !important;\n}\n</style>\n<link rel=\'stylesheet\' id=\'wp-pagenavi-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/wp-pagenavi/pagenavi-css.css\' type=\'text/css\' media=\'all\' />\n<link rel=\'stylesheet\' id=\'themonic-fonts-css\'  href=\'http://fonts.googleapis.com/css?family=Ubuntu:400,700&#038;subset=latin,latin-ext\' type=\'text/css\' media=\'all\' />\n<link rel=\'stylesheet\' id=\'themonic-style-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/style.css\' type=\'text/css\' media=\'all\' />\n<link rel=\'stylesheet\' id=\'custom-style-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/custom.css\' type=\'text/css\' media=\'all\' />\n<!--[if lt IE 9]>\n<link rel=\'stylesheet\' id=\'themonic-ie-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/css/ie.css\' type=\'text/css\' media=\'all\' />\n<![endif]-->\n<meta name="generator" content="WordPress 4.2.7" />\n<style type="text/css" id="custom-background-css">\nbody.custom-background { background-color: #ffffff; }\n</style>\n<style type="text/css" id="syntaxhighlighteranchor"></style>\n<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<script>\r\n  (adsbygoogle = window.adsbygoogle || []).push({\r\n    google_ad_client: "ca-pub-9465609616171866",\r\n    enable_page_level_ads: true\r\n  });\r\n</script>\r\n</head>\r\n<body class="single single-post postid-29503 single-format-standard custom-background custom-background-white custom-font-enabled">\r\n<div id="page" class="hfeed site">\r\n\t<header id="masthead" class="site-header" role="banner">\r\n\t\t\t\t\t<hgroup>\r\n\t\t\t<a href="http://www.geeksforgeeks.org/" title="GeeksforGeeks" rel="home">GeeksforGeeks</a>\r\n\t\t\t\t<br .../> <a class="site-description">A computer science portal for geeks</a>\r\n\t\t</hgroup>\r\n\r\n<div style="float:right;">\r\n<hgroup style="float:right;">   \r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://www.geeksforgeeks.org/campus-ambassador-program-by-geeksforgeeks/">CA</a>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://geeksquiz.com/gate-corner-2/">GATE CS</a>\r\n\r\n<strong><a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://practice.geeksforgeeks.org/">Practice</a></strong>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://www.geeksforgeeks.org/suggest/">Suggest</a>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://code.geeksforgeeks.org/">IDE</a>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://qa.geeksforgeeks.org/">Q&A</a>\r\n\r\n<a style="padding:0px 30px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://geeksquiz.com/">GeeksQuiz</a>\r\n\r\n</hgroup><br></br>\r\n\r\n<span style="display:inline-block; width:300px;float:right;">\r\n<script>\r\n  (function() {\r\n    var cx = \'009682134359037907028:tj6eafkv_be\';\r\n    var gcse = document.createElement(\'script\');\r\n    gcse.type = \'text/javascript\';\r\n    gcse.async = true;\r\n    gcse.src = (document.location.protocol == \'https:\' ? \'https:\' : \'http:\') +\r\n        \'//cse.google.com/cse.js?cx=\' + cx;\r\n    var s = document.getElementsByTagName(\'script\')[0];\r\n    s.parentNode.insertBefore(gcse, s);\r\n  })();\r\n</script>\r\n<gcse:search></gcse:search>\r\n\r\n<style type="text/css">\r\n  .gsc-control-cse {\r\n     padding: 0px 10px;\r\n  } \r\n\r\n  .gsc-control-cse {\r\n    font-family: "Trebuchet MS", sans-serif;\r\n    /*border-color: #E1F3DA;*/\r\n    /*background-color: #E1F3DA;*/\r\n  }\r\n  input.gsc-input {\r\n    border-color: #94CC7A;\r\n  }\r\n  input.gsc-search-button {\r\n    border-color: #94CC7A;\r\n    background-color: #4CB96B;\r\n    margin-top:7px;\r\n  }\r\n  .gsc-tabHeader.gsc-tabhInactive {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gsc-tabHeader.gsc-tabhActive {\r\n    border-color: #A9DA92;\r\n    background-color: #A9DA92;\r\n  }\r\n  .gsc-tabsArea {\r\n    border-color: #A9DA92;\r\n  }\r\n  .gsc-webResult.gsc-result {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gsc-webResult.gsc-result:hover {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:link,\r\n  .gs-webResult.gs-result a.gs-title:link b {\r\n    color: #009900;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:visited,\r\n  .gs-webResult.gs-result a.gs-title:visited b {\r\n    color: #009900;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:hover,\r\n  .gs-webResult.gs-result a.gs-title:hover b {\r\n    color: #003300;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:active,\r\n  .gs-webResult.gs-result a.gs-title:active b {\r\n    color: #009900;\r\n  }\r\n  .gsc-cursor-page {\r\n    color: #009900;\r\n  }\r\n  a.gsc-trailing-more-results:link {\r\n    color: #009900;\r\n  }\r\n  .gs-webResult.gs-result .gs-snippet {\r\n    color: #454545;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl {\r\n    color: #33cc00;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl-short {\r\n    color: #33cc00;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl-short {\r\n    display: none;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl-long {\r\n    display: block;\r\n  }\r\n  .gsc-cursor-box {\r\n    border-color: #A9DA92;\r\n  }\r\n  .gsc-results .gsc-cursor-page {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {\r\n    border-color: #A9DA92;\r\n    background-color: #A9DA92;\r\n  }\r\n  .gs-promotion.gs-result {\r\n    border-color: #94CC7A;\r\n    background-color: #CBE8B4;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:link {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:visited {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:hover {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:active {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result .gs-snippet {\r\n    color: #454545;\r\n  }\r\n  .gs-promotion.gs-result .gs-visibleUrl,\r\n  .gs-promotion.gs-result .gs-visibleUrl-short {\r\n    color: #815FA7;\r\n  }\r\n  .gsib_a {\r\n    padding : 2px;\r\n  }\r\n</style>    \r\n</span>\r\n</div>\r\n\r\n\t\t\r\n\t\t\r\n\t\t<nav id="site-navigation" class="themonic-nav" role="navigation">\r\n\t\t\t<a class="assistive-text" href="#content" title="Skip to content">Skip to content</a>\r\n\t\t\t<div class="menu-iconic-container"><ul id="menu-top" class="nav-menu"><li id="menu-item-135003" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-135003"><a href="http://www.geeksforgeeks.org/">Home</a></li>\n<li id="menu-item-135004" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-135004"><a title="Algorithms" href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algo</a>\n<ul class="sub-menu">\n\t<li id="menu-item-135030" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135030"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#AnalysisofAlgorithms">Analysis of Algorithms</a></li>\n\t<li id="menu-item-135031" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135031"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#SearchingandSorting">Searching and Sorting</a></li>\n\t<li id="menu-item-135032" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135032"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#GreedyAlgorithms">Greedy Algorithms</a></li>\n\t<li id="menu-item-135033" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135033"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#DynamicProgramming">Dynamic Programming</a></li>\n\t<li id="menu-item-135034" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135034"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#PatternSearching">Pattern Searching</a></li>\n\t<li id="menu-item-135035" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135035"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#OtherStringAlgorithms">Other String Algorithms</a></li>\n\t<li id="menu-item-135036" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135036"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#Backtracking">Backtracking</a></li>\n\t<li id="menu-item-135037" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135037"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#DivideandConquer">Divide and Conquer</a></li>\n\t<li id="menu-item-135038" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135038"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#GeometricAlgorithms">Geometric Algorithms</a></li>\n\t<li id="menu-item-135039" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135039"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#MathematicalAlgorithms">Mathematical Algorithms</a></li>\n\t<li id="menu-item-135040" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135040"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#BitAlgorithms">Bit Algorithms</a></li>\n\t<li id="menu-item-135041" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135041"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#GraphAlgorithms">Graph Algorithms</a></li>\n\t<li id="menu-item-135042" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135042"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#RandomizedAlgorithms">Randomized Algorithms</a></li>\n</ul>\n</li>\n<li id="menu-item-135010" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-135010"><a title="Data Structures" href="http://www.geeksforgeeks.org/data-structures/">DS</a>\n<ul class="sub-menu">\n\t<li id="menu-item-135045" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135045"><a href="http://www.geeksforgeeks.org/data-structures/#LinkedList">LinkedList</a></li>\n\t<li id="menu-item-135046" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135046"><a href="http://www.geeksforgeeks.org/data-structures/#Stack">Stack</a></li>\n\t<li id="menu-item-135047" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135047"><a href="http://www.geeksforgeeks.org/data-structures/#Queue">Queue</a></li>\n\t<li id="menu-item-135048" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135048"><a href="http://www.geeksforgeeks.org/data-structures/#BinaryTree">Binary Tree</a></li>\n\t<li id="menu-item-135049" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135049"><a href="http://www.geeksforgeeks.org/data-structures/#BinarySearchTree">Binary Search Tree</a></li>\n\t<li id="menu-item-135050" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135050"><a href="http://www.geeksforgeeks.org/data-structures/#Heap">Heap</a></li>\n\t<li id="menu-item-135051" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135051"><a href="http://www.geeksforgeeks.org/data-structures/#Hashing">Hashing</a></li>\n\t<li id="menu-item-135052" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135052"><a href="http://www.geeksforgeeks.org/data-structures/#Graph">Graph</a></li>\n\t<li id="menu-item-135053" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135053"><a href="http://www.geeksforgeeks.org/data-structures/#AdvancedDataStructure">Advanced Data Structure</a></li>\n\t<li id="menu-item-135054" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135054"><a href="http://www.geeksforgeeks.org/data-structures/#Array">Array</a></li>\n\t<li id="menu-item-135055" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135055"><a href="http://www.geeksforgeeks.org/data-structures/#Matrix">Matrix</a></li>\n\t<li id="menu-item-135056" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135056"><a href="http://www.geeksforgeeks.org/data-structures/#Misc">Misc</a></li>\n</ul>\n</li>\n<li id="menu-item-135014" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135014"><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview</a></li>\n<li id="menu-item-135006" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135006"><a href="http://www.geeksforgeeks.org/c/">C</a></li>\n<li id="menu-item-135007" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135007"><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>\n<li id="menu-item-135012" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135012"><a href="http://www.geeksforgeeks.org/java/">Java</a></li>\n<li id="menu-item-137004" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-137004"><a href="http://www.geeksforgeeks.org/python/">Python</a></li>\n<li id="menu-item-135009" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135009"><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>\n<li id="menu-item-135016" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135016"><a href="http://qa.geeksforgeeks.org/index.php?qa=ask">Ask a Q</a></li>\n<li id="menu-item-135077" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135077"><a href="https://play.google.com/store/apps/details?id=free.programming.programming">AndroidApp</a></li>\n<li id="menu-item-135367" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135367"><a href="http://www.geeksforgeeks.org/category/guestblogs/">GBlog</a></li>\n<li id="menu-item-135028" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135028"><a href="http://www.geeksforgeeks.org/category/gfact/">GFact</a></li>\n<li id="menu-item-136004" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-136004"><a href="http://www.geeksforgeeks.org/category/project/">Project</a></li>\n<li id="menu-item-136978" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-136978"><a href="http://www.geeksforgeeks.org/jobs/">Jobs</a></li>\n<li id="menu-item-135019" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135019"><a href="http://www.geeksforgeeks.org/category/c-arrays/">Arr</a></li>\n<li id="menu-item-135022" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135022"><a href="http://www.geeksforgeeks.org/category/c-strings/">String</a></li>\n<li id="menu-item-135937" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135937"><a href="http://www.geeksforgeeks.org/category/matrix/">Matrix</a></li>\n<li id="menu-item-135023" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135023"><a href="http://www.geeksforgeeks.org/category/linked-list/">Linked List</a></li>\n<li id="menu-item-135029" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135029"><a href="http://www.geeksforgeeks.org/category/stack/">Stack</a></li>\n<li id="menu-item-135932" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135932"><a href="http://www.geeksforgeeks.org/category/queue/">Q</a></li>\n<li id="menu-item-136299" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-136299"><a href="http://www.geeksforgeeks.org/category/hash/">Hash</a></li>\n<li id="menu-item-135941" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135941"><a href="http://www.geeksforgeeks.org/category/heap/">Heap</a></li>\n<li id="menu-item-135020" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135020"><a href="http://www.geeksforgeeks.org/category/tree/">Tree</a></li>\n<li id="menu-item-135940" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135940"><a href="http://www.geeksforgeeks.org/category/binary-search-tree/">BST</a></li>\n<li id="menu-item-135024" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135024"><a href="http://www.geeksforgeeks.org/category/graph/">Graph</a></li>\n<li id="menu-item-135017" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135017"><a href="http://www.geeksforgeeks.org/category/c-puzzles/">C/C++</a></li>\n<li id="menu-item-135027" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135027"><a href="http://www.geeksforgeeks.org/category/bit-magic/">Bit</a></li>\n<li id="menu-item-135021" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135021"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/">MCQ</a></li>\n<li id="menu-item-135018" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135018"><a href="http://www.geeksforgeeks.org/category/c-programs/">Misc</a></li>\n<li id="menu-item-135025" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135025"><a href="http://www.geeksforgeeks.org/category/program-output/">O/P</a></li>\n</ul></div>\t\t</nav><!-- #site-navigation -->\r\n\t\t<div class="clear"></div>\r\n\t</header><!-- #masthead -->\r\n\r\n\t<div id="main" class="wrapper">\t<div id="primary" class="site-content">\r\n\t\t<div id="content" role="main">\r\n\r\n\t\t\t\t\t\t\t\r\n\t<article id="post-29503" class="post-29503 post type-post status-publish format-standard hentry category-advanced-data-structure tag-advance-data-structures tag-advanced-data-structures tag-segmenttree">\r\n\t\t\t\t<header class="entry-header">\r\n\t\t\t\t\t\t<h1 class="entry-title">Segment Tree | Set 1 (Sum of given range)</h1>\r\n\t\t\t\t\r\n\t\t\t</header><!-- .entry-header -->\r\n\r\n\t\t\t\t<div class="entry-content">\r\n\t\t\t<p>Let us consider the following problem to understand Segment Trees.</p>\n<p>We have an array arr[0 . . . n-1]. We should be able to<br />\n<strong>1</strong> Find the sum of elements from index l to r where 0 <= l <= r <= n-1\n<strong>2</strong> Change value of a specified element of the array arr[i] = x where 0 <= i <= n-1.<span id="more-29503"></span></p>\n<p>A <strong>simple solution</strong> is to run a loop from l to r and calculate sum of elements in given range.  To update a value, simply do arr[i] = x.  The first operation takes O(n) time and second operation takes O(1) time.  </p>\n<p><strong>Another solution</strong> is to create another array and store sum from start to i at the ith index in this array. Sum of a given range can now be calculated in O(1) time, but update operation takes O(n) time now.  This works well if the number of query operations are large and very few updates.</p>\n<p>What if the number of query and updates are equal? <strong>Can we perform both the operations in O(log n) time once given the array?</strong> We can use a Segment Tree to do both operations in O(Logn) time.</p>\n<p><strong>Representation of Segment trees</strong><br />\n<strong>1.</strong> Leaf Nodes are the elements of the input array.<br />\n<strong>2.</strong> Each internal node represents some merging of the leaf nodes.  The merging may be different for different problems. For this problem, merging is sum of leaves under a node.</p>\n<p>An array representation of tree is used to represent Segment Trees. For each node at index i, the left child is at index 2*i+1, right child at 2*i+2 and the parent is at <a href="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/st1.png"><img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/st1.png" alt="st1" width="79" height="19" class="alignnone size-full wp-image-134875" /></a>.</p>\n<p><a href="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/segment-tree1.png"><img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/segment-tree1.png" alt="" title="segment-tree" width="460" height="318" class="aligncenter size-full wp-image-29594" /></a></p>\n<p><strong>Construction of Segment Tree from given array</strong><br />\nWe start with a segment arr[0 . . . n-1]. and every time we divide the current segment into two halves(if it has not yet become a segment of length 1), and then call the same procedure on both halves, and for each such segment we store the sum in corresponding node.<br />\nAll levels of the constructed segment tree will be completely filled except the last level. Also, the tree will be a <a href="http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees" target="_blank">Full Binary Tree</a> because we always divide segments in two halves at every level. Since the constructed tree is always full binary tree with n leaves, there will be n-1 internal nodes. So total number of nodes will be 2*n &#8211; 1.<br />\nHeight of the segment tree will be <a href="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/st2.png"><img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/st2.png" alt="st2" width="54" height="19" class="alignnone size-full wp-image-134876" /></a>.  Since the tree is represented using array and relation between parent and child indexes must be maintained, size of memory allocated for segment tree will be <a href="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/st3.png"><img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/st3.png" alt="st3" width="112" height="17" class="alignnone size-full wp-image-134877" /></a>.</p>\n<p><strong>Query for Sum of given range</strong><br />\nOnce the tree is constructed, how to get the sum using the constructed segment tree.  Following is algorithm to get the sum of elements.</p>\n<pre>\r\nint getSum(node, l, r) \r\n{\r\n   if range of node is within l and r\r\n        return value in node\r\n   else if range of node is completely outside l and r\r\n        return 0\r\n   else\r\n    return getSum(node\'s left child, l, r) + \r\n           getSum(node\'s right child, l, r)\r\n}</pre>\n<p><strong>Update a value</strong><br />\nLike tree construction and query operations, update can also be done recursively.  We are given an index which needs to updated.  Let <em>diff </em>be the value to be added.   We start from root of the segment tree, and add <em>diff </em>to all nodes which have given index in their range.   If a node doesn&#8217;t have given index in its range, we don&#8217;t make any changes to that node.</p>\n<p><strong>Implementation:</strong><br />\nFollowing is implementation of segment tree.  The program implements construction of segment tree for any given array. It also implements query and update operations.</p>\n<div class="responsive-tabs">\n<h2 class="tabtitle">C</h2>\n<div class="tabcontent">\n\n<pre class="brush: cpp; title: ; notranslate" title="">\r\n// C program to show segment tree operations like construction, query\r\n// and update\r\n#include &lt;stdio.h&gt;\r\n#include &lt;math.h&gt;\r\n\r\n// A utility function to get the middle index from corner indexes.\r\nint getMid(int s, int e) {  return s + (e -s)/2;  }\r\n\r\n/*  A recursive function to get the sum of values in given range\r\n    of the array. The following are parameters for this function.\r\n\r\n    st    --&gt; Pointer to segment tree\r\n    si    --&gt; Index of current node in the segment tree. Initially\r\n              0 is passed as root is always at index 0\r\n    ss &amp; se  --&gt; Starting and ending indexes of the segment represented\r\n                 by current node, i.e., st[si]\r\n    qs &amp; qe  --&gt; Starting and ending indexes of query range */\r\nint getSumUtil(int *st, int ss, int se, int qs, int qe, int si)\r\n{\r\n    // If segment of this node is a part of given range, then return\r\n    // the sum of the segment\r\n    if (qs &lt;= ss &amp;&amp; qe &gt;= se)\r\n        return st[si];\r\n\r\n    // If segment of this node is outside the given range\r\n    if (se &lt; qs || ss &gt; qe)\r\n        return 0;\r\n\r\n    // If a part of this segment overlaps with the given range\r\n    int mid = getMid(ss, se);\r\n    return getSumUtil(st, ss, mid, qs, qe, 2*si+1) +\r\n           getSumUtil(st, mid+1, se, qs, qe, 2*si+2);\r\n}\r\n\r\n/* A recursive function to update the nodes which have the given \r\n   index in their range. The following are parameters\r\n    st, si, ss and se are same as getSumUtil()\r\n    i    --&gt; index of the element to be updated. This index is \r\n             in input array.\r\n   diff --&gt; Value to be added to all nodes which have i in range */\r\nvoid updateValueUtil(int *st, int ss, int se, int i, int diff, int si)\r\n{\r\n    // Base Case: If the input index lies outside the range of \r\n    // this segment\r\n    if (i &lt; ss || i &gt; se)\r\n        return;\r\n\r\n    // If the input index is in range of this node, then update \r\n    // the value of the node and its children\r\n    st[si] = st[si] + diff;\r\n    if (se != ss)\r\n    {\r\n        int mid = getMid(ss, se);\r\n        updateValueUtil(st, ss, mid, i, diff, 2*si + 1);\r\n        updateValueUtil(st, mid+1, se, i, diff, 2*si + 2);\r\n    }\r\n}\r\n\r\n// The function to update a value in input array and segment tree.\r\n// It uses updateValueUtil() to update the value in segment tree\r\nvoid updateValue(int arr[], int *st, int n, int i, int new_val)\r\n{\r\n    // Check for erroneous input index\r\n    if (i &lt; 0 || i &gt; n-1)\r\n    {\r\n        printf(&quot;Invalid Input&quot;);\r\n        return;\r\n    }\r\n\r\n    // Get the difference between new value and old value\r\n    int diff = new_val - arr[i];\r\n\r\n    // Update the value in array\r\n    arr[i] = new_val;\r\n\r\n    // Update the values of nodes in segment tree\r\n    updateValueUtil(st, 0, n-1, i, diff, 0);\r\n}\r\n\r\n// Return sum of elements in range from index qs (quey start)\r\n// to qe (query end).  It mainly uses getSumUtil()\r\nint getSum(int *st, int n, int qs, int qe)\r\n{\r\n    // Check for erroneous input values\r\n    if (qs &lt; 0 || qe &gt; n-1 || qs &gt; qe)\r\n    {\r\n        printf(&quot;Invalid Input&quot;);\r\n        return -1;\r\n    }\r\n\r\n    return getSumUtil(st, 0, n-1, qs, qe, 0);\r\n}\r\n\r\n// A recursive function that constructs Segment Tree for array[ss..se].\r\n// si is index of current node in segment tree st\r\nint constructSTUtil(int arr[], int ss, int se, int *st, int si)\r\n{\r\n    // If there is one element in array, store it in current node of\r\n    // segment tree and return\r\n    if (ss == se)\r\n    {\r\n        st[si] = arr[ss];\r\n        return arr[ss];\r\n    }\r\n\r\n    // If there are more than one elements, then recur for left and\r\n    // right subtrees and store the sum of values in this node\r\n    int mid = getMid(ss, se);\r\n    st[si] =  constructSTUtil(arr, ss, mid, st, si*2+1) +\r\n              constructSTUtil(arr, mid+1, se, st, si*2+2);\r\n    return st[si];\r\n}\r\n\r\n/* Function to construct segment tree from given array. This function\r\n   allocates memory for segment tree and calls constructSTUtil() to\r\n   fill the allocated memory */\r\nint *constructST(int arr[], int n)\r\n{\r\n    // Allocate memory for segment tree\r\n\r\n    //Height of segment tree\r\n    int x = (int)(ceil(log2(n))); \r\n\r\n    //Maximum size of segment tree\r\n    int max_size = 2*(int)pow(2, x) - 1; \r\n\r\n    // Allocate memory\r\n    int *st = new int[max_size];\r\n\r\n    // Fill the allocated memory st\r\n    constructSTUtil(arr, 0, n-1, st, 0);\r\n\r\n    // Return the constructed segment tree\r\n    return st;\r\n}\r\n\r\n// Driver program to test above functions\r\nint main()\r\n{\r\n    int arr[] = {1, 3, 5, 7, 9, 11};\r\n    int n = sizeof(arr)/sizeof(arr[0]);\r\n\r\n    // Build segment tree from given array\r\n    int *st = constructST(arr, n);\r\n\r\n    // Print sum of values in array from index 1 to 3\r\n    printf(&quot;Sum of values in given range = %d\\n&quot;, \r\n            getSum(st, n, 1, 3));\r\n\r\n    // Update: set arr[1] = 10 and update corresponding \r\n    // segment tree nodes\r\n    updateValue(arr, st, n, 1, 10);\r\n\r\n    // Find sum after the value is updated\r\n    printf(&quot;Updated sum of values in given range = %d\\n&quot;,\r\n             getSum(st, n, 1, 3));\r\n    return 0;\r\n}\r\n</pre>\n\n</div><h2 class="tabtitle">Java</h2>\n<div class="tabcontent">\n\n<pre class="brush: java; title: ; notranslate" title="">\r\n// Java Program to show segment tree operations like construction,\r\n// query and update\r\nclass SegmentTree \r\n{\r\n    int st[]; // The array that stores segment tree nodes\r\n\r\n    /* Constructor to construct segment tree from given array. This\r\n       constructor  allocates memory for segment tree and calls\r\n       constructSTUtil() to  fill the allocated memory */\r\n    SegmentTree(int arr[], int n)\r\n    {\r\n        // Allocate memory for segment tree\r\n        //Height of segment tree\r\n        int x = (int) (Math.ceil(Math.log(n) / Math.log(2)));\r\n\r\n        //Maximum size of segment tree\r\n        int max_size = 2 * (int) Math.pow(2, x) - 1;\r\n\r\n        st = new int[max_size]; // Memory allocation\r\n\r\n        constructSTUtil(arr, 0, n - 1, 0);\r\n    }\r\n\r\n    // A utility function to get the middle index from corner indexes.\r\n    int getMid(int s, int e) {\r\n        return s + (e - s) / 2;\r\n    }\r\n\r\n    /*  A recursive function to get the sum of values in given range\r\n        of the array.  The following are parameters for this function.\r\n\r\n      st    --&gt; Pointer to segment tree\r\n      si    --&gt; Index of current node in the segment tree. Initially\r\n                0 is passed as root is always at index 0\r\n      ss &amp; se  --&gt; Starting and ending indexes of the segment represented\r\n                    by current node, i.e., st[si]\r\n      qs &amp; qe  --&gt; Starting and ending indexes of query range */\r\n    int getSumUtil(int ss, int se, int qs, int qe, int si)\r\n    {\r\n        // If segment of this node is a part of given range, then return\r\n        // the sum of the segment\r\n        if (qs &lt;= ss &amp;&amp; qe &gt;= se)\r\n            return st[si];\r\n\r\n        // If segment of this node is outside the given range\r\n        if (se &lt; qs || ss &gt; qe)\r\n            return 0;\r\n\r\n        // If a part of this segment overlaps with the given range\r\n        int mid = getMid(ss, se);\r\n        return getSumUtil(ss, mid, qs, qe, 2 * si + 1) +\r\n                getSumUtil(mid + 1, se, qs, qe, 2 * si + 2);\r\n    }\r\n\r\n    /* A recursive function to update the nodes which have the given \r\n       index in their range. The following are parameters\r\n        st, si, ss and se are same as getSumUtil()\r\n        i    --&gt; index of the element to be updated. This index is in\r\n                 input array.\r\n       diff --&gt; Value to be added to all nodes which have i in range */\r\n    void updateValueUtil(int ss, int se, int i, int diff, int si)\r\n    {\r\n        // Base Case: If the input index lies outside the range of \r\n        // this segment\r\n        if (i &lt; ss || i &gt; se)\r\n            return;\r\n\r\n        // If the input index is in range of this node, then update the\r\n        // value of the node and its children\r\n        st[si] = st[si] + diff;\r\n        if (se != ss) {\r\n            int mid = getMid(ss, se);\r\n            updateValueUtil(ss, mid, i, diff, 2 * si + 1);\r\n            updateValueUtil(mid + 1, se, i, diff, 2 * si + 2);\r\n        }\r\n    }\r\n\r\n    // The function to update a value in input array and segment tree.\r\n   // It uses updateValueUtil() to update the value in segment tree\r\n    void updateValue(int arr[], int n, int i, int new_val)\r\n    {\r\n        // Check for erroneous input index\r\n        if (i &lt; 0 || i &gt; n - 1) {\r\n            System.out.println(&quot;Invalid Input&quot;);\r\n            return;\r\n        }\r\n\r\n        // Get the difference between new value and old value\r\n        int diff = new_val - arr[i];\r\n\r\n        // Update the value in array\r\n        arr[i] = new_val;\r\n\r\n        // Update the values of nodes in segment tree\r\n        updateValueUtil(0, n - 1, i, diff, 0);\r\n    }\r\n\r\n    // Return sum of elements in range from index qs (quey start) to\r\n   // qe (query end).  It mainly uses getSumUtil()\r\n    int getSum(int n, int qs, int qe)\r\n    {\r\n        // Check for erroneous input values\r\n        if (qs &lt; 0 || qe &gt; n - 1 || qs &gt; qe) {\r\n            System.out.println(&quot;Invalid Input&quot;);\r\n            return -1;\r\n        }\r\n        return getSumUtil(0, n - 1, qs, qe, 0);\r\n    }\r\n\r\n    // A recursive function that constructs Segment Tree for array[ss..se].\r\n    // si is index of current node in segment tree st\r\n    int constructSTUtil(int arr[], int ss, int se, int si)\r\n    {\r\n        // If there is one element in array, store it in current node of\r\n        // segment tree and return\r\n        if (ss == se) {\r\n            st[si] = arr[ss];\r\n            return arr[ss];\r\n        }\r\n\r\n        // If there are more than one elements, then recur for left and\r\n        // right subtrees and store the sum of values in this node\r\n        int mid = getMid(ss, se);\r\n        st[si] = constructSTUtil(arr, ss, mid, si * 2 + 1) +\r\n                 constructSTUtil(arr, mid + 1, se, si * 2 + 2);\r\n        return st[si];\r\n    }\r\n\r\n    // Driver program to test above functions\r\n    public static void main(String args[])\r\n    {\r\n        int arr[] = {1, 3, 5, 7, 9, 11};\r\n        int n = arr.length;\r\n        SegmentTree  tree = new SegmentTree(arr, n);\r\n\r\n        // Build segment tree from given array\r\n\r\n        // Print sum of values in array from index 1 to 3\r\n        System.out.println(&quot;Sum of values in given range = &quot; +\r\n                           tree.getSum(n, 1, 3));\r\n\r\n        // Update: set arr[1] = 10 and update corresponding segment\r\n        // tree nodes\r\n        tree.updateValue(arr, n, 1, 10);\r\n\r\n        // Find sum after the value is updated\r\n        System.out.println(&quot;Updated sum of values in given range = &quot; +\r\n                tree.getSum(n, 1, 3));\r\n    }\r\n}\r\n//This code is contributed by Ankur Narain Verma\r\n</pre>\n<p></div></div><br />\nOutput:\n<pre> \r\nSum of values in given range = 15\r\nUpdated sum of values in given range = 22</pre>\n<p><strong>Time Complexity:</strong><br />\nTime Complexity for tree construction is O(n).  There are total 2n-1 nodes, and value of every node is calculated only once in tree construction.</p>\n<p>Time complexity to query is O(Logn).  To query a sum, we process at most four nodes at every level and number of levels is O(Logn).  </p>\n<p>The time complexity of update is also O(Logn). To update a leaf value, we process one node at every level and number of levels is O(Logn).</p>\n<p><strong><a href="http://www.geeksforgeeks.org/segment-tree-set-1-range-minimum-query/" target="_blank"><br />\nSegment Tree | Set 2 (Range Minimum Query)</a></strong></p>\n<p><strong>References:</strong><br />\n<a href="http://www.cse.iitk.ac.in/users/aca/lop12/slides/06.pdf" target="_blank">http://www.cse.iitk.ac.in/users/aca/lop12/slides/06.pdf</a></p>\n<p>Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.</p>\n\r\n\t\t\t<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<!-- Big Rectangle Blog Bottom -->\r\n<ins class="adsbygoogle"\r\n     style="display:inline-block;width:336px;height:280px"\r\n     data-ad-client="ca-pub-9465609616171866"\r\n     data-ad-slot="4061219431"></ins>\r\n<script>\r\n(adsbygoogle = window.adsbygoogle || []).push({});\r\n</script>\r\n<br></br>\r\n\t\t</div><!-- .entry-content -->\r\n\t\t\t\t\r\n\t\t\r\n\r\n\t\t<footer class="entry-meta">\r\n\t\t<span class="post-comment"><a href="http://www.geeksforgeeks.org/segment-tree-set-1-sum-of-given-range/#comments" class="commentslink" ><span class="dsq-postid" data-dsqidentifier="29503 http://www.geeksforgeeks.org/?p=29503">46 Comments</span></a> <!--added for comments by Shubham-->\r\n\t\t</span><span>Category: <a href="http://www.geeksforgeeks.org/category/advanced-data-structure/" rel="category tag">Advanced Data Structure</a></span> <span>Tags: <a href="http://www.geeksforgeeks.org/tag/advance-data-structures/" rel="tag">Advance Data Structures</a>, <a href="http://www.geeksforgeeks.org/tag/advanced-data-structures/" rel="tag">Advanced Data Structures</a>, <a href="http://www.geeksforgeeks.org/tag/segmenttree/" rel="tag">SegmentTree</a></span> \r\n           \t          \t\r\n\t\t\t\t\t</footer><!-- .entry-meta -->\r\n\t</article><!-- #post -->\r\n<div class="related_posts"><h3>Related Posts:</h3><ul><li><a href="http://www.geeksforgeeks.org/%c2%ad%c2%adkasais-algorithm-for-construction-of-lcp-array-from-suffix-array/" title="\xc2\xad\xc2\xadkasai\xe2\x80\x99s Algorithm for Construction of LCP array from Suffix Array">\xc2\xad\xc2\xadkasai\xe2\x80\x99s Algorithm for Construction of LCP array from Suffix Array</a></li><li><a href="http://www.geeksforgeeks.org/overview-of-data-structures-set-3-graph-trie-segment-tree-and-suffix-tree/" title="Overview of Data Structures | Set 3 (Graph, Trie, Segment Tree and Suffix Tree)">Overview of Data Structures | Set 3 (Graph, Trie, Segment Tree and Suffix Tree)</a></li><li><a href="http://www.geeksforgeeks.org/heavy-light-decomposition-set-2-implementation/" title="Heavy Light Decomposition | Set 2 (Implementation)">Heavy Light Decomposition | Set 2 (Implementation)</a></li><li><a href="http://www.geeksforgeeks.org/heavy-light-decomposition-set-1-introduction/" title="Heavy Light Decomposition | Set 1 (Introduction)">Heavy Light Decomposition | Set 1 (Introduction)</a></li><li><a href="http://www.geeksforgeeks.org/count-inversions-of-size-three-in-a-give-array/" title="Count Inversions of size three in a give array">Count Inversions of size three in a give array</a></li><li><a href="http://www.geeksforgeeks.org/count-inversions-array-set-3-using-bit/" title="Count inversions in an array | Set 3 (Using BIT)">Count inversions in an array | Set 3 (Using BIT)</a></li><li><a href="http://www.geeksforgeeks.org/find-lca-in-binary-tree-using-rmq/" title="Find LCA in Binary Tree using RMQ">Find LCA in Binary Tree using RMQ</a></li><li><a href="http://www.geeksforgeeks.org/range-minimum-query-for-static-array/" title="Range Minimum Query (Square Root Decomposition and Sparse Table)">Range Minimum Query (Square Root Decomposition and Sparse Table)</a></li></ul></div><br></br>\r\n\r\n<!-- Added on 29 Oct 2015 for next and previous from same category -->\r\n<nav class="nav-single">\r\n\t\t\t\t\t<div class="assistive-text">Post navigation</div>\r\n\t\t\t\t\t<span class="nav-previous"><a href="http://www.geeksforgeeks.org/ternary-search-tree/" rel="prev">Previous post in category</a></span>\r\n\t\t\t\t\t<span class="nav-next"><a href="http://www.geeksforgeeks.org/segment-tree-set-1-range-minimum-query/" rel="next">Next post in category</a></span>\r\n\t\t\t\t</nav><!-- .nav-single -->\r\n\r\n\r\n<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>\r\n    <script type="text/javascript">\r\n    $(document).ready(function(){\r\n        $.ajax({\r\n            url:"http://courses.geeksforgeeks.org/plugin.php",\r\n            method:"POST",\r\n            dataType:"json",\r\n            data:{post_id:$("#ratePlugin").attr("pid"),url:window.location.href},\r\n            xhrFields:{withCredentials:true},\r\n            success:function(response){\r\n                $("#ratePlugin").html(response.rate);\r\n                $("#markPlugin").html(response.mark);\r\n            },\r\n            complete:function(){\r\n                $(".box").click(function(){\r\n                    rrequest({post_id:$("#ratePlugin").attr("pid"),post_title:$("#ratePlugin").attr("ptitle"),rating:$(this).attr("rating"),url:window.location.href});\r\n                });\r\n                $(".mark").click(function(){\r\n                    mrequest({post_id:$("#markPlugin").attr("pid"),post_title:$("#markPlugin").attr("ptitle"),op:$(this).attr("id"),url:window.location.href});\r\n                });\r\n            }\r\n        });\r\n        function rrequest(payload){\r\n            $.ajax({\r\n                url:"http://courses.geeksforgeeks.org/gfgRatings.php",\r\n                method:"POST",\r\n                dataType:"html",\r\n                data:payload,\r\n                xhrFields:{withCredentials:true},\r\n                success:function(response){\r\n                    $("#ratePlugin").html(response);\r\n                },\r\n                complete:function(){\r\n                    $(".box").click(function(){\r\n                        rrequest({post_id:$("#ratePlugin").attr("pid"),post_title:$("#ratePlugin").attr("ptitle"),rating:$(this).attr("rating"),url:window.location.href});\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        //rrequest({post_id:$("#ratePlugin").attr("pid"),url:window.location.href});\r\n        function mrequest(payload){\r\n            $.ajax({\r\n                url:"http://courses.geeksforgeeks.org/gfgMarking.php",\r\n                method:"POST",\r\n                dataType:"html",\r\n                data:payload,\r\n                xhrFields:{withCredentials:true},\r\n                success:function(response){\r\n                    $("#markPlugin").html(response);\r\n                },\r\n                complete:function(){\r\n                    $(".mark").click(function(){\r\n                        mrequest({post_id:$("#markPlugin").attr("pid"),post_title:$("#markPlugin").attr("ptitle"),op:$(this).attr("id"),url:window.location.href});\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        //mrequest({post_id:$("#markPlugin").attr("pid"),url:window.location.href});\r\n    });\r\n</script>\r\n\r\n<div class="plugins">\r\n<div pid="29503" ptitle="Segment Tree | Set 1 (Sum of given range)" id="ratePlugin"></div>\r\n<div pid="29503" ptitle="Segment Tree | Set 1 (Sum of given range)" id="markPlugin"></div>\r\n</div>\r\n\r\n<br></br>\r\n\r\n<script>\r\n  window.fbAsyncInit=function() {\r\n    FB.init({\r\n      appId      : \\\'380853768781431\\\',\r\n      xfbml      : true,\r\n      version    : \\\'v2.3\\\'\r\n    });\r\n  };\r\n\r\n  (function(d, s, id){\r\n     var js, fjs = d.getElementsByTagName(s)[0];\r\n     if (d.getElementById(id)) {return;}\r\n     js = d.createElement(s); js.id = id;\r\n     js.src = "//connect.facebook.net/en_US/sdk.js";\r\n     fjs.parentNode.insertBefore(js, fjs);\r\n   }(document, \\\'script\\\', \\\'facebook-jssdk\\\'));\r\n</script>\r\n<div class="fb-like" data-share="true" data-width="450" data-show-faces="true"></div>\r\n\r\n<br></br>\r\n<p>Writing code in comment? Please use <a href="http://code.geeksforgeeks.org/">code.geeksforgeeks.org</a>, generate link and share the link here.</a>\r\n\t\t\t\t\r\n<div id="disqus_thread">\r\n            <div id="dsq-content">\r\n\r\n\r\n            <ul id="dsq-comments">\r\n                    <li class="comment even thread-even depth-1" id="dsq-comment-35875">\r\n        <div id="dsq-comment-header-35875" class="dsq-comment-header">\r\n            <cite id="dsq-cite-35875">\r\n                <span id="dsq-author-user-35875">gaurav</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-35875" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-35875" class="dsq-comment-message"><p>Shouldn&#8217;t  &#8216;if (qs = se)&#8217; in getSumUtil() function be &#8216;if (qs &gt;= ss &amp;&amp; qe &lt;= se)&#039; ??</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-35266">\r\n        <div id="dsq-comment-header-35266" class="dsq-comment-header">\r\n            <cite id="dsq-cite-35266">\r\n                <span id="dsq-author-user-35266">prashant</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-35266" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-35266" class="dsq-comment-message"><p>void update(tnode* root,int arr[],int low,int high,int ind,int val)</p>\n<p>{</p>\n<p>\tif(low==high)</p>\n<p>\t{</p>\n<p>\t\troot-&gt;data=val;</p>\n<p>\t\treturn;</p>\n<p>\t}</p>\n<p>\tint mid=(low+high)/2;</p>\n<p>\tif(ind&gt;mid)</p>\n<p>\t   update(root-&gt;rchild,arr,mid+1,high,ind,val);</p>\n<p>\tif(indlchild,arr,low,mid,ind,val);</p>\n<p>\troot-&gt;data=root-&gt;lchild-&gt;data+root-&gt;rchild-&gt;data;</p>\n<p>}</p>\n<p>int sum(tnode* root,int low,int high,int l,int h)</p>\n<p>{</p>\n<p>\tif((low==l)&amp;&amp;(high==h))</p>\n<p>\t\treturn root-&gt;data;</p>\n<p>\tint mid=(low+high)/2;</p>\n<p>\tif(l&gt;mid)</p>\n<p>\t   return sum(root-&gt;rchild,mid+1,high,l,h);</p>\n<p>\tif(hlchild,low,mid,l,h);</p>\n<p>\telse</p>\n<p>\t{</p>\n<p>\t\tint m=(l+h)/2;</p>\n<p>\t\treturn((sum(root,low,high,l,m)+sum(root,low,high,m+1,h)));</p>\n<p>\t}</p>\n<p>}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-35265">\r\n        <div id="dsq-comment-header-35265" class="dsq-comment-header">\r\n            <cite id="dsq-cite-35265">\r\n                <span id="dsq-author-user-35265">prashant</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-35265" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-35265" class="dsq-comment-message"><p>note the crucial points<br />\n1-segment tree is not complete binary tree<br />\n2-the left and right subtree are divided based on middle values<br />\n3-the sum and update code are similar to bianry search code so its implementation is 0(logn) time ,,,,,not favourable for update process<br />\nconstruction is simple &#8230;just recursively go down dividing the index into 2 halves and when base case comes fill the node data and during unwinding phase adjust root-&gt;data<br />\nfor range sum<br />\nif ind1&gt;mid then just move to right subtree<br />\nif ind2data;</p>\n<p>\tint mid=(low+high)/2;</p>\n<p>\tif(l&gt;mid)</p>\n<p>\t   return sum(root-&gt;rchild,mid+1,high,l,h);</p>\n<p>\tif(hlchild,low,mid,l,h);</p>\n<p>\telse</p>\n<p>\t{</p>\n<p>\t\tint m=(l+h)/2;</p>\n<p>\t\treturn((sum(root,low,high,l,m)+sum(root,low,high,m+1,h)));</p>\n<p>\t}</p>\n<p>}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-34612">\r\n        <div id="dsq-comment-header-34612" class="dsq-comment-header">\r\n            <cite id="dsq-cite-34612">\r\n                <span id="dsq-author-user-34612">dmr</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-34612" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-34612" class="dsq-comment-message"><p>We can use segment trees for finding sum in a given range. But how can this be modified to find minimum element in a given range in O(logn) time? This is a question in References link (<br />\n<a href="http://www.cse.iitk.ac.in/users/aca/lop12/slides/06.pdf" rel="nofollow">http://www.cse.iitk.ac.in/users/aca/lop12/slides/06.pdf</a>) given above.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-33423">\r\n        <div id="dsq-comment-header-33423" class="dsq-comment-header">\r\n            <cite id="dsq-cite-33423">\r\n                <span id="dsq-author-user-33423">prshant jha</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-33423" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-33423" class="dsq-comment-message"><p>here is my  update version in 0(logn) complexity with much simpler implementation than above<br />\n<a href="http://ideone.com/SppdWT" rel="nofollow">http://ideone.com/SppdWT</a></p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-34205">\r\n        <div id="dsq-comment-header-34205" class="dsq-comment-header">\r\n            <cite id="dsq-cite-34205">\r\nhttp://www.phoenixuser.blogspot.com                <span id="dsq-author-user-34205">GOPI GOPINATH</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-34205" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-34205" class="dsq-comment-message"><p>will the complexity in your implementation be O(logn) ???? but to find the sum&#8230;.u r computing the sum during runtime ryt ????</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-33393">\r\n        <div id="dsq-comment-header-33393" class="dsq-comment-header">\r\n            <cite id="dsq-cite-33393">\r\n                <span id="dsq-author-user-33393">prashant jha</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-33393" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-33393" class="dsq-comment-message"><p>#include</p>\n<p>using namespace std;</p>\n<p>struct node</p>\n<p>{</p>\n<p>\tnode* lchild;</p>\n<p>\tint data;</p>\n<p>\tnode* rchild;</p>\n<p>\tnode()</p>\n<p>\t{</p>\n<p>\t\tlchild=NULL;</p>\n<p>\t\trchild=NULL;</p>\n<p>\t}</p>\n<p>}*root=NULL;</p>\n<p>node* fun(node* root,int arr[],int low,int high)</p>\n<p>{</p>\n<p>\tif(!root)</p>\n<p>\t    root=new node();</p>\n<p>\tif(low==high)</p>\n<p>\t{</p>\n<p>\t\troot-&gt;data=arr[low];</p>\n<p>\t\treturn root;</p>\n<p>\t}</p>\n<p>\tint mid=(low+high)/2;</p>\n<p>\troot-&gt;lchild=fun(root-&gt;lchild,arr,low,mid);</p>\n<p>\troot-&gt;rchild=fun(root-&gt;rchild,arr,mid+1,high);</p>\n<p>\troot-&gt;data=root-&gt;lchild-&gt;data+root-&gt;rchild-&gt;data;</p>\n<p>\treturn root;</p>\n<p>}</p>\n<p>void display(node* root)</p>\n<p>{</p>\n<p>   if(root!=NULL)</p>\n<p>   {</p>\n<p>   \tdisplay(root-&gt;lchild);</p>\n<p>   \tcout&lt;data&lt;rchild);</p>\n<p>   }</p>\n<p>}</p>\n<p>int main()</p>\n<p>{</p>\n<p>\tint arr[]={3,5,1,7,9,6};</p>\n<p>\tint i,r;</p>\n<p>\tint n=sizeof(arr)/sizeof(arr[0]);</p>\n<p>\tcout&lt;&lt;&quot;the inorder trversal of segment tree is.n&quot;;</p>\n<p>\tdisplay(fun(root,arr,0,n-1));</p>\n<p>    cout&lt;&lt;&quot;n&quot;&lt;&gt;i&gt;&gt;r;</p>\n<p>    root=NULL;</p>\n<p>    cout&lt;data&lt;&lt;&quot; is the range sum.n&quot;;</p>\n<p>\treturn 0;</p>\n<p>}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-33391">\r\n        <div id="dsq-comment-header-33391" class="dsq-comment-header">\r\n            <cite id="dsq-cite-33391">\r\n                <span id="dsq-author-user-33391">prashant jha</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-33391" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-33391" class="dsq-comment-message"><p>here is the implementation of the segment tree<br />\n<a href="http://ideone.com/JPDzqz" rel="nofollow">http://ideone.com/JPDzqz</a></p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-33240">\r\n        <div id="dsq-comment-header-33240" class="dsq-comment-header">\r\n            <cite id="dsq-cite-33240">\r\n                <span id="dsq-author-user-33240">nwoebcke</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-33240" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-33240" class="dsq-comment-message"><p>Although this puts an additional O(log(n)) of memory on the heap, I think it makes the range comparison and recursion a little easier to follow. Also it is C++. To preserve the C language, you could use structs instead of classes and rename the methods to functions with a struct pointer parameter tagged on.<br />\n<code><br />\nclass Range {<br />\n  public:<br />\n   int start;<br />\n   int end;<br />\n   Range(s, e) : start(s), end(e) {}<br />\n   void init(s, e) {<br />\n      start = s;<br />\n      end = e;<br />\n   }<br />\n   inline bool isInside(Range *other) {<br />\n      return start &gt;= other-&gt;start &amp;&amp; end end;<br />\n   }<br />\n   inline bool isOutside(Range *other) {<br />\n      return start &gt; other-&gt;end || end start;<br />\n   }<br />\n};</p>\n<p>class NodeInfo {<br />\n   Range range;<br />\n  public:<br />\n   int index;<br />\n   NodeInfo(s, e, idx) : index(idx) {<br />\n      range.init(s, e);<br />\n   }<br />\n   inline bool isInside(Range *other) { return range.isInside(other); }<br />\n   inline bool isOutside(Range *other) { return range.isOutside(other); }<br />\n   inline int getMidRange() {<br />\n      return getMid(range.start, range.end);<br />\n   }<br />\n   NodeInfo* getLeftChild(mid) {<br />\n      return new NodeInfo(range.start, mid, index * 2 + 1);<br />\n   }<br />\n   NodeInfo* getRightChild(mid) {<br />\n      return new NodeInfo(mid + 1, range.end, index * 2 + 2);<br />\n   }<br />\n};</p>\n<p>int getSum(int *st, int n, int qs, int qe)<br />\n{<br />\n   // Check for erroneous input values<br />\n   if (qs  n-1 || qs &gt; qe)<br />\n   {<br />\n      printf("Invalid Input");<br />\n      return -1;<br />\n   }<br />\n   NodeInfo *segNode = new NodeInfo(0, n-1, 0);<br />\n   Range *query = new Range(qs, qe);<br />\n   int retval = getSumUtil(st, query, segNode);<br />\n   delete segNode;<br />\n   delete query;<br />\n   return retval;<br />\n}</p>\n<p>int getSumUtil(int *st, Range *query, NodeInfo *segNode)<br />\n{<br />\n   // If segment of this node is a part of given range, then return the<br />\n   // sum of the segment<br />\n   if(segNode-&gt;isInside(query))<br />\n      return st[segNode-&gt;index];<br />\n   // If segment of this node is outside the given range<br />\n   if (segNode-&gt;isOutside(query))<br />\n      return 0;<br />\n   // If a part of this segment overlaps with the given range<br />\n   int mid = segNode-&gt;getMidRange();<br />\n   NodeInfo *left = segNode-&gt;getLeftChild(mid);<br />\n   NodeInfo *right = segNode-&gt;getRightChild(mid);<br />\n   int retval = getSumUtil(st, query, left) + getSumUtil(st, query, right);<br />\n   delete left; delete right;<br />\n   return retval;<br />\n}<br />\n</code></p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-31680">\r\n        <div id="dsq-comment-header-31680" class="dsq-comment-header">\r\n            <cite id="dsq-cite-31680">\r\n                <span id="dsq-author-user-31680">Puneet Jaiswal</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-31680" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-31680" class="dsq-comment-message"><p>Would this work as tree implementation</p>\n<p><code><br />\npublic class SegmentTree {<br />\n    public static class STNode {<br />\n        int leftIndex;<br />\n        int rightIndex;<br />\n        int sum;<br />\n        STNode leftNode;<br />\n        STNode rightNode;<br />\n    }</p>\n<p>    static STNode constructSegmentTree(int[] A, int l, int r) {<br />\n        if (l == r) {<br />\n            STNode node = new STNode();<br />\n            node.leftIndex = l;<br />\n            node.rightIndex = r;<br />\n            node.sum = A[l];<br />\n            return node;<br />\n        }<br />\n        int mid = (l + r) / 2;<br />\n        STNode leftNode = constructSegmentTree(A, l, mid);<br />\n        STNode rightNode = constructSegmentTree(A, mid, r);<br />\n        STNode root = new STNode();<br />\n        root.leftIndex = leftNode.leftIndex;<br />\n        root.rightIndex = rightNode.rightIndex;<br />\n        root.sum = leftNode.sum + rightNode.sum;<br />\n        root.leftNode = leftNode;<br />\n        root.rightNode = rightNode;<br />\n        return root;<br />\n    }</p>\n<p>    static int getSum(STNode root, int l, int r) {<br />\n        if (root.leftIndex &gt;= l &amp;&amp; root.rightIndex &lt;= r) {<br />\n            return root.sum;<br />\n        }<br />\n        if (root.rightIndex  r) {<br />\n            return 0;<br />\n        }<br />\n        return getSum(root.leftNode, l, r) + getSum(root.rightNode, l, r);<br />\n    }</p>\n<p>    /**<br />\n     *<br />\n     * @param root<br />\n     * @param index index of number to be updated in original array<br />\n     * @param newValue<br />\n     * @return difference between new and old values<br />\n     */<br />\n    static int updateValueAtIndex(STNode root, int index, int newValue) {<br />\n        int diff = 0;<br />\n        if(root.leftIndex==root.rightIndex &amp;&amp; index == root.leftIndex) {<br />\n            // We actually reached to the leaf node to be updated<br />\n            diff = newValue-root.sum;<br />\n            root.sum=newValue;<br />\n            return diff;<br />\n        }<br />\n        int mid = (root.leftIndex + root.rightIndex) / 2;<br />\n        if (index &lt;= mid) {<br />\n            diff= updateValueAtIndex(root.leftNode, index, newValue);<br />\n        } else {<br />\n            diff= updateValueAtIndex(root.rightNode, index, newValue);<br />\n        }<br />\n        root.sum+=diff;<br />\n        return diff;<br />\n    }<br />\n}<br />\n</code></p>\n<p>Run time complexity for all operations ===&gt;  Log(n)</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-31481">\r\n        <div id="dsq-comment-header-31481" class="dsq-comment-header">\r\n            <cite id="dsq-cite-31481">\r\n                <span id="dsq-author-user-31481">mallard</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-31481" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-31481" class="dsq-comment-message"><p>sorry but i think the language of implementation of above code is  C and i think &#8216;new&#8217; operator can&#8217;t be used in C.I am getting error when i am trying to run this code.I am using codeblock.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-31165">\r\n        <div id="dsq-comment-header-31165" class="dsq-comment-header">\r\n            <cite id="dsq-cite-31165">\r\n                <span id="dsq-author-user-31165">Newbie90</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-31165" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-31165" class="dsq-comment-message"><p>What is the difference between the constructST and constructSTUtil functions? Someone please explain the constructSTUTil fucntion.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-35085">\r\n        <div id="dsq-comment-header-35085" class="dsq-comment-header">\r\n            <cite id="dsq-cite-35085">\r\n                <span id="dsq-author-user-35085">Ankur Sao</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-35085" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-35085" class="dsq-comment-message"><p>ConstructST only allocates memory for the segment tree array and calls constructUTil function which actually fills up the segment tree array. ConstructST than returns this array!</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-31072">\r\n        <div id="dsq-comment-header-31072" class="dsq-comment-header">\r\n            <cite id="dsq-cite-31072">\r\n                <span id="dsq-author-user-31072">Vu Duc Minh</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-31072" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-31072" class="dsq-comment-message"><p>I do not think the procedure &#8220;updateValueUtil&#8221; is a good one (even it is correct). Segment tree is a tree; and we should update from a leaf to the root; like the &#8220;constructSTUtil&#8221; procedure. In fact, &#8220;updateValueUtil&#8221; is &#8220;constructSTUtil&#8221;. We only need one procedure for all two tasks.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-30918">\r\n        <div id="dsq-comment-header-30918" class="dsq-comment-header">\r\n            <cite id="dsq-cite-30918">\r\n                <span id="dsq-author-user-30918">Adrian Carballo</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-30918" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-30918" class="dsq-comment-message"><p>Hey, great tutorial, I wrote a python implementation here <a href="https://github.com/adrianca/Competitive-Programming-Tools/tree/master/data%20structures/Segment%20Tree" rel="nofollow">https://github.com/adrianca/Competitive-Programming-Tools/tree/master/data%20structures/Segment%20Tree</a></p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-29345">\r\n        <div id="dsq-comment-header-29345" class="dsq-comment-header">\r\n            <cite id="dsq-cite-29345">\r\n                <span id="dsq-author-user-29345">Avinash Ks</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-29345" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-29345" class="dsq-comment-message"><p>Just one doubt, in SumUtil, isn&#8217;t qs supposed to be greater than ss and qe less than se, because qs &#8211; qe is a subset of ss &#8211; se</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-26899">\r\n        <div id="dsq-comment-header-26899" class="dsq-comment-header">\r\n            <cite id="dsq-cite-26899">\r\n                <span id="dsq-author-user-26899">Denis</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-26899" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-26899" class="dsq-comment-message"><p>Hi, you wrote : &#8220;size of memory allocated for segment tree will be 2*2^|log2n|-1&#8243;,<br />\nwhere I assume n is a number of leafs in the tree. This is seems not to<br />\nbe true using your example of a segment tree : &#8220;{1,3,5,7,9,11}&#8221;,<br />\nwhere n=6. Thus using   2*2^|log2n|-1 size of memory allocated is 7, which is not true because on the picture there are 11 nodes. Suppose n should be replaced<br />\non the (2*n-1) in your expression.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-26923">\r\n        <div id="dsq-comment-header-26923" class="dsq-comment-header">\r\n            <cite id="dsq-cite-26923">\r\n                <span id="dsq-author-user-26923">Denis</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-26923" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-26923" class="dsq-comment-message"><p>Sorry, I&#8217;ve got it. You are using ceil() function in this case. So 2*2^ceil(log2N)-1 will produce correct segment tree size. I was thinking about floor() instead of ceil().</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even depth-2" id="dsq-comment-26924">\r\n        <div id="dsq-comment-header-26924" class="dsq-comment-header">\r\n            <cite id="dsq-cite-26924">\r\n                <span id="dsq-author-user-26924">Denis</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-26924" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-26924" class="dsq-comment-message"><p>Sorry, I&#8217;ve got it. You are using ceil() function in this case. So 2*2^ceil(log2N)-1 will produce correct segment tree size. I was thinking about floor() instead of ceil().</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-26898">\r\n        <div id="dsq-comment-header-26898" class="dsq-comment-header">\r\n            <cite id="dsq-cite-26898">\r\n                <span id="dsq-author-user-26898">Denis</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-26898" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-26898" class="dsq-comment-message"><p>Hi, you wrote : &#8220;size of memory allocated for segment tree will be &#8220;, where I assume n is a number of leafs in the tree. This is seems not to be true using your example of a segment tree : &#8220;{1,3,5,7,9,11}&#8221;,<br />\nwhere n=6. Thus using  size of memory allocated is 7, which is not true because on the picture there are 11 nodes. Suppose n should be replaced on the (2*n-1) in your expression.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-denial even thread-even depth-1" id="dsq-comment-24948">\r\n        <div id="dsq-comment-header-24948" class="dsq-comment-header">\r\n            <cite id="dsq-cite-24948">\r\n                <span id="dsq-author-user-24948">denial</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-24948" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-24948" class="dsq-comment-message"><p>@geeksforgeeks:<br />\nChange suggestion in the paragraph &#8220;Query for Sum of given range&#8221;. It should be changed to following:</p>\n<pre> <code language="C">\r\nint getSum(node, l, r) \r\n{\r\n   if range of node is within l and r\r\n        return value in node\r\n\r\n   if range of node is completely outside l and r\r\n        return 0\r\n  \r\n    return getSum(node\'s left child, l, r) + \r\n           getSum(node\'s right child, l, r)\r\n}\r\n</code> </pre>\n<p>let me know if I&#8217;m wrong. <img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/images/smilies/simple-smile.png" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-denial odd alt thread-odd thread-alt depth-1" id="dsq-comment-24947">\r\n        <div id="dsq-comment-header-24947" class="dsq-comment-header">\r\n            <cite id="dsq-cite-24947">\r\n                <span id="dsq-author-user-24947">denial</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-24947" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-24947" class="dsq-comment-message"><p>@geeksforgeeks<br />\nChange suggestion in the paragraph &#8220;Query for Sum of given range&#8221; above :</p>\n<p>You written it as :</p>\n<pre> <code language="C">\nint getSum(node, l, r) \n{\n   if range of node is within l and r\n        return value in node\n   else if range of node is completely outside l and r\n        return 0\n   else\n    return getSum(node\'s left child, l, r) + \n           getSum(node\'s right child, l, r)\n}\n</code> </pre>\n<p>should be changed to this:</p>\n<pre> <code language="C">\nint getSum(node, l, r) \n{\n   if range of node is within l and r\n        return value in node\n\n   if range of node is completely outside l and r\n        return 0\n\n    return getSum(node\'s left child, l, r) + \n           getSum(node\'s right child, l, r)\n}\n</code> </pre>\n<p>Let me know if I&#8217;m wrong. <img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/images/smilies/simple-smile.png" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-21584">\r\n        <div id="dsq-comment-header-21584" class="dsq-comment-header">\r\n            <cite id="dsq-cite-21584">\r\n                <span id="dsq-author-user-21584">Prakhar Jain</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-21584" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-21584" class="dsq-comment-message"><p>Time Complexity of query is O(log n) because we process at most &#8220;4 nodes&#8221; at each level.. you have written &#8220;2 nodes&#8221; which is wrong. For example take range [1-3] in your example and make tree of recursive calls of getSum() function, you will see there are at most 4 nodes at each level.<br />\nEven it is also given in the iitk link you have given at the end.</p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-geeksforgeeks bypostauthor odd alt depth-2" id="dsq-comment-21608">\r\n        <div id="dsq-comment-header-21608" class="dsq-comment-header">\r\n            <cite id="dsq-cite-21608">\r\n                <span id="dsq-author-user-21608">GeeksforGeeks</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-21608" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-21608" class="dsq-comment-message"><p>@Prakhar Jain: Thanks for pointing this out.  we have updated the post.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-3" id="dsq-comment-21787">\r\n        <div id="dsq-comment-header-21787" class="dsq-comment-header">\r\n            <cite id="dsq-cite-21787">\r\n                <span id="dsq-author-user-21787">Prakhar Jain</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-21787" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-21787" class="dsq-comment-message"><p>Also, to update a leaf we process &#8220;two nodes&#8221; at each level, not &#8220;one node&#8221;.</p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-19894">\r\n        <div id="dsq-comment-header-19894" class="dsq-comment-header">\r\n            <cite id="dsq-cite-19894">\r\n                <span id="dsq-author-user-19894">kartik</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-19894" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-19894" class="dsq-comment-message"><p>How do we do the updation if we have to update more than 2 values</p>\n<p>like we have to increase all number in range a to b by 2 </p>\n<p>how our update function do this in O(log(n))</p>\n<p>can any body plz help</p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-19797">\r\n        <div id="dsq-comment-header-19797" class="dsq-comment-header">\r\n            <cite id="dsq-cite-19797">\r\n                <span id="dsq-author-user-19797">sumanth232</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-19797" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-19797" class="dsq-comment-message"><p>Since the tree is represented using array and relation between parent and child indexes must be maintained, size of memory allocated for segment tree will be 2*(2^ceil(log2n)) &#8211; 1. </p>\n<p>Why not just 2*n &#8211; 1 ? What are the bad sequences of just allotting 2*n &#8211; 1 nodes to the tree. Where will it go wrong?<br />\nAnybody pls help..</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-alveko odd alt depth-2" id="dsq-comment-19807">\r\n        <div id="dsq-comment-header-19807" class="dsq-comment-header">\r\n            <cite id="dsq-cite-19807">\r\n                <span id="dsq-author-user-19807">alveko</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-19807" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-19807" class="dsq-comment-message"><p>The array must have enough elements to include a possible right-most leaf. The index of a possible right-most leaf increases with a step of power of 2. The size of (2*n-1) might be just not big enough.</p>\n<pre> <code language="C">\n// segment tree size (n is the number of elements in the input array)\n//     (log2ceil(n))   is the level that can hold all distinct elements\n//   2^(log2ceil(n))   is the number of elements at that level\n// 2*2^(log2ceil(n))-1 is the total number of elements in the tree\n</code> </pre>\n<p>/ Alexander K.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-3" id="dsq-comment-20009">\r\n        <div id="dsq-comment-header-20009" class="dsq-comment-header">\r\n            <cite id="dsq-cite-20009">\r\n                <span id="dsq-author-user-20009">sumanth232</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-20009" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-20009" class="dsq-comment-message"><p>Thanks.. that made it clear..</p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment byuser comment-author-abhishek08aug odd alt thread-odd thread-alt depth-1" id="dsq-comment-18482">\r\n        <div id="dsq-comment-header-18482" class="dsq-comment-header">\r\n            <cite id="dsq-cite-18482">\r\n                <span id="dsq-author-user-18482">abhishek08aug</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-18482" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-18482" class="dsq-comment-message"><p>Intelligent \xf0\x9f\x98\x80</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-17962">\r\n        <div id="dsq-comment-header-17962" class="dsq-comment-header">\r\n            <cite id="dsq-cite-17962">\r\n                <span id="dsq-author-user-17962">prasad</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-17962" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-17962" class="dsq-comment-message"><p>I have difficulty understanding the time complexity of FindMin().</p>\n<p>At each node we are splitting the problem in to two sub problems of equal size.</p>\n<p>T(n) = 2T(n/2) + 1;</p>\n<p>I think this reduces to O(n).</p>\n<p>Please correct me if I am wrong any where?</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-15639">\r\n        <div id="dsq-comment-header-15639" class="dsq-comment-header">\r\n            <cite id="dsq-cite-15639">\r\n                <span id="dsq-author-user-15639">Abhay</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-15639" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-15639" class="dsq-comment-message"><p>I think in updateValueUti function it should be<br />\nupdateValueUtil(st, ss, mid, i, diff, 2*index + 1) instead of<br />\nupdateValueUtil(st, 0, mid, i, diff, 2*index + 1)</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-geeksforgeeks bypostauthor even depth-2" id="dsq-comment-15640">\r\n        <div id="dsq-comment-header-15640" class="dsq-comment-header">\r\n            <cite id="dsq-cite-15640">\r\n                <span id="dsq-author-user-15640">GeeksforGeeks</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-15640" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-15640" class="dsq-comment-message"><p>Thanks for pointing this out.  We have updated the code.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-14910">\r\n        <div id="dsq-comment-header-14910" class="dsq-comment-header">\r\n            <cite id="dsq-cite-14910">\r\n                <span id="dsq-author-user-14910">Gaurav Jain</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-14910" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-14910" class="dsq-comment-message"><p>This is incorrect&#8230;<br />\nLet us reconsider the example of array 1,3,5,7,9,11</p>\n<p>if i have to calculate sum of indices 2 to 4. This should be 5+7+9=21. But using segment tree it is not possible to calculate the same.</p>\n<p>Segment tree will work only if the indices are in first half or 2nd half, but when the indices span across halves it might not work</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-geeksforgeeks bypostauthor even depth-2" id="dsq-comment-15041">\r\n        <div id="dsq-comment-header-15041" class="dsq-comment-header">\r\n            <cite id="dsq-cite-15041">\r\n                <span id="dsq-author-user-15041">GeeksforGeeks</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-15041" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-15041" class="dsq-comment-message"><p>We ran the above given code for your input and it produced the correct output.  Did you run the code?</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-14832">\r\n        <div id="dsq-comment-header-14832" class="dsq-comment-header">\r\n            <cite id="dsq-cite-14832">\r\n                <span id="dsq-author-user-14832">Sitesh</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-14832" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-14832" class="dsq-comment-message"><p>BIT is more efficient in this case. Relatively faster than Segment trees, Lesser memory requirements:</p>\n<p>Time complexities : O(log N)<br />\nSpace complexities: O(N)<br />\nMore details here: <a href="http://www.algorithmist.com/index.php/Fenwick_tree" rel="nofollow">http://www.algorithmist.com/index.php/Fenwick_tree</a></p>\n<p>#include &lt;vector&gt;<br />\nusing namespace std;</p>\n<p>// In this implementation, the tree is represented by a vector&lt;int&gt;.<br />\n// Elements are numbered by 0, 1, &#8230;, n-1.<br />\n// tree[i] is sum of elements with indexes i&amp;(i+1)..i, inclusive.</p>\n<p>// Creates a zero-initialized Fenwick tree for n elements.<br />\nvector&lt;int&gt; create(int n) { return vector&lt;int&gt;(n, 0); }</p>\n<p>// Returns sum of elements with indexes a..b, inclusive<br />\nint query(const vector&lt;int&gt; &amp;tree, int a, int b) {<br />\n    if (a == 0) {<br />\n        int sum = 0;<br />\n        for (; b &gt;= 0; b = (b &amp; (b + 1)) &#8211; 1)<br />\n          sum += tree[b];<br />\n        return sum;<br />\n    } else {<br />\n        return query(tree, 0, b) &#8211; query(tree, 0, a-1);<br />\n    }<br />\n}</p>\n<p>// Increases value of k-th element by inc.<br />\nvoid increase(vector&lt;int&gt; &amp;tree, int k, int inc) {<br />\n    for (; k &lt; (int)tree.size(); k |= k + 1)<br />\n        tree[k] += inc;<br />\n}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-14595">\r\n        <div id="dsq-comment-header-14595" class="dsq-comment-header">\r\n            <cite id="dsq-cite-14595">\r\n                <span id="dsq-author-user-14595">Kumar</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-14595" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-14595" class="dsq-comment-message"><p>Nice explanation. But there&#8217;s another tree structure which is precisely meant to answer range-sum &amp; product queries called Binary indexed trees, which is simpler, powerful and easy to maintain.</p>\n<p>Segment trees are really good for answering range minimum queries &amp; intervals.</p>\n<p>Here&#8217;s a complete working implementation of segment tree in C#</p>\n<p>/* Paste your code here (You may delete these lines if not writing code) </p>\n<p>using System;<br />\nusing System.Collections.Generic;<br />\nusing System.Linq;<br />\nusing System.Text;<br />\nusing Algorithms.Trees.Base;</p>\n<p>namespace Algorithms.Trees<br />\n{<br />\n    public class SegmentTree&lt;K&gt; where K:IComparable&lt;K&gt;<br />\n    {<br />\n        private List&lt;SegmentTreeNode&lt;K&gt;&gt; Elements;</p>\n<p>        public K[] Keys { get; set; }</p>\n<p>        public SegmentTree(K[] keys)<br />\n        {<br />\n            if (null == keys || 0 == keys.Length)<br />\n            {<br />\n                return;<br />\n            }</p>\n<p>            Keys = keys;</p>\n<p>            int segmentTreeSize = (int)Math.Pow(2, Math.Log(Keys.Length, 2) + 1);<br />\n            Elements = new List&lt;SegmentTreeNode&lt;K&gt;&gt;(segmentTreeSize);</p>\n<p>            for (int i = 0; i &lt; segmentTreeSize; i++)<br />\n            {<br />\n                Elements.Add(null);<br />\n            }</p>\n<p>            ConstructSegmentTreeForRange(0, keys.Length &#8211; 1, 0);<br />\n        }</p>\n<p>        SegmentTreeNode&lt;K&gt; ConstructSegmentTreeForRange(int lowIndex, int highIndex, int rangeIndex)<br />\n        {<br />\n            SegmentTreeNode&lt;K&gt; rangeNode = new SegmentTreeNode&lt;K&gt;() { LowIndex = lowIndex, HighIndex = highIndex };</p>\n<p>            K leftMinimum, rightMinimum;</p>\n<p>            int midPoint = lowIndex + (highIndex &#8211; lowIndex)/2;</p>\n<p>            if (lowIndex &lt; highIndex)<br />\n            {<br />\n                leftMinimum = ConstructSegmentTreeForRange(lowIndex, midPoint, 2 * rangeIndex + 1).RangeMinimum;<br />\n                rightMinimum = ConstructSegmentTreeForRange(midPoint + 1, highIndex, 2 * rangeIndex + 2).RangeMinimum;</p>\n<p>                rangeNode.RangeMinimum = (leftMinimum.CompareTo(rightMinimum) &lt;= 0) ? leftMinimum : rightMinimum;<br />\n            }<br />\n            else if (lowIndex == highIndex)<br />\n            {<br />\n                rangeNode.RangeMinimum = Keys[lowIndex];<br />\n                rangeNode.LowIndex = lowIndex;<br />\n                rangeNode.HighIndex = lowIndex;<br />\n            }</p>\n<p>            Elements[rangeIndex] = rangeNode;</p>\n<p>            return rangeNode;<br />\n        }</p>\n<p>        public K QueryMinimumInRange(int lowIndex, int highIndex)<br />\n        {<br />\n            if (lowIndex &lt; 0 || highIndex &gt;= Keys.Length)<br />\n            {<br />\n                return default(K);<br />\n            }</p>\n<p>            return QueryMinimumInRangeAux(lowIndex, highIndex, 0);<br />\n        }</p>\n<p>        private K QueryMinimumInRangeAux(int lowIndex, int highIndex, int rangeIndex)<br />\n        {<br />\n            if (highIndex &lt; Elements[rangeIndex].LowIndex || lowIndex &gt; Elements[rangeIndex].HighIndex)<br />\n            {<br />\n                return default(K);<br />\n            }</p>\n<p>            if (Elements[rangeIndex].LowIndex &gt;= lowIndex &amp;&amp; Elements[rangeIndex].HighIndex &lt;= highIndex)<br />\n            {<br />\n                return Elements[rangeIndex].RangeMinimum;<br />\n            }</p>\n<p>            K leftMinimum = QueryMinimumInRangeAux(lowIndex, highIndex, 2 * rangeIndex + 1);<br />\n            K rightMinimum = QueryMinimumInRangeAux(lowIndex, highIndex, 2 * rangeIndex + 2);</p>\n<p>            if (EqualityComparer&lt;K&gt;.Default.Equals(default(K), leftMinimum))<br />\n            {<br />\n                return rightMinimum;<br />\n            }</p>\n<p>            if (EqualityComparer&lt;K&gt;.Default.Equals(default(K), rightMinimum))<br />\n            {<br />\n                return leftMinimum;<br />\n            }</p>\n<p>            return (leftMinimum.CompareTo(rightMinimum) &lt;= 0) ? leftMinimum : rightMinimum;<br />\n        }</p>\n<p>        public bool UpdateKey(int keyIndex, K newKey)<br />\n        {<br />\n            if (keyIndex &lt; 0 || keyIndex &gt;= Keys.Length)<br />\n            {<br />\n                return false;<br />\n            }</p>\n<p>            Keys[keyIndex] = newKey;</p>\n<p>            return UpdateKeyAux(keyIndex, newKey, 0);<br />\n        }</p>\n<p>        private bool UpdateKeyAux(int keyIndex, K newKey, int rangeIndex)<br />\n        {<br />\n            if (Elements[rangeIndex].LowIndex == keyIndex &amp;&amp; Elements[rangeIndex].HighIndex == keyIndex)<br />\n            {<br />\n                Elements[rangeIndex].RangeMinimum = newKey;<br />\n                return true;<br />\n            }</p>\n<p>            if (Elements[rangeIndex].RangeMinimum.CompareTo(newKey) &gt; 0)<br />\n            {<br />\n                Elements[rangeIndex].RangeMinimum = newKey;<br />\n            }</p>\n<p>            int midPoint = Elements[rangeIndex].LowIndex + (Elements[rangeIndex].HighIndex &#8211; Elements[rangeIndex].LowIndex) / 2;</p>\n<p>            if (keyIndex &lt;= midPoint)<br />\n            {<br />\n                return UpdateKeyAux(keyIndex, newKey, 2 * rangeIndex + 1);<br />\n            }<br />\n            else<br />\n            {<br />\n                return UpdateKeyAux(keyIndex, newKey, 2 * rangeIndex + 2);<br />\n            }<br />\n        }<br />\n    }<br />\n}</p>\n<p>*/</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-14545">\r\n        <div id="dsq-comment-header-14545" class="dsq-comment-header">\r\n            <cite id="dsq-cite-14545">\r\n                <span id="dsq-author-user-14545">kT</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-14545" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-14545" class="dsq-comment-message"><pre> <code language="C">\nHi,\nI think this is incorrect.\nconstructSTUtil(arr, 0, n-1, st, 0);\n // Return the constructed segment tree\n    return st;\n\n\nThis should do the job.\nst = constructSTUtil(arr, 0, n-1, st, 0);\n\nPlease correct me else.\n\nThanks\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-geeksforgeeks bypostauthor even depth-2" id="dsq-comment-14613">\r\n        <div id="dsq-comment-header-14613" class="dsq-comment-header">\r\n            <cite id="dsq-cite-14613">\r\n                <span id="dsq-author-user-14613">GeeksforGeeks</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-14613" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-14613" class="dsq-comment-message"><p>Please take a closer look at the code.  The recursive function constructSTUtil() returns the value of root (or sum of leaf nodes under it).  st is a pointer to the constructed segment tree.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-3" id="dsq-comment-14714">\r\n        <div id="dsq-comment-header-14714" class="dsq-comment-header">\r\n            <cite id="dsq-cite-14714">\r\n                <span id="dsq-author-user-14714">kT</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-14714" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-14714" class="dsq-comment-message"><p>Ok, yes. My bad!</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-14521">\r\n        <div id="dsq-comment-header-14521" class="dsq-comment-header">\r\n            <cite id="dsq-cite-14521">\r\n                <span id="dsq-author-user-14521">Vikas</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-14521" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-14521" class="dsq-comment-message"><p>May you please give the code to implement segment tree to store intervals ?</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-14534">\r\n        <div id="dsq-comment-header-14534" class="dsq-comment-header">\r\n            <cite id="dsq-cite-14534">\r\n                <span id="dsq-author-user-14534">sreeram</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-14534" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-14534" class="dsq-comment-message"><p>Yeah ..can you please provide that implementation also ?</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-14505">\r\n        <div id="dsq-comment-header-14505" class="dsq-comment-header">\r\n            <cite id="dsq-cite-14505">\r\nhttp://www.linkedin.com/in/ramanawithu                <span id="dsq-author-user-14505">Venki</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-14505" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-14505" class="dsq-comment-message"><p>You are using 0th location also, so, left child is at 2*i+1 and right child at 2*i+2. If i is either left or right child location, parent is at i/2.</p>\n<p>Power function can be excluded with simple shift operation.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-14513">\r\n        <div id="dsq-comment-header-14513" class="dsq-comment-header">\r\n            <cite id="dsq-cite-14513">\r\n                <span id="dsq-author-user-14513">GeeksforGeeks</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-14513" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-14513" class="dsq-comment-message"><p>@Venki: Thanks for pointing this out.  The line of explanation was for starting index 1 and code for starting index 0.  We have updated the explanation to match with code.  The code and other explanation remains same.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n            </ul>\r\n\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n<script type="text/javascript">\r\nvar disqus_url = \'http://www.geeksforgeeks.org/segment-tree-set-1-sum-of-given-range/\';\r\nvar disqus_identifier = \'29503 http://www.geeksforgeeks.org/?p=29503\';\r\nvar disqus_container_id = \'disqus_thread\';\r\nvar disqus_shortname = \'geeksforgeeks\';\r\nvar disqus_title = "Segment Tree | Set 1 (Sum of given range)";\r\nvar disqus_config_custom = window.disqus_config;\r\nvar disqus_config = function () {\r\n    /*\r\n    All currently supported events:\r\n    onReady: fires when everything is ready,\r\n    onNewComment: fires when a new comment is posted,\r\n    onIdentify: fires when user is authenticated\r\n    */\r\n    \r\n    \r\n    this.language = \'\';\r\n    \r\n    if (disqus_config_custom) {\r\n        disqus_config_custom.call(this);\r\n    }\r\n};\r\n\r\n(function() {\r\n    var dsq = document.createElement(\'script\'); dsq.type = \'text/javascript\';\r\n    dsq.async = true;\r\n    dsq.src = \'//\' + disqus_shortname + \'.disqus.com/embed.js\';\r\n    (document.getElementsByTagName(\'head\')[0] || document.getElementsByTagName(\'body\')[0]).appendChild(dsq);\r\n})();\r\n</script>\r\n\r\n\r\n\t\t\t\r\n\t\t</div><!-- #content -->\r\n\t</div><!-- #primary -->\r\n\r\n\r\n\t\t\t<div id="secondary" class="widget-area" role="complementary">\r\n\t\t\t<aside id="text-9" class="widget widget_text">\t\t\t<div class="textwidget"><div id="fb-root"></div>\r\n<script>(function(d, s, id) {\r\n  var js, fjs = d.getElementsByTagName(s)[0];\r\n  if (d.getElementById(id)) return;\r\n  js = d.createElement(s); js.id = id;\r\n  js.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.3&appId=138031159685820";\r\n  fjs.parentNode.insertBefore(js, fjs);\r\n}(document, \'script\', \'facebook-jssdk\'));</script>\r\n\r\n<div class="fb-page" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="300" data-height="180" data-small-header="true" data-adapt-container-width="false" data-hide-cover="true" data-show-facepile="true" data-show-posts="false"><div class="fb-xfbml-parse-ignore"><blockquote cite="https://www.facebook.com/pages/GeeksforGeeks/316764689022"><a href="https://www.facebook.com/pages/GeeksforGeeks/316764689022">GeeksforGeeks</a></blockquote></div></div>\r\n</div>\n\t\t</aside><aside id="text-33" class="widget widget_text">\t\t\t<div class="textwidget"><a href="http://www.springpeople.com/gfg-landing">\r\n<img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/GfG-2.jpg" alt="SpringPeople Ad">\r\n</a>\r\n</div>\n\t\t</aside><aside id="text-14" class="widget widget_text"><p class="widget-title">Popular Posts</p>\t\t\t<div class="textwidget"><ul>\r\n<li><a href="http://www.geeksforgeeks.org/top-algorithms-and-data-structures-for-competitive-programming/">Top 10 Algorithms and Data Structures for Competitive Programming</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/top-10-algorithms-in-interview-questions/">Top 10 algorithms in Interview Questions</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/how-to-begin-with-competitive-programming/">How to begin with Competitive Programming?</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>\r\n<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>\r\n<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding \xe2\x80\x9cextern\xe2\x80\x9d keyword in C</a> </li>\r\n<li><a href="http://www.geeksforgeeks.org/heavy-light-decomposition-set-1-introduction/"> Heavy Light Decomposition</a> </li>\r\n<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>\r\n</ul></div>\n\t\t</aside><aside id="text-17" class="widget widget_text">\t\t\t<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<!-- Big 300x600 Sidebar -->\r\n<ins class="adsbygoogle"\r\n     style="display:inline-block;width:300px;height:600px"\r\n     data-ad-client="ca-pub-9465609616171866"\r\n     data-ad-slot="4402736037"></ins>\r\n<script>\r\n(adsbygoogle = window.adsbygoogle || []).push({});\r\n</script></div>\n\t\t</aside><aside id="text-32" class="widget widget_text">\t\t\t<div class="textwidget"><form style="border:1px solid #ccc;padding:3px;text-align:center;" action="https://feedburner.google.com/fb/a/mailverify" method="post" target="popupwindow" onsubmit="window.open(\'https://feedburner.google.com/fb/a/mailverify?uri=Geeksforgeeks\', \'popupwindow\', \'scrollbars=yes,width=550,height=520\');return true"><p>Subscribe and Never Miss an Article</p><input type="text" style="width:140px" placeholder="Email Address" name="email"/><input type="hidden" value="Geeksforgeeks" name="uri"/><input type="hidden" name="loc" value="en_US"/>&nbsp;&nbsp;<input type="submit" style="background-color: #4cb96b;" value="Subscribe" /></form></div>\n\t\t</aside><aside id="text-18" class="widget widget_text">\t\t\t<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<!-- LargeRectangleSide -->\r\n<ins class="adsbygoogle"\r\n     style="display:inline-block;width:336px;height:280px"\r\n     data-ad-client="ca-pub-9465609616171866"\r\n     data-ad-slot="1884636833"></ins>\r\n<script>\r\n(adsbygoogle = window.adsbygoogle || []).push({});\r\n</script></div>\n\t\t</aside><aside id="text-13" class="widget widget_text">\t\t\t<div class="textwidget"><ul><li><a href="http://geeksquiz.com/category/articles/puzzle/">Common Interview Puzzles</a></li><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/advanced-data-structure/">Advanced Data Structures</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/pattern-searching/">Pattern Searching</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li><li><a href="http://www.geeksforgeeks.org/category/searching/">Searching</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/sorting/">Sorting</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/Hash/">Hashing</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/algorithm/analysis/">Analysis of Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/algorithm/mathematical/">Mathematical Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/algorithm/randomized/">Randomized Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>\r\n</ul>\r\n\r\n\r\n\r\n\r\n</div>\n\t\t</aside><aside id="categories-384568212" class="widget widget_categories"><p class="widget-title">All Categories</p><label class="screen-reader-text" for="cat">All Categories</label><select name=\'cat\' id=\'cat\' class=\'postform\' >\n\t<option value=\'-1\'>Select Category</option>\n\t<option class="level-0" value="1762">Advanced Data Structure&nbsp;&nbsp;(69)</option>\n\t<option class="level-0" value="1744">Algorithm&nbsp;&nbsp;(406)</option>\n\t<option class="level-1" value="1745">&nbsp;&nbsp;&nbsp;Analysis&nbsp;&nbsp;(16)</option>\n\t<option class="level-1" value="1748">&nbsp;&nbsp;&nbsp;Backtracking&nbsp;&nbsp;(11)</option>\n\t<option class="level-1" value="1750">&nbsp;&nbsp;&nbsp;Divide and Conquer&nbsp;&nbsp;(29)</option>\n\t<option class="level-1" value="1746">&nbsp;&nbsp;&nbsp;Dynamic Programming&nbsp;&nbsp;(91)</option>\n\t<option class="level-1" value="1754">&nbsp;&nbsp;&nbsp;Geometric&nbsp;&nbsp;(14)</option>\n\t<option class="level-1" value="1747">&nbsp;&nbsp;&nbsp;Greedy&nbsp;&nbsp;(20)</option>\n\t<option class="level-1" value="1753">&nbsp;&nbsp;&nbsp;Mathematical&nbsp;&nbsp;(123)</option>\n\t<option class="level-1" value="1749">&nbsp;&nbsp;&nbsp;Pattern Searching&nbsp;&nbsp;(30)</option>\n\t<option class="level-1" value="1757">&nbsp;&nbsp;&nbsp;Randomized&nbsp;&nbsp;(19)</option>\n\t<option class="level-1" value="1751">&nbsp;&nbsp;&nbsp;Searching&nbsp;&nbsp;(43)</option>\n\t<option class="level-1" value="1752">&nbsp;&nbsp;&nbsp;Sorting&nbsp;&nbsp;(40)</option>\n\t<option class="level-0" value="3">Arrays&nbsp;&nbsp;(80)</option>\n\t<option class="level-0" value="18">Articles&nbsp;&nbsp;(25)</option>\n\t<option class="level-0" value="1761">Binary Search Tree&nbsp;&nbsp;(37)</option>\n\t<option class="level-0" value="17">Bit Magic&nbsp;&nbsp;(56)</option>\n\t<option class="level-0" value="14">C/C++ Puzzles&nbsp;&nbsp;(244)</option>\n\t<option class="level-0" value="1790">Competitive Programming&nbsp;&nbsp;(4)</option>\n\t<option class="level-0" value="1710">GBlog&nbsp;&nbsp;(57)</option>\n\t<option class="level-0" value="67">GFacts&nbsp;&nbsp;(43)</option>\n\t<option class="level-0" value="97">Graph&nbsp;&nbsp;(74)</option>\n\t<option class="level-0" value="1756">Hash&nbsp;&nbsp;(21)</option>\n\t<option class="level-0" value="1755">Heap&nbsp;&nbsp;(18)</option>\n\t<option class="level-0" value="1140">Interview Experiences&nbsp;&nbsp;(1,052)</option>\n\t<option class="level-0" value="87">Java&nbsp;&nbsp;(56)</option>\n\t<option class="level-0" value="8">Linked Lists&nbsp;&nbsp;(70)</option>\n\t<option class="level-0" value="1760">Matrix&nbsp;&nbsp;(39)</option>\n\t<option class="level-0" value="66">MCQ&nbsp;&nbsp;(95)</option>\n\t<option class="level-0" value="4">Misc&nbsp;&nbsp;(40)</option>\n\t<option class="level-0" value="5">Output&nbsp;&nbsp;(55)</option>\n\t<option class="level-0" value="1767">Project&nbsp;&nbsp;(22)</option>\n\t<option class="level-0" value="1789">Python&nbsp;&nbsp;(5)</option>\n\t<option class="level-0" value="1743">Queue&nbsp;&nbsp;(16)</option>\n\t<option class="level-0" value="1742">Stack&nbsp;&nbsp;(25)</option>\n\t<option class="level-0" value="7">Strings&nbsp;&nbsp;(61)</option>\n\t<option class="level-0" value="1788">Technical Scripter&nbsp;&nbsp;(14)</option>\n\t<option class="level-0" value="19">Trees&nbsp;&nbsp;(114)</option>\n</select>\n\n<script type=\'text/javascript\'>\n/* <![CDATA[ */\n(function() {\n\tvar dropdown = document.getElementById( "cat" );\n\tfunction onCatChange() {\n\t\tif ( dropdown.options[ dropdown.selectedIndex ].value > 0 ) {\n\t\t\tlocation.href = "http://www.geeksforgeeks.org/?cat=" + dropdown.options[ dropdown.selectedIndex ].value;\n\t\t}\n\t}\n\tdropdown.onchange = onCatChange;\n})();\n/* ]]> */\n</script>\n\n</aside><aside id="text-21" class="widget widget_text"><p class="widget-title">Recent Comments</p>\t\t\t<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>\n\t\t</aside><aside id="tag_cloud-3" class="widget widget_tag_cloud"><p class="widget-title">Tags</p><div class="tagcloud"><a href=\'http://www.geeksforgeeks.org/tag/adobe/\' class=\'tag-link-148\' title=\'32 topics\' style=\'font-size: 12.905109489051pt;\'>Adobe</a>\n<a href=\'http://www.geeksforgeeks.org/tag/advance-data-structures/\' class=\'tag-link-152\' title=\'31 topics\' style=\'font-size: 12.802919708029pt;\'>Advance Data Structures</a>\n<a href=\'http://www.geeksforgeeks.org/tag/advanced-data-structures/\' class=\'tag-link-150\' title=\'38 topics\' style=\'font-size: 13.620437956204pt;\'>Advanced Data Structures</a>\n<a href=\'http://www.geeksforgeeks.org/tag/amazon/\' class=\'tag-link-141\' title=\'254 topics\' style=\'font-size: 22pt;\'>Amazon</a>\n<a href=\'http://www.geeksforgeeks.org/tag/array/\' class=\'tag-link-68\' title=\'12 topics\' style=\'font-size: 8.7153284671533pt;\'>array</a>\n<a href=\'http://www.geeksforgeeks.org/tag/backtracking/\' class=\'tag-link-112\' title=\'11 topics\' style=\'font-size: 8.4087591240876pt;\'>Backtracking</a>\n<a href=\'http://www.geeksforgeeks.org/tag/bharti-softbank-hike/\' class=\'tag-link-1214\' title=\'10 topics\' style=\'font-size: 8pt;\'>Bharti SoftBank (HIKE)</a>\n<a href=\'http://www.geeksforgeeks.org/tag/bit-magic/\' class=\'tag-link-17\' title=\'15 topics\' style=\'font-size: 9.6350364963504pt;\'>Bit Magic</a>\n<a href=\'http://www.geeksforgeeks.org/tag/c/\' class=\'tag-link-86\' title=\'18 topics\' style=\'font-size: 10.452554744526pt;\'>C++</a>\n<a href=\'http://www.geeksforgeeks.org/tag/cn/\' class=\'tag-link-142\' title=\'12 topics\' style=\'font-size: 8.7153284671533pt;\'>CN</a>\n<a href=\'http://www.geeksforgeeks.org/tag/c-puzzle/\' class=\'tag-link-69\' title=\'15 topics\' style=\'font-size: 9.6350364963504pt;\'>c puzzle</a>\n<a href=\'http://www.geeksforgeeks.org/tag/d-e-shaw/\' class=\'tag-link-823\' title=\'17 topics\' style=\'font-size: 10.248175182482pt;\'>D-E-Shaw</a>\n<a href=\'http://www.geeksforgeeks.org/tag/dbms/\' class=\'tag-link-139\' title=\'11 topics\' style=\'font-size: 8.4087591240876pt;\'>DBMS</a>\n<a href=\'http://www.geeksforgeeks.org/tag/divide-and-conquer/\' class=\'tag-link-113\' title=\'27 topics\' style=\'font-size: 12.189781021898pt;\'>Divide and Conquer</a>\n<a href=\'http://www.geeksforgeeks.org/tag/dynamic-programming/\' class=\'tag-link-111\' title=\'83 topics\' style=\'font-size: 16.992700729927pt;\'>Dynamic Programming</a>\n<a href=\'http://www.geeksforgeeks.org/tag/flipkart/\' class=\'tag-link-173\' title=\'46 topics\' style=\'font-size: 14.43795620438pt;\'>Flipkart</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate/\' class=\'tag-link-114\' title=\'88 topics\' style=\'font-size: 17.299270072993pt;\'>GATE</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-2012/\' class=\'tag-link-133\' title=\'10 topics\' style=\'font-size: 8pt;\'>GATE-CS-2012</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-c-language/\' class=\'tag-link-72\' title=\'10 topics\' style=\'font-size: 8pt;\'>GATE-CS-C-Language</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-ds-algo/\' class=\'tag-link-79\' title=\'35 topics\' style=\'font-size: 13.313868613139pt;\'>GATE-CS-DS-&amp;-Algo</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-older/\' class=\'tag-link-145\' title=\'15 topics\' style=\'font-size: 9.6350364963504pt;\'>GATE-CS-Older</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gfact/\' class=\'tag-link-67\' title=\'20 topics\' style=\'font-size: 10.861313868613pt;\'>GFacts</a>\n<a href=\'http://www.geeksforgeeks.org/tag/goldman-sachs/\' class=\'tag-link-590\' title=\'20 topics\' style=\'font-size: 10.861313868613pt;\'>Goldman Sachs</a>\n<a href=\'http://www.geeksforgeeks.org/tag/google/\' class=\'tag-link-155\' title=\'15 topics\' style=\'font-size: 9.6350364963504pt;\'>Google</a>\n<a href=\'http://www.geeksforgeeks.org/tag/graph/\' class=\'tag-link-97\' title=\'45 topics\' style=\'font-size: 14.335766423358pt;\'>Graph</a>\n<a href=\'http://www.geeksforgeeks.org/tag/greedy-algorithm/\' class=\'tag-link-159\' title=\'20 topics\' style=\'font-size: 10.861313868613pt;\'>Greedy Algorithm</a>\n<a href=\'http://www.geeksforgeeks.org/tag/hashing/\' class=\'tag-link-250\' title=\'15 topics\' style=\'font-size: 9.6350364963504pt;\'>Hashing</a>\n<a href=\'http://www.geeksforgeeks.org/tag/interview-experience/\' class=\'tag-link-126\' title=\'216 topics\' style=\'font-size: 21.284671532847pt;\'>Interview Experience</a>\n<a href=\'http://www.geeksforgeeks.org/tag/java/\' class=\'tag-link-87\' title=\'62 topics\' style=\'font-size: 15.766423357664pt;\'>Java</a>\n<a href=\'http://www.geeksforgeeks.org/tag/maq-software/\' class=\'tag-link-1392\' title=\'11 topics\' style=\'font-size: 8.4087591240876pt;\'>MAQ Software</a>\n<a href=\'http://www.geeksforgeeks.org/tag/mathematicalalgo/\' class=\'tag-link-154\' title=\'73 topics\' style=\'font-size: 16.481751824818pt;\'>MathematicalAlgo</a>\n<a href=\'http://www.geeksforgeeks.org/tag/matrix/\' class=\'tag-link-211\' title=\'21 topics\' style=\'font-size: 11.065693430657pt;\'>Matrix</a>\n<a href=\'http://www.geeksforgeeks.org/tag/microsoft/\' class=\'tag-link-104\' title=\'95 topics\' style=\'font-size: 17.605839416058pt;\'>Microsoft</a>\n<a href=\'http://www.geeksforgeeks.org/tag/morgan-stanley/\' class=\'tag-link-167\' title=\'17 topics\' style=\'font-size: 10.248175182482pt;\'>Morgan Stanley</a>\n<a href=\'http://www.geeksforgeeks.org/tag/operating-systems/\' class=\'tag-link-110\' title=\'19 topics\' style=\'font-size: 10.656934306569pt;\'>Operating systems</a>\n<a href=\'http://www.geeksforgeeks.org/tag/oracle/\' class=\'tag-link-171\' title=\'24 topics\' style=\'font-size: 11.678832116788pt;\'>Oracle</a>\n<a href=\'http://www.geeksforgeeks.org/tag/pattern-searching/\' class=\'tag-link-107\' title=\'26 topics\' style=\'font-size: 11.985401459854pt;\'>Pattern Searching</a>\n<a href=\'http://www.geeksforgeeks.org/tag/puzzle/\' class=\'tag-link-70\' title=\'15 topics\' style=\'font-size: 9.6350364963504pt;\'>puzzle</a>\n<a href=\'http://www.geeksforgeeks.org/tag/python/\' class=\'tag-link-1770\' title=\'21 topics\' style=\'font-size: 11.065693430657pt;\'>Python</a>\n<a href=\'http://www.geeksforgeeks.org/tag/recursion/\' class=\'tag-link-85\' title=\'21 topics\' style=\'font-size: 11.065693430657pt;\'>Recursion</a>\n<a href=\'http://www.geeksforgeeks.org/tag/samsung/\' class=\'tag-link-180\' title=\'12 topics\' style=\'font-size: 8.7153284671533pt;\'>Samsung</a>\n<a href=\'http://www.geeksforgeeks.org/tag/sap-labs/\' class=\'tag-link-1414\' title=\'23 topics\' style=\'font-size: 11.474452554745pt;\'>SAP Labs</a>\n<a href=\'http://www.geeksforgeeks.org/tag/snapdeal/\' class=\'tag-link-1246\' title=\'16 topics\' style=\'font-size: 9.9416058394161pt;\'>SnapDeal</a>\n<a href=\'http://www.geeksforgeeks.org/tag/stack/\' class=\'tag-link-94\' title=\'17 topics\' style=\'font-size: 10.248175182482pt;\'>stack</a>\n<a href=\'http://www.geeksforgeeks.org/tag/stack-queue/\' class=\'tag-link-899\' title=\'12 topics\' style=\'font-size: 8.7153284671533pt;\'>Stack-Queue</a></div>\n</aside><aside id="text-25" class="widget widget_text">\t\t\t<div class="textwidget"><ul>\r\n<li><h2><a href="http://geeksquiz.com/">GeeksQuiz</a></h2></li>\r\n\r\n<li><h2><a href="http://code.geeksforgeeks.org/">GeeksforGeeksIDE</a></h2></li>\r\n\r\n<li><h2><a href="http://www.practice.geeksforgeeks.org/">GeeksforGeeks Practice</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/data-structures/">Data Structures</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/c/">C Programming</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++ Programming</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/java/">Java Programming</a></h2></li>\r\n\r\n<li><h2><a href="http://geeksquiz.com/books/">Books</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Experiences</a></h2></li>\r\n\r\n<li><h2><a href="http://geeksquiz.com/gate-corner-2/">GATE CS</a></h2></li>\r\n\r\n<li><h2><a href="http://www.gatecs.geeksquiz.com">GATE CS Forum</a></h2></li>\r\n\r\n<li><h2><a href="https://play.google.com/store/apps/details?id=free.programming.programming">Android App</a></h2></li>\r\n</ul>\r\n\r\n</div>\n\t\t</aside>\t\t</div><!-- #secondary -->\r\n\t\t</div><!-- #main .wrapper -->\r\n\t<footer id="colophon" role="contentinfo">\r\n\t\t<div class="site-info">\r\n\t\t<div class="clear"></div>\r\n\t\t</div><!-- .site-info -->\r\n\t\t</footer><!-- #colophon -->\r\n<center>\r\n<div class="iconic-footer">\r\n\r\n@geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>  <a href="http://www.geeksforgeeks.org/about/"> &nbsp; &nbsp; &nbsp; &nbsp;About Us!&nbsp; &nbsp; &nbsp; &nbsp;</a><a href="http://www.geeksforgeeks.org/new/ad.htm"> &nbsp; &nbsp; &nbsp; &nbsp;Advertise with us!&nbsp; &nbsp; &nbsp; &nbsp;</a>\r\n\r\n      \t\t\t</div></center><!-- .site-info -->\r\n\r\n\t\t\t\t<div class="clear"></div>\r\n</div><!-- #page -->\r\n\r\n        <script type="text/javascript">\r\n        // <![CDATA[\r\n        var disqus_shortname = \'geeksforgeeks\';\r\n        (function () {\r\n            var nodes = document.getElementsByTagName(\'span\');\r\n            for (var i = 0, url; i < nodes.length; i++) {\r\n                if (nodes[i].className.indexOf(\'dsq-postid\') != -1) {\r\n                    nodes[i].parentNode.setAttribute(\'data-disqus-identifier\', nodes[i].getAttribute(\'data-dsqidentifier\'));\r\n                    url = nodes[i].parentNode.href.split(\'#\', 1);\r\n                    if (url.length == 1) { url = url[0]; }\r\n                    else { url = url[1]; }\r\n                    nodes[i].parentNode.href = url + \'#disqus_thread\';\r\n                }\r\n            }\r\n            var s = document.createElement(\'script\'); \r\n            s.async = true;\r\n            s.type = \'text/javascript\';\r\n            s.src = \'//\' + disqus_shortname + \'.disqus.com/count.js\';\r\n            (document.getElementsByTagName(\'HEAD\')[0] || document.getElementsByTagName(\'BODY\')[0]).appendChild(s);\r\n        }());\r\n        // ]]>\r\n        </script>\r\n        <script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushJava.js\'></script>\n<script type=\'text/javascript\'>\n\t(function(){\n\t\tvar corecss = document.createElement(\'link\');\n\t\tvar themecss = document.createElement(\'link\');\n\t\tvar corecssurl = "http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9b";\r\n\t\tif ( corecss.setAttribute ) {\r\n\t\t\t\tcorecss.setAttribute( "rel", "stylesheet" );\r\n\t\t\t\tcorecss.setAttribute( "type", "text/css" );\r\n\t\t\t\tcorecss.setAttribute( "href", corecssurl );\r\n\t\t} else {\r\n\t\t\t\tcorecss.rel = "stylesheet";\r\n\t\t\t\tcorecss.href = corecssurl;\r\n\t\t}\r\n\t\tdocument.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );\r\n\t\tvar themecssurl = "http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9b";\r\n\t\tif ( themecss.setAttribute ) {\r\n\t\t\t\tthemecss.setAttribute( "rel", "stylesheet" );\r\n\t\t\t\tthemecss.setAttribute( "type", "text/css" );\r\n\t\t\t\tthemecss.setAttribute( "href", themecssurl );\r\n\t\t} else {\r\n\t\t\t\tthemecss.rel = "stylesheet";\r\n\t\t\t\tthemecss.href = themecssurl;\r\n\t\t}\r\n\t\t//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);\r\n\t\tdocument.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );\r\n\t})();\n\tSyntaxHighlighter.config.strings.expandSource = \'+ expand source\';\n\tSyntaxHighlighter.config.strings.help = \'?\';\n\tSyntaxHighlighter.config.strings.alert = \'SyntaxHighlighter\\n\\n\';\n\tSyntaxHighlighter.config.strings.noBrush = \'Can\\\'t find brush for: \';\n\tSyntaxHighlighter.config.strings.brushNotHtmlScript = \'Brush wasn\\\'t configured for html-script option: \';\n\tSyntaxHighlighter.defaults[\'gutter\'] = false;\n\tSyntaxHighlighter.defaults[\'pad-line-numbers\'] = true;\n\tSyntaxHighlighter.defaults[\'toolbar\'] = false;\n\tSyntaxHighlighter.all();\r\n</script>\r\n<link rel=\'stylesheet\' id=\'tabby-print-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/tabby-responsive-tabs/css/tabby-print.css\' type=\'text/css\' media=\'all\' />\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/js/comment-reply.min.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/js/selectnav.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/js/jquery/jquery.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/js/jquery/jquery-migrate.min.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/tabby-responsive-tabs/js/tabby.js\'></script>\n\n<script>jQuery(document).ready(function($) { RESPONSIVEUI.responsiveTabs(); })</script>\n\r\n\r\n<script type="text/javascript">\r\n\r\n  var _gaq = _gaq || [];\r\n  _gaq.push([\'_setAccount\', \'UA-12148232-1\']);\r\n  _gaq.push([\'_trackPageview\']);\r\n\r\n  (function() {\r\n    var ga = document.createElement(\'script\'); ga.type = \'text/javascript\'; ga.async = true;\r\n    ga.src = (\'https:\' == document.location.protocol ? \'https://ssl\' : \'http://www\') + \'.google-analytics.com/ga.js\';\r\n    var s = document.getElementsByTagName(\'script\')[0]; s.parentNode.insertBefore(ga, s);\r\n  })();\r\n\r\n</script>  \r\n<script async type="text/javascript" src="//cdn.fancybar.net/ac/fancybar.js?zoneid=1502&serve=C6ADVKE&placement=geeksforgeeks" id="_fancybar_js"></script>\r\n</body>\r\n</html>\n<!-- Dynamic page generated in 0.422 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2016-03-02 00:06:19 -->\n\n<!-- Compression = gzip -->\n<!-- super cache -->'
p838
sb.