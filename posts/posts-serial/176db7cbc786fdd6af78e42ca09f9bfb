ccopy_reg
_reconstructor
p0
(cpost
Post
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'post_file'
p6
S'/Users/anupamjain/code/gitRepo/GitToPost/posts/Java/TopologicalSort'
p7
sS'files_covered'
p8
c__builtin__
set
p9
((lp10
S'/Users/anupamjain/code/gitRepo/Questions/Algo/Java/TopologicalSort.java'
p11
atp12
Rp13
sS'title'
p14
VTopological Sorting
p15
sS'file_name'
p16
g11
sS'link'
p17
S'http://www.geeksforgeeks.org/topological-sorting/'
p18
sS'host_name'
p19
S'www.geeksforgeeks.org'
p20
sS'problem_text'
p21
g0
(cbs4.element
Tag
p22
g2
Ntp23
Rp24
(dp25
S'can_be_empty_element'
p26
I00
sS'previous_element'
p27
NsS'next_sibling'
p28
NsS'name'
p29
S'p'
p30
sS'parent'
p31
NsS'namespace'
p32
NsS'prefix'
p33
NsS'previous_sibling'
p34
NsS'attrs'
p35
(dp36
sS'next_element'
p37
g0
(g22
g2
Ntp38
Rp39
(dp40
g26
I00
sg27
g24
sg28
g0
(g22
g2
Ntp41
Rp42
(dp43
g26
I00
sg27
g0
(cbs4.element
Comment
p44
c__builtin__
unicode
p45
Vmore
p46
tp47
Rp48
(dp49
g34
g0
(cbs4.element
NavigableString
p50
g45
V  Topological Sorting for a graph is not possible if the graph is not a DAG.
p51
tp52
Rp53
(dp54
g34
g0
(g22
g2
Ntp55
Rp56
(dp57
g26
I00
sg27
g0
(g50
g45
VTopological sorting for Directed Acyclic Graph (DAG) is a linear ordering of vertices such that for every directed edge uv,  vertex u comes before v in the ordering. 
p58
tp59
Rp60
(dp61
g34
Nsg27
g39
sg28
g56
sg37
g56
sg31
g39
sbsg28
g53
sg29
Vspan
p62
sg31
g39
sg32
Nsg33
Nsg34
g60
sg35
(dp63
Vid
p64
Vmore-117677
p65
ssg37
g53
sS'parser_class'
p66
cbs4
BeautifulSoup
p67
sS'hidden'
p68
I00
sS'contents'
p69
(lp70
sbsg27
g56
sg28
g48
sg37
g48
sg31
g39
sbsg27
g53
sg28
Nsg37
g42
sg31
g39
sbsg28
g0
(g22
g2
Ntp71
Rp72
(dp73
g26
I00
sg27
g0
(g50
g45
VFor example, a topological sorting of the following graph is \u201c5 4 2 3 1 0\u2033.  There can be more than one topological sorting for a graph.  For example, another topological sorting of the following graph is \u201c4 5 2 3 1 0\u2033.  The first vertex in topological sorting is always a vertex with in-degree as 0 (a vertex with no in-coming edges).
p74
tp75
Rp76
(dp77
g34
Nsg27
g42
sg28
Nsg37
g72
sg31
g42
sbsg28
g0
(g22
g2
Ntp78
Rp79
(dp80
g26
I00
sg27
g0
(g22
g2
Ntp81
Rp82
(dp83
g26
I01
sg27
g0
(g22
g2
Ntp84
Rp85
(dp86
g26
I00
sg27
g72
sg28
Nsg29
Va
p87
sg31
g72
sg32
Nsg33
Nsg34
Nsg35
(dp88
Vhref
p89
Vhttp://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/graph.png
p90
ssg37
g82
sg66
g67
sg68
I00
sg69
(lp91
g82
asbsg28
Nsg29
Vimg
p92
sg31
g85
sg32
Nsg33
Nsg34
Nsg35
(dp93
Vsrc
p94
Vhttp://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/graph.png
p95
sValt
p96
Vgraph
p97
sVheight
p98
V232
p99
sVclass
p100
(lp101
Valignleft
p102
aVsize-full
p103
aVwp-image-117681
p104
asVwidth
p105
V282
p106
ssg37
g79
sg66
g67
sg68
I00
sg69
(lp107
sbsg28
Nsg29
Vp
p108
sg31
g24
sg32
Nsg33
Nsg34
g72
sg35
(dp109
sg37
g0
(g22
g2
Ntp110
Rp111
(dp112
g26
I00
sg27
g79
sg28
g0
(g50
g45
V:
p113
tp114
Rp115
(dp116
g34
g111
sg27
g0
(g50
g45
VTopological Sorting vs Depth First Traversal (DFS)
p117
tp118
Rp119
(dp120
g34
Nsg27
g0
(g22
g2
Ntp121
Rp122
(dp123
g26
I00
sg27
g111
sg28
Nsg29
Vem
p124
sg31
g111
sg32
Nsg33
Nsg34
Nsg35
(dp125
sg37
g119
sg66
g67
sg68
I00
sg69
(lp126
g119
asbsg28
Nsg37
g115
sg31
g122
sbsg28
g0
(g22
g2
Ntp127
Rp128
(dp129
g26
I01
sg27
g115
sg28
g0
(g50
g45
V\u000aIn 
p130
tp131
Rp132
(dp133
g34
g128
sg27
g128
sg28
g0
(g22
g2
Ntp134
Rp135
(dp136
g26
I00
sg27
g132
sg28
g0
(g50
g45
V, we print a vertex and then recursively call DFS for its adjacent vertices. In topological sorting, we need to print a vertex before its adjacent vertices.  For example, in the given graph, the vertex \u20185\u2019 should be printed before vertex \u20180\u2019, but unlike 
p137
tp138
Rp139
(dp140
g34
g135
sg27
g0
(g50
g45
VDFS
p141
tp142
Rp143
(dp144
g34
Nsg27
g135
sg28
Nsg37
g139
sg31
g135
sbsg28
g0
(g22
g2
Ntp145
Rp146
(dp147
g26
I00
sg27
g139
sg28
g0
(g50
g45
V, the vertex \u20184\u2019 should also be printed before vertex \u20180\u2019.  So Topological sorting is different from DFS.  For example,  a DFS of the above graph is \u201c5 2 3 1 0 4\u2033, but it is not a topological sorting
p148
tp149
Rp150
(dp151
g34
g146
sg27
g0
(g50
g45
VDFS
p152
tp153
Rp154
(dp155
g34
Nsg27
g146
sg28
Nsg37
g150
sg31
g146
sbsg28
Nsg37
Nsg31
g79
sbsg29
g87
sg31
g79
sg32
Nsg33
Nsg34
g139
sg35
(dp156
Vhref
p157
Vhttp://www.geeksforgeeks.org/depth-first-traversal-for-a-graph/
p158
sVtarget
p159
V_blank
p160
ssg37
g154
sg66
g67
sg68
I00
sg69
(lp161
g154
asbsg37
g146
sg31
g79
sbsg29
g87
sg31
g79
sg32
Nsg33
Nsg34
g132
sg35
(dp162
Vhref
p163
Vhttp://www.geeksforgeeks.org/depth-first-traversal-for-a-graph/
p164
sVtarget
p165
V_blank
p166
ssg37
g143
sg66
g67
sg68
I00
sg69
(lp167
g143
asbsg37
g135
sg31
g79
sbsg29
Vbr
p168
sg31
g79
sg32
Nsg33
Nsg34
g115
sg35
(dp169
sg37
g132
sg66
g67
sg68
I00
sg69
(lp170
sbsg37
g128
sg31
g79
sbsg29
Vstrong
p171
sg31
g79
sg32
Nsg33
Nsg34
Nsg35
(dp172
sg37
g122
sg66
g67
sg68
I00
sg69
(lp173
g122
asbsg66
g67
sg68
I00
sg69
(lp174
g111
ag115
ag128
ag132
ag135
ag139
ag146
ag150
asbsg29
g108
sg31
g24
sg32
Nsg33
Nsg34
g42
sg35
(dp175
sg37
g85
sg66
g67
sg68
I00
sg69
(lp176
g85
asbsg29
g108
sg31
g24
sg32
Nsg33
Nsg34
g39
sg35
(dp177
sg37
g76
sg66
g67
sg68
I00
sg69
(lp178
g76
asbsg29
g108
sg31
g24
sg32
Nsg33
Nsg34
Nsg35
(dp179
sg37
g60
sg66
g67
sg68
I00
sg69
(lp180
g60
ag56
ag53
ag48
asbsg66
Nsg68
I00
sg69
(lp181
g39
ag42
ag72
ag79
asbsS'raw_page'
p182
S'<!DOCTYPE html>\r\n<!--[if IE 7]>\r\n<html class="ie ie7" lang="en-US" prefix="og: http://ogp.me/ns#">\r\n<![endif]-->\r\n<!--[if IE 8]>\r\n<html class="ie ie8" lang="en-US" prefix="og: http://ogp.me/ns#">\r\n<![endif]-->\r\n<!--[if !(IE 7) | !(IE 8)  ]><!-->\r\n<html lang="en-US" prefix="og: http://ogp.me/ns#">\r\n<!--<![endif]-->\r\n<head>\r\n<meta charset="UTF-8" />\r\n<meta name="viewport" content="width=device-width" />\r\n\r\n<meta property="og:image" content="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/gfg_200X200.png">\r\n<meta property="og:image:type" content="image/png">\r\n<meta property="og:image:width" content="200">\r\n<meta property="og:image:height" content="200">\r\n\r\n<title>Topological Sorting - GeeksforGeeks</title>\r\n<link rel="profile" href="http://gmpg.org/xfn/11" />\r\n<link rel="pingback" href="http://www.geeksforgeeks.org/xmlrpc.php" />\r\n<!--[if lt IE 9]>\r\n<script src="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/js/html5.js" type="text/javascript"></script>\r\n<![endif]-->\r\n\n<!-- This site is optimized with the Yoast SEO plugin v3.0.7 - https://yoast.com/wordpress/plugins/seo/ -->\n<link rel="canonical" href="http://www.geeksforgeeks.org/topological-sorting/" />\n<meta property="og:locale" content="en_US" />\n<meta property="og:type" content="article" />\n<meta property="og:title" content="Topological Sorting - GeeksforGeeks" />\n<meta property="og:description" content="Topological sorting for Directed Acyclic Graph (DAG) is a linear ordering of vertices such that for every directed edge uv, vertex u comes before v in the ordering. Topological Sorting for a graph is not possible if the graph is not a DAG. For example, a topological sorting of the following graph is &#8220;5 4\xe2\x80\xa6 Read More &raquo;" />\n<meta property="og:url" content="http://www.geeksforgeeks.org/topological-sorting/" />\n<meta property="og:site_name" content="GeeksforGeeks" />\n<meta property="article:tag" content="Graph" />\n<meta property="article:section" content="Graph" />\n<meta property="article:published_time" content="2013-05-12T09:36:52+00:00" />\n<meta property="article:modified_time" content="2015-11-08T13:23:31+00:00" />\n<meta property="og:updated_time" content="2015-11-08T13:23:31+00:00" />\n<meta property="og:image" content="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/graph.png" />\n<!-- / Yoast SEO plugin. -->\n\n\t\t<script type="text/javascript">\n\t\t\twindow._wpemojiSettings = {"baseUrl":"http:\\/\\/s.w.org\\/images\\/core\\/emoji\\/72x72\\/","ext":".png","source":{"concatemoji":"http:\\/\\/www.geeksforgeeks.org\\/wp-includes\\/js\\/wp-emoji-release.min.js"}};\n\t\t\t!function(a,b,c){function d(a){var c=b.createElement("canvas"),d=c.getContext&&c.getContext("2d");return d&&d.fillText?(d.textBaseline="top",d.font="600 32px Arial","flag"===a?(d.fillText(String.fromCharCode(55356,56812,55356,56807),0,0),c.toDataURL().length>3e3):(d.fillText(String.fromCharCode(55357,56835),0,0),0!==d.getImageData(16,16,1,1).data[0])):!1}function e(a){var c=b.createElement("script");c.src=a,c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f,g;c.supports={simple:d("simple"),flag:d("flag")},c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.simple&&c.supports.flag||(g=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",g,!1),a.addEventListener("load",g,!1)):(a.attachEvent("onload",g),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&&f.twemoji&&(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);\n\t\t</script>\n\t\t<style type="text/css">\nimg.wp-smiley,\nimg.emoji {\n\tdisplay: inline !important;\n\tborder: none !important;\n\tbox-shadow: none !important;\n\theight: 1em !important;\n\twidth: 1em !important;\n\tmargin: 0 .07em !important;\n\tvertical-align: -0.1em !important;\n\tbackground: none !important;\n\tpadding: 0 !important;\n}\n</style>\n<link rel=\'stylesheet\' id=\'wp-pagenavi-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/wp-pagenavi/pagenavi-css.css\' type=\'text/css\' media=\'all\' />\n<link rel=\'stylesheet\' id=\'themonic-fonts-css\'  href=\'http://fonts.googleapis.com/css?family=Ubuntu:400,700&#038;subset=latin,latin-ext\' type=\'text/css\' media=\'all\' />\n<link rel=\'stylesheet\' id=\'themonic-style-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/style.css\' type=\'text/css\' media=\'all\' />\n<link rel=\'stylesheet\' id=\'custom-style-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/custom.css\' type=\'text/css\' media=\'all\' />\n<!--[if lt IE 9]>\n<link rel=\'stylesheet\' id=\'themonic-ie-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/css/ie.css\' type=\'text/css\' media=\'all\' />\n<![endif]-->\n<meta name="generator" content="WordPress 4.2.7" />\n<style type="text/css" id="custom-background-css">\nbody.custom-background { background-color: #ffffff; }\n</style>\n<style type="text/css" id="syntaxhighlighteranchor"></style>\n<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<script>\r\n  (adsbygoogle = window.adsbygoogle || []).push({\r\n    google_ad_client: "ca-pub-9465609616171866",\r\n    enable_page_level_ads: true\r\n  });\r\n</script>\r\n</head>\r\n<body class="single single-post postid-117677 single-format-standard custom-background custom-background-white custom-font-enabled">\r\n<div id="page" class="hfeed site">\r\n\t<header id="masthead" class="site-header" role="banner">\r\n\t\t\t\t\t<hgroup>\r\n\t\t\t<a href="http://www.geeksforgeeks.org/" title="GeeksforGeeks" rel="home">GeeksforGeeks</a>\r\n\t\t\t\t<br .../> <a class="site-description">A computer science portal for geeks</a>\r\n\t\t</hgroup>\r\n\r\n<div style="float:right;">\r\n<hgroup style="float:right;">   \r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://www.geeksforgeeks.org/campus-ambassador-program-by-geeksforgeeks/">CA</a>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://geeksquiz.com/gate-corner-2/">GATE CS</a>\r\n\r\n<strong><a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://practice.geeksforgeeks.org/">Practice</a></strong>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://www.geeksforgeeks.org/suggest/">Suggest</a>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://code.geeksforgeeks.org/">IDE</a>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://qa.geeksforgeeks.org/">Q&A</a>\r\n\r\n<a style="padding:0px 30px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://geeksquiz.com/">GeeksQuiz</a>\r\n\r\n</hgroup><br></br>\r\n\r\n<span style="display:inline-block; width:300px;float:right;">\r\n<script>\r\n  (function() {\r\n    var cx = \'009682134359037907028:tj6eafkv_be\';\r\n    var gcse = document.createElement(\'script\');\r\n    gcse.type = \'text/javascript\';\r\n    gcse.async = true;\r\n    gcse.src = (document.location.protocol == \'https:\' ? \'https:\' : \'http:\') +\r\n        \'//cse.google.com/cse.js?cx=\' + cx;\r\n    var s = document.getElementsByTagName(\'script\')[0];\r\n    s.parentNode.insertBefore(gcse, s);\r\n  })();\r\n</script>\r\n<gcse:search></gcse:search>\r\n\r\n<style type="text/css">\r\n  .gsc-control-cse {\r\n     padding: 0px 10px;\r\n  } \r\n\r\n  .gsc-control-cse {\r\n    font-family: "Trebuchet MS", sans-serif;\r\n    /*border-color: #E1F3DA;*/\r\n    /*background-color: #E1F3DA;*/\r\n  }\r\n  input.gsc-input {\r\n    border-color: #94CC7A;\r\n  }\r\n  input.gsc-search-button {\r\n    border-color: #94CC7A;\r\n    background-color: #4CB96B;\r\n    margin-top:7px;\r\n  }\r\n  .gsc-tabHeader.gsc-tabhInactive {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gsc-tabHeader.gsc-tabhActive {\r\n    border-color: #A9DA92;\r\n    background-color: #A9DA92;\r\n  }\r\n  .gsc-tabsArea {\r\n    border-color: #A9DA92;\r\n  }\r\n  .gsc-webResult.gsc-result {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gsc-webResult.gsc-result:hover {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:link,\r\n  .gs-webResult.gs-result a.gs-title:link b {\r\n    color: #009900;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:visited,\r\n  .gs-webResult.gs-result a.gs-title:visited b {\r\n    color: #009900;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:hover,\r\n  .gs-webResult.gs-result a.gs-title:hover b {\r\n    color: #003300;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:active,\r\n  .gs-webResult.gs-result a.gs-title:active b {\r\n    color: #009900;\r\n  }\r\n  .gsc-cursor-page {\r\n    color: #009900;\r\n  }\r\n  a.gsc-trailing-more-results:link {\r\n    color: #009900;\r\n  }\r\n  .gs-webResult.gs-result .gs-snippet {\r\n    color: #454545;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl {\r\n    color: #33cc00;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl-short {\r\n    color: #33cc00;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl-short {\r\n    display: none;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl-long {\r\n    display: block;\r\n  }\r\n  .gsc-cursor-box {\r\n    border-color: #A9DA92;\r\n  }\r\n  .gsc-results .gsc-cursor-page {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {\r\n    border-color: #A9DA92;\r\n    background-color: #A9DA92;\r\n  }\r\n  .gs-promotion.gs-result {\r\n    border-color: #94CC7A;\r\n    background-color: #CBE8B4;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:link {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:visited {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:hover {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:active {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result .gs-snippet {\r\n    color: #454545;\r\n  }\r\n  .gs-promotion.gs-result .gs-visibleUrl,\r\n  .gs-promotion.gs-result .gs-visibleUrl-short {\r\n    color: #815FA7;\r\n  }\r\n  .gsib_a {\r\n    padding : 2px;\r\n  }\r\n</style>    \r\n</span>\r\n</div>\r\n\r\n\t\t\r\n\t\t\r\n\t\t<nav id="site-navigation" class="themonic-nav" role="navigation">\r\n\t\t\t<a class="assistive-text" href="#content" title="Skip to content">Skip to content</a>\r\n\t\t\t<div class="menu-iconic-container"><ul id="menu-top" class="nav-menu"><li id="menu-item-135003" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-135003"><a href="http://www.geeksforgeeks.org/">Home</a></li>\n<li id="menu-item-135004" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-135004"><a title="Algorithms" href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algo</a>\n<ul class="sub-menu">\n\t<li id="menu-item-135030" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135030"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#AnalysisofAlgorithms">Analysis of Algorithms</a></li>\n\t<li id="menu-item-135031" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135031"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#SearchingandSorting">Searching and Sorting</a></li>\n\t<li id="menu-item-135032" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135032"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#GreedyAlgorithms">Greedy Algorithms</a></li>\n\t<li id="menu-item-135033" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135033"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#DynamicProgramming">Dynamic Programming</a></li>\n\t<li id="menu-item-135034" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135034"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#PatternSearching">Pattern Searching</a></li>\n\t<li id="menu-item-135035" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135035"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#OtherStringAlgorithms">Other String Algorithms</a></li>\n\t<li id="menu-item-135036" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135036"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#Backtracking">Backtracking</a></li>\n\t<li id="menu-item-135037" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135037"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#DivideandConquer">Divide and Conquer</a></li>\n\t<li id="menu-item-135038" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135038"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#GeometricAlgorithms">Geometric Algorithms</a></li>\n\t<li id="menu-item-135039" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135039"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#MathematicalAlgorithms">Mathematical Algorithms</a></li>\n\t<li id="menu-item-135040" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135040"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#BitAlgorithms">Bit Algorithms</a></li>\n\t<li id="menu-item-135041" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135041"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#GraphAlgorithms">Graph Algorithms</a></li>\n\t<li id="menu-item-135042" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135042"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#RandomizedAlgorithms">Randomized Algorithms</a></li>\n</ul>\n</li>\n<li id="menu-item-135010" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-135010"><a title="Data Structures" href="http://www.geeksforgeeks.org/data-structures/">DS</a>\n<ul class="sub-menu">\n\t<li id="menu-item-135045" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135045"><a href="http://www.geeksforgeeks.org/data-structures/#LinkedList">LinkedList</a></li>\n\t<li id="menu-item-135046" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135046"><a href="http://www.geeksforgeeks.org/data-structures/#Stack">Stack</a></li>\n\t<li id="menu-item-135047" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135047"><a href="http://www.geeksforgeeks.org/data-structures/#Queue">Queue</a></li>\n\t<li id="menu-item-135048" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135048"><a href="http://www.geeksforgeeks.org/data-structures/#BinaryTree">Binary Tree</a></li>\n\t<li id="menu-item-135049" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135049"><a href="http://www.geeksforgeeks.org/data-structures/#BinarySearchTree">Binary Search Tree</a></li>\n\t<li id="menu-item-135050" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135050"><a href="http://www.geeksforgeeks.org/data-structures/#Heap">Heap</a></li>\n\t<li id="menu-item-135051" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135051"><a href="http://www.geeksforgeeks.org/data-structures/#Hashing">Hashing</a></li>\n\t<li id="menu-item-135052" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135052"><a href="http://www.geeksforgeeks.org/data-structures/#Graph">Graph</a></li>\n\t<li id="menu-item-135053" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135053"><a href="http://www.geeksforgeeks.org/data-structures/#AdvancedDataStructure">Advanced Data Structure</a></li>\n\t<li id="menu-item-135054" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135054"><a href="http://www.geeksforgeeks.org/data-structures/#Array">Array</a></li>\n\t<li id="menu-item-135055" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135055"><a href="http://www.geeksforgeeks.org/data-structures/#Matrix">Matrix</a></li>\n\t<li id="menu-item-135056" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135056"><a href="http://www.geeksforgeeks.org/data-structures/#Misc">Misc</a></li>\n</ul>\n</li>\n<li id="menu-item-135014" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135014"><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview</a></li>\n<li id="menu-item-135006" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135006"><a href="http://www.geeksforgeeks.org/c/">C</a></li>\n<li id="menu-item-135007" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135007"><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>\n<li id="menu-item-135012" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135012"><a href="http://www.geeksforgeeks.org/java/">Java</a></li>\n<li id="menu-item-137004" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-137004"><a href="http://www.geeksforgeeks.org/python/">Python</a></li>\n<li id="menu-item-135009" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135009"><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>\n<li id="menu-item-135016" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135016"><a href="http://qa.geeksforgeeks.org/index.php?qa=ask">Ask a Q</a></li>\n<li id="menu-item-135077" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135077"><a href="https://play.google.com/store/apps/details?id=free.programming.programming">AndroidApp</a></li>\n<li id="menu-item-135367" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135367"><a href="http://www.geeksforgeeks.org/category/guestblogs/">GBlog</a></li>\n<li id="menu-item-135028" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135028"><a href="http://www.geeksforgeeks.org/category/gfact/">GFact</a></li>\n<li id="menu-item-136004" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-136004"><a href="http://www.geeksforgeeks.org/category/project/">Project</a></li>\n<li id="menu-item-136978" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-136978"><a href="http://www.geeksforgeeks.org/jobs/">Jobs</a></li>\n<li id="menu-item-135019" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135019"><a href="http://www.geeksforgeeks.org/category/c-arrays/">Arr</a></li>\n<li id="menu-item-135022" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135022"><a href="http://www.geeksforgeeks.org/category/c-strings/">String</a></li>\n<li id="menu-item-135937" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135937"><a href="http://www.geeksforgeeks.org/category/matrix/">Matrix</a></li>\n<li id="menu-item-135023" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135023"><a href="http://www.geeksforgeeks.org/category/linked-list/">Linked List</a></li>\n<li id="menu-item-135029" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135029"><a href="http://www.geeksforgeeks.org/category/stack/">Stack</a></li>\n<li id="menu-item-135932" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135932"><a href="http://www.geeksforgeeks.org/category/queue/">Q</a></li>\n<li id="menu-item-136299" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-136299"><a href="http://www.geeksforgeeks.org/category/hash/">Hash</a></li>\n<li id="menu-item-135941" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135941"><a href="http://www.geeksforgeeks.org/category/heap/">Heap</a></li>\n<li id="menu-item-135020" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135020"><a href="http://www.geeksforgeeks.org/category/tree/">Tree</a></li>\n<li id="menu-item-135940" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135940"><a href="http://www.geeksforgeeks.org/category/binary-search-tree/">BST</a></li>\n<li id="menu-item-135024" class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-parent current-post-parent menu-item-135024"><a href="http://www.geeksforgeeks.org/category/graph/">Graph</a></li>\n<li id="menu-item-135017" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135017"><a href="http://www.geeksforgeeks.org/category/c-puzzles/">C/C++</a></li>\n<li id="menu-item-135027" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135027"><a href="http://www.geeksforgeeks.org/category/bit-magic/">Bit</a></li>\n<li id="menu-item-135021" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135021"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/">MCQ</a></li>\n<li id="menu-item-135018" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135018"><a href="http://www.geeksforgeeks.org/category/c-programs/">Misc</a></li>\n<li id="menu-item-135025" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135025"><a href="http://www.geeksforgeeks.org/category/program-output/">O/P</a></li>\n</ul></div>\t\t</nav><!-- #site-navigation -->\r\n\t\t<div class="clear"></div>\r\n\t</header><!-- #masthead -->\r\n\r\n\t<div id="main" class="wrapper">\t<div id="primary" class="site-content">\r\n\t\t<div id="content" role="main">\r\n\r\n\t\t\t\t\t\t\t\r\n\t<article id="post-117677" class="post-117677 post type-post status-publish format-standard hentry category-graph tag-graph">\r\n\t\t\t\t<header class="entry-header">\r\n\t\t\t\t\t\t<h1 class="entry-title">Topological Sorting</h1>\r\n\t\t\t\t\r\n\t\t\t</header><!-- .entry-header -->\r\n\r\n\t\t\t\t<div class="entry-content">\r\n\t\t\t<p>Topological sorting for Directed Acyclic Graph (DAG) is a linear ordering of vertices such that for every directed edge uv,  vertex u comes before v in the ordering. <span id="more-117677"></span>  Topological Sorting for a graph is not possible if the graph is not a DAG.<!--more--></p>\n<p>For example, a topological sorting of the following graph is &#8220;5 4 2 3 1 0&#8243;.  There can be more than one topological sorting for a graph.  For example, another topological sorting of the following graph is &#8220;4 5 2 3 1 0&#8243;.  The first vertex in topological sorting is always a vertex with in-degree as 0 (a vertex with no in-coming edges).</p>\n<p><a href="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/graph.png"><img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/graph.png" alt="graph" width="282" height="232" class="alignleft size-full wp-image-117681" /></a></p>\n<p><strong><em>Topological Sorting vs Depth First Traversal (DFS)</em></strong>:<br />\nIn <a href="http://www.geeksforgeeks.org/depth-first-traversal-for-a-graph/" target="_blank">DFS</a>, we print a vertex and then recursively call DFS for its adjacent vertices. In topological sorting, we need to print a vertex before its adjacent vertices.  For example, in the given graph, the vertex &#8216;5&#8217; should be printed before vertex &#8216;0&#8217;, but unlike <a href="http://www.geeksforgeeks.org/depth-first-traversal-for-a-graph/" target="_blank">DFS</a>, the vertex &#8216;4&#8217; should also be printed before vertex &#8216;0&#8217;.  So Topological sorting is different from DFS.  For example,  a DFS of the above graph is &#8220;5 2 3 1 0 4&#8243;, but it is not a topological sorting</p>\n<p><strong><em>Algorithm to find Topological Sorting:</em></strong><br />\nWe recommend to first see implementation of DFS <a href="http://www.geeksforgeeks.org/depth-first-traversal-for-a-graph/" target="_blank">here</a>.  We can modify <a href="http://www.geeksforgeeks.org/depth-first-traversal-for-a-graph/" target="_blank">DFS </a>to find Topological Sorting of a graph.  In <a href="http://www.geeksforgeeks.org/depth-first-traversal-for-a-graph/" target="_blank">DFS</a>, we start from a vertex, we first print it and then recursively call DFS for its adjacent vertices.  In topological sorting, we use a temporary stack.  We don&#8217;t print the vertex immediately, we first recursively call topological sorting for all its adjacent vertices, then push it to a stack. Finally, print contents of stack. Note that a vertex is pushed to stack only when all of its adjacent vertices (and their adjacent vertices and so on) are already in stack. </p>\n<p>Following are C++ and Java implementations of topological sorting.  Please see the code for Depth <a href="http://www.geeksforgeeks.org/depth-first-traversal-for-a-graph/" target="_blank">First Traversal for a disconnected Graph</a> and note the differences between the second code given there and the below code.</p>\n<div class="responsive-tabs">\n<h2 class="tabtitle">C++</h2>\n<div class="tabcontent">\n\n<pre class="brush: cpp; highlight: [38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78]; title: ; notranslate" title="">\r\n// A C++ program to print topological sorting of a DAG\r\n#include&lt;iostream&gt;\r\n#include &lt;list&gt;\r\n#include &lt;stack&gt;\r\nusing namespace std;\r\n\r\n// Class to represent a graph\r\nclass Graph\r\n{\r\n    int V;    // No. of vertices\'\r\n\r\n    // Pointer to an array containing adjacency listsList\r\n    list&lt;int&gt; *adj;\r\n\r\n    // A function used by topologicalSort\r\n    void topologicalSortUtil(int v, bool visited[], stack&lt;int&gt; &amp;Stack);\r\npublic:\r\n    Graph(int V);   // Constructor\r\n\r\n     // function to add an edge to graph\r\n    void addEdge(int v, int w);\r\n\r\n    // prints a Topological Sort of the complete graph\r\n    void topologicalSort();\r\n};\r\n\r\nGraph::Graph(int V)\r\n{\r\n    this-&gt;V = V;\r\n    adj = new list&lt;int&gt;[V];\r\n}\r\n\r\nvoid Graph::addEdge(int v, int w)\r\n{\r\n    adj[v].push_back(w); // Add w to v\xe2\x80\x99s list.\r\n}\r\n\r\n// A recursive function used by topologicalSort\r\nvoid Graph::topologicalSortUtil(int v, bool visited[], \r\n                                stack&lt;int&gt; &amp;Stack)\r\n{\r\n    // Mark the current node as visited.\r\n    visited[v] = true;\r\n\r\n    // Recur for all the vertices adjacent to this vertex\r\n    list&lt;int&gt;::iterator i;\r\n    for (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n        if (!visited[*i])\r\n            topologicalSortUtil(*i, visited, Stack);\r\n\r\n    // Push current vertex to stack which stores result\r\n    Stack.push(v);\r\n}\r\n\r\n// The function to do Topological Sort. It uses recursive \r\n// topologicalSortUtil()\r\nvoid Graph::topologicalSort()\r\n{\r\n    stack&lt;int&gt; Stack;\r\n\r\n    // Mark all the vertices as not visited\r\n    bool *visited = new bool[V];\r\n    for (int i = 0; i &lt; V; i++)\r\n        visited[i] = false;\r\n\r\n    // Call the recursive helper function to store Topological\r\n    // Sort starting from all vertices one by one\r\n    for (int i = 0; i &lt; V; i++)\r\n      if (visited[i] == false)\r\n        topologicalSortUtil(i, visited, Stack);\r\n\r\n    // Print contents of stack\r\n    while (Stack.empty() == false)\r\n    {\r\n        cout &lt;&lt; Stack.top() &lt;&lt; &quot; &quot;;\r\n        Stack.pop();\r\n    }\r\n}\r\n\r\n// Driver program to test above functions\r\nint main()\r\n{\r\n    // Create a graph given in the above diagram\r\n    Graph g(6);\r\n    g.addEdge(5, 2);\r\n    g.addEdge(5, 0);\r\n    g.addEdge(4, 0);\r\n    g.addEdge(4, 1);\r\n    g.addEdge(2, 3);\r\n    g.addEdge(3, 1);\r\n\r\n    cout &lt;&lt; &quot;Following is a Topological Sort of the given graph \\n&quot;;\r\n    g.topologicalSort();\r\n\r\n    return 0;\r\n}\r\n</pre>\n\n</div><h2 class="tabtitle">Java</h2>\n<div class="tabcontent">\n\n<pre class="brush: java; highlight: [24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64]; title: ; notranslate" title="">\r\n// A Java program to print topological sorting of a DAG\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\n// This class represents a directed graph using adjacency\r\n// list representation\r\nclass Graph\r\n{\r\n    private int V;   // No. of vertices\r\n    private LinkedList&lt;Integer&gt; adj[]; // Adjacency List\r\n\r\n    //Constructor\r\n    Graph(int v)\r\n    {\r\n        V = v;\r\n        adj = new LinkedList[v];\r\n        for (int i=0; i&lt;v; ++i)\r\n            adj[i] = new LinkedList();\r\n    }\r\n\r\n    // Function to add an edge into the graph\r\n    void addEdge(int v,int w) { adj[v].add(w); }\r\n\r\n    // A recursive function used by topologicalSort\r\n    void topologicalSortUtil(int v, Boolean visited[],Stack stack)\r\n    {\r\n        // Mark the current node as visited.\r\n        visited[v] = true;\r\n        Integer i;\r\n\r\n        // Recur for all the vertices adjacent to this vertex\r\n        Iterator&lt;Integer&gt; it = adj[v].iterator();\r\n        while (it.hasNext())\r\n        {\r\n            i = it.next();\r\n            if (!visited[i])\r\n                topologicalSortUtil(i, visited, stack);\r\n        }\r\n\r\n        // Push current vertex to stack which stores result\r\n        stack.push(new Integer(v));\r\n    }\r\n\r\n    // The function to do Topological Sort. It uses recursive\r\n    // topologicalSortUtil()\r\n    void topologicalSort()\r\n    {\r\n        Stack stack = new Stack();\r\n\r\n        // Mark all the vertices as not visited\r\n        Boolean visited[] = new Boolean[V];\r\n        for (int i = 0; i &lt; V; i++)\r\n            visited[i] = false;\r\n\r\n        // Call the recursive helper function to store Topological\r\n        // Sort starting from all vertices one by one\r\n        for (int i = 0; i &lt; V; i++)\r\n            if (visited[i] == false)\r\n                topologicalSortUtil(i, visited, stack);\r\n\r\n        // Print contents of stack\r\n        while (stack.empty()==false)\r\n            System.out.print(stack.pop() + &quot; &quot;);\r\n    }\r\n\r\n    // Driver method\r\n    public static void main(String args[])\r\n    {\r\n        // Create a graph given in the above diagram\r\n        Graph g = new Graph(6);\r\n        g.addEdge(5, 2);\r\n        g.addEdge(5, 0);\r\n        g.addEdge(4, 0);\r\n        g.addEdge(4, 1);\r\n        g.addEdge(2, 3);\r\n        g.addEdge(3, 1);\r\n\r\n        System.out.println(&quot;Following is a Topological &quot; +\r\n                           &quot;sort of the given graph&quot;);\r\n        g.topologicalSort();\r\n    }\r\n}\r\n// This code is contributed by Aakash Hasija\r\n</pre>\n<p></div></div><br />\nOutput:\n<pre>Following is a Topological Sort of the given graph\r\n5 4 2 3 1 0</pre>\n<p><strong>Time Complexity: </strong>  The above algorithm is simply DFS with an extra stack.  So time complexity is same as DFS which is O(V+E).</p>\n<p><strong>Applications:</strong><br />\nTopological Sorting is mainly used for scheduling jobs from the given dependencies among jobs.  In computer science, applications of this type arise in instruction scheduling, ordering of formula cell evaluation when recomputing formula values in spreadsheets, logic synthesis, determining the order of compilation tasks to perform in makefiles, data serialization, and resolving symbol dependencies in linkers [<a href="http://en.wikipedia.org/wiki/Topological_sorting">2</a>].</p>\n<p><strong>References:</strong><br />\n<a href="http://www.personal.kent.edu/~rmuhamma/Algorithms/MyAlgorithms/GraphAlgor/topoSort.htm">http://www.personal.kent.edu/~rmuhamma/Algorithms/MyAlgorithms/GraphAlgor/topoSort.htm</a><br />\n<a href="http://en.wikipedia.org/wiki/Topological_sorting">http://en.wikipedia.org/wiki/Topological_sorting</a></p>\n<p>Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above</p>\n\r\n\t\t\t<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<!-- Big Rectangle Blog Bottom -->\r\n<ins class="adsbygoogle"\r\n     style="display:inline-block;width:336px;height:280px"\r\n     data-ad-client="ca-pub-9465609616171866"\r\n     data-ad-slot="4061219431"></ins>\r\n<script>\r\n(adsbygoogle = window.adsbygoogle || []).push({});\r\n</script>\r\n<br></br>\r\n\t\t</div><!-- .entry-content -->\r\n\t\t\t\t\r\n\t\t\r\n\r\n\t\t<footer class="entry-meta">\r\n\t\t<span class="post-comment"><a href="http://www.geeksforgeeks.org/topological-sorting/#comments" class="commentslink" ><span class="dsq-postid" data-dsqidentifier="117677 http://www.geeksforgeeks.org/?p=117677">15 Comments</span></a> <!--added for comments by Shubham-->\r\n\t\t</span><span>Category: <a href="http://www.geeksforgeeks.org/category/graph/" rel="category tag">Graph</a></span> <span>Tags: <a href="http://www.geeksforgeeks.org/tag/graph/" rel="tag">Graph</a></span> \r\n           \t          \t\r\n\t\t\t\t\t</footer><!-- .entry-meta -->\r\n\t</article><!-- #post -->\r\n<div class="related_posts"><h3>Related Posts:</h3><ul><li><a href="http://www.geeksforgeeks.org/number-of-triangles-in-directed-and-undirected-graphs/" title="Number of Triangles in Directed and Undirected Graphs">Number of Triangles in Directed and Undirected Graphs</a></li><li><a href="http://www.geeksforgeeks.org/number-of-triangles-in-a-undirected-graph/" title="Number of Triangles in an Undirected Graph">Number of Triangles in an Undirected Graph</a></li><li><a href="http://www.geeksforgeeks.org/iterative-depth-first-traversal/" title="Iterative Depth First Traversal of Graph">Iterative Depth First Traversal of Graph</a></li><li><a href="http://www.geeksforgeeks.org/print-all-jumping-numbers-smaller-than-or-equal-to-a-given-value/" title="Print all Jumping Numbers smaller than or equal to a given value">Print all Jumping Numbers smaller than or equal to a given value</a></li><li><a href="http://www.geeksforgeeks.org/hopcroft-karp-algorithm-for-maximum-matching-set-2-implementation/" title="Hopcroft\xe2\x80\x93Karp Algorithm for Maximum Matching | Set 2 (Implementation)">Hopcroft\xe2\x80\x93Karp Algorithm for Maximum Matching | Set 2 (Implementation)</a></li><li><a href="http://www.geeksforgeeks.org/hopcroft-karp-algorithm-for-maximum-matching-set-1-introduction/" title="Hopcroft\xe2\x80\x93Karp Algorithm for Maximum Matching | Set 1 (Introduction)">Hopcroft\xe2\x80\x93Karp Algorithm for Maximum Matching | Set 1 (Introduction)</a></li><li><a href="http://www.geeksforgeeks.org/length-of-shortest-chain-to-reach-a-target-word/" title="Length of shortest chain to reach a target word">Length of shortest chain to reach a target word</a></li><li><a href="http://www.geeksforgeeks.org/find-same-contacts-in-a-list-of-contacts/" title="Find same contacts in a list of contacts">Find same contacts in a list of contacts</a></li></ul></div><br></br>\r\n\r\n<!-- Added on 29 Oct 2015 for next and previous from same category -->\r\n<nav class="nav-single">\r\n\t\t\t\t\t<div class="assistive-text">Post navigation</div>\r\n\t\t\t\t\t<span class="nav-previous"><a href="http://www.geeksforgeeks.org/bipartite-graph/" rel="prev">Previous post in category</a></span>\r\n\t\t\t\t\t<span class="nav-next"><a href="http://www.geeksforgeeks.org/shortest-path-for-directed-acyclic-graphs/" rel="next">Next post in category</a></span>\r\n\t\t\t\t</nav><!-- .nav-single -->\r\n\r\n\r\n<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>\r\n    <script type="text/javascript">\r\n    $(document).ready(function(){\r\n        $.ajax({\r\n            url:"http://courses.geeksforgeeks.org/plugin.php",\r\n            method:"POST",\r\n            dataType:"json",\r\n            data:{post_id:$("#ratePlugin").attr("pid"),url:window.location.href},\r\n            xhrFields:{withCredentials:true},\r\n            success:function(response){\r\n                $("#ratePlugin").html(response.rate);\r\n                $("#markPlugin").html(response.mark);\r\n            },\r\n            complete:function(){\r\n                $(".box").click(function(){\r\n                    rrequest({post_id:$("#ratePlugin").attr("pid"),post_title:$("#ratePlugin").attr("ptitle"),rating:$(this).attr("rating"),url:window.location.href});\r\n                });\r\n                $(".mark").click(function(){\r\n                    mrequest({post_id:$("#markPlugin").attr("pid"),post_title:$("#markPlugin").attr("ptitle"),op:$(this).attr("id"),url:window.location.href});\r\n                });\r\n            }\r\n        });\r\n        function rrequest(payload){\r\n            $.ajax({\r\n                url:"http://courses.geeksforgeeks.org/gfgRatings.php",\r\n                method:"POST",\r\n                dataType:"html",\r\n                data:payload,\r\n                xhrFields:{withCredentials:true},\r\n                success:function(response){\r\n                    $("#ratePlugin").html(response);\r\n                },\r\n                complete:function(){\r\n                    $(".box").click(function(){\r\n                        rrequest({post_id:$("#ratePlugin").attr("pid"),post_title:$("#ratePlugin").attr("ptitle"),rating:$(this).attr("rating"),url:window.location.href});\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        //rrequest({post_id:$("#ratePlugin").attr("pid"),url:window.location.href});\r\n        function mrequest(payload){\r\n            $.ajax({\r\n                url:"http://courses.geeksforgeeks.org/gfgMarking.php",\r\n                method:"POST",\r\n                dataType:"html",\r\n                data:payload,\r\n                xhrFields:{withCredentials:true},\r\n                success:function(response){\r\n                    $("#markPlugin").html(response);\r\n                },\r\n                complete:function(){\r\n                    $(".mark").click(function(){\r\n                        mrequest({post_id:$("#markPlugin").attr("pid"),post_title:$("#markPlugin").attr("ptitle"),op:$(this).attr("id"),url:window.location.href});\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        //mrequest({post_id:$("#markPlugin").attr("pid"),url:window.location.href});\r\n    });\r\n</script>\r\n\r\n<div class="plugins">\r\n<div pid="117677" ptitle="Topological Sorting" id="ratePlugin"></div>\r\n<div pid="117677" ptitle="Topological Sorting" id="markPlugin"></div>\r\n</div>\r\n\r\n<br></br>\r\n\r\n<script>\r\n  window.fbAsyncInit=function() {\r\n    FB.init({\r\n      appId      : \\\'380853768781431\\\',\r\n      xfbml      : true,\r\n      version    : \\\'v2.3\\\'\r\n    });\r\n  };\r\n\r\n  (function(d, s, id){\r\n     var js, fjs = d.getElementsByTagName(s)[0];\r\n     if (d.getElementById(id)) {return;}\r\n     js = d.createElement(s); js.id = id;\r\n     js.src = "//connect.facebook.net/en_US/sdk.js";\r\n     fjs.parentNode.insertBefore(js, fjs);\r\n   }(document, \\\'script\\\', \\\'facebook-jssdk\\\'));\r\n</script>\r\n<div class="fb-like" data-share="true" data-width="450" data-show-faces="true"></div>\r\n\r\n<br></br>\r\n<p>Writing code in comment? Please use <a href="http://code.geeksforgeeks.org/">code.geeksforgeeks.org</a>, generate link and share the link here.</a>\r\n\t\t\t\t\r\n<div id="disqus_thread">\r\n            <div id="dsq-content">\r\n\r\n\r\n            <ul id="dsq-comments">\r\n                    <li class="comment even thread-even depth-1" id="dsq-comment-36427">\r\n        <div id="dsq-comment-header-36427" class="dsq-comment-header">\r\n            <cite id="dsq-cite-36427">\r\n                <span id="dsq-author-user-36427">student</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-36427" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-36427" class="dsq-comment-message"><p>This question on SPOJ <a href="http://www.spoj.com/problems/PFDEP/" rel="nofollow">http://www.spoj.com/problems/PFDEP/</a> requires topological sorting but in a unique way of listing tasks in ascending order based on their number as soon as their dependency is met.<br />\nSolution: <a href="http://ideone.com/iH8yVe" rel="nofollow">http://ideone.com/iH8yVe</a></p>\n<p>I was asked a similar question in Microsoft&#8217;s interview.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-34177">\r\n        <div id="dsq-comment-header-34177" class="dsq-comment-header">\r\n            <cite id="dsq-cite-34177">\r\n                <span id="dsq-author-user-34177">Wellwisher</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-34177" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-34177" class="dsq-comment-message"><p>Complete C# code of topological sorting.</p>\n<p><a href="http://onestopinterviewprep.blogspot.com/2014/03/topological-sorting.html" rel="nofollow">http://onestopinterviewprep.blogspot.com/2014/03/topological-sorting.html</a></p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-33905">\r\n        <div id="dsq-comment-header-33905" class="dsq-comment-header">\r\n            <cite id="dsq-cite-33905">\r\n                <span id="dsq-author-user-33905">Zheng Luo</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-33905" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-33905" class="dsq-comment-message"><p>Thanks for sharing, I think we can regard this approach as the post order traversal of a DAG.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-28847">\r\n        <div id="dsq-comment-header-28847" class="dsq-comment-header">\r\n            <cite id="dsq-cite-28847">\r\n                <span id="dsq-author-user-28847">DarKProtocol</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-28847" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-28847" class="dsq-comment-message"><p>How come 4 is present in the output..? there is no path to reach 4.. can any one explain?</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-31902">\r\n        <div id="dsq-comment-header-31902" class="dsq-comment-header">\r\n            <cite id="dsq-cite-31902">\r\n                <span id="dsq-author-user-31902">Ronny Mandal</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-31902" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-31902" class="dsq-comment-message"><p>This is perhaps late, but: topological sort always starts with the nodes that have the smallest in-degree. In this graph it is 4 and 5, both have an in-degree of zero. Node 2 and 3 have one and node 0 and 1 have two.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-3" id="dsq-comment-32167">\r\n        <div id="dsq-comment-header-32167" class="dsq-comment-header">\r\n            <cite id="dsq-cite-32167">\r\n                <span id="dsq-author-user-32167">Jeremy Shi</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-32167" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-32167" class="dsq-comment-message"><p>more precisely, always starts with the nodes that has zero in-degree.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-28777">\r\n        <div id="dsq-comment-header-28777" class="dsq-comment-header">\r\n            <cite id="dsq-cite-28777">\r\n                <span id="dsq-author-user-28777">Romel</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-28777" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-28777" class="dsq-comment-message"><p>Thanks for writing this post! <img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/images/smilies/simple-smile.png" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-28036">\r\n        <div id="dsq-comment-header-28036" class="dsq-comment-header">\r\n            <cite id="dsq-cite-28036">\r\n                <span id="dsq-author-user-28036">Setu</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-28036" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-28036" class="dsq-comment-message"><p>The above approach gives a topological sort order if the graph is a DAG, In case if the graph is not a DAG, it does not intimate that the graph is a DAG. </p>\n<p>Please refer to the code below &#8211; </p>\n<p>Any comments are welcome if some thing is wrong&#8230;</p>\n<p>package com.samplePackage;</p>\n<p>import java.util.ArrayList;<br />\nimport java.util.List;<br />\nimport java.util.Stack;</p>\n<p>public class TopologicalSort {</p>\n<p>    public static void main(String[] args) {<br />\n        Graph g = new Graph(6);<br />\n        g.addEdge(5, 2);<br />\n        g.addEdge(5, 0);<br />\n        g.addEdge(4, 0);<br />\n        g.addEdge(4, 1);<br />\n        g.addEdge(2, 3);<br />\n        g.addEdge(3, 1);<br />\n        g.addEdge(0, 3);</p>\n<p>        g.TopSort();<br />\n    }</p>\n<p>}<br />\nclass Graph{</p>\n<p>    private int vertexCount;<br />\n    private List []adjcentList ;</p>\n<p>    Graph(int vertexCount)<br />\n    {<br />\n        this.vertexCount=vertexCount;<br />\n        this.adjcentList= new ArrayList [vertexCount];<br />\n    }</p>\n<p>    public void TopSort()<br />\n    {<br />\n        int [] visited= new int[this.vertexCount];<br />\n        Stack stack = new Stack();</p>\n<p>        for(int i =0; i&lt; this.vertexCount;i++)<br />\n            visited[i]=0;</p>\n<p>        for(int i =0; i&lt; this.vertexCount;i++)<br />\n            if(visited[i]==0 &amp;&amp; visited[i]!=2)<br />\n                TopSortUtils(i,visited,stack);</p>\n<p>        while(!stack.isEmpty())<br />\n            System.out.println(stack.pop());<br />\n    }</p>\n<p>    public void TopSortUtils(int  vertex , int [] visited, Stack stack)<br />\n    {<br />\n        if(visited[vertex]==1)<br />\n        {<br />\n            System.out.println(&#8220;Since the graph is not a DAG, No Topological Sort order.&#8221;);<br />\n            System.exit(0);<br />\n        }<br />\n        if(visited[vertex]!=2)<br />\n        {<br />\n            visited[vertex]=1;</p>\n<p>            if(this.adjcentList[vertex]!=null)<br />\n                for(int i : this.adjcentList[vertex])<br />\n                    TopSortUtils(i, visited, stack);</p>\n<p>            visited[vertex]=2;<br />\n            stack.push(vertex);<br />\n        }<br />\n    }</p>\n<p>    void addEdge(int u, int v)<br />\n    {<br />\n        if (null ==this.adjcentList[u])<br />\n            this.adjcentList[u]= new ArrayList();<br />\n        this.adjcentList[u].add(v);<br />\n    }</p>\n<p>}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-27609">\r\n        <div id="dsq-comment-header-27609" class="dsq-comment-header">\r\n            <cite id="dsq-cite-27609">\r\n                <span id="dsq-author-user-27609">sdg</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-27609" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-27609" class="dsq-comment-message"><p>Topological Sort with a different approach. Kindly comment in case of any bugs.</p>\n<p><code></p>\n<p>#include</p>\n<p>#include</p>\n<p>#include</p>\n<p>int *s, start, end, **graph,*l,*order;</p>\n<p>int init(int no_of_vertices){</p>\n<p>    int i;</p>\n<p>    start = 0;</p>\n<p>    end = 0;</p>\n<p>    graph = (int **)calloc(no_of_vertices,sizeof(int));</p>\n<p>    for(i = 0; i &lt; no_of_vertices; i++) {</p>\n<p>        graph[i] = (int *)calloc(no_of_vertices,sizeof(int));</p>\n<p>        memset(graph[i],0,sizeof(graph[i]));</p>\n<p>    }</p>\n<p>    /* Temporary set of nodes in the form of a queue */</p>\n<p>    s = (int *)calloc(no_of_vertices,sizeof(bool));</p>\n<p>    /* Sorted list */</p>\n<p>    l = (int *)calloc(no_of_vertices,sizeof(int));</p>\n<p>    order = (int *)calloc(no_of_vertices,sizeof(int));</p>\n<p>}</p>\n<p>void add_edge(int src,int dest) {</p>\n<p>    if(graph){</p>\n<p>        /* Valid because the graph is DAG */</p>\n<p>        graph[src][dest] = 1;</p>\n<p>        graph[dest][src] = -1;</p>\n<p>        order[dest]++;</p>\n<p>    }</p>\n<p>}</p>\n<p>void remove_edge(int src,int dest){</p>\n<p>    if(graph) {</p>\n<p>        graph[src][dest] = 0;</p>\n<p>        graph[dest][src] = 0;</p>\n<p>        if(order[dest])</p>\n<p>            order[dest]--;</p>\n<p>    }</p>\n<p>}</p>\n<p>int create_s(int no_of_vertices){</p>\n<p>    int i,j,k = 0;</p>\n<p>    bool has_incoming;</p>\n<p>    for(i = 0; i &lt; no_of_vertices; i++){</p>\n<p>        if(!order[i])</p>\n<p>            s[k++] = i;</p>\n<p>    }</p>\n<p>    return k;</p>\n<p>}</p>\n<p>void t_sort(int no_of_vertices){</p>\n<p>    int start = 0,cur_node,j,k = 0, nodes;</p>\n<p>    nodes = create_s(no_of_vertices);</p>\n<p>    while(/* s is not empty */start &lt; nodes){</p>\n<p>        cur_node = s[start++];</p>\n<p>        for(j = 0; j  0){</p>\n<p>                remove_edge(cur_node,j);</p>\n<p>                if(!order[j]){</p>\n<p>                    s[nodes++] = j;</p>\n<p>                }</p>\n<p>            }</p>\n<p>        }</p>\n<p>        l[k++] = cur_node;</p>\n<p>    }</p>\n<p>}</p>\n<p>int main() {</p>\n<p>    int no_of_vertices;</p>\n<p>    printf("Enter the number of vertices : ");</p>\n<p>    scanf("%d",&amp;no_of_vertices);</p>\n<p>    init(no_of_vertices);</p>\n<p>    add_edge(0,3);</p>\n<p>    add_edge(0,2);</p>\n<p>    add_edge(4,3);</p>\n<p>    add_edge(1,2);</p>\n<p>    add_edge(1,7);</p>\n<p>    add_edge(3,6);</p>\n<p>    add_edge(3,5);</p>\n<p>    add_edge(2,5);</p>\n<p>    t_sort(no_of_vertices);</p>\n<p>    for(int i = 0; i &lt; no_of_vertices; i++)</p>\n<p>        printf(&quot;%d &quot;,l[i]);</p>\n<p>    printf(&quot;n&quot;);</p>\n<p>    return 0;</p>\n<p>}</p>\n<p></code></p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-18937">\r\n        <div id="dsq-comment-header-18937" class="dsq-comment-header">\r\n            <cite id="dsq-cite-18937">\r\n                <span id="dsq-author-user-18937">coder22</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-18937" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-18937" class="dsq-comment-message"><p>What would be the running time of this algorithm?<br />\no(VlgV) ?</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-27419">\r\n        <div id="dsq-comment-header-27419" class="dsq-comment-header">\r\n            <cite id="dsq-cite-27419">\r\n                <span id="dsq-author-user-27419">adi</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-27419" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-27419" class="dsq-comment-message"><p>O(v+e)</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-18157">\r\n        <div id="dsq-comment-header-18157" class="dsq-comment-header">\r\n            <cite id="dsq-cite-18157">\r\nhttp://zebadiah.me                <span id="dsq-author-user-18157">Zeb</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-18157" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-18157" class="dsq-comment-message"><p>Here&#8217;s another example of a topological traversal. I use a slightly different graph structure here with no explicit &#8216;edges&#8217; just nodes and children.</p>\n<pre> <code language="C">\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;stack&gt;\n\nusing namespace std;\n\n// Topological sort of graph DAG (directed acyclic graph)\nclass Node\n{\npublic:\n\tvector&lt;Node*&gt; children;\n\tchar value;\n\tbool visited;\n\n\tNode(char value)\n\t{\n\t\tthis-&gt;value = value;\n\t\tthis-&gt;visited = false;\n\t}\n};\n\nstack&lt;Node*&gt; the_stack;\n\nvoid loadStackInTopologicalOrder(Node* root)\n{\n\tfor(int i = 0; i &lt; root-&gt;children.size(); i++)\n\t{\n\t\tif(!root-&gt;children[i]-&gt;visited)\n\t\t{\n\t\t\tloadStackInTopologicalOrder(root-&gt;children[i]);\n\t\t}\n\t}\n\t\n\tthe_stack.push(root);\n\troot-&gt;visited = true;\n}\n\nint main()\n{\n\tvector&lt;Node*&gt; graphNodes;\n\n\tfor(int i = 0; i &lt;= 5; i++)\n\t{\n\t\tgraphNodes.push_back(new Node(\'0\' + i));\n\t}\n\t\n\tfor(int i = 0; i &lt; graphNodes.size(); i++)\n\t{\n\t\tcout &lt;&lt; graphNodes[i]-&gt;value &lt;&lt; &quot;, &quot;;\n\t}\n\tcout &lt;&lt; &quot;\\n&quot;;\n\n\t// link some things together, no loops allowed!\n\tgraphNodes[2]-&gt;children.push_back(graphNodes[3]);\n\tgraphNodes[3]-&gt;children.push_back(graphNodes[1]);\n\tgraphNodes[4]-&gt;children.push_back(graphNodes[1]);\n\tgraphNodes[4]-&gt;children.push_back(graphNodes[0]);\n\tgraphNodes[5]-&gt;children.push_back(graphNodes[2]);\n\tgraphNodes[5]-&gt;children.push_back(graphNodes[0]);\n\n\tfor(int i = 0; i &lt; graphNodes.size(); i++)\n\t{\n\t\tif(!graphNodes[i]-&gt;visited)\n\t\t{\n\t\t\tloadStackInTopologicalOrder(graphNodes[i]);\n\t\t}\n\t}\n\n\twhile(!the_stack.empty())\n\t{\n\t\tNode* node = the_stack.top();\n\t\tcout &lt;&lt; node-&gt;value &lt;&lt; &quot;, &quot;;\n\t\tthe_stack.pop();\n\t}\n\tcout &lt;&lt; &quot;\\n&quot;;\n\n\tcin.get();\n}\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</li><!-- #comment-## -->\n            </ul>\r\n\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n<script type="text/javascript">\r\nvar disqus_url = \'http://www.geeksforgeeks.org/topological-sorting/\';\r\nvar disqus_identifier = \'117677 http://www.geeksforgeeks.org/?p=117677\';\r\nvar disqus_container_id = \'disqus_thread\';\r\nvar disqus_shortname = \'geeksforgeeks\';\r\nvar disqus_title = "Topological Sorting";\r\nvar disqus_config_custom = window.disqus_config;\r\nvar disqus_config = function () {\r\n    /*\r\n    All currently supported events:\r\n    onReady: fires when everything is ready,\r\n    onNewComment: fires when a new comment is posted,\r\n    onIdentify: fires when user is authenticated\r\n    */\r\n    \r\n    \r\n    this.language = \'\';\r\n    \r\n    if (disqus_config_custom) {\r\n        disqus_config_custom.call(this);\r\n    }\r\n};\r\n\r\n(function() {\r\n    var dsq = document.createElement(\'script\'); dsq.type = \'text/javascript\';\r\n    dsq.async = true;\r\n    dsq.src = \'//\' + disqus_shortname + \'.disqus.com/embed.js\';\r\n    (document.getElementsByTagName(\'head\')[0] || document.getElementsByTagName(\'body\')[0]).appendChild(dsq);\r\n})();\r\n</script>\r\n\r\n\r\n\t\t\t\r\n\t\t</div><!-- #content -->\r\n\t</div><!-- #primary -->\r\n\r\n\r\n\t\t\t<div id="secondary" class="widget-area" role="complementary">\r\n\t\t\t<aside id="text-9" class="widget widget_text">\t\t\t<div class="textwidget"><div id="fb-root"></div>\r\n<script>(function(d, s, id) {\r\n  var js, fjs = d.getElementsByTagName(s)[0];\r\n  if (d.getElementById(id)) return;\r\n  js = d.createElement(s); js.id = id;\r\n  js.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.3&appId=138031159685820";\r\n  fjs.parentNode.insertBefore(js, fjs);\r\n}(document, \'script\', \'facebook-jssdk\'));</script>\r\n\r\n<div class="fb-page" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="300" data-height="180" data-small-header="true" data-adapt-container-width="false" data-hide-cover="true" data-show-facepile="true" data-show-posts="false"><div class="fb-xfbml-parse-ignore"><blockquote cite="https://www.facebook.com/pages/GeeksforGeeks/316764689022"><a href="https://www.facebook.com/pages/GeeksforGeeks/316764689022">GeeksforGeeks</a></blockquote></div></div>\r\n</div>\n\t\t</aside><aside id="text-33" class="widget widget_text">\t\t\t<div class="textwidget"><a href="http://www.springpeople.com/gfg-landing">\r\n<img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/GfG-2.jpg" alt="SpringPeople Ad">\r\n</a>\r\n</div>\n\t\t</aside><aside id="text-14" class="widget widget_text"><p class="widget-title">Popular Posts</p>\t\t\t<div class="textwidget"><ul>\r\n<li><a href="http://www.geeksforgeeks.org/top-algorithms-and-data-structures-for-competitive-programming/">Top 10 Algorithms and Data Structures for Competitive Programming</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/top-10-algorithms-in-interview-questions/">Top 10 algorithms in Interview Questions</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/how-to-begin-with-competitive-programming/">How to begin with Competitive Programming?</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>\r\n<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>\r\n<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding \xe2\x80\x9cextern\xe2\x80\x9d keyword in C</a> </li>\r\n<li><a href="http://www.geeksforgeeks.org/heavy-light-decomposition-set-1-introduction/"> Heavy Light Decomposition</a> </li>\r\n<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>\r\n</ul></div>\n\t\t</aside><aside id="text-17" class="widget widget_text">\t\t\t<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<!-- Big 300x600 Sidebar -->\r\n<ins class="adsbygoogle"\r\n     style="display:inline-block;width:300px;height:600px"\r\n     data-ad-client="ca-pub-9465609616171866"\r\n     data-ad-slot="4402736037"></ins>\r\n<script>\r\n(adsbygoogle = window.adsbygoogle || []).push({});\r\n</script></div>\n\t\t</aside><aside id="text-32" class="widget widget_text">\t\t\t<div class="textwidget"><form style="border:1px solid #ccc;padding:3px;text-align:center;" action="https://feedburner.google.com/fb/a/mailverify" method="post" target="popupwindow" onsubmit="window.open(\'https://feedburner.google.com/fb/a/mailverify?uri=Geeksforgeeks\', \'popupwindow\', \'scrollbars=yes,width=550,height=520\');return true"><p>Subscribe and Never Miss an Article</p><input type="text" style="width:140px" placeholder="Email Address" name="email"/><input type="hidden" value="Geeksforgeeks" name="uri"/><input type="hidden" name="loc" value="en_US"/>&nbsp;&nbsp;<input type="submit" style="background-color: #4cb96b;" value="Subscribe" /></form></div>\n\t\t</aside><aside id="text-18" class="widget widget_text">\t\t\t<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<!-- LargeRectangleSide -->\r\n<ins class="adsbygoogle"\r\n     style="display:inline-block;width:336px;height:280px"\r\n     data-ad-client="ca-pub-9465609616171866"\r\n     data-ad-slot="1884636833"></ins>\r\n<script>\r\n(adsbygoogle = window.adsbygoogle || []).push({});\r\n</script></div>\n\t\t</aside><aside id="text-13" class="widget widget_text">\t\t\t<div class="textwidget"><ul><li><a href="http://geeksquiz.com/category/articles/puzzle/">Common Interview Puzzles</a></li><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/advanced-data-structure/">Advanced Data Structures</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/pattern-searching/">Pattern Searching</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li><li><a href="http://www.geeksforgeeks.org/category/searching/">Searching</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/sorting/">Sorting</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/Hash/">Hashing</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/algorithm/analysis/">Analysis of Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/algorithm/mathematical/">Mathematical Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/algorithm/randomized/">Randomized Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>\r\n</ul>\r\n\r\n\r\n\r\n\r\n</div>\n\t\t</aside><aside id="categories-384568212" class="widget widget_categories"><p class="widget-title">All Categories</p><label class="screen-reader-text" for="cat">All Categories</label><select name=\'cat\' id=\'cat\' class=\'postform\' >\n\t<option value=\'-1\'>Select Category</option>\n\t<option class="level-0" value="1762">Advanced Data Structure&nbsp;&nbsp;(69)</option>\n\t<option class="level-0" value="1744">Algorithm&nbsp;&nbsp;(404)</option>\n\t<option class="level-1" value="1745">&nbsp;&nbsp;&nbsp;Analysis&nbsp;&nbsp;(16)</option>\n\t<option class="level-1" value="1748">&nbsp;&nbsp;&nbsp;Backtracking&nbsp;&nbsp;(11)</option>\n\t<option class="level-1" value="1750">&nbsp;&nbsp;&nbsp;Divide and Conquer&nbsp;&nbsp;(29)</option>\n\t<option class="level-1" value="1746">&nbsp;&nbsp;&nbsp;Dynamic Programming&nbsp;&nbsp;(91)</option>\n\t<option class="level-1" value="1754">&nbsp;&nbsp;&nbsp;Geometric&nbsp;&nbsp;(14)</option>\n\t<option class="level-1" value="1747">&nbsp;&nbsp;&nbsp;Greedy&nbsp;&nbsp;(20)</option>\n\t<option class="level-1" value="1753">&nbsp;&nbsp;&nbsp;Mathematical&nbsp;&nbsp;(123)</option>\n\t<option class="level-1" value="1749">&nbsp;&nbsp;&nbsp;Pattern Searching&nbsp;&nbsp;(30)</option>\n\t<option class="level-1" value="1757">&nbsp;&nbsp;&nbsp;Randomized&nbsp;&nbsp;(19)</option>\n\t<option class="level-1" value="1751">&nbsp;&nbsp;&nbsp;Searching&nbsp;&nbsp;(43)</option>\n\t<option class="level-1" value="1752">&nbsp;&nbsp;&nbsp;Sorting&nbsp;&nbsp;(40)</option>\n\t<option class="level-0" value="3">Arrays&nbsp;&nbsp;(80)</option>\n\t<option class="level-0" value="18">Articles&nbsp;&nbsp;(25)</option>\n\t<option class="level-0" value="1761">Binary Search Tree&nbsp;&nbsp;(37)</option>\n\t<option class="level-0" value="17">Bit Magic&nbsp;&nbsp;(56)</option>\n\t<option class="level-0" value="14">C/C++ Puzzles&nbsp;&nbsp;(244)</option>\n\t<option class="level-0" value="1790">Competitive Programming&nbsp;&nbsp;(4)</option>\n\t<option class="level-0" value="1710">GBlog&nbsp;&nbsp;(55)</option>\n\t<option class="level-0" value="67">GFacts&nbsp;&nbsp;(43)</option>\n\t<option class="level-0" value="97">Graph&nbsp;&nbsp;(74)</option>\n\t<option class="level-0" value="1756">Hash&nbsp;&nbsp;(21)</option>\n\t<option class="level-0" value="1755">Heap&nbsp;&nbsp;(18)</option>\n\t<option class="level-0" value="1140">Interview Experiences&nbsp;&nbsp;(1,050)</option>\n\t<option class="level-0" value="87">Java&nbsp;&nbsp;(55)</option>\n\t<option class="level-0" value="8">Linked Lists&nbsp;&nbsp;(70)</option>\n\t<option class="level-0" value="1760">Matrix&nbsp;&nbsp;(39)</option>\n\t<option class="level-0" value="66">MCQ&nbsp;&nbsp;(95)</option>\n\t<option class="level-0" value="4">Misc&nbsp;&nbsp;(40)</option>\n\t<option class="level-0" value="5">Output&nbsp;&nbsp;(55)</option>\n\t<option class="level-0" value="1767">Project&nbsp;&nbsp;(21)</option>\n\t<option class="level-0" value="1789">Python&nbsp;&nbsp;(5)</option>\n\t<option class="level-0" value="1743">Queue&nbsp;&nbsp;(16)</option>\n\t<option class="level-0" value="1742">Stack&nbsp;&nbsp;(25)</option>\n\t<option class="level-0" value="7">Strings&nbsp;&nbsp;(61)</option>\n\t<option class="level-0" value="1788">Technical Scripter&nbsp;&nbsp;(14)</option>\n\t<option class="level-0" value="19">Trees&nbsp;&nbsp;(114)</option>\n</select>\n\n<script type=\'text/javascript\'>\n/* <![CDATA[ */\n(function() {\n\tvar dropdown = document.getElementById( "cat" );\n\tfunction onCatChange() {\n\t\tif ( dropdown.options[ dropdown.selectedIndex ].value > 0 ) {\n\t\t\tlocation.href = "http://www.geeksforgeeks.org/?cat=" + dropdown.options[ dropdown.selectedIndex ].value;\n\t\t}\n\t}\n\tdropdown.onchange = onCatChange;\n})();\n/* ]]> */\n</script>\n\n</aside><aside id="text-21" class="widget widget_text"><p class="widget-title">Recent Comments</p>\t\t\t<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>\n\t\t</aside><aside id="tag_cloud-3" class="widget widget_tag_cloud"><p class="widget-title">Tags</p><div class="tagcloud"><a href=\'http://www.geeksforgeeks.org/tag/adobe/\' class=\'tag-link-148\' title=\'32 topics\' style=\'font-size: 12.941176470588pt;\'>Adobe</a>\n<a href=\'http://www.geeksforgeeks.org/tag/advance-data-structures/\' class=\'tag-link-152\' title=\'31 topics\' style=\'font-size: 12.838235294118pt;\'>Advance Data Structures</a>\n<a href=\'http://www.geeksforgeeks.org/tag/advanced-data-structures/\' class=\'tag-link-150\' title=\'38 topics\' style=\'font-size: 13.661764705882pt;\'>Advanced Data Structures</a>\n<a href=\'http://www.geeksforgeeks.org/tag/amazon/\' class=\'tag-link-141\' title=\'253 topics\' style=\'font-size: 22pt;\'>Amazon</a>\n<a href=\'http://www.geeksforgeeks.org/tag/array/\' class=\'tag-link-68\' title=\'12 topics\' style=\'font-size: 8.7205882352941pt;\'>array</a>\n<a href=\'http://www.geeksforgeeks.org/tag/backtracking/\' class=\'tag-link-112\' title=\'11 topics\' style=\'font-size: 8.4117647058824pt;\'>Backtracking</a>\n<a href=\'http://www.geeksforgeeks.org/tag/bharti-softbank-hike/\' class=\'tag-link-1214\' title=\'10 topics\' style=\'font-size: 8pt;\'>Bharti SoftBank (HIKE)</a>\n<a href=\'http://www.geeksforgeeks.org/tag/bit-magic/\' class=\'tag-link-17\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>Bit Magic</a>\n<a href=\'http://www.geeksforgeeks.org/tag/c/\' class=\'tag-link-86\' title=\'18 topics\' style=\'font-size: 10.470588235294pt;\'>C++</a>\n<a href=\'http://www.geeksforgeeks.org/tag/cn/\' class=\'tag-link-142\' title=\'12 topics\' style=\'font-size: 8.7205882352941pt;\'>CN</a>\n<a href=\'http://www.geeksforgeeks.org/tag/c-puzzle/\' class=\'tag-link-69\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>c puzzle</a>\n<a href=\'http://www.geeksforgeeks.org/tag/d-e-shaw/\' class=\'tag-link-823\' title=\'17 topics\' style=\'font-size: 10.264705882353pt;\'>D-E-Shaw</a>\n<a href=\'http://www.geeksforgeeks.org/tag/dbms/\' class=\'tag-link-139\' title=\'11 topics\' style=\'font-size: 8.4117647058824pt;\'>DBMS</a>\n<a href=\'http://www.geeksforgeeks.org/tag/divide-and-conquer/\' class=\'tag-link-113\' title=\'27 topics\' style=\'font-size: 12.220588235294pt;\'>Divide and Conquer</a>\n<a href=\'http://www.geeksforgeeks.org/tag/dynamic-programming/\' class=\'tag-link-111\' title=\'83 topics\' style=\'font-size: 17.058823529412pt;\'>Dynamic Programming</a>\n<a href=\'http://www.geeksforgeeks.org/tag/flipkart/\' class=\'tag-link-173\' title=\'46 topics\' style=\'font-size: 14.485294117647pt;\'>Flipkart</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate/\' class=\'tag-link-114\' title=\'88 topics\' style=\'font-size: 17.367647058824pt;\'>GATE</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-2012/\' class=\'tag-link-133\' title=\'10 topics\' style=\'font-size: 8pt;\'>GATE-CS-2012</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-c-language/\' class=\'tag-link-72\' title=\'10 topics\' style=\'font-size: 8pt;\'>GATE-CS-C-Language</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-ds-algo/\' class=\'tag-link-79\' title=\'35 topics\' style=\'font-size: 13.352941176471pt;\'>GATE-CS-DS-&amp;-Algo</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-older/\' class=\'tag-link-145\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>GATE-CS-Older</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gfact/\' class=\'tag-link-67\' title=\'20 topics\' style=\'font-size: 10.882352941176pt;\'>GFacts</a>\n<a href=\'http://www.geeksforgeeks.org/tag/goldman-sachs/\' class=\'tag-link-590\' title=\'20 topics\' style=\'font-size: 10.882352941176pt;\'>Goldman Sachs</a>\n<a href=\'http://www.geeksforgeeks.org/tag/google/\' class=\'tag-link-155\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>Google</a>\n<a href=\'http://www.geeksforgeeks.org/tag/graph/\' class=\'tag-link-97\' title=\'45 topics\' style=\'font-size: 14.382352941176pt;\'>Graph</a>\n<a href=\'http://www.geeksforgeeks.org/tag/greedy-algorithm/\' class=\'tag-link-159\' title=\'20 topics\' style=\'font-size: 10.882352941176pt;\'>Greedy Algorithm</a>\n<a href=\'http://www.geeksforgeeks.org/tag/hashing/\' class=\'tag-link-250\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>Hashing</a>\n<a href=\'http://www.geeksforgeeks.org/tag/interview-experience/\' class=\'tag-link-126\' title=\'216 topics\' style=\'font-size: 21.382352941176pt;\'>Interview Experience</a>\n<a href=\'http://www.geeksforgeeks.org/tag/java/\' class=\'tag-link-87\' title=\'61 topics\' style=\'font-size: 15.720588235294pt;\'>Java</a>\n<a href=\'http://www.geeksforgeeks.org/tag/maq-software/\' class=\'tag-link-1392\' title=\'11 topics\' style=\'font-size: 8.4117647058824pt;\'>MAQ Software</a>\n<a href=\'http://www.geeksforgeeks.org/tag/mathematicalalgo/\' class=\'tag-link-154\' title=\'73 topics\' style=\'font-size: 16.544117647059pt;\'>MathematicalAlgo</a>\n<a href=\'http://www.geeksforgeeks.org/tag/matrix/\' class=\'tag-link-211\' title=\'21 topics\' style=\'font-size: 11.088235294118pt;\'>Matrix</a>\n<a href=\'http://www.geeksforgeeks.org/tag/microsoft/\' class=\'tag-link-104\' title=\'95 topics\' style=\'font-size: 17.676470588235pt;\'>Microsoft</a>\n<a href=\'http://www.geeksforgeeks.org/tag/morgan-stanley/\' class=\'tag-link-167\' title=\'17 topics\' style=\'font-size: 10.264705882353pt;\'>Morgan Stanley</a>\n<a href=\'http://www.geeksforgeeks.org/tag/operating-systems/\' class=\'tag-link-110\' title=\'19 topics\' style=\'font-size: 10.676470588235pt;\'>Operating systems</a>\n<a href=\'http://www.geeksforgeeks.org/tag/oracle/\' class=\'tag-link-171\' title=\'24 topics\' style=\'font-size: 11.705882352941pt;\'>Oracle</a>\n<a href=\'http://www.geeksforgeeks.org/tag/pattern-searching/\' class=\'tag-link-107\' title=\'26 topics\' style=\'font-size: 12.014705882353pt;\'>Pattern Searching</a>\n<a href=\'http://www.geeksforgeeks.org/tag/puzzle/\' class=\'tag-link-70\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>puzzle</a>\n<a href=\'http://www.geeksforgeeks.org/tag/python/\' class=\'tag-link-1770\' title=\'21 topics\' style=\'font-size: 11.088235294118pt;\'>Python</a>\n<a href=\'http://www.geeksforgeeks.org/tag/recursion/\' class=\'tag-link-85\' title=\'21 topics\' style=\'font-size: 11.088235294118pt;\'>Recursion</a>\n<a href=\'http://www.geeksforgeeks.org/tag/samsung/\' class=\'tag-link-180\' title=\'12 topics\' style=\'font-size: 8.7205882352941pt;\'>Samsung</a>\n<a href=\'http://www.geeksforgeeks.org/tag/sap-labs/\' class=\'tag-link-1414\' title=\'23 topics\' style=\'font-size: 11.5pt;\'>SAP Labs</a>\n<a href=\'http://www.geeksforgeeks.org/tag/snapdeal/\' class=\'tag-link-1246\' title=\'16 topics\' style=\'font-size: 9.9558823529412pt;\'>SnapDeal</a>\n<a href=\'http://www.geeksforgeeks.org/tag/stack/\' class=\'tag-link-94\' title=\'17 topics\' style=\'font-size: 10.264705882353pt;\'>stack</a>\n<a href=\'http://www.geeksforgeeks.org/tag/stack-queue/\' class=\'tag-link-899\' title=\'12 topics\' style=\'font-size: 8.7205882352941pt;\'>Stack-Queue</a></div>\n</aside><aside id="text-25" class="widget widget_text">\t\t\t<div class="textwidget"><ul>\r\n<li><h2><a href="http://geeksquiz.com/">GeeksQuiz</a></h2></li>\r\n\r\n<li><h2><a href="http://code.geeksforgeeks.org/">GeeksforGeeksIDE</a></h2></li>\r\n\r\n<li><h2><a href="http://www.practice.geeksforgeeks.org/">GeeksforGeeks Practice</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/data-structures/">Data Structures</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/c/">C Programming</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++ Programming</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/java/">Java Programming</a></h2></li>\r\n\r\n<li><h2><a href="http://geeksquiz.com/books/">Books</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Experiences</a></h2></li>\r\n\r\n<li><h2><a href="http://geeksquiz.com/gate-corner-2/">GATE CS</a></h2></li>\r\n\r\n<li><h2><a href="http://www.gatecs.geeksquiz.com">GATE CS Forum</a></h2></li>\r\n\r\n<li><h2><a href="https://play.google.com/store/apps/details?id=free.programming.programming">Android App</a></h2></li>\r\n</ul>\r\n\r\n</div>\n\t\t</aside>\t\t</div><!-- #secondary -->\r\n\t\t</div><!-- #main .wrapper -->\r\n\t<footer id="colophon" role="contentinfo">\r\n\t\t<div class="site-info">\r\n\t\t<div class="clear"></div>\r\n\t\t</div><!-- .site-info -->\r\n\t\t</footer><!-- #colophon -->\r\n<center>\r\n<div class="iconic-footer">\r\n\r\n@geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>  <a href="http://www.geeksforgeeks.org/about/"> &nbsp; &nbsp; &nbsp; &nbsp;About Us!&nbsp; &nbsp; &nbsp; &nbsp;</a><a href="http://www.geeksforgeeks.org/new/ad.htm"> &nbsp; &nbsp; &nbsp; &nbsp;Advertise with us!&nbsp; &nbsp; &nbsp; &nbsp;</a>\r\n\r\n      \t\t\t</div></center><!-- .site-info -->\r\n\r\n\t\t\t\t<div class="clear"></div>\r\n</div><!-- #page -->\r\n\r\n        <script type="text/javascript">\r\n        // <![CDATA[\r\n        var disqus_shortname = \'geeksforgeeks\';\r\n        (function () {\r\n            var nodes = document.getElementsByTagName(\'span\');\r\n            for (var i = 0, url; i < nodes.length; i++) {\r\n                if (nodes[i].className.indexOf(\'dsq-postid\') != -1) {\r\n                    nodes[i].parentNode.setAttribute(\'data-disqus-identifier\', nodes[i].getAttribute(\'data-dsqidentifier\'));\r\n                    url = nodes[i].parentNode.href.split(\'#\', 1);\r\n                    if (url.length == 1) { url = url[0]; }\r\n                    else { url = url[1]; }\r\n                    nodes[i].parentNode.href = url + \'#disqus_thread\';\r\n                }\r\n            }\r\n            var s = document.createElement(\'script\'); \r\n            s.async = true;\r\n            s.type = \'text/javascript\';\r\n            s.src = \'//\' + disqus_shortname + \'.disqus.com/count.js\';\r\n            (document.getElementsByTagName(\'HEAD\')[0] || document.getElementsByTagName(\'BODY\')[0]).appendChild(s);\r\n        }());\r\n        // ]]>\r\n        </script>\r\n        <script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushJava.js\'></script>\n<script type=\'text/javascript\'>\n\t(function(){\n\t\tvar corecss = document.createElement(\'link\');\n\t\tvar themecss = document.createElement(\'link\');\n\t\tvar corecssurl = "http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9b";\r\n\t\tif ( corecss.setAttribute ) {\r\n\t\t\t\tcorecss.setAttribute( "rel", "stylesheet" );\r\n\t\t\t\tcorecss.setAttribute( "type", "text/css" );\r\n\t\t\t\tcorecss.setAttribute( "href", corecssurl );\r\n\t\t} else {\r\n\t\t\t\tcorecss.rel = "stylesheet";\r\n\t\t\t\tcorecss.href = corecssurl;\r\n\t\t}\r\n\t\tdocument.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );\r\n\t\tvar themecssurl = "http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9b";\r\n\t\tif ( themecss.setAttribute ) {\r\n\t\t\t\tthemecss.setAttribute( "rel", "stylesheet" );\r\n\t\t\t\tthemecss.setAttribute( "type", "text/css" );\r\n\t\t\t\tthemecss.setAttribute( "href", themecssurl );\r\n\t\t} else {\r\n\t\t\t\tthemecss.rel = "stylesheet";\r\n\t\t\t\tthemecss.href = themecssurl;\r\n\t\t}\r\n\t\t//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);\r\n\t\tdocument.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );\r\n\t})();\n\tSyntaxHighlighter.config.strings.expandSource = \'+ expand source\';\n\tSyntaxHighlighter.config.strings.help = \'?\';\n\tSyntaxHighlighter.config.strings.alert = \'SyntaxHighlighter\\n\\n\';\n\tSyntaxHighlighter.config.strings.noBrush = \'Can\\\'t find brush for: \';\n\tSyntaxHighlighter.config.strings.brushNotHtmlScript = \'Brush wasn\\\'t configured for html-script option: \';\n\tSyntaxHighlighter.defaults[\'gutter\'] = false;\n\tSyntaxHighlighter.defaults[\'pad-line-numbers\'] = true;\n\tSyntaxHighlighter.defaults[\'toolbar\'] = false;\n\tSyntaxHighlighter.all();\r\n</script>\r\n<link rel=\'stylesheet\' id=\'tabby-print-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/tabby-responsive-tabs/css/tabby-print.css\' type=\'text/css\' media=\'all\' />\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/js/comment-reply.min.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/js/selectnav.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/js/jquery/jquery.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/js/jquery/jquery-migrate.min.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/tabby-responsive-tabs/js/tabby.js\'></script>\n\n<script>jQuery(document).ready(function($) { RESPONSIVEUI.responsiveTabs(); })</script>\n\r\n\r\n<script type="text/javascript">\r\n\r\n  var _gaq = _gaq || [];\r\n  _gaq.push([\'_setAccount\', \'UA-12148232-1\']);\r\n  _gaq.push([\'_trackPageview\']);\r\n\r\n  (function() {\r\n    var ga = document.createElement(\'script\'); ga.type = \'text/javascript\'; ga.async = true;\r\n    ga.src = (\'https:\' == document.location.protocol ? \'https://ssl\' : \'http://www\') + \'.google-analytics.com/ga.js\';\r\n    var s = document.getElementsByTagName(\'script\')[0]; s.parentNode.insertBefore(ga, s);\r\n  })();\r\n\r\n</script>  \r\n<script async type="text/javascript" src="//cdn.fancybar.net/ac/fancybar.js?zoneid=1502&serve=C6ADVKE&placement=geeksforgeeks" id="_fancybar_js"></script>\r\n</body>\r\n</html>\n<!-- Dynamic page generated in 0.317 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2016-02-29 17:39:59 -->\n\n<!-- Compression = gzip -->\n<!-- super cache -->'
p183
sb.