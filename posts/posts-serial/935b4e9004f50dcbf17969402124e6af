ccopy_reg
_reconstructor
p0
(cpost
Post
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'post_file'
p6
S'/Users/anupamjain/code/gitRepo/GitToPost/posts/Java/DepthFirstTraversalGraph'
p7
sS'files_covered'
p8
c__builtin__
set
p9
((lp10
S'/Users/anupamjain/code/gitRepo/Questions/Algo/Java/DepthFirstTraversalGraph.java'
p11
atp12
Rp13
sS'title'
p14
VDepth First Traversal for a Graph
p15
sS'file_name'
p16
g11
sS'link'
p17
S'http://www.geeksforgeeks.org/depth-first-traversal-for-a-graph/'
p18
sS'host_name'
p19
S'www.geeksforgeeks.org'
p20
sS'problem_text'
p21
g0
(cbs4.element
Tag
p22
g2
Ntp23
Rp24
(dp25
S'can_be_empty_element'
p26
I00
sS'previous_element'
p27
NsS'next_sibling'
p28
NsS'name'
p29
S'p'
p30
sS'parent'
p31
NsS'namespace'
p32
NsS'prefix'
p33
NsS'previous_sibling'
p34
NsS'attrs'
p35
(dp36
sS'next_element'
p37
g0
(g22
g2
Ntp38
Rp39
(dp40
g26
I00
sg27
g24
sg28
g0
(g22
g2
Ntp41
Rp42
(dp43
g26
I00
sg27
g0
(cbs4.element
NavigableString
p44
c__builtin__
unicode
p45
V\u000aFor example, in the following graph, we start traversal from vertex 2. When we come to vertex 0, we look for all adjacent vertices of it. 2 is also an adjacent vertex of 0. If we don\u2019t mark visited vertices, then 2 will be processed again and it will become a non-terminating process. A Depth First Traversal of the following graph is 2, 0, 1, 3.  
p46
tp47
Rp48
(dp49
g34
g0
(g22
g2
Ntp50
Rp51
(dp52
g26
I01
sg27
g0
(g22
g2
Ntp53
Rp54
(dp55
g26
I00
sg27
g0
(g44
g45
V.  The only catch here is, unlike trees, graphs may contain cycles, so we may come to the same node again. To avoid processing a node more than once, we use a boolean visited array. 
p56
tp57
Rp58
(dp59
g34
g0
(g22
g2
Ntp60
Rp61
(dp62
g26
I00
sg27
g0
(g44
g45
V for a graph is similar to 
p63
tp64
Rp65
(dp66
g34
g0
(g22
g2
Ntp67
Rp68
(dp69
g26
I00
sg27
g39
sg28
g65
sg29
Va
p70
sg31
g39
sg32
Nsg33
Nsg34
Nsg35
(dp71
Vhref
p72
Vhttp://en.wikipedia.org/wiki/Depth-first_search
p73
ssg37
g0
(g44
g45
VDepth First Traversal (or Search)
p74
tp75
Rp76
(dp77
g34
Nsg27
g68
sg28
Nsg37
g65
sg31
g68
sbsS'parser_class'
p78
cbs4
BeautifulSoup
p79
sS'hidden'
p80
I00
sS'contents'
p81
(lp82
g76
asbsg27
g76
sg28
g61
sg37
g61
sg31
g39
sbsg28
g58
sg29
g70
sg31
g39
sg32
Nsg33
Nsg34
g65
sg35
(dp83
Vhref
p84
Vhttp://www.geeksforgeeks.org/archives/618
p85
ssg37
g0
(g44
g45
VDepth First Traversal of a tree
p86
tp87
Rp88
(dp89
g34
Nsg27
g61
sg28
Nsg37
g58
sg31
g61
sbsg78
g79
sg80
I00
sg81
(lp90
g88
asbsg27
g88
sg28
g54
sg37
g54
sg31
g39
sbsg28
g51
sg29
Vspan
p91
sg31
g39
sg32
Nsg33
Nsg34
g58
sg35
(dp92
Vid
p93
Vmore-18212
p94
ssg37
g51
sg78
g79
sg80
I00
sg81
(lp95
sbsg28
g48
sg29
Vbr
p96
sg31
g39
sg32
Nsg33
Nsg34
g54
sg35
(dp97
sg37
g48
sg78
g79
sg80
I00
sg81
(lp98
sbsg27
g51
sg28
Nsg37
g42
sg31
g39
sbsg28
g0
(g22
g2
Ntp99
Rp100
(dp101
g26
I00
sg27
g0
(g22
g2
Ntp102
Rp103
(dp104
g26
I01
sg27
g0
(g22
g2
Ntp105
Rp106
(dp107
g26
I00
sg27
g42
sg28
Nsg29
g70
sg31
g42
sg32
Nsg33
Nsg34
Nsg35
(dp108
Vhref
p109
Vhttp://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/DFS.jpg
p110
ssg37
g103
sg78
g79
sg80
I00
sg81
(lp111
g103
asbsg28
Nsg29
Vimg
p112
sg31
g106
sg32
Nsg33
Nsg34
Nsg35
(dp113
Vsrc
p114
Vhttp://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/DFS.jpg
p115
sVtitle
p116
VDFS
p117
sVheight
p118
V181
p119
sVwidth
p120
V422
p121
sValt
p122
V
p123
sVclass
p124
(lp125
Valigncenter
p126
aVsize-full
p127
aVwp-image-18349
p128
assg37
g100
sg78
g79
sg80
I00
sg81
(lp129
sbsg28
g0
(g22
g2
Ntp130
Rp131
(dp132
g26
I00
sg27
g0
(g44
g45
V\u000a
p133
tp134
Rp135
(dp136
g34
Nsg27
g0
(g22
g2
Ntp137
Rp138
(dp139
g26
I00
sg27
g0
(g44
g45
V\u000a
p140
tp141
Rp142
(dp143
g34
g0
(g22
g2
Ntp144
Rp145
(dp146
g26
I00
sg27
g0
(g44
g45
V\u000a
p147
tp148
Rp149
(dp150
g34
Nsg27
g0
(g22
g2
Ntp151
Rp152
(dp153
g26
I00
sg27
g0
(g44
g45
V\u000a
p154
tp155
Rp156
(dp157
g34
g0
(g22
g2
Ntp158
Rp159
(dp160
g26
I01
sg27
g0
(g44
g45
V is used to store lists of adjacent nodes.
p161
tp162
Rp163
(dp164
g34
g0
(g22
g2
Ntp165
Rp166
(dp167
g26
I00
sg27
g0
(g44
g45
V\u2018s 
p168
tp169
Rp170
(dp171
g34
g0
(g22
g2
Ntp172
Rp173
(dp174
g26
I00
sg27
g0
(g44
g45
V of graphs. 
p175
tp176
Rp177
(dp178
g34
g0
(g22
g2
Ntp179
Rp180
(dp181
g26
I00
sg27
g0
(g44
g45
V\u000aFollowing are  implementations of simple Depth First Traversal. The C++ implementation uses 
p182
tp183
Rp184
(dp185
g34
g0
(g22
g2
Ntp186
Rp187
(dp188
g26
I01
sg27
g0
(g44
g45
V for all applications of Depth First Traversal.
p189
tp190
Rp191
(dp192
g34
g0
(g22
g2
Ntp193
Rp194
(dp195
g26
I00
sg27
g0
(g44
g45
VSee 
p196
tp197
Rp198
(dp199
g34
Nsg27
g100
sg28
g194
sg37
g194
sg31
g100
sbsg28
g191
sg29
g70
sg31
g100
sg32
Nsg33
Nsg34
g198
sg35
(dp200
Vhref
p201
Vhttp://www.geeksforgeeks.org/archives/11644
p202
ssg37
g0
(g44
g45
Vthis post
p203
tp204
Rp205
(dp206
g34
Nsg27
g194
sg28
Nsg37
g191
sg31
g194
sbsg78
g79
sg80
I00
sg81
(lp207
g205
asbsg27
g205
sg28
g187
sg37
g187
sg31
g100
sbsg28
g184
sg29
Vbr
p208
sg31
g100
sg32
Nsg33
Nsg34
g191
sg35
(dp209
sg37
g184
sg78
g79
sg80
I00
sg81
(lp210
sbsg27
g187
sg28
g180
sg37
g180
sg31
g100
sbsg28
g177
sg29
g70
sg31
g100
sg32
Nsg33
Nsg34
g184
sg35
(dp211
Vhref
p212
Vhttp://en.wikipedia.org/wiki/Adjacency_list
p213
ssg37
g0
(g44
g45
Vadjacency list representation
p214
tp215
Rp216
(dp217
g34
Nsg27
g180
sg28
Nsg37
g177
sg31
g180
sbsg78
g79
sg80
I00
sg81
(lp218
g216
asbsg27
g216
sg28
g173
sg37
g173
sg31
g100
sbsg28
g170
sg29
g70
sg31
g100
sg32
Nsg33
Nsg34
g177
sg35
(dp219
Vhref
p220
Vhttp://en.wikipedia.org/wiki/Standard_Template_Library
p221
ssg37
g0
(g44
g45
VSTL
p222
tp223
Rp224
(dp225
g34
Nsg27
g173
sg28
Nsg37
g170
sg31
g173
sbsg78
g79
sg80
I00
sg81
(lp226
g224
asbsg27
g224
sg28
g166
sg37
g166
sg31
g100
sbsg28
g163
sg29
g70
sg31
g100
sg32
Nsg33
Nsg34
g170
sg35
(dp227
Vhref
p228
Vhttp://www.yolinux.com/TUTORIALS/LinuxTutorialC++STL.html#LIST
p229
ssg37
g0
(g44
g45
Vlist container
p230
tp231
Rp232
(dp233
g34
Nsg27
g166
sg28
Nsg37
g163
sg31
g166
sbsg78
g79
sg80
I00
sg81
(lp234
g232
asbsg27
g232
sg28
g159
sg37
g159
sg31
g100
sbsg28
g156
sg29
Vbr
p235
sg31
g100
sg32
Nsg33
Nsg34
g163
sg35
(dp236
sg37
g156
sg78
g79
sg80
I00
sg81
(lp237
sbsg27
g159
sg28
g152
sg37
g152
sg31
g100
sbsg28
Nsg29
Vdiv
p238
sg31
g100
sg32
Nsg33
Nsg34
g156
sg35
(dp239
Vclass
p240
(lp241
Vresponsive-tabs
p242
assg37
g149
sg78
g79
sg80
I00
sg81
(lp243
g149
ag145
ag142
ag138
asbsg28
g145
sg37
g145
sg31
g152
sbsg28
g142
sg29
Vh2
p244
sg31
g152
sg32
Nsg33
Nsg34
g149
sg35
(dp245
Vclass
p246
(lp247
Vtabtitle
p248
assg37
g0
(g44
g45
VC++
p249
tp250
Rp251
(dp252
g34
Nsg27
g145
sg28
Nsg37
g142
sg31
g145
sbsg78
g79
sg80
I00
sg81
(lp253
g251
asbsg27
g251
sg28
g138
sg37
g138
sg31
g152
sbsg28
Nsg29
Vdiv
p254
sg31
g152
sg32
Nsg33
Nsg34
g142
sg35
(dp255
Vclass
p256
(lp257
Vtabcontent
p258
assg37
g135
sg78
g79
sg80
I00
sg81
(lp259
g135
asbsg28
Nsg37
g131
sg31
g138
sbsg28
Nsg29
Vpre
p260
sg31
g24
sg32
Nsg33
Nsg34
g100
sg35
(dp261
Vclass
p262
(lp263
Vbrush:
p264
aVcpp;
p265
aVhighlight:
p266
aV[30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53];
p267
aVtitle:
p268
aV;
p269
aVnotranslate
p270
asVtitle
p271
g123
ssg37
g0
(g44
g45
V\u000a// C++ program to print DFS traversal from a given vertex in a  given graph\u000a#include<iostream>\u000a#include <list>\u000a\u000ausing namespace std;\u000a\u000a// Graph class represents a directed graph using adjacency list representation\u000aclass Graph\u000a{\u000a    int V;    // No. of vertices\u000a    list<int> *adj;    // Pointer to an array containing adjacency lists\u000a    void DFSUtil(int v, bool visited[]);  // A function used by DFS\u000apublic:\u000a    Graph(int V);   // Constructor\u000a    void addEdge(int v, int w);   // function to add an edge to graph\u000a    void DFS(int v);    // DFS traversal of the vertices reachable from v\u000a};\u000a\u000aGraph::Graph(int V)\u000a{\u000a    this->V = V;\u000a    adj = new list<int>[V];\u000a}\u000a\u000avoid Graph::addEdge(int v, int w)\u000a{\u000a    adj[v].push_back(w); // Add w to v\u2019s list.\u000a}\u000a\u000avoid Graph::DFSUtil(int v, bool visited[])\u000a{\u000a    // Mark the current node as visited and print it\u000a    visited[v] = true;\u000a    cout << v << " ";\u000a\u000a    // Recur for all the vertices adjacent to this vertex\u000a    list<int>::iterator i;\u000a    for (i = adj[v].begin(); i != adj[v].end(); ++i)\u000a        if (!visited[*i])\u000a            DFSUtil(*i, visited);\u000a}\u000a\u000a// DFS traversal of the vertices reachable from v. It uses recursive DFSUtil()\u000avoid Graph::DFS(int v)\u000a{\u000a    // Mark all the vertices as not visited\u000a    bool *visited = new bool[V];\u000a    for (int i = 0; i < V; i++)\u000a        visited[i] = false;\u000a\u000a    // Call the recursive helper function to print DFS traversal\u000a    DFSUtil(v, visited);\u000a}\u000a\u000aint main()\u000a{\u000a    // Create a graph given in the above diagram\u000a    Graph g(4);\u000a    g.addEdge(0, 1);\u000a    g.addEdge(0, 2);\u000a    g.addEdge(1, 2);\u000a    g.addEdge(2, 0);\u000a    g.addEdge(2, 3);\u000a    g.addEdge(3, 3);\u000a\u000a    cout << "Following is Depth First Traversal (starting from vertex 2) \u005cn";\u000a    g.DFS(2);\u000a\u000a    return 0;\u000a}\u000a
p272
tp273
Rp274
(dp275
g34
Nsg27
g131
sg28
Nsg37
Nsg31
g131
sbsg78
g79
sg80
I00
sg81
(lp276
g274
asbsg29
Vp
p277
sg31
g24
sg32
Nsg33
Nsg34
g42
sg35
(dp278
sg37
g198
sg78
g79
sg80
I00
sg81
(lp279
g198
ag194
ag191
ag187
ag184
ag180
ag177
ag173
ag170
ag166
ag163
ag159
ag156
ag152
asbsg29
g277
sg31
g24
sg32
Nsg33
Nsg34
g39
sg35
(dp280
sg37
g106
sg78
g79
sg80
I00
sg81
(lp281
g106
asbsg29
g277
sg31
g24
sg32
Nsg33
Nsg34
Nsg35
(dp282
sg37
g68
sg78
g79
sg80
I00
sg81
(lp283
g68
ag65
ag61
ag58
ag54
ag51
ag48
asbsg78
Nsg80
I00
sg81
(lp284
g39
ag42
ag100
ag131
asbsS'raw_page'
p285
S'<!DOCTYPE html>\r\n<!--[if IE 7]>\r\n<html class="ie ie7" lang="en-US" prefix="og: http://ogp.me/ns#">\r\n<![endif]-->\r\n<!--[if IE 8]>\r\n<html class="ie ie8" lang="en-US" prefix="og: http://ogp.me/ns#">\r\n<![endif]-->\r\n<!--[if !(IE 7) | !(IE 8)  ]><!-->\r\n<html lang="en-US" prefix="og: http://ogp.me/ns#">\r\n<!--<![endif]-->\r\n<head>\r\n<meta charset="UTF-8" />\r\n<meta name="viewport" content="width=device-width" />\r\n\r\n<meta property="og:image" content="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/gfg_200X200.png">\r\n<meta property="og:image:type" content="image/png">\r\n<meta property="og:image:width" content="200">\r\n<meta property="og:image:height" content="200">\r\n\r\n<title>Depth First Traversal for a Graph - GeeksforGeeks</title>\r\n<link rel="profile" href="http://gmpg.org/xfn/11" />\r\n<link rel="pingback" href="http://www.geeksforgeeks.org/xmlrpc.php" />\r\n<!--[if lt IE 9]>\r\n<script src="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/js/html5.js" type="text/javascript"></script>\r\n<![endif]-->\r\n\n<!-- This site is optimized with the Yoast SEO plugin v3.0.7 - https://yoast.com/wordpress/plugins/seo/ -->\n<link rel="canonical" href="http://www.geeksforgeeks.org/depth-first-traversal-for-a-graph/" />\n<meta property="og:locale" content="en_US" />\n<meta property="og:type" content="article" />\n<meta property="og:title" content="Depth First Traversal for a Graph - GeeksforGeeks" />\n<meta property="og:description" content="Depth First Traversal (or Search) for a graph is similar to Depth First Traversal of a tree. The only catch here is, unlike trees, graphs may contain cycles, so we may come to the same node again. To avoid processing a node more than once, we use a boolean visited array. For example, in the\xe2\x80\xa6 Read More &raquo;" />\n<meta property="og:url" content="http://www.geeksforgeeks.org/depth-first-traversal-for-a-graph/" />\n<meta property="og:site_name" content="GeeksforGeeks" />\n<meta property="article:tag" content="Graph" />\n<meta property="article:section" content="Graph" />\n<meta property="article:published_time" content="2012-03-15T08:26:31+00:00" />\n<meta property="article:modified_time" content="2015-10-23T19:15:55+00:00" />\n<meta property="og:updated_time" content="2015-10-23T19:15:55+00:00" />\n<meta property="og:image" content="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/DFS.jpg" />\n<!-- / Yoast SEO plugin. -->\n\n\t\t<script type="text/javascript">\n\t\t\twindow._wpemojiSettings = {"baseUrl":"http:\\/\\/s.w.org\\/images\\/core\\/emoji\\/72x72\\/","ext":".png","source":{"concatemoji":"http:\\/\\/www.geeksforgeeks.org\\/wp-includes\\/js\\/wp-emoji-release.min.js"}};\n\t\t\t!function(a,b,c){function d(a){var c=b.createElement("canvas"),d=c.getContext&&c.getContext("2d");return d&&d.fillText?(d.textBaseline="top",d.font="600 32px Arial","flag"===a?(d.fillText(String.fromCharCode(55356,56812,55356,56807),0,0),c.toDataURL().length>3e3):(d.fillText(String.fromCharCode(55357,56835),0,0),0!==d.getImageData(16,16,1,1).data[0])):!1}function e(a){var c=b.createElement("script");c.src=a,c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f,g;c.supports={simple:d("simple"),flag:d("flag")},c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.simple&&c.supports.flag||(g=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",g,!1),a.addEventListener("load",g,!1)):(a.attachEvent("onload",g),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&&f.twemoji&&(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);\n\t\t</script>\n\t\t<style type="text/css">\nimg.wp-smiley,\nimg.emoji {\n\tdisplay: inline !important;\n\tborder: none !important;\n\tbox-shadow: none !important;\n\theight: 1em !important;\n\twidth: 1em !important;\n\tmargin: 0 .07em !important;\n\tvertical-align: -0.1em !important;\n\tbackground: none !important;\n\tpadding: 0 !important;\n}\n</style>\n<link rel=\'stylesheet\' id=\'wp-pagenavi-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/wp-pagenavi/pagenavi-css.css\' type=\'text/css\' media=\'all\' />\n<link rel=\'stylesheet\' id=\'themonic-fonts-css\'  href=\'http://fonts.googleapis.com/css?family=Ubuntu:400,700&#038;subset=latin,latin-ext\' type=\'text/css\' media=\'all\' />\n<link rel=\'stylesheet\' id=\'themonic-style-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/style.css\' type=\'text/css\' media=\'all\' />\n<link rel=\'stylesheet\' id=\'custom-style-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/custom.css\' type=\'text/css\' media=\'all\' />\n<!--[if lt IE 9]>\n<link rel=\'stylesheet\' id=\'themonic-ie-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/css/ie.css\' type=\'text/css\' media=\'all\' />\n<![endif]-->\n<meta name="generator" content="WordPress 4.2.7" />\n<style type="text/css" id="custom-background-css">\nbody.custom-background { background-color: #ffffff; }\n</style>\n<style type="text/css" id="syntaxhighlighteranchor"></style>\n<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<script>\r\n  (adsbygoogle = window.adsbygoogle || []).push({\r\n    google_ad_client: "ca-pub-9465609616171866",\r\n    enable_page_level_ads: true\r\n  });\r\n</script>\r\n</head>\r\n<body class="single single-post postid-18212 single-format-standard custom-background custom-background-white custom-font-enabled">\r\n<div id="page" class="hfeed site">\r\n\t<header id="masthead" class="site-header" role="banner">\r\n\t\t\t\t\t<hgroup>\r\n\t\t\t<a href="http://www.geeksforgeeks.org/" title="GeeksforGeeks" rel="home">GeeksforGeeks</a>\r\n\t\t\t\t<br .../> <a class="site-description">A computer science portal for geeks</a>\r\n\t\t</hgroup>\r\n\r\n<div style="float:right;">\r\n<hgroup style="float:right;">   \r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://www.geeksforgeeks.org/campus-ambassador-program-by-geeksforgeeks/">CA</a>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://geeksquiz.com/gate-corner-2/">GATE CS</a>\r\n\r\n<strong><a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://practice.geeksforgeeks.org/">Practice</a></strong>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://www.geeksforgeeks.org/suggest/">Suggest</a>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://code.geeksforgeeks.org/">IDE</a>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://qa.geeksforgeeks.org/">Q&A</a>\r\n\r\n<a style="padding:0px 30px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://geeksquiz.com/">GeeksQuiz</a>\r\n\r\n</hgroup><br></br>\r\n\r\n<span style="display:inline-block; width:300px;float:right;">\r\n<script>\r\n  (function() {\r\n    var cx = \'009682134359037907028:tj6eafkv_be\';\r\n    var gcse = document.createElement(\'script\');\r\n    gcse.type = \'text/javascript\';\r\n    gcse.async = true;\r\n    gcse.src = (document.location.protocol == \'https:\' ? \'https:\' : \'http:\') +\r\n        \'//cse.google.com/cse.js?cx=\' + cx;\r\n    var s = document.getElementsByTagName(\'script\')[0];\r\n    s.parentNode.insertBefore(gcse, s);\r\n  })();\r\n</script>\r\n<gcse:search></gcse:search>\r\n\r\n<style type="text/css">\r\n  .gsc-control-cse {\r\n     padding: 0px 10px;\r\n  } \r\n\r\n  .gsc-control-cse {\r\n    font-family: "Trebuchet MS", sans-serif;\r\n    /*border-color: #E1F3DA;*/\r\n    /*background-color: #E1F3DA;*/\r\n  }\r\n  input.gsc-input {\r\n    border-color: #94CC7A;\r\n  }\r\n  input.gsc-search-button {\r\n    border-color: #94CC7A;\r\n    background-color: #4CB96B;\r\n    margin-top:7px;\r\n  }\r\n  .gsc-tabHeader.gsc-tabhInactive {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gsc-tabHeader.gsc-tabhActive {\r\n    border-color: #A9DA92;\r\n    background-color: #A9DA92;\r\n  }\r\n  .gsc-tabsArea {\r\n    border-color: #A9DA92;\r\n  }\r\n  .gsc-webResult.gsc-result {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gsc-webResult.gsc-result:hover {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:link,\r\n  .gs-webResult.gs-result a.gs-title:link b {\r\n    color: #009900;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:visited,\r\n  .gs-webResult.gs-result a.gs-title:visited b {\r\n    color: #009900;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:hover,\r\n  .gs-webResult.gs-result a.gs-title:hover b {\r\n    color: #003300;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:active,\r\n  .gs-webResult.gs-result a.gs-title:active b {\r\n    color: #009900;\r\n  }\r\n  .gsc-cursor-page {\r\n    color: #009900;\r\n  }\r\n  a.gsc-trailing-more-results:link {\r\n    color: #009900;\r\n  }\r\n  .gs-webResult.gs-result .gs-snippet {\r\n    color: #454545;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl {\r\n    color: #33cc00;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl-short {\r\n    color: #33cc00;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl-short {\r\n    display: none;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl-long {\r\n    display: block;\r\n  }\r\n  .gsc-cursor-box {\r\n    border-color: #A9DA92;\r\n  }\r\n  .gsc-results .gsc-cursor-page {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {\r\n    border-color: #A9DA92;\r\n    background-color: #A9DA92;\r\n  }\r\n  .gs-promotion.gs-result {\r\n    border-color: #94CC7A;\r\n    background-color: #CBE8B4;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:link {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:visited {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:hover {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:active {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result .gs-snippet {\r\n    color: #454545;\r\n  }\r\n  .gs-promotion.gs-result .gs-visibleUrl,\r\n  .gs-promotion.gs-result .gs-visibleUrl-short {\r\n    color: #815FA7;\r\n  }\r\n  .gsib_a {\r\n    padding : 2px;\r\n  }\r\n</style>    \r\n</span>\r\n</div>\r\n\r\n\t\t\r\n\t\t\r\n\t\t<nav id="site-navigation" class="themonic-nav" role="navigation">\r\n\t\t\t<a class="assistive-text" href="#content" title="Skip to content">Skip to content</a>\r\n\t\t\t<div class="menu-iconic-container"><ul id="menu-top" class="nav-menu"><li id="menu-item-135003" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-135003"><a href="http://www.geeksforgeeks.org/">Home</a></li>\n<li id="menu-item-135004" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-135004"><a title="Algorithms" href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algo</a>\n<ul class="sub-menu">\n\t<li id="menu-item-135030" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135030"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#AnalysisofAlgorithms">Analysis of Algorithms</a></li>\n\t<li id="menu-item-135031" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135031"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#SearchingandSorting">Searching and Sorting</a></li>\n\t<li id="menu-item-135032" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135032"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#GreedyAlgorithms">Greedy Algorithms</a></li>\n\t<li id="menu-item-135033" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135033"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#DynamicProgramming">Dynamic Programming</a></li>\n\t<li id="menu-item-135034" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135034"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#PatternSearching">Pattern Searching</a></li>\n\t<li id="menu-item-135035" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135035"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#OtherStringAlgorithms">Other String Algorithms</a></li>\n\t<li id="menu-item-135036" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135036"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#Backtracking">Backtracking</a></li>\n\t<li id="menu-item-135037" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135037"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#DivideandConquer">Divide and Conquer</a></li>\n\t<li id="menu-item-135038" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135038"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#GeometricAlgorithms">Geometric Algorithms</a></li>\n\t<li id="menu-item-135039" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135039"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#MathematicalAlgorithms">Mathematical Algorithms</a></li>\n\t<li id="menu-item-135040" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135040"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#BitAlgorithms">Bit Algorithms</a></li>\n\t<li id="menu-item-135041" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135041"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#GraphAlgorithms">Graph Algorithms</a></li>\n\t<li id="menu-item-135042" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135042"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#RandomizedAlgorithms">Randomized Algorithms</a></li>\n</ul>\n</li>\n<li id="menu-item-135010" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-135010"><a title="Data Structures" href="http://www.geeksforgeeks.org/data-structures/">DS</a>\n<ul class="sub-menu">\n\t<li id="menu-item-135045" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135045"><a href="http://www.geeksforgeeks.org/data-structures/#LinkedList">LinkedList</a></li>\n\t<li id="menu-item-135046" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135046"><a href="http://www.geeksforgeeks.org/data-structures/#Stack">Stack</a></li>\n\t<li id="menu-item-135047" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135047"><a href="http://www.geeksforgeeks.org/data-structures/#Queue">Queue</a></li>\n\t<li id="menu-item-135048" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135048"><a href="http://www.geeksforgeeks.org/data-structures/#BinaryTree">Binary Tree</a></li>\n\t<li id="menu-item-135049" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135049"><a href="http://www.geeksforgeeks.org/data-structures/#BinarySearchTree">Binary Search Tree</a></li>\n\t<li id="menu-item-135050" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135050"><a href="http://www.geeksforgeeks.org/data-structures/#Heap">Heap</a></li>\n\t<li id="menu-item-135051" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135051"><a href="http://www.geeksforgeeks.org/data-structures/#Hashing">Hashing</a></li>\n\t<li id="menu-item-135052" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135052"><a href="http://www.geeksforgeeks.org/data-structures/#Graph">Graph</a></li>\n\t<li id="menu-item-135053" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135053"><a href="http://www.geeksforgeeks.org/data-structures/#AdvancedDataStructure">Advanced Data Structure</a></li>\n\t<li id="menu-item-135054" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135054"><a href="http://www.geeksforgeeks.org/data-structures/#Array">Array</a></li>\n\t<li id="menu-item-135055" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135055"><a href="http://www.geeksforgeeks.org/data-structures/#Matrix">Matrix</a></li>\n\t<li id="menu-item-135056" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135056"><a href="http://www.geeksforgeeks.org/data-structures/#Misc">Misc</a></li>\n</ul>\n</li>\n<li id="menu-item-135014" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135014"><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview</a></li>\n<li id="menu-item-135006" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135006"><a href="http://www.geeksforgeeks.org/c/">C</a></li>\n<li id="menu-item-135007" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135007"><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>\n<li id="menu-item-135012" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135012"><a href="http://www.geeksforgeeks.org/java/">Java</a></li>\n<li id="menu-item-137004" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-137004"><a href="http://www.geeksforgeeks.org/python/">Python</a></li>\n<li id="menu-item-135009" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135009"><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>\n<li id="menu-item-135016" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135016"><a href="http://qa.geeksforgeeks.org/index.php?qa=ask">Ask a Q</a></li>\n<li id="menu-item-135077" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135077"><a href="https://play.google.com/store/apps/details?id=free.programming.programming">AndroidApp</a></li>\n<li id="menu-item-135367" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135367"><a href="http://www.geeksforgeeks.org/category/guestblogs/">GBlog</a></li>\n<li id="menu-item-135028" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135028"><a href="http://www.geeksforgeeks.org/category/gfact/">GFact</a></li>\n<li id="menu-item-136004" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-136004"><a href="http://www.geeksforgeeks.org/category/project/">Project</a></li>\n<li id="menu-item-136978" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-136978"><a href="http://www.geeksforgeeks.org/jobs/">Jobs</a></li>\n<li id="menu-item-135019" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135019"><a href="http://www.geeksforgeeks.org/category/c-arrays/">Arr</a></li>\n<li id="menu-item-135022" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135022"><a href="http://www.geeksforgeeks.org/category/c-strings/">String</a></li>\n<li id="menu-item-135937" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135937"><a href="http://www.geeksforgeeks.org/category/matrix/">Matrix</a></li>\n<li id="menu-item-135023" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135023"><a href="http://www.geeksforgeeks.org/category/linked-list/">Linked List</a></li>\n<li id="menu-item-135029" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135029"><a href="http://www.geeksforgeeks.org/category/stack/">Stack</a></li>\n<li id="menu-item-135932" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135932"><a href="http://www.geeksforgeeks.org/category/queue/">Q</a></li>\n<li id="menu-item-136299" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-136299"><a href="http://www.geeksforgeeks.org/category/hash/">Hash</a></li>\n<li id="menu-item-135941" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135941"><a href="http://www.geeksforgeeks.org/category/heap/">Heap</a></li>\n<li id="menu-item-135020" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135020"><a href="http://www.geeksforgeeks.org/category/tree/">Tree</a></li>\n<li id="menu-item-135940" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135940"><a href="http://www.geeksforgeeks.org/category/binary-search-tree/">BST</a></li>\n<li id="menu-item-135024" class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-parent current-post-parent menu-item-135024"><a href="http://www.geeksforgeeks.org/category/graph/">Graph</a></li>\n<li id="menu-item-135017" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135017"><a href="http://www.geeksforgeeks.org/category/c-puzzles/">C/C++</a></li>\n<li id="menu-item-135027" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135027"><a href="http://www.geeksforgeeks.org/category/bit-magic/">Bit</a></li>\n<li id="menu-item-135021" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135021"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/">MCQ</a></li>\n<li id="menu-item-135018" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135018"><a href="http://www.geeksforgeeks.org/category/c-programs/">Misc</a></li>\n<li id="menu-item-135025" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135025"><a href="http://www.geeksforgeeks.org/category/program-output/">O/P</a></li>\n</ul></div>\t\t</nav><!-- #site-navigation -->\r\n\t\t<div class="clear"></div>\r\n\t</header><!-- #masthead -->\r\n\r\n\t<div id="main" class="wrapper">\t<div id="primary" class="site-content">\r\n\t\t<div id="content" role="main">\r\n\r\n\t\t\t\t\t\t\t\r\n\t<article id="post-18212" class="post-18212 post type-post status-publish format-standard hentry category-graph tag-graph">\r\n\t\t\t\t<header class="entry-header">\r\n\t\t\t\t\t\t<h1 class="entry-title">Depth First Traversal for a Graph</h1>\r\n\t\t\t\t\r\n\t\t\t</header><!-- .entry-header -->\r\n\r\n\t\t\t\t<div class="entry-content">\r\n\t\t\t<p><a href="http://en.wikipedia.org/wiki/Depth-first_search">Depth First Traversal (or Search)</a> for a graph is similar to <a href="http://www.geeksforgeeks.org/archives/618">Depth First Traversal of a tree</a>.  The only catch here is, unlike trees, graphs may contain cycles, so we may come to the same node again. To avoid processing a node more than once, we use a boolean visited array. <span id="more-18212"></span><br />\nFor example, in the following graph, we start traversal from vertex 2. When we come to vertex 0, we look for all adjacent vertices of it. 2 is also an adjacent vertex of 0. If we don&#8217;t mark visited vertices, then 2 will be processed again and it will become a non-terminating process. A Depth First Traversal of the following graph is 2, 0, 1, 3.  </p>\n<p><a href="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/DFS.jpg"><img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/DFS.jpg" alt="" title="DFS" width="422" height="181" class="aligncenter size-full wp-image-18349" /></a></p>\n<p>See <a href="http://www.geeksforgeeks.org/archives/11644">this post</a> for all applications of Depth First Traversal.<br />\nFollowing are  implementations of simple Depth First Traversal. The C++ implementation uses <a href="http://en.wikipedia.org/wiki/Adjacency_list">adjacency list representation</a> of graphs. <a href="http://en.wikipedia.org/wiki/Standard_Template_Library">STL</a>&#8216;s <a href="http://www.yolinux.com/TUTORIALS/LinuxTutorialC++STL.html#LIST">list container</a> is used to store lists of adjacent nodes.<br />\n<div class="responsive-tabs">\n<h2 class="tabtitle">C++</h2>\n<div class="tabcontent">\n</p>\n<pre class="brush: cpp; highlight: [30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53]; title: ; notranslate" title="">\r\n// C++ program to print DFS traversal from a given vertex in a  given graph\r\n#include&lt;iostream&gt;\r\n#include &lt;list&gt;\r\n\r\nusing namespace std;\r\n\r\n// Graph class represents a directed graph using adjacency list representation\r\nclass Graph\r\n{\r\n    int V;    // No. of vertices\r\n    list&lt;int&gt; *adj;    // Pointer to an array containing adjacency lists\r\n    void DFSUtil(int v, bool visited[]);  // A function used by DFS\r\npublic:\r\n    Graph(int V);   // Constructor\r\n    void addEdge(int v, int w);   // function to add an edge to graph\r\n    void DFS(int v);    // DFS traversal of the vertices reachable from v\r\n};\r\n\r\nGraph::Graph(int V)\r\n{\r\n    this-&gt;V = V;\r\n    adj = new list&lt;int&gt;[V];\r\n}\r\n\r\nvoid Graph::addEdge(int v, int w)\r\n{\r\n    adj[v].push_back(w); // Add w to v\xe2\x80\x99s list.\r\n}\r\n\r\nvoid Graph::DFSUtil(int v, bool visited[])\r\n{\r\n    // Mark the current node as visited and print it\r\n    visited[v] = true;\r\n    cout &lt;&lt; v &lt;&lt; &quot; &quot;;\r\n\r\n    // Recur for all the vertices adjacent to this vertex\r\n    list&lt;int&gt;::iterator i;\r\n    for (i = adj[v].begin(); i != adj[v].end(); ++i)\r\n        if (!visited[*i])\r\n            DFSUtil(*i, visited);\r\n}\r\n\r\n// DFS traversal of the vertices reachable from v. It uses recursive DFSUtil()\r\nvoid Graph::DFS(int v)\r\n{\r\n    // Mark all the vertices as not visited\r\n    bool *visited = new bool[V];\r\n    for (int i = 0; i &lt; V; i++)\r\n        visited[i] = false;\r\n\r\n    // Call the recursive helper function to print DFS traversal\r\n    DFSUtil(v, visited);\r\n}\r\n\r\nint main()\r\n{\r\n    // Create a graph given in the above diagram\r\n    Graph g(4);\r\n    g.addEdge(0, 1);\r\n    g.addEdge(0, 2);\r\n    g.addEdge(1, 2);\r\n    g.addEdge(2, 0);\r\n    g.addEdge(2, 3);\r\n    g.addEdge(3, 3);\r\n\r\n    cout &lt;&lt; &quot;Following is Depth First Traversal (starting from vertex 2) \\n&quot;;\r\n    g.DFS(2);\r\n\r\n    return 0;\r\n}\r\n</pre>\n\n</div><h2 class="tabtitle">Java</h2>\n<div class="tabcontent">\n\n<pre class="brush: java; highlight: [29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55]; title: ; notranslate" title="">\r\n// Java program to print DFS traversal from a given given graph\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\n// This class represents a directed graph using adjacency list\r\n// representation\r\nclass Graph\r\n{\r\n    private int V;   // No. of vertices\r\n\r\n    // Array  of lists for Adjacency List Representation\r\n    private LinkedList&lt;Integer&gt; adj[];\r\n\r\n    // Constructor\r\n    Graph(int v)\r\n    {\r\n        V = v;\r\n        adj = new LinkedList[v];\r\n        for (int i=0; i&lt;v; ++i)\r\n            adj[i] = new LinkedList();\r\n    }\r\n\r\n    //Function to add an edge into the graph\r\n    void addEdge(int v, int w)\r\n    {\r\n        adj[v].add(w);  // Add w to v\'s list.\r\n    }\r\n\r\n    // A function used by DFS\r\n    void DFSUtil(int v,boolean visited[])\r\n    {\r\n        // Mark the current node as visited and print it\r\n        visited[v] = true;\r\n        System.out.print(v+&quot; &quot;);\r\n\r\n        // Recur for all the vertices adjacent to this vertex\r\n        Iterator&lt;Integer&gt; i = adj[v].listIterator();\r\n        while (i.hasNext())\r\n        {\r\n            int n = i.next();\r\n            if (!visited[n])\r\n                DFSUtil(n, visited);\r\n        }\r\n    }\r\n\r\n    // The function to do DFS traversal. It uses recursive DFSUtil()\r\n    void DFS(int v)\r\n    {\r\n        // Mark all the vertices as not visited(set as\r\n        // false by default in java)\r\n        boolean visited[] = new boolean[V];\r\n\r\n        // Call the recursive helper function to print DFS traversal\r\n        DFSUtil(v, visited);\r\n    }\r\n\r\n    public static void main(String args[])\r\n    {\r\n        Graph g = new Graph(4);\r\n\r\n        g.addEdge(0, 1);\r\n        g.addEdge(0, 2);\r\n        g.addEdge(1, 2);\r\n        g.addEdge(2, 0);\r\n        g.addEdge(2, 3);\r\n        g.addEdge(3, 3);\r\n\r\n        System.out.println(&quot;Following is Depth First Traversal &quot;+\r\n                           &quot;(starting from vertex 2)&quot;);\r\n\r\n        g.DFS(2);\r\n    }\r\n}\r\n// This code is contributed by Aakash Hasija\r\n</pre>\n<p></div></div><br />\nOutput:</p>\n<pre>\r\nFollowing is Depth First Traversal (starting from vertex 2)\r\n2 0 1 3\r\n</pre>\n<p>Note that the above code traverses only the vertices reachable from a given source vertex. All the vertices may not be reachable from a given vertex (example Disconnected graph). To do complete DFS traversal of such graphs, we must call DFSUtil() for every vertex. Also, before calling DFSUtil(), we should check if it is already printed by some other call of DFSUtil().  Following implementation does the complete graph traversal even if the nodes are unreachable. The differences from the above code are highlighted in the below code.<br />\n<div class="responsive-tabs">\n<h2 class="tabtitle">C++</h2>\n<div class="tabcontent">\n</p>\n<pre class="brush: cpp; highlight: [13,41,42,43,44,45,46,47,48,49,50,51,52,53,54]; title: ; notranslate" title="">\r\n// C++ program to print DFS traversal for a given given graph\r\n#include&lt;iostream&gt;\r\n#include &lt;list&gt;\r\nusing namespace std;\r\n\r\nclass Graph\r\n{\r\n    int V;    // No. of vertices\r\n    list&lt;int&gt; *adj;    // Pointer to an array containing adjacency lists\r\n    void DFSUtil(int v, bool visited[]);  // A function used by DFS\r\npublic:\r\n    Graph(int V);   // Constructor\r\n    void addEdge(int v, int w);   // function to add an edge to graph\r\n    void DFS();    // prints DFS traversal of the complete graph\r\n};\r\n\r\nGraph::Graph(int V)\r\n{\r\n    this-&gt;V = V;\r\n    adj = new list&lt;int&gt;[V];\r\n}\r\n\r\nvoid Graph::addEdge(int v, int w)\r\n{\r\n    adj[v].push_back(w); // Add w to v\xe2\x80\x99s list.\r\n}\r\n\r\nvoid Graph::DFSUtil(int v, bool visited[])\r\n{\r\n    // Mark the current node as visited and print it\r\n    visited[v] = true;\r\n    cout &lt;&lt; v &lt;&lt; &quot; &quot;;\r\n\r\n    // Recur for all the vertices adjacent to this vertex\r\n    list&lt;int&gt;::iterator i;\r\n    for(i = adj[v].begin(); i != adj[v].end(); ++i)\r\n        if(!visited[*i])\r\n            DFSUtil(*i, visited);\r\n}\r\n\r\n// The function to do DFS traversal. It uses recursive DFSUtil()\r\nvoid Graph::DFS()\r\n{\r\n    // Mark all the vertices as not visited\r\n    bool *visited = new bool[V];\r\n    for (int i = 0; i &lt; V; i++)\r\n        visited[i] = false;\r\n\r\n    // Call the recursive helper function to print DFS traversal\r\n    // starting from all vertices one by one\r\n    for (int i = 0; i &lt; V; i++)\r\n        if (visited[i] == false)\r\n            DFSUtil(i, visited);\r\n}\r\n\r\nint main()\r\n{\r\n    // Create a graph given in the above diagram\r\n    Graph g(4);\r\n    g.addEdge(0, 1);\r\n    g.addEdge(0, 2);\r\n    g.addEdge(1, 2);\r\n    g.addEdge(2, 0);\r\n    g.addEdge(2, 3);\r\n    g.addEdge(3, 3);\r\n\r\n    cout &lt;&lt; &quot;Following is Depth First Traversal\\n&quot;;\r\n    g.DFS();\r\n\r\n    return 0;\r\n}\r\n</pre>\n\n</div><h2 class="tabtitle">Java</h2>\n<div class="tabcontent">\n\n<pre class="brush: java; highlight: [29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58]; title: ; notranslate" title="">\r\n// Java program to print DFS traversal from a given given graph\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\n// This class represents a directed graph using adjacency list\r\n// representation\r\nclass Graph\r\n{\r\n    private int V;   // No. of vertices\r\n\r\n    // Array  of lists for Adjacency List Representation\r\n    private LinkedList&lt;Integer&gt; adj[];\r\n\r\n    // Constructor\r\n    Graph(int v)\r\n    {\r\n        V = v;\r\n        adj = new LinkedList[v];\r\n        for (int i=0; i&lt;v; ++i)\r\n            adj[i] = new LinkedList();\r\n    }\r\n\r\n    //Function to add an edge into the graph\r\n    void addEdge(int v, int w)\r\n    {\r\n        adj[v].add(w);\t// Add w to v\'s list.\r\n    }\r\n\r\n    // A function used by DFS\r\n    void DFSUtil(int v,boolean visited[])\r\n    {\r\n        // Mark the current node as visited and print it\r\n        visited[v] = true;\r\n        System.out.print(v+&quot; &quot;);\r\n\r\n        // Recur for all the vertices adjacent to this vertex\r\n        Iterator&lt;Integer&gt; i = adj[v].listIterator();\r\n        while (i.hasNext())\r\n        {\r\n            int n = i.next();\r\n            if (!visited[n])\r\n                DFSUtil(n,visited);\r\n        }\r\n    }\r\n\r\n    // The function to do DFS traversal. It uses recursive DFSUtil()\r\n    void DFS()\r\n    {\r\n        // Mark all the vertices as not visited(set as\r\n        // false by default in java)\r\n        boolean visited[] = new boolean[V];\r\n\r\n        // Call the recursive helper function to print DFS traversal\r\n        // starting from all vertices one by one\r\n        for (int i=0; i&lt;V; ++i)\r\n            if (visited[i] == false)\r\n                DFSUtil(i, visited);\r\n    }\r\n\r\n    public static void main(String args[])\r\n    {\r\n        Graph g = new Graph(4);\r\n\r\n        g.addEdge(0, 1);\r\n        g.addEdge(0, 2);\r\n        g.addEdge(1, 2);\r\n        g.addEdge(2, 0);\r\n        g.addEdge(2, 3);\r\n        g.addEdge(3, 3);\r\n\r\n        System.out.println(&quot;Following is Depth First Traversal&quot;);\r\n\r\n        g.DFS();\r\n    }\r\n}\r\n// This code is contributed by Aakash Hasija\r\n</pre>\n<p></div></div><br />\nOutput:\n<pre>Following is Depth First Traversal\r\n0 1 2 3</pre>\n<p>Time Complexity: O(V+E) where V is number of vertices in the graph and E is number of edges in the graph. </p>\n<p><a href="http://www.geeksforgeeks.org/breadth-first-traversal-for-a-graph/">Breadth First Traversal for a Graph</a></p>\n<p>Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.</p>\n\r\n\t\t\t<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<!-- Big Rectangle Blog Bottom -->\r\n<ins class="adsbygoogle"\r\n     style="display:inline-block;width:336px;height:280px"\r\n     data-ad-client="ca-pub-9465609616171866"\r\n     data-ad-slot="4061219431"></ins>\r\n<script>\r\n(adsbygoogle = window.adsbygoogle || []).push({});\r\n</script>\r\n<br></br>\r\n\t\t</div><!-- .entry-content -->\r\n\t\t\t\t\r\n\t\t\r\n\r\n\t\t<footer class="entry-meta">\r\n\t\t<span class="post-comment"><a href="http://www.geeksforgeeks.org/depth-first-traversal-for-a-graph/#comments" class="commentslink" ><span class="dsq-postid" data-dsqidentifier="18212 http://www.geeksforgeeks.org/?p=18212">27 Comments</span></a> <!--added for comments by Shubham-->\r\n\t\t</span><span>Category: <a href="http://www.geeksforgeeks.org/category/graph/" rel="category tag">Graph</a></span> <span>Tags: <a href="http://www.geeksforgeeks.org/tag/graph/" rel="tag">Graph</a></span> \r\n           \t          \t\r\n\t\t\t\t\t</footer><!-- .entry-meta -->\r\n\t</article><!-- #post -->\r\n<div class="related_posts"><h3>Related Posts:</h3><ul><li><a href="http://www.geeksforgeeks.org/number-of-triangles-in-directed-and-undirected-graphs/" title="Number of Triangles in Directed and Undirected Graphs">Number of Triangles in Directed and Undirected Graphs</a></li><li><a href="http://www.geeksforgeeks.org/number-of-triangles-in-a-undirected-graph/" title="Number of Triangles in an Undirected Graph">Number of Triangles in an Undirected Graph</a></li><li><a href="http://www.geeksforgeeks.org/iterative-depth-first-traversal/" title="Iterative Depth First Traversal of Graph">Iterative Depth First Traversal of Graph</a></li><li><a href="http://www.geeksforgeeks.org/print-all-jumping-numbers-smaller-than-or-equal-to-a-given-value/" title="Print all Jumping Numbers smaller than or equal to a given value">Print all Jumping Numbers smaller than or equal to a given value</a></li><li><a href="http://www.geeksforgeeks.org/hopcroft-karp-algorithm-for-maximum-matching-set-2-implementation/" title="Hopcroft\xe2\x80\x93Karp Algorithm for Maximum Matching | Set 2 (Implementation)">Hopcroft\xe2\x80\x93Karp Algorithm for Maximum Matching | Set 2 (Implementation)</a></li><li><a href="http://www.geeksforgeeks.org/hopcroft-karp-algorithm-for-maximum-matching-set-1-introduction/" title="Hopcroft\xe2\x80\x93Karp Algorithm for Maximum Matching | Set 1 (Introduction)">Hopcroft\xe2\x80\x93Karp Algorithm for Maximum Matching | Set 1 (Introduction)</a></li><li><a href="http://www.geeksforgeeks.org/length-of-shortest-chain-to-reach-a-target-word/" title="Length of shortest chain to reach a target word">Length of shortest chain to reach a target word</a></li><li><a href="http://www.geeksforgeeks.org/find-same-contacts-in-a-list-of-contacts/" title="Find same contacts in a list of contacts">Find same contacts in a list of contacts</a></li></ul></div><br></br>\r\n\r\n<!-- Added on 29 Oct 2015 for next and previous from same category -->\r\n<nav class="nav-single">\r\n\t\t\t\t\t<div class="assistive-text">Post navigation</div>\r\n\t\t\t\t\t<span class="nav-previous"><a href="http://www.geeksforgeeks.org/g-fact-83/" rel="prev">Previous post in category</a></span>\r\n\t\t\t\t\t<span class="nav-next"><a href="http://www.geeksforgeeks.org/breadth-first-traversal-for-a-graph/" rel="next">Next post in category</a></span>\r\n\t\t\t\t</nav><!-- .nav-single -->\r\n\r\n\r\n<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>\r\n    <script type="text/javascript">\r\n    $(document).ready(function(){\r\n        $.ajax({\r\n            url:"http://courses.geeksforgeeks.org/plugin.php",\r\n            method:"POST",\r\n            dataType:"json",\r\n            data:{post_id:$("#ratePlugin").attr("pid"),url:window.location.href},\r\n            xhrFields:{withCredentials:true},\r\n            success:function(response){\r\n                $("#ratePlugin").html(response.rate);\r\n                $("#markPlugin").html(response.mark);\r\n            },\r\n            complete:function(){\r\n                $(".box").click(function(){\r\n                    rrequest({post_id:$("#ratePlugin").attr("pid"),post_title:$("#ratePlugin").attr("ptitle"),rating:$(this).attr("rating"),url:window.location.href});\r\n                });\r\n                $(".mark").click(function(){\r\n                    mrequest({post_id:$("#markPlugin").attr("pid"),post_title:$("#markPlugin").attr("ptitle"),op:$(this).attr("id"),url:window.location.href});\r\n                });\r\n            }\r\n        });\r\n        function rrequest(payload){\r\n            $.ajax({\r\n                url:"http://courses.geeksforgeeks.org/gfgRatings.php",\r\n                method:"POST",\r\n                dataType:"html",\r\n                data:payload,\r\n                xhrFields:{withCredentials:true},\r\n                success:function(response){\r\n                    $("#ratePlugin").html(response);\r\n                },\r\n                complete:function(){\r\n                    $(".box").click(function(){\r\n                        rrequest({post_id:$("#ratePlugin").attr("pid"),post_title:$("#ratePlugin").attr("ptitle"),rating:$(this).attr("rating"),url:window.location.href});\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        //rrequest({post_id:$("#ratePlugin").attr("pid"),url:window.location.href});\r\n        function mrequest(payload){\r\n            $.ajax({\r\n                url:"http://courses.geeksforgeeks.org/gfgMarking.php",\r\n                method:"POST",\r\n                dataType:"html",\r\n                data:payload,\r\n                xhrFields:{withCredentials:true},\r\n                success:function(response){\r\n                    $("#markPlugin").html(response);\r\n                },\r\n                complete:function(){\r\n                    $(".mark").click(function(){\r\n                        mrequest({post_id:$("#markPlugin").attr("pid"),post_title:$("#markPlugin").attr("ptitle"),op:$(this).attr("id"),url:window.location.href});\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        //mrequest({post_id:$("#markPlugin").attr("pid"),url:window.location.href});\r\n    });\r\n</script>\r\n\r\n<div class="plugins">\r\n<div pid="18212" ptitle="Depth First Traversal for a Graph" id="ratePlugin"></div>\r\n<div pid="18212" ptitle="Depth First Traversal for a Graph" id="markPlugin"></div>\r\n</div>\r\n\r\n<br></br>\r\n\r\n<script>\r\n  window.fbAsyncInit=function() {\r\n    FB.init({\r\n      appId      : \\\'380853768781431\\\',\r\n      xfbml      : true,\r\n      version    : \\\'v2.3\\\'\r\n    });\r\n  };\r\n\r\n  (function(d, s, id){\r\n     var js, fjs = d.getElementsByTagName(s)[0];\r\n     if (d.getElementById(id)) {return;}\r\n     js = d.createElement(s); js.id = id;\r\n     js.src = "//connect.facebook.net/en_US/sdk.js";\r\n     fjs.parentNode.insertBefore(js, fjs);\r\n   }(document, \\\'script\\\', \\\'facebook-jssdk\\\'));\r\n</script>\r\n<div class="fb-like" data-share="true" data-width="450" data-show-faces="true"></div>\r\n\r\n<br></br>\r\n<p>Writing code in comment? Please use <a href="http://code.geeksforgeeks.org/">code.geeksforgeeks.org</a>, generate link and share the link here.</a>\r\n\t\t\t\t\r\n<div id="disqus_thread">\r\n            <div id="dsq-content">\r\n\r\n\r\n            <ul id="dsq-comments">\r\n                    <li class="comment even thread-even depth-1" id="dsq-comment-34976">\r\n        <div id="dsq-comment-header-34976" class="dsq-comment-header">\r\n            <cite id="dsq-cite-34976">\r\n                <span id="dsq-author-user-34976">Himanshu Dagar</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-34976" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-34976" class="dsq-comment-message"><p>Code which shows different different output when in graph no node is connected to anyone.<br />\ncan refer to below link </p>\n<p><a href="http://ideone.com/sBmjrv" rel="nofollow">http://ideone.com/sBmjrv</a></p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-33315">\r\n        <div id="dsq-comment-header-33315" class="dsq-comment-header">\r\n            <cite id="dsq-cite-33315">\r\n                <span id="dsq-author-user-33315">Gallon</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-33315" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-33315" class="dsq-comment-message"><p>Non-recursive Implementation using STL stack</p>\n<p><code></p>\n<p>void Graph::DFSUtil(int v, bool visited[])</p>\n<p>{</p>\n<p>    // Mark the current node as visited and print it</p>\n<p>    stack my_stack;</p>\n<p>    cout&lt;&lt;v&lt;&lt;&quot; &quot;;</p>\n<p>    visited[v] = true;</p>\n<p>    my_stack.push(v);</p>\n<p>    while(!my_stack.empty())</p>\n<p>    {</p>\n<p>        int top = my_stack.top();</p>\n<p>        /* Value check if v has any unvisited neighbour (0 or 1) */</p>\n<p>        bool no_unvisited_neighbour = true;</p>\n<p>        for(auto iter = adj[top].begin(); iter!=adj[top].end(); iter++)</p>\n<p>        {</p>\n<p>            /* Found 1st unvisited adjacent node of v and push it to the stack */</p>\n<p>            if(!visited[*iter])</p>\n<p>            {   </p>\n<p>                no_unvisited_neighbour = false;</p>\n<p>                cout&lt;&lt;*iter&lt;&lt;&quot; &quot;;</p>\n<p>                visited[*iter] = true;</p>\n<p>                my_stack.push(*iter);</p>\n<p>                break;</p>\n<p>            }    </p>\n<p>        }</p>\n<p>        /* If v has no unvisited neighbours, pop it from the stack */</p>\n<p>        if(no_unvisited_neighbour)</p>\n<p>        {</p>\n<p>            my_stack.pop();</p>\n<p>        }</p>\n<p>    }</p>\n<p>}</p>\n<p></code></p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-33316">\r\n        <div id="dsq-comment-header-33316" class="dsq-comment-header">\r\n            <cite id="dsq-cite-33316">\r\n                <span id="dsq-author-user-33316">Gallon</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-33316" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-33316" class="dsq-comment-message"><p><code><br />\nvoid Graph::DFSUtil(int v, bool visited[])</p>\n<p>{</p>\n<p>    // Mark the current node as visited and print it</p>\n<p>    stack my_stack;</p>\n<p>    cout&lt;&lt;v&lt;&lt;&quot; &quot;;</p>\n<p>    visited[v] = true;</p>\n<p>    my_stack.push(v);</p>\n<p>    while(!my_stack.empty())</p>\n<p>    {</p>\n<p>        int top = my_stack.top();</p>\n<p>        /* Value check if v has any unvisited neighbour (0 or 1) */</p>\n<p>        bool no_unvisited_neighbour = true;</p>\n<p>        for(auto iter = adj[top].begin(); iter!=adj[top].end(); iter++)</p>\n<p>        {</p>\n<p>            /* Found 1st unvisited adjacent node of v and push it to the stack */</p>\n<p>            if(!visited[*iter])</p>\n<p>            {   </p>\n<p>                no_unvisited_neighbour = false;</p>\n<p>                cout&lt;&lt;*iter&lt;&lt;&quot; &quot;;</p>\n<p>                visited[*iter] = true;</p>\n<p>                my_stack.push(*iter);</p>\n<p>                break;</p>\n<p>            }    </p>\n<p>        }</p>\n<p>        /* If v has no unvisited neighbours, pop it from the stack */</p>\n<p>        if(no_unvisited_neighbour)</p>\n<p>        {</p>\n<p>            my_stack.pop();</p>\n<p>        }</p>\n<p>    }</p>\n<p>}</p>\n<p></code></p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-32090">\r\n        <div id="dsq-comment-header-32090" class="dsq-comment-header">\r\n            <cite id="dsq-cite-32090">\r\n                <span id="dsq-author-user-32090">Well</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-32090" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-32090" class="dsq-comment-message"><p>How to implement it in NON-recursive approach?</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-29560">\r\n        <div id="dsq-comment-header-29560" class="dsq-comment-header">\r\n            <cite id="dsq-cite-29560">\r\n                <span id="dsq-author-user-29560">khushal</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-29560" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-29560" class="dsq-comment-message"><p>cyclic graph won&#8217;t have topological order. your code doesn&#8217;t say a word if graph is cyclic</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-27468">\r\n        <div id="dsq-comment-header-27468" class="dsq-comment-header">\r\n            <cite id="dsq-cite-27468">\r\n                <span id="dsq-author-user-27468">Alien</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-27468" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-27468" class="dsq-comment-message"><p>/*</p>\n<p>C program for DFS traversal of a graph where graph is presented using Adjacency Matrix</p>\n<p>*/</p>\n<p>#include</p>\n<p>#define V 5</p>\n<p>void dfsUtil(int graph[V][V], int visited[], int v)</p>\n<p>{</p>\n<p>\tvisited[v] = 1;</p>\n<p>\tprintf(&#8220;nvertex: %d&#8221;,v);</p>\n<p>\tint i;</p>\n<p>\t// DFS search for each connected component</p>\n<p>\tfor(i=0;i&lt;V;i++)</p>\n<p>\t{</p>\n<p>\t\t// call DFS recursively, if there is path from vertex v to vertex i and vertex i has not been visited yet</p>\n<p>\t\tif(graph[v][i] != 0 &amp;&amp; visited[i] ==0)</p>\n<p>\t\t{</p>\n<p>\t\t\tdfsUtil(graph,visited,i);</p>\n<p>\t\t}</p>\n<p>\t}</p>\n<p>}</p>\n<p>void dfs(int graph[V][V], int visited[])</p>\n<p>{</p>\n<p>\tint i;</p>\n<p>\t// check for each connected component </p>\n<p>\tfor(i=0;i&lt;V;i++)</p>\n<p>\t{</p>\n<p>\t\tif(visited[i] != 1)</p>\n<p>\t\t\tdfsUtil(graph,visited,i);</p>\n<p>\t}</p>\n<p>}</p>\n<p>int main()</p>\n<p>{</p>\n<p>/*</p>\n<p>\t2 connected components</p>\n<p>\t1&#8212;&#8212;-5  4</p>\n<p>\t|\t/\t|   </p>\n<p>\t2&#8212;&#8212;-3</p>\n<p>*/</p>\n<p>\tint graph[V][V] = {{0,1,0,0,1},{1,0,1,0,1},{0,1,0,0,1},{0,0,0,0,0},{1,1,1,0,0}};</p>\n<p>\tint visited[V] = {0};</p>\n<p>\tdfs(graph,visited);</p>\n<p>\treturn 0;</p>\n<p>}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-27467">\r\n        <div id="dsq-comment-header-27467" class="dsq-comment-header">\r\n            <cite id="dsq-cite-27467">\r\n                <span id="dsq-author-user-27467">Alien</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-27467" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-27467" class="dsq-comment-message"><p>/*</p>\n<p>C program for DFS traversal of a graph where graph is presented using Adjacency list</p>\n<p>*/</p>\n<p>#include </p>\n<p>#include </p>\n<p>// A structure to represent an adjacency list node</p>\n<p>struct AdjListNode </p>\n<p>{</p>\n<p>\tint vertex_num;</p>\n<p>\tstruct AdjListNode *next;</p>\n<p>};</p>\n<p>// A structure to represent an adjacency list</p>\n<p>struct AdjList</p>\n<p>{</p>\n<p>\tstruct AdjListNode *head;</p>\n<p>};</p>\n<p>// A structure to represent a graph. A graph is an array of adjacency lists.</p>\n<p>// Size of array will be V (number of vertices in graph)</p>\n<p>struct Graph</p>\n<p>{</p>\n<p>\tint noofvertex;</p>\n<p>\tstruct AdjList* array;</p>\n<p>};</p>\n<p>// A utility function to create a new adjacency list node</p>\n<p>struct AdjListNode* newAdjListNode(int v)</p>\n<p>{</p>\n<p>\tstruct AdjListNode* newNode = (struct AdjListNode*)malloc(sizeof(struct AdjListNode));</p>\n<p>\tnewNode-&gt;vertex_num = v;</p>\n<p>\tnewNode-&gt;next = NULL;</p>\n<p>\treturn newNode;</p>\n<p>}</p>\n<p>// A utility function that creates a graph of V vertices</p>\n<p>struct Graph* createGraph(int n)</p>\n<p>{</p>\n<p>\tint i;</p>\n<p>\tstruct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));</p>\n<p>\tgraph-&gt;noofvertex = n;</p>\n<p>\t// Create an array of adjacency lists.  Size of array will be n</p>\n<p>\tgraph-&gt;array = (struct AdjList*)malloc(n * sizeof(struct AdjList));</p>\n<p>\t// Initialize each adjacency list as empty by making head as NULL</p>\n<p>\tfor(i=0;iarray[i].head = NULL;</p>\n<p>\t}</p>\n<p>\treturn graph;</p>\n<p>}</p>\n<p>// Adds an edge to an undirected graph</p>\n<p>void addEdge(struct Graph *graph, int src, int dest)</p>\n<p>{</p>\n<p>\t// Add an edge from src to dest.  A new node is added to the adjacency</p>\n<p>    // list of src.  The node is added at the begining</p>\n<p>\tstruct AdjListNode* newNode = newAdjListNode(dest);</p>\n<p>\tnewNode-&gt;next = graph-&gt;array[src].head;</p>\n<p>\tgraph-&gt;array[src].head = newNode;</p>\n<p>\t// Since graph is undirected, add an edge from dest to src also</p>\n<p>    newNode = newAdjListNode(src);</p>\n<p>    newNode-&gt;next = graph-&gt;array[dest].head;</p>\n<p>    graph-&gt;array[dest].head = newNode;</p>\n<p>}</p>\n<p>// A utility function to print the adjacenncy list representation of graph</p>\n<p>void printGraph(struct Graph* graph)</p>\n<p>{</p>\n<p>    int v;</p>\n<p>    for (v = 0; v noofvertex; ++v)</p>\n<p>    {</p>\n<p>        struct AdjListNode* pCrawl = graph-&gt;array[v].head;</p>\n<p>        printf(&#8220;n Adjacency list of vertex %dn head &#8220;, v);</p>\n<p>        while (pCrawl)</p>\n<p>        {</p>\n<p>            printf(&#8220;-&gt; %d&#8221;, pCrawl-&gt;vertex_num);</p>\n<p>            pCrawl = pCrawl-&gt;next;</p>\n<p>        }</p>\n<p>        printf(&#8220;n&#8221;);</p>\n<p>    }</p>\n<p>}</p>\n<p>void dfsUtil(struct Graph *graph, int visited[], int v)</p>\n<p>{</p>\n<p>\tint i;</p>\n<p>\tint n = graph-&gt;noofvertex;</p>\n<p>\tvisited[v] = 1;</p>\n<p>\tprintf(&#8220;n Vertex: %d&#8221;,v);</p>\n<p>\tstruct AdjListNode* pCrawl = graph-&gt;array[v].head;</p>\n<p>\t// TRAP: Not same as matrix representation</p>\n<p>\t// check the adjacents of current node has been visited or not. If not, call DFSUtil again</p>\n<p>\twhile(pCrawl != NULL)</p>\n<p>\t{</p>\n<p>\t\tif(visited[pCrawl-&gt;vertex_num] == 0)</p>\n<p>\t\t\tdfsUtil(graph,visited,pCrawl-&gt;vertex_num);</p>\n<p>\t\tpCrawl = pCrawl-&gt;next;</p>\n<p>\t}</p>\n<p>}</p>\n<p>void dfs(struct Graph *graph, int visited[])</p>\n<p>{</p>\n<p>\tint i;</p>\n<p>\tint n = graph-&gt;noofvertex;</p>\n<p>\t// for each connected component</p>\n<p>\tfor(i=0;i&lt;n;i++)</p>\n<p>\t{</p>\n<p>\t\tif(visited[i] == 0)</p>\n<p>\t\t\tdfsUtil(graph,visited,i);</p>\n<p>\t}</p>\n<p>}</p>\n<p>int main()</p>\n<p>{</p>\n<p>/*</p>\n<p>\t2 connected components</p>\n<p>\t1&#8212;&#8212;-5  4</p>\n<p>\t|\t/\t|   </p>\n<p>\t2&#8212;&#8212;-3</p>\n<p>*/</p>\n<p>\t// create the graph given in above fugure</p>\n<p>    int V = 5;</p>\n<p>\tint visited[5] = {0};</p>\n<p>    struct Graph* graph = createGraph(V);</p>\n<p>    addEdge(graph, 0, 1);</p>\n<p>    addEdge(graph, 0, 4);</p>\n<p>    addEdge(graph, 1, 2);</p>\n<p>    addEdge(graph, 1, 3);</p>\n<p>    addEdge(graph, 1, 4);</p>\n<p>    addEdge(graph, 2, 3);</p>\n<p>    addEdge(graph, 3, 4);</p>\n<p>    // print the adjacency list representation of the above graph</p>\n<p>\tdfs(graph,visited);</p>\n<p>   // printGraph(graph);</p>\n<p>\treturn 0;</p>\n<p>}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-27345">\r\n        <div id="dsq-comment-header-27345" class="dsq-comment-header">\r\n            <cite id="dsq-cite-27345">\r\n                <span id="dsq-author-user-27345">Vijay Apurva</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-27345" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-27345" class="dsq-comment-message"><p>here is the code in  C </p>\n<p>#include<br />\n#include</p>\n<p>struct gnode{<br />\nint data ;<br />\nstruct gnode * next ;<br />\n};</p>\n<p>struct adnode{<br />\nstruct gnode * top ;<br />\n};</p>\n<p>struct graph{<br />\nint v;<br />\nstruct adnode * array ;<br />\n};</p>\n<p>struct graph * createGraph(int v){<br />\n struct graph * g = (struct graph *)malloc(sizeof(struct graph));<br />\n g-&gt;v=v;<br />\n g-&gt;array=(struct adnode *)malloc(v*sizeof(struct adnode));<br />\n int i;<br />\n for(i=0;iarray[i].top=NULL;</p>\n<p> return g;<br />\n}</p>\n<p>struct gnode * add(int data){<br />\nstruct gnode * temp = (struct gnode *)malloc(sizeof(struct gnode));<br />\ntemp-&gt;data=data;<br />\ntemp-&gt;next=NULL;<br />\nreturn temp;<br />\n}</p>\n<p>void addEdge(struct graph * g , int src, int dest){</p>\n<p>struct gnode * temp = add(dest);<br />\n  temp-&gt;next=g-&gt;array[src].top;<br />\n   g-&gt;array[src].top=temp;<br />\n}</p>\n<p>void dfsUtil(struct graph * g , int visit[] , int x){</p>\n<p>         visit[x]=1 ;<br />\n       printf(&#8220;%d  &#8220;,x);<br />\n     struct gnode * temp = g-&gt;array[x].top;</p>\n<p>  while(temp!=NULL){<br />\n     if(visit[temp-&gt;data]==0)<br />\n        dfsUtil( g,visit,temp-&gt;data);<br />\n        temp=temp-&gt;next;<br />\n  }<br />\n}</p>\n<p>void dfs(struct graph *g){<br />\n    int i;<br />\n    int visit[g-&gt;v];</p>\n<p>    for(i=0;iv;i++)<br />\n      visit[i]=0;</p>\n<p>printf(&#8221;  dfs traversal of a graph is  n n &#8220;);</p>\n<p>    for(i=0;iv;i++){<br />\n        if(visit[i]==0)<br />\n        dfsUtil(g , visit , i);<br />\n     }<br />\n}</p>\n<p>void  main(){<br />\nint v = 4;<br />\n    struct graph* g = createGraph(v);<br />\n    addEdge(g,0, 1);<br />\n    addEdge(g,0, 2);<br />\n    addEdge(g,1, 2);<br />\n    addEdge(g,2, 0);<br />\n    addEdge(g,2, 3);<br />\n    addEdge(g,3, 3);<br />\n    dfs(g);</p>\n<p>}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-dhruv18 even thread-odd thread-alt depth-1" id="dsq-comment-20158">\r\n        <div id="dsq-comment-header-20158" class="dsq-comment-header">\r\n            <cite id="dsq-cite-20158">\r\n                <span id="dsq-author-user-20158">dhruv18</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-20158" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-20158" class="dsq-comment-message"><p>@jayanta you have just ensured that output is printed from different starting point but what about making sure that whole graph is printed when it is a disconnected graph?<br />\ni think 2nd code is for printing whole graph but in your different connected component will be printed.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</li><!-- #comment-## -->\n    <li class="comment byuser comment-author-avanee odd alt thread-even depth-1" id="dsq-comment-17184">\r\n        <div id="dsq-comment-header-17184" class="dsq-comment-header">\r\n            <cite id="dsq-cite-17184">\r\n                <span id="dsq-author-user-17184">avanee</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-17184" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-17184" class="dsq-comment-message"><p>//program for dfs<br />\n#include<br />\n#include<br />\nusing namespace std;<br />\nint edgei_j[100][100],n;<br />\nint visited[1000];<br />\nvoid dfs(int);<br />\nstack stk;<br />\nint main()<br />\n{   </p>\n<p>\tint i,j,m,tops;<br />\n\tscanf(&#8220;%d %d&#8221;,&amp;n,&amp;m);<br />\n\tfor(i=0;i&lt;m;i++)<br />\n\t{<br />\n\t\tscanf(&quot;%d %d&quot;,&amp;i,&amp;j);<br />\n\t\tedgei_j[i][j]=1;<br />\n\t}<br />\n\tstk.push(0);<br />\n\tvisited[0]=1;<br />\n\twhile(!stk.empty())<br />\n\t{</p>\n<p>\t\ttops=stk.top();<br />\n\t\tdfs(tops);<br />\n\t}<br />\n\t}<br />\nvoid dfs(int tops)<br />\n{</p>\n<p>\tint i,x;<br />\n\t\tfor(i=0;i&lt;n;i++)<br />\n\t\t{<br />\n\t\t\tif(edgei_j[tops][i]==1&amp;&amp;visited[i]!=1)<br />\n\t\t\t{<br />\n\t\t\t\tvisited[i]=0;<br />\n\t\t\t\tstk.push(i);<br />\n\t\t\t\tdfs(i);<br />\n\t\t\t}<br />\n\t\t}<br />\n\tif(i==n)<br />\n\t{<br />\n\tx=stk.top();<br />\n\tcout&lt;&lt;x&lt;&lt;endl;<br />\n\tstk.pop();<br />\n\t}</p>\n<p>}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-avanee even thread-odd thread-alt depth-1" id="dsq-comment-17183">\r\n        <div id="dsq-comment-header-17183" class="dsq-comment-header">\r\n            <cite id="dsq-cite-17183">\r\n                <span id="dsq-author-user-17183">avanee</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-17183" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-17183" class="dsq-comment-message"><p>//simple imlementation for dfs<br />\n#include<br />\n#include<br />\nusing namespace std;<br />\nint edgei_j[100][100],n;<br />\nint visited[1000];<br />\nvoid dfs(int);<br />\nstack stk;<br />\nint main()<br />\n{   </p>\n<p>\tint i,j,m,tops;<br />\n\tscanf(&#8220;%d %d&#8221;,&amp;n,&amp;m);<br />\n\tfor(i=0;i&lt;m;i++)<br />\n\t{<br />\n\t\tscanf(&quot;%d %d&quot;,&amp;i,&amp;j);<br />\n\t\tedgei_j[i][j]=1;<br />\n\t}<br />\n\tstk.push(0);<br />\n\tvisited[0]=1;<br />\n\twhile(!stk.empty())<br />\n\t{</p>\n<p>\t\ttops=stk.top();<br />\n\t\tdfs(tops);<br />\n\t}<br />\n\t}<br />\nvoid dfs(int tops)<br />\n{</p>\n<p>\tint i,x;<br />\n\t\tfor(i=0;i&lt;n;i++)<br />\n\t\t{<br />\n\t\t\tif(edgei_j[tops][i]==1&amp;&amp;visited[i]!=1)<br />\n\t\t\t{<br />\n\t\t\t\tvisited[i]=0;<br />\n\t\t\t\tstk.push(i);<br />\n\t\t\t\tdfs(i);<br />\n\t\t\t}<br />\n\t\t}<br />\n\tif(i==n)<br />\n\t{<br />\n\tx=stk.top();<br />\n\tcout&lt;&lt;x&lt;&lt;endl;<br />\n\tstk.pop();<br />\n\t}</p>\n<p>}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-amitmac2 odd alt thread-even depth-1" id="dsq-comment-16815">\r\n        <div id="dsq-comment-header-16815" class="dsq-comment-header">\r\n            <cite id="dsq-cite-16815">\r\n                <span id="dsq-author-user-16815">amitmac2</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-16815" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-16815" class="dsq-comment-message"><pre> <code language="C">\n#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n#include&lt;conio.h&gt;\nint time;\nstruct node\n{\t\n\tint color;\n\tint parent;\n\tint key;\n    int dest;\n    struct node* next;\t//next pointer\n\tstruct node* head;\t//head pointer\n};\nstruct graph\n{\n    int v;\t//number of vertices\n    struct node* array;\t//array of all vertices\n};\nstruct node* createNode(int dest)\t//create new node\n{\n    struct node* newnode=(struct node*)malloc(sizeof(struct node));\t//allocating memory\n    newnode-&gt;dest=dest;\t//dest is the next vertex which is pointed\n    newnode-&gt;next=NULL; \n    return newnode;\n}\nstruct graph* createGraph(int v)\t\t//creating adjacency list\n{\n    struct graph* g=(struct graph*)malloc(sizeof(struct graph));\n    g-&gt;v=v;\t//v is number of vertices\n    g-&gt;array=(struct node*)malloc(v*sizeof(struct node));\t//allocating memory for the array of v vertices\n    for(int i=0;i&lt;v;i++)\t\n    {\t//initializing the adjacency list\n\t\tg-&gt;array[i].head=NULL;\n\t\tg-&gt;array[i].key=i;\n\t}\n    return g;\n}\nvoid addEdge(struct graph* g,int src,int dest)\t//adding node to the adjacency list\n{\n    struct node* newnode=createNode(dest);\t//creating new node pointing to \'dest\' vertex\n    newnode-&gt;next=g-&gt;array[src].head;\t//next pointer of newnode points to the head of src vertex\n    g-&gt;array[src].head=newnode;\t//adding in the beginning of list\n    newnode=createNode(src);\t//for undirected graphs both vertex point each other\n    newnode-&gt;next=g-&gt;array[dest].head;\n    g-&gt;array[dest].head=newnode;\n}\nvoid dfsVisit(struct graph* g,struct node* u)\n{\n    time++;\n\tu-&gt;color=1; //color of vertex is changed\n\tstruct node* p=u;\t\n\twhile(p!=NULL)\n    {\n        p=p-&gt;next; \n\t\tif(p-&gt;color==0)\n\t\t{\n\t\t\tp-&gt;parent = u-&gt;key;\t//parent of p is given the key of u as u--&gt;p\n\t\t\tdfsVisit(g,p);\t//recursing\n\t\t}\n    }\n\tu-&gt;color=2;\n\tprintf(&quot;%d &quot;,u-&gt;key);\t//printing the vertex key\n\ttime++;\n}\nvoid dfs(struct graph* g)\n{\n    int v=g-&gt;v; //v contains the number of vertices in graph\n    for(int i=0;i&lt;v;i++)\n    {\n\t\tg-&gt;array[i].color=0; //initializing color and parent property\n\t\tg-&gt;array[i].parent=-1;\n    }\n    time=0;\n    for(int i=0;i&lt;v;i++)\n\t\tif( g-&gt;array[i].color==0 ) //if i\'th vertex not visited call dfs visit\n\t\t\tdfsVisit(g,&amp;g-&gt;array[i]);\n}\nint main()\n{\n\tint v = 4;\n    struct graph* g = createGraph(v);\n    addEdge(g,0, 1);\n    addEdge(g,0, 2);\n    addEdge(g,1, 2);\n    addEdge(g,2, 0);\n    addEdge(g,2, 3);\n    addEdge(g,3, 3);\n\tdfs(g);\n\tgetch();\n\treturn 0;\n}\n\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-amitmac2 even depth-2" id="dsq-comment-16816">\r\n        <div id="dsq-comment-header-16816" class="dsq-comment-header">\r\n            <cite id="dsq-cite-16816">\r\n                <span id="dsq-author-user-16816">amitmac2</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-16816" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-16816" class="dsq-comment-message"><p>there is error in above program&#8230;</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-16382">\r\n        <div id="dsq-comment-header-16382" class="dsq-comment-header">\r\n            <cite id="dsq-cite-16382">\r\n                <span id="dsq-author-user-16382">AAZ</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-16382" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-16382" class="dsq-comment-message"><p>How is complexity O(V+E) ?<br />\nDon&#8217;t we have one for loop inside DFSUtil Function call which is itself inside for loop ? Shouldn&#8217;t it be O(VE) ?</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-10281">\r\n        <div id="dsq-comment-header-10281" class="dsq-comment-header">\r\n            <cite id="dsq-cite-10281">\r\n                <span id="dsq-author-user-10281">Jayanta</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-10281" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-10281" class="dsq-comment-message"><p>// Pasted the modified (correct) dfs code.</p>\n<pre> <code language="C">\n#include&lt;iostream&gt;\n#include &lt;list&gt;\n \nusing namespace std;\n \nclass Graph\n{\n    int V;    // No. of vertices\n    list&lt;int&gt; *adj;    // Pointer to an array containing adjacency lists\n    void DFSUtil(int v, bool visited[]);  // A function used by DFS\npublic:\n    Graph(int V);   // Constructor\n    void addEdge(int v, int w);   // function to add an edge to graph\n    void DFS();    // prints DFS traversal of the complete graph\n};\n \nGraph::Graph(int V)\n{\n    this-&gt;V = V;\n    adj = new list&lt;int&gt;[V];\n}\n \nvoid Graph::addEdge(int v, int w)\n{\n    adj[v].push_back(w); // Add w to v\xe2\x80\x99s list.\n}\n \nvoid Graph::DFSUtil(int v, bool visited[])\n{\n    if(visited[v] == false)\n    {\n       // Mark the current node as visited and print it\n       visited[v] = true;\n       cout &lt;&lt; v &lt;&lt; &quot; &quot;;\n \n       // Recur for all the vertices adjacent to this vertex\n       list&lt;int&gt;::iterator i;\n       for(i = adj[v].begin(); i != adj[v].end(); ++i)\n           if(!visited[*i])\n              DFSUtil(*i, visited);\n    }\n}\n \n// The function to do DFS traversal. It uses recursive DFSUtil()\nvoid Graph::DFS()\n{\n    // Mark all the vertices as not visited\n    bool *visited = new bool[V];\n \n    // Call the recursive helper function to print DFS traversal\n    // starting from all vertices one by one\n    for(int i = 0; i &lt; V; i++)\n    {\n    \tfor(int i1 = 0; i1 &lt; V; i1++)\n        \tvisited[i1] = false;\n\n\tcout&lt;&lt;endl&lt;&lt;&quot;DFS starting from node: &quot;&lt;&lt; i&lt;&lt; &quot;. :&quot;&lt;&lt; endl;\n        DFSUtil(i, visited);\n    }\n}\n\nint main()\n{\n    // Create a graph given in the above diagram\n    Graph g(4);\n\n    g.addEdge(0, 1);\n//    g.addEdge(0, 2);\n  //  g.addEdge(1, 2);\n//    g.addEdge(2, 0);\n    g.addEdge(2, 3);\n//    g.addEdge(3, 3); \n    cout &lt;&lt; &quot;Following is Depth First Traversal (starting from all vertices) \\n&quot;;\n    g.DFS();\n \n    return 0;\n}\n\n\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-10905">\r\n        <div id="dsq-comment-header-10905" class="dsq-comment-header">\r\n            <cite id="dsq-cite-10905">\r\nhttp://www.geeksforgeeks.org/archives/18212                <span id="dsq-author-user-10905">deep</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-10905" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-10905" class="dsq-comment-message"><p>@Jayanta you are right </p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-kartik even depth-3" id="dsq-comment-15687">\r\n        <div id="dsq-comment-header-15687" class="dsq-comment-header">\r\n            <cite id="dsq-cite-15687">\r\n                <span id="dsq-author-user-15687">kartik</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-15687" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-15687" class="dsq-comment-message"><p>@Jayanta and @deep:  could you please let us know the problem with the code given in above post?  In below comment, you mentioned that the given code will print &#8220;0 1 2 3&#8243; for given graph. Isn&#8217;t &#8220;0 1 2 3&#8243; correct output? Please let me know if my understanding is incorrect.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-10280">\r\n        <div id="dsq-comment-header-10280" class="dsq-comment-header">\r\n            <cite id="dsq-cite-10280">\r\n                <span id="dsq-author-user-10280">Jayanta</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-10280" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-10280" class="dsq-comment-message"><p>The second code for visiting all nodes in DFS() is wrong as it does not set false to visited[v] ever.</p>\n<p>For the following main() it will also print 0 1 2 3.</p>\n<p>int main()<br />\n{<br />\n    // Create a graph given in the above diagram<br />\n    Graph g(4);<br />\n    g.addEdge(0, 1);<br />\n    g.addEdge(2, 3);</p>\n<p>    cout &lt;&lt; &quot;Following is Depth First Traversal (starting from vertex 2) \\n&quot;;<br />\n    g.DFS();</p>\n<p>    return 0;<br />\n}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-8232">\r\n        <div id="dsq-comment-header-8232" class="dsq-comment-header">\r\n            <cite id="dsq-cite-8232">\r\n                <span id="dsq-author-user-8232">Venki</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-8232" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-8232" class="dsq-comment-message"><p>Iterative DFS, looking for an efficient implementation.</p>\n<p>I know an explicit stack can be used. One way is, use explicit stack, and keep pushing all the adjacent nodes while exploring each path node in unexplored path. Following this approach, in the worst case, explicit stack will have all the adjacent nodes in the longest path of a node in graph.</p>\n<p>Where as in recursive approach, the system stack will have max nodes proportional to the depth of the longest node.</p>\n<p>Any thoughts? I am thinking to keep track of visited node and current exploring node in it&#8217;s adjacent list. In other words, mitigating system stack functionality by storing stack frame explicitly.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-8233">\r\n        <div id="dsq-comment-header-8233" class="dsq-comment-header">\r\n            <cite id="dsq-cite-8233">\r\n                <span id="dsq-author-user-8233">Venki</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-8233" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-8233" class="dsq-comment-message"><p>Here is pseudo code,</p>\n<pre> <code language="C">\r\ndfs(source)\r\n    stack.push(source)\r\n    v = stack.top()\r\n \r\n    while( stack not empty )\r\n        stack.pop()\r\n        visited[v] = true\r\n \r\n        for( each x in G.ADJ(v) )\r\n            if( !visited[x] )\r\n                stack.push(x)\r\n \r\n        v = stack.top()\r\n        while( (stack not empty) AND (v is visited) )\r\n            v = stack.top()\r\n            stack.pop()\r\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-3" id="dsq-comment-18908">\r\n        <div id="dsq-comment-header-18908" class="dsq-comment-header">\r\n            <cite id="dsq-cite-18908">\r\n                <span id="dsq-author-user-18908">Sreenivas Doosa</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-18908" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-18908" class="dsq-comment-message"><p>The following is the code for DFS Iterative&#8230;</p>\n<p>import java.util.ArrayList;<br />\nimport java.util.Stack;</p>\n<p>public class Graph {</p>\n<p>\tprivate int V; // no of vertices<br />\n\tprivate ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj; // adjacency list</p>\n<p>\tpublic Graph(int V) {</p>\n<p>\t\tthis.V = V;<br />\n\t\tthis.adj = new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;(V);<br />\n\t\tfor(int i = 0; i &lt; V; i++) {<br />\n\t\t\tthis.adj.add(new ArrayList&lt;Integer&gt;());<br />\n\t\t}<br />\n\t}</p>\n<p>\tpublic void addEdge(int u, int v) {</p>\n<p>\t\tadj.get(u).add(v); // adding v to array list u<br />\n\t}</p>\n<p>\tpublic void DFSIterative(int v) {</p>\n<p>\t\tSystem.out.print(&quot;DFS Iterative &#8211;&gt; &quot;);<br />\n\t\t// use stack and visited array<br />\n\t\tboolean visited[] = new boolean[V];<br />\n\t\tfor(int i = 0; i &lt; visited.length; i++) {<br />\n\t\t\tvisited[i] = false;<br />\n\t\t}</p>\n<p>\t\tStack&lt;Integer&gt; stack = new Stack&lt;Integer&gt;();<br />\n\t\tstack.push(v);<br />\n\t\tvisited[v] = true;<br />\n\t\tSystem.out.print(v + &quot; &quot;);</p>\n<p>\t\twhile(!stack.isEmpty()) {</p>\n<p>\t\t\tint top = stack.peek();<br />\n\t\t\t// check if the top element has any unvisited nodes<br />\n\t\t\tint child = getNextUnvisitedChild(top, visited);<br />\n\t\t\tif(child == -1) {<br />\n\t\t\t\t// no more unvisited childs hence pop it<br />\n\t\t\t\tstack.pop();<br />\n\t\t\t} else {<br />\n\t\t\t\tstack.push(child);<br />\n\t\t\t\tvisited[child] = true;<br />\n\t\t\t\tSystem.out.print(child + &quot; &quot;);<br />\n\t\t\t}<br />\n\t\t}<br />\n\t\tSystem.out.println();<br />\n\t}</p>\n<p>\tprivate int getNextUnvisitedChild(int v, boolean visited[]) {</p>\n<p>\t\tfor(int i = 0; i &lt; adj.get(v).size(); i++) {</p>\n<p>\t\t\tif(visited[adj.get(v).get(i)] == false) {<br />\n\t\t\t\treturn adj.get(v).get(i);<br />\n\t\t\t}<br />\n\t\t}<br />\n\t\treturn -1;<br />\n\t}<br />\n}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-7810">\r\n        <div id="dsq-comment-header-7810" class="dsq-comment-header">\r\n            <cite id="dsq-cite-7810">\r\n                <span id="dsq-author-user-7810">atul</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-7810" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-7810" class="dsq-comment-message"><p>inside main() , it should be<br />\nfor(int i = 0; i &lt; V; i++)<br />\n g.DFS(i);</p>\n<p>because we need to  check added if graph has more than one component.<br />\nas question does not mention that we need to find all nodes which are reachable from given node.</p>\n<p>/* Paste your code here (You may delete these lines if not writing code) */</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-geeksforgeeks bypostauthor even depth-2" id="dsq-comment-7811">\r\n        <div id="dsq-comment-header-7811" class="dsq-comment-header">\r\n            <cite id="dsq-cite-7811">\r\n                <span id="dsq-author-user-7811">GeeksforGeeks</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-7811" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-7811" class="dsq-comment-message"><p>@atul: Thanks for pointing this out. We have added a new version of the code that does DFS traversal of the complete graph.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-7809">\r\n        <div id="dsq-comment-header-7809" class="dsq-comment-header">\r\n            <cite id="dsq-cite-7809">\r\n                <span id="dsq-author-user-7809">Marc</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-7809" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-7809" class="dsq-comment-message"><p>how would I find the recursive complexity and how to solve it for the DFS ?</p>\n<pre> <code language="C">\r\n/* Paste your code here (You may delete these lines if not writing code) */\r\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-geeksforgeeks bypostauthor even depth-2" id="dsq-comment-7812">\r\n        <div id="dsq-comment-header-7812" class="dsq-comment-header">\r\n            <cite id="dsq-cite-7812">\r\n                <span id="dsq-author-user-7812">GeeksforGeeks</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-7812" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-7812" class="dsq-comment-message"><p>@Marc: The function <em>DFSUtil </em>runs for all adjacent vertices of all the vertices in a given graph.  Total count of adjacent vertices is equal to Theta(E). So total time complexity will be Theta(V+E)</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n            </ul>\r\n\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n<script type="text/javascript">\r\nvar disqus_url = \'http://www.geeksforgeeks.org/depth-first-traversal-for-a-graph/\';\r\nvar disqus_identifier = \'18212 http://www.geeksforgeeks.org/?p=18212\';\r\nvar disqus_container_id = \'disqus_thread\';\r\nvar disqus_shortname = \'geeksforgeeks\';\r\nvar disqus_title = "Depth First Traversal for a Graph";\r\nvar disqus_config_custom = window.disqus_config;\r\nvar disqus_config = function () {\r\n    /*\r\n    All currently supported events:\r\n    onReady: fires when everything is ready,\r\n    onNewComment: fires when a new comment is posted,\r\n    onIdentify: fires when user is authenticated\r\n    */\r\n    \r\n    \r\n    this.language = \'\';\r\n    \r\n    if (disqus_config_custom) {\r\n        disqus_config_custom.call(this);\r\n    }\r\n};\r\n\r\n(function() {\r\n    var dsq = document.createElement(\'script\'); dsq.type = \'text/javascript\';\r\n    dsq.async = true;\r\n    dsq.src = \'//\' + disqus_shortname + \'.disqus.com/embed.js\';\r\n    (document.getElementsByTagName(\'head\')[0] || document.getElementsByTagName(\'body\')[0]).appendChild(dsq);\r\n})();\r\n</script>\r\n\r\n\r\n\t\t\t\r\n\t\t</div><!-- #content -->\r\n\t</div><!-- #primary -->\r\n\r\n\r\n\t\t\t<div id="secondary" class="widget-area" role="complementary">\r\n\t\t\t<aside id="text-9" class="widget widget_text">\t\t\t<div class="textwidget"><div id="fb-root"></div>\r\n<script>(function(d, s, id) {\r\n  var js, fjs = d.getElementsByTagName(s)[0];\r\n  if (d.getElementById(id)) return;\r\n  js = d.createElement(s); js.id = id;\r\n  js.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.3&appId=138031159685820";\r\n  fjs.parentNode.insertBefore(js, fjs);\r\n}(document, \'script\', \'facebook-jssdk\'));</script>\r\n\r\n<div class="fb-page" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="300" data-height="180" data-small-header="true" data-adapt-container-width="false" data-hide-cover="true" data-show-facepile="true" data-show-posts="false"><div class="fb-xfbml-parse-ignore"><blockquote cite="https://www.facebook.com/pages/GeeksforGeeks/316764689022"><a href="https://www.facebook.com/pages/GeeksforGeeks/316764689022">GeeksforGeeks</a></blockquote></div></div>\r\n</div>\n\t\t</aside><aside id="text-33" class="widget widget_text">\t\t\t<div class="textwidget"><a href="http://www.springpeople.com/gfg-landing">\r\n<img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/GfG-2.jpg" alt="SpringPeople Ad">\r\n</a>\r\n</div>\n\t\t</aside><aside id="text-14" class="widget widget_text"><p class="widget-title">Popular Posts</p>\t\t\t<div class="textwidget"><ul>\r\n<li><a href="http://www.geeksforgeeks.org/top-algorithms-and-data-structures-for-competitive-programming/">Top 10 Algorithms and Data Structures for Competitive Programming</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/top-10-algorithms-in-interview-questions/">Top 10 algorithms in Interview Questions</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/how-to-begin-with-competitive-programming/">How to begin with Competitive Programming?</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>\r\n<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>\r\n<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding \xe2\x80\x9cextern\xe2\x80\x9d keyword in C</a> </li>\r\n<li><a href="http://www.geeksforgeeks.org/heavy-light-decomposition-set-1-introduction/"> Heavy Light Decomposition</a> </li>\r\n<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>\r\n</ul></div>\n\t\t</aside><aside id="text-17" class="widget widget_text">\t\t\t<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<!-- Big 300x600 Sidebar -->\r\n<ins class="adsbygoogle"\r\n     style="display:inline-block;width:300px;height:600px"\r\n     data-ad-client="ca-pub-9465609616171866"\r\n     data-ad-slot="4402736037"></ins>\r\n<script>\r\n(adsbygoogle = window.adsbygoogle || []).push({});\r\n</script></div>\n\t\t</aside><aside id="text-32" class="widget widget_text">\t\t\t<div class="textwidget"><form style="border:1px solid #ccc;padding:3px;text-align:center;" action="https://feedburner.google.com/fb/a/mailverify" method="post" target="popupwindow" onsubmit="window.open(\'https://feedburner.google.com/fb/a/mailverify?uri=Geeksforgeeks\', \'popupwindow\', \'scrollbars=yes,width=550,height=520\');return true"><p>Subscribe and Never Miss an Article</p><input type="text" style="width:140px" placeholder="Email Address" name="email"/><input type="hidden" value="Geeksforgeeks" name="uri"/><input type="hidden" name="loc" value="en_US"/>&nbsp;&nbsp;<input type="submit" style="background-color: #4cb96b;" value="Subscribe" /></form></div>\n\t\t</aside><aside id="text-18" class="widget widget_text">\t\t\t<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<!-- LargeRectangleSide -->\r\n<ins class="adsbygoogle"\r\n     style="display:inline-block;width:336px;height:280px"\r\n     data-ad-client="ca-pub-9465609616171866"\r\n     data-ad-slot="1884636833"></ins>\r\n<script>\r\n(adsbygoogle = window.adsbygoogle || []).push({});\r\n</script></div>\n\t\t</aside><aside id="text-13" class="widget widget_text">\t\t\t<div class="textwidget"><ul><li><a href="http://geeksquiz.com/category/articles/puzzle/">Common Interview Puzzles</a></li><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/advanced-data-structure/">Advanced Data Structures</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/pattern-searching/">Pattern Searching</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li><li><a href="http://www.geeksforgeeks.org/category/searching/">Searching</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/sorting/">Sorting</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/Hash/">Hashing</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/algorithm/analysis/">Analysis of Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/algorithm/mathematical/">Mathematical Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/algorithm/randomized/">Randomized Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>\r\n</ul>\r\n\r\n\r\n\r\n\r\n</div>\n\t\t</aside><aside id="categories-384568212" class="widget widget_categories"><p class="widget-title">All Categories</p><label class="screen-reader-text" for="cat">All Categories</label><select name=\'cat\' id=\'cat\' class=\'postform\' >\n\t<option value=\'-1\'>Select Category</option>\n\t<option class="level-0" value="1762">Advanced Data Structure&nbsp;&nbsp;(69)</option>\n\t<option class="level-0" value="1744">Algorithm&nbsp;&nbsp;(403)</option>\n\t<option class="level-1" value="1745">&nbsp;&nbsp;&nbsp;Analysis&nbsp;&nbsp;(16)</option>\n\t<option class="level-1" value="1748">&nbsp;&nbsp;&nbsp;Backtracking&nbsp;&nbsp;(11)</option>\n\t<option class="level-1" value="1750">&nbsp;&nbsp;&nbsp;Divide and Conquer&nbsp;&nbsp;(29)</option>\n\t<option class="level-1" value="1746">&nbsp;&nbsp;&nbsp;Dynamic Programming&nbsp;&nbsp;(91)</option>\n\t<option class="level-1" value="1754">&nbsp;&nbsp;&nbsp;Geometric&nbsp;&nbsp;(14)</option>\n\t<option class="level-1" value="1747">&nbsp;&nbsp;&nbsp;Greedy&nbsp;&nbsp;(20)</option>\n\t<option class="level-1" value="1753">&nbsp;&nbsp;&nbsp;Mathematical&nbsp;&nbsp;(123)</option>\n\t<option class="level-1" value="1749">&nbsp;&nbsp;&nbsp;Pattern Searching&nbsp;&nbsp;(29)</option>\n\t<option class="level-1" value="1757">&nbsp;&nbsp;&nbsp;Randomized&nbsp;&nbsp;(19)</option>\n\t<option class="level-1" value="1751">&nbsp;&nbsp;&nbsp;Searching&nbsp;&nbsp;(43)</option>\n\t<option class="level-1" value="1752">&nbsp;&nbsp;&nbsp;Sorting&nbsp;&nbsp;(40)</option>\n\t<option class="level-0" value="3">Arrays&nbsp;&nbsp;(80)</option>\n\t<option class="level-0" value="18">Articles&nbsp;&nbsp;(25)</option>\n\t<option class="level-0" value="1761">Binary Search Tree&nbsp;&nbsp;(37)</option>\n\t<option class="level-0" value="17">Bit Magic&nbsp;&nbsp;(56)</option>\n\t<option class="level-0" value="14">C/C++ Puzzles&nbsp;&nbsp;(244)</option>\n\t<option class="level-0" value="1790">Competitive Programming&nbsp;&nbsp;(4)</option>\n\t<option class="level-0" value="1710">GBlog&nbsp;&nbsp;(55)</option>\n\t<option class="level-0" value="67">GFacts&nbsp;&nbsp;(43)</option>\n\t<option class="level-0" value="97">Graph&nbsp;&nbsp;(74)</option>\n\t<option class="level-0" value="1756">Hash&nbsp;&nbsp;(21)</option>\n\t<option class="level-0" value="1755">Heap&nbsp;&nbsp;(18)</option>\n\t<option class="level-0" value="1140">Interview Experiences&nbsp;&nbsp;(1,050)</option>\n\t<option class="level-0" value="87">Java&nbsp;&nbsp;(55)</option>\n\t<option class="level-0" value="8">Linked Lists&nbsp;&nbsp;(70)</option>\n\t<option class="level-0" value="1760">Matrix&nbsp;&nbsp;(39)</option>\n\t<option class="level-0" value="66">MCQ&nbsp;&nbsp;(95)</option>\n\t<option class="level-0" value="4">Misc&nbsp;&nbsp;(40)</option>\n\t<option class="level-0" value="5">Output&nbsp;&nbsp;(55)</option>\n\t<option class="level-0" value="1767">Project&nbsp;&nbsp;(21)</option>\n\t<option class="level-0" value="1789">Python&nbsp;&nbsp;(5)</option>\n\t<option class="level-0" value="1743">Queue&nbsp;&nbsp;(16)</option>\n\t<option class="level-0" value="1742">Stack&nbsp;&nbsp;(25)</option>\n\t<option class="level-0" value="7">Strings&nbsp;&nbsp;(61)</option>\n\t<option class="level-0" value="1788">Technical Scripter&nbsp;&nbsp;(13)</option>\n\t<option class="level-0" value="19">Trees&nbsp;&nbsp;(114)</option>\n</select>\n\n<script type=\'text/javascript\'>\n/* <![CDATA[ */\n(function() {\n\tvar dropdown = document.getElementById( "cat" );\n\tfunction onCatChange() {\n\t\tif ( dropdown.options[ dropdown.selectedIndex ].value > 0 ) {\n\t\t\tlocation.href = "http://www.geeksforgeeks.org/?cat=" + dropdown.options[ dropdown.selectedIndex ].value;\n\t\t}\n\t}\n\tdropdown.onchange = onCatChange;\n})();\n/* ]]> */\n</script>\n\n</aside><aside id="text-21" class="widget widget_text"><p class="widget-title">Recent Comments</p>\t\t\t<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>\n\t\t</aside><aside id="tag_cloud-3" class="widget widget_tag_cloud"><p class="widget-title">Tags</p><div class="tagcloud"><a href=\'http://www.geeksforgeeks.org/tag/adobe/\' class=\'tag-link-148\' title=\'32 topics\' style=\'font-size: 12.941176470588pt;\'>Adobe</a>\n<a href=\'http://www.geeksforgeeks.org/tag/advance-data-structures/\' class=\'tag-link-152\' title=\'31 topics\' style=\'font-size: 12.838235294118pt;\'>Advance Data Structures</a>\n<a href=\'http://www.geeksforgeeks.org/tag/advanced-data-structures/\' class=\'tag-link-150\' title=\'38 topics\' style=\'font-size: 13.661764705882pt;\'>Advanced Data Structures</a>\n<a href=\'http://www.geeksforgeeks.org/tag/amazon/\' class=\'tag-link-141\' title=\'253 topics\' style=\'font-size: 22pt;\'>Amazon</a>\n<a href=\'http://www.geeksforgeeks.org/tag/array/\' class=\'tag-link-68\' title=\'12 topics\' style=\'font-size: 8.7205882352941pt;\'>array</a>\n<a href=\'http://www.geeksforgeeks.org/tag/backtracking/\' class=\'tag-link-112\' title=\'11 topics\' style=\'font-size: 8.4117647058824pt;\'>Backtracking</a>\n<a href=\'http://www.geeksforgeeks.org/tag/bharti-softbank-hike/\' class=\'tag-link-1214\' title=\'10 topics\' style=\'font-size: 8pt;\'>Bharti SoftBank (HIKE)</a>\n<a href=\'http://www.geeksforgeeks.org/tag/bit-magic/\' class=\'tag-link-17\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>Bit Magic</a>\n<a href=\'http://www.geeksforgeeks.org/tag/c/\' class=\'tag-link-86\' title=\'18 topics\' style=\'font-size: 10.470588235294pt;\'>C++</a>\n<a href=\'http://www.geeksforgeeks.org/tag/cn/\' class=\'tag-link-142\' title=\'12 topics\' style=\'font-size: 8.7205882352941pt;\'>CN</a>\n<a href=\'http://www.geeksforgeeks.org/tag/c-puzzle/\' class=\'tag-link-69\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>c puzzle</a>\n<a href=\'http://www.geeksforgeeks.org/tag/d-e-shaw/\' class=\'tag-link-823\' title=\'17 topics\' style=\'font-size: 10.264705882353pt;\'>D-E-Shaw</a>\n<a href=\'http://www.geeksforgeeks.org/tag/dbms/\' class=\'tag-link-139\' title=\'11 topics\' style=\'font-size: 8.4117647058824pt;\'>DBMS</a>\n<a href=\'http://www.geeksforgeeks.org/tag/divide-and-conquer/\' class=\'tag-link-113\' title=\'27 topics\' style=\'font-size: 12.220588235294pt;\'>Divide and Conquer</a>\n<a href=\'http://www.geeksforgeeks.org/tag/dynamic-programming/\' class=\'tag-link-111\' title=\'83 topics\' style=\'font-size: 17.058823529412pt;\'>Dynamic Programming</a>\n<a href=\'http://www.geeksforgeeks.org/tag/flipkart/\' class=\'tag-link-173\' title=\'46 topics\' style=\'font-size: 14.485294117647pt;\'>Flipkart</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate/\' class=\'tag-link-114\' title=\'88 topics\' style=\'font-size: 17.367647058824pt;\'>GATE</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-2012/\' class=\'tag-link-133\' title=\'10 topics\' style=\'font-size: 8pt;\'>GATE-CS-2012</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-c-language/\' class=\'tag-link-72\' title=\'10 topics\' style=\'font-size: 8pt;\'>GATE-CS-C-Language</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-ds-algo/\' class=\'tag-link-79\' title=\'35 topics\' style=\'font-size: 13.352941176471pt;\'>GATE-CS-DS-&amp;-Algo</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-older/\' class=\'tag-link-145\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>GATE-CS-Older</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gfact/\' class=\'tag-link-67\' title=\'20 topics\' style=\'font-size: 10.882352941176pt;\'>GFacts</a>\n<a href=\'http://www.geeksforgeeks.org/tag/goldman-sachs/\' class=\'tag-link-590\' title=\'20 topics\' style=\'font-size: 10.882352941176pt;\'>Goldman Sachs</a>\n<a href=\'http://www.geeksforgeeks.org/tag/google/\' class=\'tag-link-155\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>Google</a>\n<a href=\'http://www.geeksforgeeks.org/tag/graph/\' class=\'tag-link-97\' title=\'45 topics\' style=\'font-size: 14.382352941176pt;\'>Graph</a>\n<a href=\'http://www.geeksforgeeks.org/tag/greedy-algorithm/\' class=\'tag-link-159\' title=\'20 topics\' style=\'font-size: 10.882352941176pt;\'>Greedy Algorithm</a>\n<a href=\'http://www.geeksforgeeks.org/tag/hashing/\' class=\'tag-link-250\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>Hashing</a>\n<a href=\'http://www.geeksforgeeks.org/tag/interview-experience/\' class=\'tag-link-126\' title=\'216 topics\' style=\'font-size: 21.382352941176pt;\'>Interview Experience</a>\n<a href=\'http://www.geeksforgeeks.org/tag/java/\' class=\'tag-link-87\' title=\'61 topics\' style=\'font-size: 15.720588235294pt;\'>Java</a>\n<a href=\'http://www.geeksforgeeks.org/tag/maq-software/\' class=\'tag-link-1392\' title=\'11 topics\' style=\'font-size: 8.4117647058824pt;\'>MAQ Software</a>\n<a href=\'http://www.geeksforgeeks.org/tag/mathematicalalgo/\' class=\'tag-link-154\' title=\'73 topics\' style=\'font-size: 16.544117647059pt;\'>MathematicalAlgo</a>\n<a href=\'http://www.geeksforgeeks.org/tag/matrix/\' class=\'tag-link-211\' title=\'21 topics\' style=\'font-size: 11.088235294118pt;\'>Matrix</a>\n<a href=\'http://www.geeksforgeeks.org/tag/microsoft/\' class=\'tag-link-104\' title=\'95 topics\' style=\'font-size: 17.676470588235pt;\'>Microsoft</a>\n<a href=\'http://www.geeksforgeeks.org/tag/morgan-stanley/\' class=\'tag-link-167\' title=\'17 topics\' style=\'font-size: 10.264705882353pt;\'>Morgan Stanley</a>\n<a href=\'http://www.geeksforgeeks.org/tag/operating-systems/\' class=\'tag-link-110\' title=\'19 topics\' style=\'font-size: 10.676470588235pt;\'>Operating systems</a>\n<a href=\'http://www.geeksforgeeks.org/tag/oracle/\' class=\'tag-link-171\' title=\'24 topics\' style=\'font-size: 11.705882352941pt;\'>Oracle</a>\n<a href=\'http://www.geeksforgeeks.org/tag/pattern-searching/\' class=\'tag-link-107\' title=\'26 topics\' style=\'font-size: 12.014705882353pt;\'>Pattern Searching</a>\n<a href=\'http://www.geeksforgeeks.org/tag/puzzle/\' class=\'tag-link-70\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>puzzle</a>\n<a href=\'http://www.geeksforgeeks.org/tag/python/\' class=\'tag-link-1770\' title=\'21 topics\' style=\'font-size: 11.088235294118pt;\'>Python</a>\n<a href=\'http://www.geeksforgeeks.org/tag/recursion/\' class=\'tag-link-85\' title=\'21 topics\' style=\'font-size: 11.088235294118pt;\'>Recursion</a>\n<a href=\'http://www.geeksforgeeks.org/tag/samsung/\' class=\'tag-link-180\' title=\'12 topics\' style=\'font-size: 8.7205882352941pt;\'>Samsung</a>\n<a href=\'http://www.geeksforgeeks.org/tag/sap-labs/\' class=\'tag-link-1414\' title=\'23 topics\' style=\'font-size: 11.5pt;\'>SAP Labs</a>\n<a href=\'http://www.geeksforgeeks.org/tag/snapdeal/\' class=\'tag-link-1246\' title=\'16 topics\' style=\'font-size: 9.9558823529412pt;\'>SnapDeal</a>\n<a href=\'http://www.geeksforgeeks.org/tag/stack/\' class=\'tag-link-94\' title=\'17 topics\' style=\'font-size: 10.264705882353pt;\'>stack</a>\n<a href=\'http://www.geeksforgeeks.org/tag/stack-queue/\' class=\'tag-link-899\' title=\'12 topics\' style=\'font-size: 8.7205882352941pt;\'>Stack-Queue</a></div>\n</aside><aside id="text-25" class="widget widget_text">\t\t\t<div class="textwidget"><ul>\r\n<li><h2><a href="http://geeksquiz.com/">GeeksQuiz</a></h2></li>\r\n\r\n<li><h2><a href="http://code.geeksforgeeks.org/">GeeksforGeeksIDE</a></h2></li>\r\n\r\n<li><h2><a href="http://www.practice.geeksforgeeks.org/">GeeksforGeeks Practice</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/data-structures/">Data Structures</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/c/">C Programming</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++ Programming</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/java/">Java Programming</a></h2></li>\r\n\r\n<li><h2><a href="http://geeksquiz.com/books/">Books</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Experiences</a></h2></li>\r\n\r\n<li><h2><a href="http://geeksquiz.com/gate-corner-2/">GATE CS</a></h2></li>\r\n\r\n<li><h2><a href="http://www.gatecs.geeksquiz.com">GATE CS Forum</a></h2></li>\r\n\r\n<li><h2><a href="https://play.google.com/store/apps/details?id=free.programming.programming">Android App</a></h2></li>\r\n</ul>\r\n\r\n</div>\n\t\t</aside>\t\t</div><!-- #secondary -->\r\n\t\t</div><!-- #main .wrapper -->\r\n\t<footer id="colophon" role="contentinfo">\r\n\t\t<div class="site-info">\r\n\t\t<div class="clear"></div>\r\n\t\t</div><!-- .site-info -->\r\n\t\t</footer><!-- #colophon -->\r\n<center>\r\n<div class="iconic-footer">\r\n\r\n@geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>  <a href="http://www.geeksforgeeks.org/about/"> &nbsp; &nbsp; &nbsp; &nbsp;About Us!&nbsp; &nbsp; &nbsp; &nbsp;</a><a href="http://www.geeksforgeeks.org/new/ad.htm"> &nbsp; &nbsp; &nbsp; &nbsp;Advertise with us!&nbsp; &nbsp; &nbsp; &nbsp;</a>\r\n\r\n      \t\t\t</div></center><!-- .site-info -->\r\n\r\n\t\t\t\t<div class="clear"></div>\r\n</div><!-- #page -->\r\n\r\n        <script type="text/javascript">\r\n        // <![CDATA[\r\n        var disqus_shortname = \'geeksforgeeks\';\r\n        (function () {\r\n            var nodes = document.getElementsByTagName(\'span\');\r\n            for (var i = 0, url; i < nodes.length; i++) {\r\n                if (nodes[i].className.indexOf(\'dsq-postid\') != -1) {\r\n                    nodes[i].parentNode.setAttribute(\'data-disqus-identifier\', nodes[i].getAttribute(\'data-dsqidentifier\'));\r\n                    url = nodes[i].parentNode.href.split(\'#\', 1);\r\n                    if (url.length == 1) { url = url[0]; }\r\n                    else { url = url[1]; }\r\n                    nodes[i].parentNode.href = url + \'#disqus_thread\';\r\n                }\r\n            }\r\n            var s = document.createElement(\'script\'); \r\n            s.async = true;\r\n            s.type = \'text/javascript\';\r\n            s.src = \'//\' + disqus_shortname + \'.disqus.com/count.js\';\r\n            (document.getElementsByTagName(\'HEAD\')[0] || document.getElementsByTagName(\'BODY\')[0]).appendChild(s);\r\n        }());\r\n        // ]]>\r\n        </script>\r\n        <script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushJava.js\'></script>\n<script type=\'text/javascript\'>\n\t(function(){\n\t\tvar corecss = document.createElement(\'link\');\n\t\tvar themecss = document.createElement(\'link\');\n\t\tvar corecssurl = "http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9b";\r\n\t\tif ( corecss.setAttribute ) {\r\n\t\t\t\tcorecss.setAttribute( "rel", "stylesheet" );\r\n\t\t\t\tcorecss.setAttribute( "type", "text/css" );\r\n\t\t\t\tcorecss.setAttribute( "href", corecssurl );\r\n\t\t} else {\r\n\t\t\t\tcorecss.rel = "stylesheet";\r\n\t\t\t\tcorecss.href = corecssurl;\r\n\t\t}\r\n\t\tdocument.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );\r\n\t\tvar themecssurl = "http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9b";\r\n\t\tif ( themecss.setAttribute ) {\r\n\t\t\t\tthemecss.setAttribute( "rel", "stylesheet" );\r\n\t\t\t\tthemecss.setAttribute( "type", "text/css" );\r\n\t\t\t\tthemecss.setAttribute( "href", themecssurl );\r\n\t\t} else {\r\n\t\t\t\tthemecss.rel = "stylesheet";\r\n\t\t\t\tthemecss.href = themecssurl;\r\n\t\t}\r\n\t\t//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);\r\n\t\tdocument.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );\r\n\t})();\n\tSyntaxHighlighter.config.strings.expandSource = \'+ expand source\';\n\tSyntaxHighlighter.config.strings.help = \'?\';\n\tSyntaxHighlighter.config.strings.alert = \'SyntaxHighlighter\\n\\n\';\n\tSyntaxHighlighter.config.strings.noBrush = \'Can\\\'t find brush for: \';\n\tSyntaxHighlighter.config.strings.brushNotHtmlScript = \'Brush wasn\\\'t configured for html-script option: \';\n\tSyntaxHighlighter.defaults[\'gutter\'] = false;\n\tSyntaxHighlighter.defaults[\'pad-line-numbers\'] = true;\n\tSyntaxHighlighter.defaults[\'toolbar\'] = false;\n\tSyntaxHighlighter.all();\r\n</script>\r\n<link rel=\'stylesheet\' id=\'tabby-print-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/tabby-responsive-tabs/css/tabby-print.css\' type=\'text/css\' media=\'all\' />\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/js/comment-reply.min.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/js/selectnav.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/js/jquery/jquery.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/js/jquery/jquery-migrate.min.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/tabby-responsive-tabs/js/tabby.js\'></script>\n\n<script>jQuery(document).ready(function($) { RESPONSIVEUI.responsiveTabs(); })</script>\n\r\n\r\n<script type="text/javascript">\r\n\r\n  var _gaq = _gaq || [];\r\n  _gaq.push([\'_setAccount\', \'UA-12148232-1\']);\r\n  _gaq.push([\'_trackPageview\']);\r\n\r\n  (function() {\r\n    var ga = document.createElement(\'script\'); ga.type = \'text/javascript\'; ga.async = true;\r\n    ga.src = (\'https:\' == document.location.protocol ? \'https://ssl\' : \'http://www\') + \'.google-analytics.com/ga.js\';\r\n    var s = document.getElementsByTagName(\'script\')[0]; s.parentNode.insertBefore(ga, s);\r\n  })();\r\n\r\n</script>  \r\n<script async type="text/javascript" src="//cdn.fancybar.net/ac/fancybar.js?zoneid=1502&serve=C6ADVKE&placement=geeksforgeeks" id="_fancybar_js"></script>\r\n</body>\r\n</html>\n<!-- Dynamic page generated in 0.332 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2016-02-29 08:12:14 -->\n\n<!-- Compression = gzip -->\n<!-- super cache -->'
p286
sb.