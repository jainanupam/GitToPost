ccopy_reg
_reconstructor
p0
(cpost
Post
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'post_file'
p6
S'/Users/anupamjain/code/gitRepo/GitToPost/posts/Java/SearchPatternRabinKarp'
p7
sS'files_covered'
p8
c__builtin__
set
p9
((lp10
S'/Users/anupamjain/code/gitRepo/Questions/Algo/Java/SearchPatternRabinKarp.java'
p11
atp12
Rp13
sS'title'
p14
VSearching for Patterns | Set 3 (Rabin-Karp Algorithm)
p15
sS'file_name'
p16
g11
sS'link'
p17
S'http://www.geeksforgeeks.org/searching-for-patterns-set-3-rabin-karp-algorithm/'
p18
sS'host_name'
p19
S'www.geeksforgeeks.org'
p20
sS'problem_text'
p21
g0
(cbs4.element
Tag
p22
g2
Ntp23
Rp24
(dp25
S'can_be_empty_element'
p26
I00
sS'previous_element'
p27
NsS'next_sibling'
p28
NsS'name'
p29
S'p'
p30
sS'parent'
p31
NsS'namespace'
p32
NsS'prefix'
p33
NsS'previous_sibling'
p34
NsS'attrs'
p35
(dp36
sS'next_element'
p37
g0
(g22
g2
Ntp38
Rp39
(dp40
g26
I00
sg27
g24
sg28
g0
(g22
g2
Ntp41
Rp42
(dp43
g26
I00
sg27
g0
(g22
g2
Ntp44
Rp45
(dp46
g26
I00
sg27
g0
(cbs4.element
NavigableString
p47
c__builtin__
unicode
p48
V. You may assume that n > m.
p49
tp50
Rp51
(dp52
g34
g0
(g22
g2
Ntp53
Rp54
(dp55
g26
I00
sg27
g0
(g47
g48
V in 
p56
tp57
Rp58
(dp59
g34
g0
(g22
g2
Ntp60
Rp61
(dp62
g26
I00
sg27
g0
(g47
g48
V that prints all occurrences of 
p63
tp64
Rp65
(dp66
g34
g0
(g22
g2
Ntp67
Rp68
(dp69
g26
I00
sg27
g0
(g47
g48
V, write a function 
p70
tp71
Rp72
(dp73
g34
g0
(g22
g2
Ntp74
Rp75
(dp76
g26
I00
sg27
g0
(g47
g48
V and a pattern 
p77
tp78
Rp79
(dp80
g34
g0
(g22
g2
Ntp81
Rp82
(dp83
g26
I00
sg27
g0
(g47
g48
VGiven a text 
p84
tp85
Rp86
(dp87
g34
Nsg27
g39
sg28
g82
sg37
g82
sg31
g39
sbsg28
g79
sg29
Vem
p88
sg31
g39
sg32
Nsg33
Nsg34
g86
sg35
(dp89
sg37
g0
(g47
g48
Vtxt[0..n-1]
p90
tp91
Rp92
(dp93
g34
Nsg27
g82
sg28
Nsg37
g79
sg31
g82
sbsS'parser_class'
p94
cbs4
BeautifulSoup
p95
sS'hidden'
p96
I00
sS'contents'
p97
(lp98
g92
asbsg27
g92
sg28
g75
sg37
g75
sg31
g39
sbsg28
g72
sg29
Vem
p99
sg31
g39
sg32
Nsg33
Nsg34
g79
sg35
(dp100
sg37
g0
(g47
g48
Vpat[0..m-1]
p101
tp102
Rp103
(dp104
g34
Nsg27
g75
sg28
Nsg37
g72
sg31
g75
sbsg94
g95
sg96
I00
sg97
(lp105
g103
asbsg27
g103
sg28
g68
sg37
g68
sg31
g39
sbsg28
g65
sg29
Vem
p106
sg31
g39
sg32
Nsg33
Nsg34
g72
sg35
(dp107
sg37
g0
(g47
g48
Vsearch(char pat[], char txt[])
p108
tp109
Rp110
(dp111
g34
Nsg27
g68
sg28
Nsg37
g65
sg31
g68
sbsg94
g95
sg96
I00
sg97
(lp112
g110
asbsg27
g110
sg28
g61
sg37
g61
sg31
g39
sbsg28
g58
sg29
Vem
p113
sg31
g39
sg32
Nsg33
Nsg34
g65
sg35
(dp114
sg37
g0
(g47
g48
Vpat[]
p115
tp116
Rp117
(dp118
g34
Nsg27
g61
sg28
Nsg37
g58
sg31
g61
sbsg94
g95
sg96
I00
sg97
(lp119
g117
asbsg27
g117
sg28
g54
sg37
g54
sg31
g39
sbsg28
g51
sg29
Vem
p120
sg31
g39
sg32
Nsg33
Nsg34
g58
sg35
(dp121
sg37
g0
(g47
g48
Vtxt[]
p122
tp123
Rp124
(dp125
g34
Nsg27
g54
sg28
Nsg37
g51
sg31
g54
sbsg94
g95
sg96
I00
sg97
(lp126
g124
asbsg27
g124
sg28
g45
sg37
g45
sg31
g39
sbsg28
Nsg29
Vspan
p127
sg31
g39
sg32
Nsg33
Nsg34
g51
sg35
(dp128
Vid
p129
Vmore-11937
p130
ssg37
g42
sg94
g95
sg96
I00
sg97
(lp131
sbsg28
g0
(g22
g2
Ntp132
Rp133
(dp134
g26
I00
sg27
g0
(g47
g48
V\u000a1) Input:
p135
tp136
Rp137
(dp138
g34
g0
(g22
g2
Ntp139
Rp140
(dp141
g26
I01
sg27
g0
(g47
g48
VExamples:
p142
tp143
Rp144
(dp145
g34
Nsg27
g42
sg28
g140
sg37
g140
sg31
g42
sbsg28
g137
sg29
Vbr
p146
sg31
g42
sg32
Nsg33
Nsg34
g144
sg35
(dp147
sg37
g137
sg94
g95
sg96
I00
sg97
(lp148
sbsg27
g140
sg28
Nsg37
g133
sg31
g42
sbsg28
g0
(g22
g2
Ntp149
Rp150
(dp151
g26
I00
sg27
g0
(g47
g48
V\u000a  txt[] =  "THIS IS A TEST TEXT"\u000a  pat[] = "TEST"
p152
tp153
Rp154
(dp155
g34
Nsg27
g133
sg28
Nsg37
g150
sg31
g133
sbsg28
g0
(g22
g2
Ntp156
Rp157
(dp158
g26
I00
sg27
g0
(g47
g48
VOutput:
p159
tp160
Rp161
(dp162
g34
Nsg27
g150
sg28
Nsg37
g157
sg31
g150
sbsg28
g0
(g22
g2
Ntp163
Rp164
(dp165
g26
I00
sg27
g0
(g47
g48
VPattern found at index 10
p166
tp167
Rp168
(dp169
g34
Nsg27
g157
sg28
Nsg37
g164
sg31
g157
sbsg28
g0
(g22
g2
Ntp170
Rp171
(dp172
g26
I00
sg27
g0
(g47
g48
V2) Input:
p173
tp174
Rp175
(dp176
g34
Nsg27
g164
sg28
Nsg37
g171
sg31
g164
sbsg28
g0
(g22
g2
Ntp177
Rp178
(dp179
g26
I00
sg27
g0
(g47
g48
V  txt[] =  "AABAACAADAABAAABAA"\u000a  pat[] = "AABA"\u000a
p180
tp181
Rp182
(dp183
g34
Nsg27
g171
sg28
Nsg37
g178
sg31
g171
sbsg28
g0
(g22
g2
Ntp184
Rp185
(dp186
g26
I00
sg27
g0
(g47
g48
VOutput:
p187
tp188
Rp189
(dp190
g34
Nsg27
g178
sg28
Nsg37
g185
sg31
g178
sbsg28
g0
(g22
g2
Ntp191
Rp192
(dp193
g26
I00
sg27
g0
(g47
g48
V\u000a   Pattern found at index 0\u000a   Pattern found at index 9\u000a   Pattern found at index 13\u000a
p194
tp195
Rp196
(dp197
g34
Nsg27
g185
sg28
Nsg37
g192
sg31
g185
sbsg28
g0
(g22
g2
Ntp198
Rp199
(dp200
g26
I00
sg27
g0
(g47
g48
V\u000aLike the Naive Algorithm, Rabin-Karp algorithm also slides the pattern one by one. But unlike the Naive algorithm, Rabin Karp algorithm matches the hash value of the pattern with the hash value of current substring of text,  and if the hash values match then only it starts matching individual characters.  So Rabin Karp algorithm needs to calculate hash values for following strings.
p201
tp202
Rp203
(dp204
g34
g0
(g22
g2
Ntp205
Rp206
(dp207
g26
I01
sg27
g0
(g47
g48
V algorithm slides the pattern one by one.  After each slide, it one by one checks characters at the current shift and if all characters match then prints the match.
p208
tp209
Rp210
(dp211
g34
g0
(g22
g2
Ntp212
Rp213
(dp214
g26
I00
sg27
g0
(g47
g48
VThe 
p215
tp216
Rp217
(dp218
g34
Nsg27
g192
sg28
g213
sg37
g213
sg31
g192
sbsg28
g210
sg29
Va
p219
sg31
g192
sg32
Nsg33
Nsg34
g217
sg35
(dp220
Vhref
p221
Vhttp://geeksforgeeks.org/?p=11871
p222
ssg37
g0
(g47
g48
VNaive String Matching
p223
tp224
Rp225
(dp226
g34
Nsg27
g213
sg28
Nsg37
g210
sg31
g213
sbsg94
g95
sg96
I00
sg97
(lp227
g225
asbsg27
g225
sg28
g206
sg37
g206
sg31
g192
sbsg28
g203
sg29
Vbr
p228
sg31
g192
sg32
Nsg33
Nsg34
g210
sg35
(dp229
sg37
g203
sg94
g95
sg96
I00
sg97
(lp230
sbsg27
g206
sg28
Nsg37
g199
sg31
g192
sbsg28
g0
(g22
g2
Ntp231
Rp232
(dp233
g26
I00
sg27
g0
(g47
g48
V\u000a2) All the substrings of text of length m. 
p234
tp235
Rp236
(dp237
g34
g0
(g22
g2
Ntp238
Rp239
(dp240
g26
I01
sg27
g0
(g47
g48
V1) Pattern itself.
p241
tp242
Rp243
(dp244
g34
Nsg27
g199
sg28
g239
sg37
g239
sg31
g199
sbsg28
g236
sg29
Vbr
p245
sg31
g199
sg32
Nsg33
Nsg34
g243
sg35
(dp246
sg37
g236
sg94
g95
sg96
I00
sg97
(lp247
sbsg27
g239
sg28
Nsg37
g232
sg31
g199
sbsg28
g0
(g22
g2
Ntp248
Rp249
(dp250
g26
I00
sg27
g0
(g47
g48
V and rehash must be O(1) operation.
p251
tp252
Rp253
(dp254
g34
g0
(g22
g2
Ntp255
Rp256
(dp257
g26
I00
sg27
g0
(g47
g48
V= 
p258
tp259
Rp260
(dp261
g34
g0
(g22
g2
Ntp262
Rp263
(dp264
g26
I00
sg27
g0
(g47
g48
V i.e.,  
p265
tp266
Rp267
(dp268
g34
g0
(g22
g2
Ntp269
Rp270
(dp271
g26
I00
sg27
g0
(g47
g48
V and 
p272
tp273
Rp274
(dp275
g34
g0
(g22
g2
Ntp276
Rp277
(dp278
g26
I00
sg27
g0
(g47
g48
V must be efficiently computable from 
p279
tp280
Rp281
(dp282
g34
g0
(g22
g2
Ntp283
Rp284
(dp285
g26
I00
sg27
g0
(g47
g48
V\u000aHash at the next shift must be efficiently computable from the current hash value and next character in text or we can say 
p286
tp287
Rp288
(dp289
g34
g0
(g22
g2
Ntp290
Rp291
(dp292
g26
I01
sg27
g0
(g47
g48
VSince we need to efficiently calculate hash values for all the substrings of size m of text, we must have a hash function which has following property.
p293
tp294
Rp295
(dp296
g34
Nsg27
g232
sg28
g291
sg37
g291
sg31
g232
sbsg28
g288
sg29
Vbr
p297
sg31
g232
sg32
Nsg33
Nsg34
g295
sg35
(dp298
sg37
g288
sg94
g95
sg96
I00
sg97
(lp299
sbsg27
g291
sg28
g284
sg37
g284
sg31
g232
sbsg28
g281
sg29
Vem
p300
sg31
g232
sg32
Nsg33
Nsg34
g288
sg35
(dp301
sg37
g0
(g47
g48
Vhash(txt[s+1 .. s+m])
p302
tp303
Rp304
(dp305
g34
Nsg27
g284
sg28
Nsg37
g281
sg31
g284
sbsg94
g95
sg96
I00
sg97
(lp306
g304
asbsg27
g304
sg28
g277
sg37
g277
sg31
g232
sbsg28
g274
sg29
Vem
p307
sg31
g232
sg32
Nsg33
Nsg34
g281
sg35
(dp308
sg37
g0
(g47
g48
Vhash(txt[s .. s+m-1])
p309
tp310
Rp311
(dp312
g34
Nsg27
g277
sg28
Nsg37
g274
sg31
g277
sbsg94
g95
sg96
I00
sg97
(lp313
g311
asbsg27
g311
sg28
g270
sg37
g270
sg31
g232
sbsg28
g267
sg29
Vem
p314
sg31
g232
sg32
Nsg33
Nsg34
g274
sg35
(dp315
sg37
g0
(g47
g48
Vtxt[s+m]
p316
tp317
Rp318
(dp319
g34
Nsg27
g270
sg28
Nsg37
g267
sg31
g270
sbsg94
g95
sg96
I00
sg97
(lp320
g318
asbsg27
g318
sg28
g263
sg37
g263
sg31
g232
sbsg28
g260
sg29
Vem
p321
sg31
g232
sg32
Nsg33
Nsg34
g267
sg35
(dp322
sg37
g0
(g47
g48
Vhash(txt[s+1 .. s+m])
p323
tp324
Rp325
(dp326
g34
Nsg27
g263
sg28
Nsg37
g260
sg31
g263
sbsg94
g95
sg96
I00
sg97
(lp327
g325
asbsg27
g325
sg28
g256
sg37
g256
sg31
g232
sbsg28
g253
sg29
Vem
p328
sg31
g232
sg32
Nsg33
Nsg34
g260
sg35
(dp329
sg37
g0
(g47
g48
Vrehash(txt[s+m], hash(txt[s .. s+m-1])
p330
tp331
Rp332
(dp333
g34
Nsg27
g256
sg28
Nsg37
g253
sg31
g256
sbsg94
g95
sg96
I00
sg97
(lp334
g332
asbsg27
g332
sg28
Nsg37
g249
sg31
g232
sbsg28
g0
(g22
g2
Ntp335
Rp336
(dp337
g26
I00
sg27
g0
(g47
g48
VThe hash function suggested by Rabin and Karp calculates an integer value.  The integer value for a string is numeric value of a string. For example, if all possible characters are from 1 to 10, the numeric value of \u201c122\u201d will be 122. The number of possible characters is higher than 10 (256 in general) and pattern length can be large. So the numeric values cannot be practically stored as an integer. Therefore, the numeric value is calculated using modular arithmetic to make sure that the hash values can be stored in an integer variable (can fit in memory words).  To do rehashing, we need to take off the most significant digit and add the new least significant digit for in hash value.  Rehashing is done using the following formula. 
p338
tp339
Rp340
(dp341
g34
Nsg27
g249
sg28
Nsg37
g336
sg31
g249
sbsg28
g0
(g22
g2
Ntp342
Rp343
(dp344
g26
I00
sg27
g0
(g47
g48
Vhash( txt[s+1 .. s+m] ) = d ( hash( txt[s .. s+m-1]) \u2013 txt[s]*h ) + txt[s + m] ) mod q 
p345
tp346
Rp347
(dp348
g34
Nsg27
g0
(g22
g2
Ntp349
Rp350
(dp351
g26
I00
sg27
g336
sg28
Nsg29
Vem
p352
sg31
g336
sg32
Nsg33
Nsg34
Nsg35
(dp353
sg37
g347
sg94
g95
sg96
I00
sg97
(lp354
g347
asbsg28
Nsg37
g343
sg31
g350
sbsg28
g0
(g22
g2
Ntp355
Rp356
(dp357
g26
I00
sg27
g0
(g47
g48
Vh: d^(m-1)
p358
tp359
Rp360
(dp361
g34
Nsg27
g0
(g22
g2
Ntp362
Rp363
(dp364
g26
I00
sg27
g0
(g47
g48
V\u000a
p365
tp366
Rp367
(dp368
g34
g0
(g22
g2
Ntp369
Rp370
(dp371
g26
I01
sg27
g0
(g47
g48
V:  A prime number
p372
tp373
Rp374
(dp375
g34
g0
(g22
g2
Ntp376
Rp377
(dp378
g26
I00
sg27
g0
(g47
g48
V\u000a
p379
tp380
Rp381
(dp382
g34
g0
(g22
g2
Ntp383
Rp384
(dp385
g26
I01
sg27
g0
(g47
g48
V:  Number of characters in the alphabet
p386
tp387
Rp388
(dp389
g34
g0
(g22
g2
Ntp390
Rp391
(dp392
g26
I00
sg27
g0
(g47
g48
V\u000a
p393
tp394
Rp395
(dp396
g34
g0
(g22
g2
Ntp397
Rp398
(dp399
g26
I01
sg27
g0
(g47
g48
V+1)
p400
tp401
Rp402
(dp403
g34
g0
(g22
g2
Ntp404
Rp405
(dp406
g26
I00
sg27
g0
(g47
g48
V :  Hash value at next shift (or shift 
p407
tp408
Rp409
(dp410
g34
g0
(g22
g2
Ntp411
Rp412
(dp413
g26
I00
sg27
g0
(g47
g48
V\u000a
p414
tp415
Rp416
(dp417
g34
g0
(g22
g2
Ntp418
Rp419
(dp420
g26
I01
sg27
g0
(g47
g48
V.
p421
tp422
Rp423
(dp424
g34
g0
(g22
g2
Ntp425
Rp426
(dp427
g26
I00
sg27
g0
(g47
g48
V : Hash value at shift 
p428
tp429
Rp430
(dp431
g34
g0
(g22
g2
Ntp432
Rp433
(dp434
g26
I00
sg27
g343
sg28
g430
sg29
Vem
p435
sg31
g343
sg32
Nsg33
Nsg34
Nsg35
(dp436
sg37
g0
(g47
g48
Vhash( txt[s .. s+m-1] )
p437
tp438
Rp439
(dp440
g34
Nsg27
g433
sg28
Nsg37
g430
sg31
g433
sbsg94
g95
sg96
I00
sg97
(lp441
g439
asbsg27
g439
sg28
g426
sg37
g426
sg31
g343
sbsg28
g423
sg29
Vem
p442
sg31
g343
sg32
Nsg33
Nsg34
g430
sg35
(dp443
sg37
g0
(g47
g48
Vs
p444
tp445
Rp446
(dp447
g34
Nsg27
g426
sg28
Nsg37
g423
sg31
g426
sbsg94
g95
sg96
I00
sg97
(lp448
g446
asbsg27
g446
sg28
g419
sg37
g419
sg31
g343
sbsg28
g416
sg29
Vbr
p449
sg31
g343
sg32
Nsg33
Nsg34
g423
sg35
(dp450
sg37
g416
sg94
g95
sg96
I00
sg97
(lp451
sbsg27
g419
sg28
g412
sg37
g412
sg31
g343
sbsg28
g409
sg29
Vem
p452
sg31
g343
sg32
Nsg33
Nsg34
g416
sg35
(dp453
sg37
g0
(g47
g48
Vhash( txt[s+1 .. s+m] )
p454
tp455
Rp456
(dp457
g34
Nsg27
g412
sg28
Nsg37
g409
sg31
g412
sbsg94
g95
sg96
I00
sg97
(lp458
g456
asbsg27
g456
sg28
g405
sg37
g405
sg31
g343
sbsg28
g402
sg29
Vem
p459
sg31
g343
sg32
Nsg33
Nsg34
g409
sg35
(dp460
sg37
g0
(g47
g48
g444
tp461
Rp462
(dp463
g34
Nsg27
g405
sg28
Nsg37
g402
sg31
g405
sbsg94
g95
sg96
I00
sg97
(lp464
g462
asbsg27
g462
sg28
g398
sg37
g398
sg31
g343
sbsg28
g395
sg29
Vbr
p465
sg31
g343
sg32
Nsg33
Nsg34
g402
sg35
(dp466
sg37
g395
sg94
g95
sg96
I00
sg97
(lp467
sbsg27
g398
sg28
g391
sg37
g391
sg31
g343
sbsg28
g388
sg29
Vem
p468
sg31
g343
sg32
Nsg33
Nsg34
g395
sg35
(dp469
sg37
g0
(g47
g48
Vd
p470
tp471
Rp472
(dp473
g34
Nsg27
g391
sg28
Nsg37
g388
sg31
g391
sbsg94
g95
sg96
I00
sg97
(lp474
g472
asbsg27
g472
sg28
g384
sg37
g384
sg31
g343
sbsg28
g381
sg29
Vbr
p475
sg31
g343
sg32
Nsg33
Nsg34
g388
sg35
(dp476
sg37
g381
sg94
g95
sg96
I00
sg97
(lp477
sbsg27
g384
sg28
g377
sg37
g377
sg31
g343
sbsg28
g374
sg29
Vem
p478
sg31
g343
sg32
Nsg33
Nsg34
g381
sg35
(dp479
sg37
g0
(g47
g48
Vq
p480
tp481
Rp482
(dp483
g34
Nsg27
g377
sg28
Nsg37
g374
sg31
g377
sbsg94
g95
sg96
I00
sg97
(lp484
g482
asbsg27
g482
sg28
g370
sg37
g370
sg31
g343
sbsg28
g367
sg29
Vbr
p485
sg31
g343
sg32
Nsg33
Nsg34
g374
sg35
(dp486
sg37
g367
sg94
g95
sg96
I00
sg97
(lp487
sbsg27
g370
sg28
g363
sg37
g363
sg31
g343
sbsg28
Nsg29
Vem
p488
sg31
g343
sg32
Nsg33
Nsg34
g367
sg35
(dp489
sg37
g360
sg94
g95
sg96
I00
sg97
(lp490
g360
asbsg28
Nsg37
g356
sg31
g363
sbsg28
g0
(g22
g2
Ntp491
Rp492
(dp493
g26
I00
sg27
g0
(g22
g2
Ntp494
Rp495
(dp496
g26
I00
sg27
g0
(g47
g48
V\u000a
p497
tp498
Rp499
(dp500
g34
g0
(g22
g2
Ntp501
Rp502
(dp503
g26
I00
sg27
g0
(g47
g48
V\u000a
p504
tp505
Rp506
(dp507
g34
Nsg27
g0
(g22
g2
Ntp508
Rp509
(dp510
g26
I00
sg27
g0
(g47
g48
V\u000a
p511
tp512
Rp513
(dp514
g34
g0
(g22
g2
Ntp515
Rp516
(dp517
g26
I00
sg27
g0
(g47
g48
V\u000a
p518
tp519
Rp520
(dp521
g34
g0
(g22
g2
Ntp522
Rp523
(dp524
g26
I00
sg27
g0
(g47
g48
V\u000a
p525
tp526
Rp527
(dp528
g34
Nsg27
g0
(g22
g2
Ntp529
Rp530
(dp531
g26
I00
sg27
g0
(g47
g48
V\u000a
p532
tp533
Rp534
(dp535
g34
g0
(g22
g2
Ntp536
Rp537
(dp538
g26
I00
sg27
g0
(g47
g48
V\u000a
p539
tp540
Rp541
(dp542
g34
Nsg27
g356
sg28
g537
sg37
g537
sg31
g356
sbsg28
g534
sg29
Vh2
p543
sg31
g356
sg32
Nsg33
Nsg34
g541
sg35
(dp544
Vclass
p545
(lp546
Vtabtitle
p547
assg37
g0
(g47
g48
VC/C++
p548
tp549
Rp550
(dp551
g34
Nsg27
g537
sg28
Nsg37
g534
sg31
g537
sbsg94
g95
sg96
I00
sg97
(lp552
g550
asbsg27
g550
sg28
g530
sg37
g530
sg31
g356
sbsg28
g516
sg29
Vdiv
p553
sg31
g356
sg32
Nsg33
Nsg34
g534
sg35
(dp554
Vclass
p555
(lp556
Vtabcontent
p557
assg37
g527
sg94
g95
sg96
I00
sg97
(lp558
g527
ag523
ag520
asbsg28
g523
sg37
g523
sg31
g530
sbsg28
g520
sg29
Vpre
p559
sg31
g530
sg32
Nsg33
Nsg34
g527
sg35
(dp560
Vclass
p561
(lp562
Vbrush:
p563
aVcpp;
p564
aVhighlight:
p565
aV[9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67];
p566
aVtitle:
p567
aV;
p568
aVnotranslate
p569
asVtitle
p570
V
p571
ssg37
g0
(g47
g48
V\u000a/* Following program is a C implementation of Rabin Karp\u000aAlgorithm given in the CLRS book */\u000a#include<stdio.h>\u000a#include<string.h>\u000a\u000a// d is the number of characters in input alphabet\u000a#define d 256\u000a\u000a/* pat -> pattern\u000a    txt -> text\u000a    q -> A prime number\u000a*/\u000avoid search(char pat[], char txt[], int q)\u000a{\u000a    int M = strlen(pat);\u000a    int N = strlen(txt);\u000a    int i, j;\u000a    int p = 0; // hash value for pattern\u000a    int t = 0; // hash value for txt\u000a    int h = 1;\u000a\u000a    // The value of h would be "pow(d, M-1)%q"\u000a    for (i = 0; i < M-1; i++)\u000a        h = (h*d)%q;\u000a\u000a    // Calculate the hash value of pattern and first\u000a    // window of text\u000a    for (i = 0; i < M; i++)\u000a    {\u000a        p = (d*p + pat[i])%q;\u000a        t = (d*t + txt[i])%q;\u000a    }\u000a\u000a    // Slide the pattern over text one by one\u000a    for (i = 0; i <= N - M; i++)\u000a    {\u000a\u000a        // Check the hash values of current window of text\u000a        // and pattern. If the hash values match then only\u000a        // check for characters on by one\u000a        if ( p == t )\u000a        {\u000a            /* Check for characters one by one */\u000a            for (j = 0; j < M; j++)\u000a            {\u000a                if (txt[i+j] != pat[j])\u000a                    break;\u000a            }\u000a\u000a            // if p == t and pat[0...M-1] = txt[i, i+1, ...i+M-1]\u000a            if (j == M)\u000a                printf("Pattern found at index %d \u005cn", i);\u000a        }\u000a\u000a        // Calculate hash value for next window of text: Remove\u000a        // leading digit, add trailing digit\u000a        if ( i < N-M )\u000a        {\u000a            t = (d*(t - txt[i]*h) + txt[i+M])%q;\u000a\u000a            // We might get negative value of t, converting it\u000a            // to positive\u000a            if (t < 0)\u000a            t = (t + q);\u000a        }\u000a    }\u000a}\u000a\u000a/* Driver program to test above function */\u000aint main()\u000a{\u000a    char txt[] = "GEEKS FOR GEEKS";\u000a    char pat[] = "GEEK";\u000a    int q = 101; // A prime number\u000a    search(pat, txt, q);\u000a    return 0;\u000a}\u000a
p572
tp573
Rp574
(dp575
g34
Nsg27
g523
sg28
Nsg37
g520
sg31
g523
sbsg94
g95
sg96
I00
sg97
(lp576
g574
asbsg27
g574
sg28
Nsg37
g516
sg31
g530
sbsg28
g513
sg29
Vh2
p577
sg31
g356
sg32
Nsg33
Nsg34
g530
sg35
(dp578
Vclass
p579
(lp580
Vtabtitle
p581
assg37
g0
(g47
g48
VPython
p582
tp583
Rp584
(dp585
g34
Nsg27
g516
sg28
Nsg37
g513
sg31
g516
sbsg94
g95
sg96
I00
sg97
(lp586
g584
asbsg27
g584
sg28
g509
sg37
g509
sg31
g356
sbsg28
Nsg29
Vdiv
p587
sg31
g356
sg32
Nsg33
Nsg34
g513
sg35
(dp588
Vclass
p589
(lp590
Vtabcontent
p591
assg37
g506
sg94
g95
sg96
I00
sg97
(lp592
g506
ag502
ag499
ag495
asbsg28
g502
sg37
g502
sg31
g509
sbsg28
g499
sg29
Vpre
p593
sg31
g509
sg32
Nsg33
Nsg34
g506
sg35
(dp594
Vclass
p595
(lp596
Vbrush:
p597
aVpython;
p598
aVhighlight:
p599
aV[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54];
p600
aVtitle:
p601
ag568
aVnotranslate
p602
asVtitle
p603
g571
ssg37
g0
(g47
g48
V\u000a# Following program is the python implementation of\u000a# Rabin Karp Algorithm given in CLRS book\u000a\u000a# d is the number of characters in input alphabet\u000ad = 256\u000a\u000a# pat  -> pattern\u000a# txt  -> text\u000a# q    -> A prime number\u000a\u000adef search(pat, txt, q):\u000a    M = len(pat)\u000a    N = len(txt)\u000a    i = 0\u000a    j = 0\u000a    p = 0    # hash value for pattern\u000a    t = 0    # hash value for txt\u000a    h = 1\u000a\u000a    # The value of h would be "pow(d, M-1)%q"\u000a    for i in xrange(M-1):\u000a        h = (h*d)%q\u000a\u000a    # Calculate the hash value of pattern and first window\u000a    # of text\u000a    for i in xrange(M):\u000a        p = (d*p + ord(pat[i]))%q\u000a        t = (d*t + ord(txt[i]))%q\u000a\u000a    # Slide the pattern over text one by one\u000a    for i in xrange(N-M+1):\u000a        # Check the hash values of current window of text and\u000a        # pattern if the hash values match then only check\u000a        # for characters on by one\u000a        if p==t:\u000a            # Check for characters one by one\u000a            for j in xrange(M):\u000a                if txt[i+j] != pat[j]:\u000a                    break\u000a\u000a            j+=1\u000a            # if p == t and pat[0...M-1] = txt[i, i+1, ...i+M-1]\u000a            if j==M:\u000a                print "Pattern found at index " + str(i)\u000a\u000a        # Calculate hash value for next window of text: Remove\u000a        # leading digit, add trailing digit\u000a        if i < N-M:\u000a            t = (d*(t-ord(txt[i])*h) + ord(txt[i+M]))%q\u000a\u000a            # We might get negative values of t, converting it to\u000a            # positive\u000a            if t < 0:\u000a                t = t+q\u000a\u000a# Driver program to test the above function\u000atxt = "GEEKS FOR GEEKS"\u000apat = "GEEK"\u000aq = 101 # A prime number\u000asearch(pat,txt,q)\u000a\u000a# This code is contributed by Bhavya Jain\u000a
p604
tp605
Rp606
(dp607
g34
Nsg27
g502
sg28
Nsg37
g499
sg31
g502
sbsg94
g95
sg96
I00
sg97
(lp608
g606
asbsg27
g606
sg28
g495
sg37
g495
sg31
g509
sbsg28
Nsg29
Vp
p609
sg31
g509
sg32
Nsg33
Nsg34
g499
sg35
(dp610
sg37
g492
sg94
g95
sg96
I00
sg97
(lp611
sbsg28
g0
(g22
g2
Ntp612
Rp613
(dp614
g26
I00
sg27
g0
(g47
g48
VPattern found at index 0\u000aPattern found at index 10
p615
tp616
Rp617
(dp618
g34
Nsg27
g492
sg28
Nsg37
g613
sg31
g492
sbsg28
g0
(g22
g2
Ntp619
Rp620
(dp621
g26
I00
sg27
g0
(g47
g48
VThe average and best case running time of the Rabin-Karp algorithm is O(n+m), but its worst-case time is O(nm).  Worst case of Rabin-Karp algorithm occurs when all characters of pattern and text are same as the hash values of all the substrings of txt[] match with hash value of pat[].  For example pat[] =  \u201cAAA\u201d and txt[] = \u201cAAAAAAA\u201d.
p622
tp623
Rp624
(dp625
g34
Nsg27
g613
sg28
Nsg37
g620
sg31
g613
sbsg28
g0
(g22
g2
Ntp626
Rp627
(dp628
g26
I00
sg27
g0
(g47
g48
VPlease write comments if you find anything incorrect, or you want to share more information about the topic discussed above.
p629
tp630
Rp631
(dp632
g34
Nsg27
g620
sg28
Nsg37
g627
sg31
g620
sbsg28
g0
(g22
g2
Ntp633
Rp634
(dp635
g26
I00
sg27
g0
(g47
g48
VReferences:
p636
tp637
Rp638
(dp639
g34
Nsg27
g0
(g22
g2
Ntp640
Rp641
(dp642
g26
I00
sg27
g627
sg28
Nsg29
Vstrong
p643
sg31
g627
sg32
Nsg33
Nsg34
Nsg35
(dp644
sg37
g638
sg94
g95
sg96
I00
sg97
(lp645
g638
asbsg28
Nsg37
g634
sg31
g641
sbsg28
g0
(g22
g2
Ntp646
Rp647
(dp648
g26
I00
sg27
g0
(g47
g48
Vhttp://net.pku.edu.cn/~course/cs101/2007/resource/Intro2Algorithm/book6/chap34.htm
p649
tp650
Rp651
(dp652
g34
Nsg27
g0
(g22
g2
Ntp653
Rp654
(dp655
g26
I00
sg27
g634
sg28
Nsg29
g219
sg31
g634
sg32
Nsg33
Nsg34
Nsg35
(dp656
Vhref
p657
Vhttp://net.pku.edu.cn/~course/cs101/2007/resource/Intro2Algorithm/book6/chap34.htm
p658
ssg37
g651
sg94
g95
sg96
I00
sg97
(lp659
g651
asbsg28
Nsg37
g647
sg31
g654
sbsg28
g0
(g22
g2
Ntp660
Rp661
(dp662
g26
I00
sg27
g0
(g47
g48
Vhttp://www.cs.princeton.edu/courses/archive/fall04/cos226/lectures/string.4up.pdf
p663
tp664
Rp665
(dp666
g34
Nsg27
g0
(g22
g2
Ntp667
Rp668
(dp669
g26
I00
sg27
g647
sg28
Nsg29
g219
sg31
g647
sg32
Nsg33
Nsg34
Nsg35
(dp670
Vhref
p671
Vhttp://www.cs.princeton.edu/courses/archive/fall04/cos226/lectures/string.4up.pdf
p672
ssg37
g665
sg94
g95
sg96
I00
sg97
(lp673
g665
asbsg28
Nsg37
g661
sg31
g668
sbsg28
g0
(g22
g2
Ntp674
Rp675
(dp676
g26
I00
sg27
g0
(g47
g48
Vhttp://en.wikipedia.org/wiki/Rabin-Karp_string_search_algorithm
p677
tp678
Rp679
(dp680
g34
Nsg27
g0
(g22
g2
Ntp681
Rp682
(dp683
g26
I00
sg27
g661
sg28
Nsg29
g219
sg31
g661
sg32
Nsg33
Nsg34
Nsg35
(dp684
Vhref
p685
Vhttp://en.wikipedia.org/wiki/Rabin-Karp_string_search_algorithm
p686
ssg37
g679
sg94
g95
sg96
I00
sg97
(lp687
g679
asbsg28
Nsg37
g675
sg31
g682
sbsg28
g0
(g22
g2
Ntp688
Rp689
(dp690
g26
I00
sg27
g0
(g47
g48
VSearching for Patterns | Set 2 (KMP Algorithm)
p691
tp692
Rp693
(dp694
g34
Nsg27
g0
(g22
g2
Ntp695
Rp696
(dp697
g26
I00
sg27
g0
(g47
g48
V\u000a
p698
tp699
Rp700
(dp701
g34
g0
(g22
g2
Ntp702
Rp703
(dp704
g26
I01
sg27
g0
(g47
g48
VSearching for Patterns | Set 1 (Naive Pattern Searching)
p705
tp706
Rp707
(dp708
g34
Nsg27
g0
(g22
g2
Ntp709
Rp710
(dp711
g26
I00
sg27
g0
(g47
g48
V\u000a
p712
tp713
Rp714
(dp715
g34
g0
(g22
g2
Ntp716
Rp717
(dp718
g26
I01
sg27
g0
(g47
g48
VRelated Posts:
p719
tp720
Rp721
(dp722
g34
Nsg27
g0
(g22
g2
Ntp723
Rp724
(dp725
g26
I00
sg27
g675
sg28
g717
sg29
Vstrong
p726
sg31
g675
sg32
Nsg33
Nsg34
Nsg35
(dp727
sg37
g721
sg94
g95
sg96
I00
sg97
(lp728
g721
asbsg28
Nsg37
g717
sg31
g724
sbsg28
g714
sg29
Vbr
p729
sg31
g675
sg32
Nsg33
Nsg34
g724
sg35
(dp730
sg37
g714
sg94
g95
sg96
I00
sg97
(lp731
sbsg27
g717
sg28
g710
sg37
g710
sg31
g675
sbsg28
g703
sg29
g219
sg31
g675
sg32
Nsg33
Nsg34
g714
sg35
(dp732
Vhref
p733
Vhttp://geeksforgeeks.org/?p=11871
p734
ssg37
g707
sg94
g95
sg96
I00
sg97
(lp735
g707
asbsg28
Nsg37
g703
sg31
g710
sbsg28
g700
sg29
Vbr
p736
sg31
g675
sg32
Nsg33
Nsg34
g710
sg35
(dp737
sg37
g700
sg94
g95
sg96
I00
sg97
(lp738
sbsg27
g703
sg28
g696
sg37
g696
sg31
g675
sbsg28
Nsg29
g219
sg31
g675
sg32
Nsg33
Nsg34
g700
sg35
(dp739
Vhref
p740
Vhttp://geeksforgeeks.org/?p=11902
p741
ssg37
g693
sg94
g95
sg96
I00
sg97
(lp742
g693
asbsg28
Nsg37
g689
sg31
g696
sbsg28
g0
(g22
g2
Ntp743
Rp744
(dp745
g26
I00
sg27
g689
sg28
g0
(g22
g2
Ntp746
Rp747
(dp748
g26
I00
sg27
g744
sg28
g0
(g22
g2
Ntp749
Rp750
(dp751
g26
I01
sg27
g0
(g47
g48
V\u000a(adsbygoogle = window.adsbygoogle || []).push({});\u000a
p752
tp753
Rp754
(dp755
g34
Nsg27
g747
sg28
Nsg37
g750
sg31
g747
sbsg28
Nsg29
Vbr
p756
sg31
g24
sg32
Nsg33
Nsg34
g747
sg35
(dp757
sg37
Nsg94
g95
sg96
I00
sg97
(lp758
sbsg29
Vscript
p759
sg31
g24
sg32
Nsg33
Nsg34
g744
sg35
(dp760
sg37
g754
sg94
g95
sg96
I00
sg97
(lp761
g754
asbsg29
Vins
p762
sg31
g24
sg32
Nsg33
Nsg34
g689
sg35
(dp763
Vstyle
p764
Vdisplay:inline-block;width:336px;height:280px
p765
sVdata-ad-client
p766
Vca-pub-9465609616171866
p767
sVclass
p768
(lp769
Vadsbygoogle
p770
asVdata-ad-slot
p771
V4061219431
p772
ssg37
g747
sg94
g95
sg96
I00
sg97
(lp773
sbsg29
Vscript
p774
sg31
g24
sg32
Nsg33
Nsg34
g675
sg35
(dp775
Vasync
p776
S''
p777
sVsrc
p778
V//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js
p779
ssg37
g744
sg94
g95
sg96
I00
sg97
(lp780
sbsg29
g609
sg31
g24
sg32
Nsg33
Nsg34
g661
sg35
(dp781
sg37
g724
sg94
g95
sg96
I00
sg97
(lp782
g724
ag717
ag714
ag710
ag703
ag700
ag696
asbsg29
g609
sg31
g24
sg32
Nsg33
Nsg34
g647
sg35
(dp783
sg37
g682
sg94
g95
sg96
I00
sg97
(lp784
g682
asbsg29
g609
sg31
g24
sg32
Nsg33
Nsg34
g634
sg35
(dp785
sg37
g668
sg94
g95
sg96
I00
sg97
(lp786
g668
asbsg29
g609
sg31
g24
sg32
Nsg33
Nsg34
g627
sg35
(dp787
sg37
g654
sg94
g95
sg96
I00
sg97
(lp788
g654
asbsg29
g609
sg31
g24
sg32
Nsg33
Nsg34
g620
sg35
(dp789
sg37
g641
sg94
g95
sg96
I00
sg97
(lp790
g641
asbsg29
g609
sg31
g24
sg32
Nsg33
Nsg34
g613
sg35
(dp791
sg37
g631
sg94
g95
sg96
I00
sg97
(lp792
g631
asbsg29
g609
sg31
g24
sg32
Nsg33
Nsg34
g492
sg35
(dp793
sg37
g624
sg94
g95
sg96
I00
sg97
(lp794
g624
asbsg29
Vpre
p795
sg31
g24
sg32
Nsg33
Nsg34
g356
sg35
(dp796
sg37
g617
sg94
g95
sg96
I00
sg97
(lp797
g617
asbsg29
Vdiv
p798
sg31
g24
sg32
Nsg33
Nsg34
g343
sg35
(dp799
Vclass
p800
(lp801
Vresponsive-tabs
p802
assg37
g541
sg94
g95
sg96
I00
sg97
(lp803
g541
ag537
ag534
ag530
ag516
ag513
ag509
asbsg29
g609
sg31
g24
sg32
Nsg33
Nsg34
g336
sg35
(dp804
sg37
g433
sg94
g95
sg96
I00
sg97
(lp805
g433
ag430
ag426
ag423
ag419
ag416
ag412
ag409
ag405
ag402
ag398
ag395
ag391
ag388
ag384
ag381
ag377
ag374
ag370
ag367
ag363
asbsg29
g609
sg31
g24
sg32
Nsg33
Nsg34
g249
sg35
(dp806
sg37
g350
sg94
g95
sg96
I00
sg97
(lp807
g350
asbsg29
g609
sg31
g24
sg32
Nsg33
Nsg34
g232
sg35
(dp808
sg37
g340
sg94
g95
sg96
I00
sg97
(lp809
g340
asbsg29
g609
sg31
g24
sg32
Nsg33
Nsg34
g199
sg35
(dp810
sg37
g295
sg94
g95
sg96
I00
sg97
(lp811
g295
ag291
ag288
ag284
ag281
ag277
ag274
ag270
ag267
ag263
ag260
ag256
ag253
asbsg29
g609
sg31
g24
sg32
Nsg33
Nsg34
g192
sg35
(dp812
sg37
g243
sg94
g95
sg96
I00
sg97
(lp813
g243
ag239
ag236
asbsg29
g609
sg31
g24
sg32
Nsg33
Nsg34
g185
sg35
(dp814
sg37
g217
sg94
g95
sg96
I00
sg97
(lp815
g217
ag213
ag210
ag206
ag203
asbsg29
Vpre
p816
sg31
g24
sg32
Nsg33
Nsg34
g178
sg35
(dp817
sg37
g196
sg94
g95
sg96
I00
sg97
(lp818
g196
asbsg29
g609
sg31
g24
sg32
Nsg33
Nsg34
g171
sg35
(dp819
sg37
g189
sg94
g95
sg96
I00
sg97
(lp820
g189
asbsg29
Vpre
p821
sg31
g24
sg32
Nsg33
Nsg34
g164
sg35
(dp822
sg37
g182
sg94
g95
sg96
I00
sg97
(lp823
g182
asbsg29
g609
sg31
g24
sg32
Nsg33
Nsg34
g157
sg35
(dp824
sg37
g175
sg94
g95
sg96
I00
sg97
(lp825
g175
asbsg29
g609
sg31
g24
sg32
Nsg33
Nsg34
g150
sg35
(dp826
sg37
g168
sg94
g95
sg96
I00
sg97
(lp827
g168
asbsg29
g609
sg31
g24
sg32
Nsg33
Nsg34
g133
sg35
(dp828
sg37
g161
sg94
g95
sg96
I00
sg97
(lp829
g161
asbsg29
Vpre
p830
sg31
g24
sg32
Nsg33
Nsg34
g42
sg35
(dp831
sg37
g154
sg94
g95
sg96
I00
sg97
(lp832
g154
asbsg29
g609
sg31
g24
sg32
Nsg33
Nsg34
g39
sg35
(dp833
sg37
g144
sg94
g95
sg96
I00
sg97
(lp834
g144
ag140
ag137
asbsg29
g609
sg31
g24
sg32
Nsg33
Nsg34
Nsg35
(dp835
sg37
g86
sg94
g95
sg96
I00
sg97
(lp836
g86
ag82
ag79
ag75
ag72
ag68
ag65
ag61
ag58
ag54
ag51
ag45
asbsg94
Nsg96
I00
sg97
(lp837
g39
ag42
ag133
ag150
ag157
ag164
ag171
ag178
ag185
ag192
ag199
ag232
ag249
ag336
ag343
ag356
ag492
ag613
ag620
ag627
ag634
ag647
ag661
ag675
ag689
ag744
ag747
ag750
asbsS'raw_page'
p838
S'<!DOCTYPE html>\r\n<!--[if IE 7]>\r\n<html class="ie ie7" lang="en-US" prefix="og: http://ogp.me/ns#">\r\n<![endif]-->\r\n<!--[if IE 8]>\r\n<html class="ie ie8" lang="en-US" prefix="og: http://ogp.me/ns#">\r\n<![endif]-->\r\n<!--[if !(IE 7) | !(IE 8)  ]><!-->\r\n<html lang="en-US" prefix="og: http://ogp.me/ns#">\r\n<!--<![endif]-->\r\n<head>\r\n<meta charset="UTF-8" />\r\n<meta name="viewport" content="width=device-width" />\r\n\r\n<meta property="og:image" content="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/gfg_200X200.png">\r\n<meta property="og:image:type" content="image/png">\r\n<meta property="og:image:width" content="200">\r\n<meta property="og:image:height" content="200">\r\n\r\n<title>Searching for Patterns | Set 3 (Rabin-Karp Algorithm) - GeeksforGeeks</title>\r\n<link rel="profile" href="http://gmpg.org/xfn/11" />\r\n<link rel="pingback" href="http://www.geeksforgeeks.org/xmlrpc.php" />\r\n<!--[if lt IE 9]>\r\n<script src="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/js/html5.js" type="text/javascript"></script>\r\n<![endif]-->\r\n\n<!-- This site is optimized with the Yoast SEO plugin v3.0.7 - https://yoast.com/wordpress/plugins/seo/ -->\n<link rel="canonical" href="http://www.geeksforgeeks.org/searching-for-patterns-set-3-rabin-karp-algorithm/" />\n<meta property="og:locale" content="en_US" />\n<meta property="og:type" content="article" />\n<meta property="og:title" content="Searching for Patterns | Set 3 (Rabin-Karp Algorithm) - GeeksforGeeks" />\n<meta property="og:description" content="Given a text txt[0..n-1] and a pattern pat[0..m-1], write a function search(char pat[], char txt[]) that prints all occurrences of pat[] in txt[]. You may assume that n &gt; m. Examples: 1) Input: txt[] = &quot;THIS IS A TEST TEXT&quot; pat[] = &quot;TEST&quot; Output: Pattern found at index 10 2) Input: txt[] = &quot;AABAACAADAABAAABAA&quot; pat[]\xe2\x80\xa6 Read More &raquo;" />\n<meta property="og:url" content="http://www.geeksforgeeks.org/searching-for-patterns-set-3-rabin-karp-algorithm/" />\n<meta property="og:site_name" content="GeeksforGeeks" />\n<meta property="article:tag" content="Pattern Searching" />\n<meta property="article:section" content="Pattern Searching" />\n<meta property="article:published_time" content="2011-05-18T15:46:28+00:00" />\n<meta property="article:modified_time" content="2015-10-30T03:14:02+00:00" />\n<meta property="og:updated_time" content="2015-10-30T03:14:02+00:00" />\n<!-- / Yoast SEO plugin. -->\n\n\t\t<script type="text/javascript">\n\t\t\twindow._wpemojiSettings = {"baseUrl":"http:\\/\\/s.w.org\\/images\\/core\\/emoji\\/72x72\\/","ext":".png","source":{"concatemoji":"http:\\/\\/www.geeksforgeeks.org\\/wp-includes\\/js\\/wp-emoji-release.min.js"}};\n\t\t\t!function(a,b,c){function d(a){var c=b.createElement("canvas"),d=c.getContext&&c.getContext("2d");return d&&d.fillText?(d.textBaseline="top",d.font="600 32px Arial","flag"===a?(d.fillText(String.fromCharCode(55356,56812,55356,56807),0,0),c.toDataURL().length>3e3):(d.fillText(String.fromCharCode(55357,56835),0,0),0!==d.getImageData(16,16,1,1).data[0])):!1}function e(a){var c=b.createElement("script");c.src=a,c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f,g;c.supports={simple:d("simple"),flag:d("flag")},c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.simple&&c.supports.flag||(g=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",g,!1),a.addEventListener("load",g,!1)):(a.attachEvent("onload",g),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&&f.twemoji&&(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);\n\t\t</script>\n\t\t<style type="text/css">\nimg.wp-smiley,\nimg.emoji {\n\tdisplay: inline !important;\n\tborder: none !important;\n\tbox-shadow: none !important;\n\theight: 1em !important;\n\twidth: 1em !important;\n\tmargin: 0 .07em !important;\n\tvertical-align: -0.1em !important;\n\tbackground: none !important;\n\tpadding: 0 !important;\n}\n</style>\n<link rel=\'stylesheet\' id=\'wp-pagenavi-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/wp-pagenavi/pagenavi-css.css\' type=\'text/css\' media=\'all\' />\n<link rel=\'stylesheet\' id=\'themonic-fonts-css\'  href=\'http://fonts.googleapis.com/css?family=Ubuntu:400,700&#038;subset=latin,latin-ext\' type=\'text/css\' media=\'all\' />\n<link rel=\'stylesheet\' id=\'themonic-style-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/style.css\' type=\'text/css\' media=\'all\' />\n<link rel=\'stylesheet\' id=\'custom-style-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/custom.css\' type=\'text/css\' media=\'all\' />\n<!--[if lt IE 9]>\n<link rel=\'stylesheet\' id=\'themonic-ie-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/css/ie.css\' type=\'text/css\' media=\'all\' />\n<![endif]-->\n<meta name="generator" content="WordPress 4.2.7" />\n<style type="text/css" id="custom-background-css">\nbody.custom-background { background-color: #ffffff; }\n</style>\n<style type="text/css" id="syntaxhighlighteranchor"></style>\n<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<script>\r\n  (adsbygoogle = window.adsbygoogle || []).push({\r\n    google_ad_client: "ca-pub-9465609616171866",\r\n    enable_page_level_ads: true\r\n  });\r\n</script>\r\n</head>\r\n<body class="single single-post postid-11937 single-format-standard custom-background custom-background-white custom-font-enabled">\r\n<div id="page" class="hfeed site">\r\n\t<header id="masthead" class="site-header" role="banner">\r\n\t\t\t\t\t<hgroup>\r\n\t\t\t<a href="http://www.geeksforgeeks.org/" title="GeeksforGeeks" rel="home">GeeksforGeeks</a>\r\n\t\t\t\t<br .../> <a class="site-description">A computer science portal for geeks</a>\r\n\t\t</hgroup>\r\n\r\n<div style="float:right;">\r\n<hgroup style="float:right;">   \r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://www.geeksforgeeks.org/campus-ambassador-program-by-geeksforgeeks/">CA</a>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://geeksquiz.com/gate-corner-2/">GATE CS</a>\r\n\r\n<strong><a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://practice.geeksforgeeks.org/">Practice</a></strong>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://www.geeksforgeeks.org/suggest/">Suggest</a>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://code.geeksforgeeks.org/">IDE</a>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://qa.geeksforgeeks.org/">Q&A</a>\r\n\r\n<a style="padding:0px 30px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://geeksquiz.com/">GeeksQuiz</a>\r\n\r\n</hgroup><br></br>\r\n\r\n<span style="display:inline-block; width:300px;float:right;">\r\n<script>\r\n  (function() {\r\n    var cx = \'009682134359037907028:tj6eafkv_be\';\r\n    var gcse = document.createElement(\'script\');\r\n    gcse.type = \'text/javascript\';\r\n    gcse.async = true;\r\n    gcse.src = (document.location.protocol == \'https:\' ? \'https:\' : \'http:\') +\r\n        \'//cse.google.com/cse.js?cx=\' + cx;\r\n    var s = document.getElementsByTagName(\'script\')[0];\r\n    s.parentNode.insertBefore(gcse, s);\r\n  })();\r\n</script>\r\n<gcse:search></gcse:search>\r\n\r\n<style type="text/css">\r\n  .gsc-control-cse {\r\n     padding: 0px 10px;\r\n  } \r\n\r\n  .gsc-control-cse {\r\n    font-family: "Trebuchet MS", sans-serif;\r\n    /*border-color: #E1F3DA;*/\r\n    /*background-color: #E1F3DA;*/\r\n  }\r\n  input.gsc-input {\r\n    border-color: #94CC7A;\r\n  }\r\n  input.gsc-search-button {\r\n    border-color: #94CC7A;\r\n    background-color: #4CB96B;\r\n    margin-top:7px;\r\n  }\r\n  .gsc-tabHeader.gsc-tabhInactive {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gsc-tabHeader.gsc-tabhActive {\r\n    border-color: #A9DA92;\r\n    background-color: #A9DA92;\r\n  }\r\n  .gsc-tabsArea {\r\n    border-color: #A9DA92;\r\n  }\r\n  .gsc-webResult.gsc-result {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gsc-webResult.gsc-result:hover {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:link,\r\n  .gs-webResult.gs-result a.gs-title:link b {\r\n    color: #009900;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:visited,\r\n  .gs-webResult.gs-result a.gs-title:visited b {\r\n    color: #009900;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:hover,\r\n  .gs-webResult.gs-result a.gs-title:hover b {\r\n    color: #003300;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:active,\r\n  .gs-webResult.gs-result a.gs-title:active b {\r\n    color: #009900;\r\n  }\r\n  .gsc-cursor-page {\r\n    color: #009900;\r\n  }\r\n  a.gsc-trailing-more-results:link {\r\n    color: #009900;\r\n  }\r\n  .gs-webResult.gs-result .gs-snippet {\r\n    color: #454545;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl {\r\n    color: #33cc00;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl-short {\r\n    color: #33cc00;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl-short {\r\n    display: none;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl-long {\r\n    display: block;\r\n  }\r\n  .gsc-cursor-box {\r\n    border-color: #A9DA92;\r\n  }\r\n  .gsc-results .gsc-cursor-page {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {\r\n    border-color: #A9DA92;\r\n    background-color: #A9DA92;\r\n  }\r\n  .gs-promotion.gs-result {\r\n    border-color: #94CC7A;\r\n    background-color: #CBE8B4;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:link {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:visited {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:hover {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:active {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result .gs-snippet {\r\n    color: #454545;\r\n  }\r\n  .gs-promotion.gs-result .gs-visibleUrl,\r\n  .gs-promotion.gs-result .gs-visibleUrl-short {\r\n    color: #815FA7;\r\n  }\r\n  .gsib_a {\r\n    padding : 2px;\r\n  }\r\n</style>    \r\n</span>\r\n</div>\r\n\r\n\t\t\r\n\t\t\r\n\t\t<nav id="site-navigation" class="themonic-nav" role="navigation">\r\n\t\t\t<a class="assistive-text" href="#content" title="Skip to content">Skip to content</a>\r\n\t\t\t<div class="menu-iconic-container"><ul id="menu-top" class="nav-menu"><li id="menu-item-135003" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-135003"><a href="http://www.geeksforgeeks.org/">Home</a></li>\n<li id="menu-item-135004" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-135004"><a title="Algorithms" href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algo</a>\n<ul class="sub-menu">\n\t<li id="menu-item-135030" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135030"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#AnalysisofAlgorithms">Analysis of Algorithms</a></li>\n\t<li id="menu-item-135031" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135031"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#SearchingandSorting">Searching and Sorting</a></li>\n\t<li id="menu-item-135032" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135032"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#GreedyAlgorithms">Greedy Algorithms</a></li>\n\t<li id="menu-item-135033" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135033"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#DynamicProgramming">Dynamic Programming</a></li>\n\t<li id="menu-item-135034" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135034"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#PatternSearching">Pattern Searching</a></li>\n\t<li id="menu-item-135035" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135035"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#OtherStringAlgorithms">Other String Algorithms</a></li>\n\t<li id="menu-item-135036" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135036"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#Backtracking">Backtracking</a></li>\n\t<li id="menu-item-135037" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135037"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#DivideandConquer">Divide and Conquer</a></li>\n\t<li id="menu-item-135038" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135038"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#GeometricAlgorithms">Geometric Algorithms</a></li>\n\t<li id="menu-item-135039" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135039"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#MathematicalAlgorithms">Mathematical Algorithms</a></li>\n\t<li id="menu-item-135040" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135040"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#BitAlgorithms">Bit Algorithms</a></li>\n\t<li id="menu-item-135041" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135041"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#GraphAlgorithms">Graph Algorithms</a></li>\n\t<li id="menu-item-135042" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135042"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#RandomizedAlgorithms">Randomized Algorithms</a></li>\n</ul>\n</li>\n<li id="menu-item-135010" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-135010"><a title="Data Structures" href="http://www.geeksforgeeks.org/data-structures/">DS</a>\n<ul class="sub-menu">\n\t<li id="menu-item-135045" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135045"><a href="http://www.geeksforgeeks.org/data-structures/#LinkedList">LinkedList</a></li>\n\t<li id="menu-item-135046" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135046"><a href="http://www.geeksforgeeks.org/data-structures/#Stack">Stack</a></li>\n\t<li id="menu-item-135047" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135047"><a href="http://www.geeksforgeeks.org/data-structures/#Queue">Queue</a></li>\n\t<li id="menu-item-135048" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135048"><a href="http://www.geeksforgeeks.org/data-structures/#BinaryTree">Binary Tree</a></li>\n\t<li id="menu-item-135049" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135049"><a href="http://www.geeksforgeeks.org/data-structures/#BinarySearchTree">Binary Search Tree</a></li>\n\t<li id="menu-item-135050" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135050"><a href="http://www.geeksforgeeks.org/data-structures/#Heap">Heap</a></li>\n\t<li id="menu-item-135051" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135051"><a href="http://www.geeksforgeeks.org/data-structures/#Hashing">Hashing</a></li>\n\t<li id="menu-item-135052" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135052"><a href="http://www.geeksforgeeks.org/data-structures/#Graph">Graph</a></li>\n\t<li id="menu-item-135053" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135053"><a href="http://www.geeksforgeeks.org/data-structures/#AdvancedDataStructure">Advanced Data Structure</a></li>\n\t<li id="menu-item-135054" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135054"><a href="http://www.geeksforgeeks.org/data-structures/#Array">Array</a></li>\n\t<li id="menu-item-135055" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135055"><a href="http://www.geeksforgeeks.org/data-structures/#Matrix">Matrix</a></li>\n\t<li id="menu-item-135056" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135056"><a href="http://www.geeksforgeeks.org/data-structures/#Misc">Misc</a></li>\n</ul>\n</li>\n<li id="menu-item-135014" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135014"><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview</a></li>\n<li id="menu-item-135006" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135006"><a href="http://www.geeksforgeeks.org/c/">C</a></li>\n<li id="menu-item-135007" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135007"><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>\n<li id="menu-item-135012" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135012"><a href="http://www.geeksforgeeks.org/java/">Java</a></li>\n<li id="menu-item-137004" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-137004"><a href="http://www.geeksforgeeks.org/python/">Python</a></li>\n<li id="menu-item-135009" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135009"><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>\n<li id="menu-item-135016" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135016"><a href="http://qa.geeksforgeeks.org/index.php?qa=ask">Ask a Q</a></li>\n<li id="menu-item-135077" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135077"><a href="https://play.google.com/store/apps/details?id=free.programming.programming">AndroidApp</a></li>\n<li id="menu-item-135367" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135367"><a href="http://www.geeksforgeeks.org/category/guestblogs/">GBlog</a></li>\n<li id="menu-item-135028" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135028"><a href="http://www.geeksforgeeks.org/category/gfact/">GFact</a></li>\n<li id="menu-item-136004" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-136004"><a href="http://www.geeksforgeeks.org/category/project/">Project</a></li>\n<li id="menu-item-136978" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-136978"><a href="http://www.geeksforgeeks.org/jobs/">Jobs</a></li>\n<li id="menu-item-135019" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135019"><a href="http://www.geeksforgeeks.org/category/c-arrays/">Arr</a></li>\n<li id="menu-item-135022" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135022"><a href="http://www.geeksforgeeks.org/category/c-strings/">String</a></li>\n<li id="menu-item-135937" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135937"><a href="http://www.geeksforgeeks.org/category/matrix/">Matrix</a></li>\n<li id="menu-item-135023" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135023"><a href="http://www.geeksforgeeks.org/category/linked-list/">Linked List</a></li>\n<li id="menu-item-135029" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135029"><a href="http://www.geeksforgeeks.org/category/stack/">Stack</a></li>\n<li id="menu-item-135932" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135932"><a href="http://www.geeksforgeeks.org/category/queue/">Q</a></li>\n<li id="menu-item-136299" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-136299"><a href="http://www.geeksforgeeks.org/category/hash/">Hash</a></li>\n<li id="menu-item-135941" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135941"><a href="http://www.geeksforgeeks.org/category/heap/">Heap</a></li>\n<li id="menu-item-135020" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135020"><a href="http://www.geeksforgeeks.org/category/tree/">Tree</a></li>\n<li id="menu-item-135940" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135940"><a href="http://www.geeksforgeeks.org/category/binary-search-tree/">BST</a></li>\n<li id="menu-item-135024" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135024"><a href="http://www.geeksforgeeks.org/category/graph/">Graph</a></li>\n<li id="menu-item-135017" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135017"><a href="http://www.geeksforgeeks.org/category/c-puzzles/">C/C++</a></li>\n<li id="menu-item-135027" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135027"><a href="http://www.geeksforgeeks.org/category/bit-magic/">Bit</a></li>\n<li id="menu-item-135021" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135021"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/">MCQ</a></li>\n<li id="menu-item-135018" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135018"><a href="http://www.geeksforgeeks.org/category/c-programs/">Misc</a></li>\n<li id="menu-item-135025" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135025"><a href="http://www.geeksforgeeks.org/category/program-output/">O/P</a></li>\n</ul></div>\t\t</nav><!-- #site-navigation -->\r\n\t\t<div class="clear"></div>\r\n\t</header><!-- #masthead -->\r\n\r\n\t<div id="main" class="wrapper">\t<div id="primary" class="site-content">\r\n\t\t<div id="content" role="main">\r\n\r\n\t\t\t\t\t\t\t\r\n\t<article id="post-11937" class="post-11937 post type-post status-publish format-standard hentry category-pattern-searching tag-pattern-searching">\r\n\t\t\t\t<header class="entry-header">\r\n\t\t\t\t\t\t<h1 class="entry-title">Searching for Patterns | Set 3 (Rabin-Karp Algorithm)</h1>\r\n\t\t\t\t\r\n\t\t\t</header><!-- .entry-header -->\r\n\r\n\t\t\t\t<div class="entry-content">\r\n\t\t\t<p>Given a text <em>txt[0..n-1]</em> and a pattern <em>pat[0..m-1]</em>, write a function <em>search(char pat[], char txt[])</em> that prints all occurrences of <em>pat[]</em> in <em>txt[]</em>. You may assume that n > m.<span id="more-11937"></span></p>\n<p>Examples:<br />\n1) Input:</p>\n<pre>\r\n  txt[] =  "THIS IS A TEST TEXT"\r\n  pat[] = "TEST"</pre>\n<p>Output:</p>\n<p>Pattern found at index 10</p>\n<p>2) Input:</p>\n<pre>  txt[] =  "AABAACAADAABAAABAA"\r\n  pat[] = "AABA"\r\n</pre>\n<p>Output:</p>\n<pre>\r\n   Pattern found at index 0\r\n   Pattern found at index 9\r\n   Pattern found at index 13\r\n</pre>\n<p>The <a href="http://geeksforgeeks.org/?p=11871">Naive String Matching</a> algorithm slides the pattern one by one.  After each slide, it one by one checks characters at the current shift and if all characters match then prints the match.<br />\nLike the Naive Algorithm, Rabin-Karp algorithm also slides the pattern one by one. But unlike the Naive algorithm, Rabin Karp algorithm matches the hash value of the pattern with the hash value of current substring of text,  and if the hash values match then only it starts matching individual characters.  So Rabin Karp algorithm needs to calculate hash values for following strings.</p>\n<p>1) Pattern itself.<br />\n2) All the substrings of text of length m. </p>\n<p>Since we need to efficiently calculate hash values for all the substrings of size m of text, we must have a hash function which has following property.<br />\nHash at the next shift must be efficiently computable from the current hash value and next character in text or we can say <em>hash(txt[s+1 .. s+m])</em> must be efficiently computable from <em>hash(txt[s .. s+m-1])</em> and <em>txt[s+m]</em> i.e.,  <em>hash(txt[s+1 .. s+m])</em>= <em>rehash(txt[s+m], hash(txt[s .. s+m-1])</em> and rehash must be O(1) operation.</p>\n<p>The hash function suggested by Rabin and Karp calculates an integer value.  The integer value for a string is numeric value of a string. For example, if all possible characters are from 1 to 10, the numeric value of &#8220;122&#8221; will be 122. The number of possible characters is higher than 10 (256 in general) and pattern length can be large. So the numeric values cannot be practically stored as an integer. Therefore, the numeric value is calculated using modular arithmetic to make sure that the hash values can be stored in an integer variable (can fit in memory words).  To do rehashing, we need to take off the most significant digit and add the new least significant digit for in hash value.  Rehashing is done using the following formula. </p>\n<p><em>hash( txt[s+1 .. s+m] ) = d ( hash( txt[s .. s+m-1]) &#8211; txt[s]*h ) + txt[s + m] ) mod q </em></p>\n<p><em>hash( txt[s .. s+m-1] )</em> : Hash value at shift <em>s</em>.<br />\n<em>hash( txt[s+1 .. s+m] )</em> :  Hash value at next shift (or shift <em>s</em>+1)<br />\n<em>d</em>:  Number of characters in the alphabet<br />\n<em>q</em>:  A prime number<br />\n<em>h: d^(m-1)</em></p>\n<div class="responsive-tabs">\n<h2 class="tabtitle">C/C++</h2>\n<div class="tabcontent">\n\n<pre class="brush: cpp; highlight: [9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67]; title: ; notranslate" title="">\r\n/* Following program is a C implementation of Rabin Karp\r\nAlgorithm given in the CLRS book */\r\n#include&lt;stdio.h&gt;\r\n#include&lt;string.h&gt;\r\n\r\n// d is the number of characters in input alphabet\r\n#define d 256\r\n\r\n/* pat -&gt; pattern\r\n    txt -&gt; text\r\n    q -&gt; A prime number\r\n*/\r\nvoid search(char pat[], char txt[], int q)\r\n{\r\n    int M = strlen(pat);\r\n    int N = strlen(txt);\r\n    int i, j;\r\n    int p = 0; // hash value for pattern\r\n    int t = 0; // hash value for txt\r\n    int h = 1;\r\n\r\n    // The value of h would be &quot;pow(d, M-1)%q&quot;\r\n    for (i = 0; i &lt; M-1; i++)\r\n        h = (h*d)%q;\r\n\r\n    // Calculate the hash value of pattern and first\r\n    // window of text\r\n    for (i = 0; i &lt; M; i++)\r\n    {\r\n        p = (d*p + pat[i])%q;\r\n        t = (d*t + txt[i])%q;\r\n    }\r\n\r\n    // Slide the pattern over text one by one\r\n    for (i = 0; i &lt;= N - M; i++)\r\n    {\r\n\r\n        // Check the hash values of current window of text\r\n        // and pattern. If the hash values match then only\r\n        // check for characters on by one\r\n        if ( p == t )\r\n        {\r\n            /* Check for characters one by one */\r\n            for (j = 0; j &lt; M; j++)\r\n            {\r\n                if (txt[i+j] != pat[j])\r\n                    break;\r\n            }\r\n\r\n            // if p == t and pat[0...M-1] = txt[i, i+1, ...i+M-1]\r\n            if (j == M)\r\n                printf(&quot;Pattern found at index %d \\n&quot;, i);\r\n        }\r\n\r\n        // Calculate hash value for next window of text: Remove\r\n        // leading digit, add trailing digit\r\n        if ( i &lt; N-M )\r\n        {\r\n            t = (d*(t - txt[i]*h) + txt[i+M])%q;\r\n\r\n            // We might get negative value of t, converting it\r\n            // to positive\r\n            if (t &lt; 0)\r\n            t = (t + q);\r\n        }\r\n    }\r\n}\r\n\r\n/* Driver program to test above function */\r\nint main()\r\n{\r\n    char txt[] = &quot;GEEKS FOR GEEKS&quot;;\r\n    char pat[] = &quot;GEEK&quot;;\r\n    int q = 101; // A prime number\r\n    search(pat, txt, q);\r\n    return 0;\r\n}\r\n</pre>\n\n</div><h2 class="tabtitle">Python</h2>\n<div class="tabcontent">\n\n<pre class="brush: python; highlight: [11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54]; title: ; notranslate" title="">\r\n# Following program is the python implementation of\r\n# Rabin Karp Algorithm given in CLRS book\r\n\r\n# d is the number of characters in input alphabet\r\nd = 256\r\n\r\n# pat  -&gt; pattern\r\n# txt  -&gt; text\r\n# q    -&gt; A prime number\r\n\r\ndef search(pat, txt, q):\r\n    M = len(pat)\r\n    N = len(txt)\r\n    i = 0\r\n    j = 0\r\n    p = 0    # hash value for pattern\r\n    t = 0    # hash value for txt\r\n    h = 1\r\n\r\n    # The value of h would be &quot;pow(d, M-1)%q&quot;\r\n    for i in xrange(M-1):\r\n        h = (h*d)%q\r\n\r\n    # Calculate the hash value of pattern and first window\r\n    # of text\r\n    for i in xrange(M):\r\n        p = (d*p + ord(pat[i]))%q\r\n        t = (d*t + ord(txt[i]))%q\r\n\r\n    # Slide the pattern over text one by one\r\n    for i in xrange(N-M+1):\r\n        # Check the hash values of current window of text and\r\n        # pattern if the hash values match then only check\r\n        # for characters on by one\r\n        if p==t:\r\n            # Check for characters one by one\r\n            for j in xrange(M):\r\n                if txt[i+j] != pat[j]:\r\n                    break\r\n\r\n            j+=1\r\n            # if p == t and pat[0...M-1] = txt[i, i+1, ...i+M-1]\r\n            if j==M:\r\n                print &quot;Pattern found at index &quot; + str(i)\r\n\r\n        # Calculate hash value for next window of text: Remove\r\n        # leading digit, add trailing digit\r\n        if i &lt; N-M:\r\n            t = (d*(t-ord(txt[i])*h) + ord(txt[i+M]))%q\r\n\r\n            # We might get negative values of t, converting it to\r\n            # positive\r\n            if t &lt; 0:\r\n                t = t+q\r\n\r\n# Driver program to test the above function\r\ntxt = &quot;GEEKS FOR GEEKS&quot;\r\npat = &quot;GEEK&quot;\r\nq = 101 # A prime number\r\nsearch(pat,txt,q)\r\n\r\n# This code is contributed by Bhavya Jain\r\n</pre>\n<p></div></div><br />\nOutput:\n<pre>Pattern found at index 0\r\nPattern found at index 10</pre>\n<p>The average and best case running time of the Rabin-Karp algorithm is O(n+m), but its worst-case time is O(nm).  Worst case of Rabin-Karp algorithm occurs when all characters of pattern and text are same as the hash values of all the substrings of txt[] match with hash value of pat[].  For example pat[] =  &#8220;AAA&#8221; and txt[] = &#8220;AAAAAAA&#8221;.</p>\n<p>Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.</p>\n<p><strong>References:</strong></p>\n<p><a href="http://net.pku.edu.cn/~course/cs101/2007/resource/Intro2Algorithm/book6/chap34.htm">http://net.pku.edu.cn/~course/cs101/2007/resource/Intro2Algorithm/book6/chap34.htm</a></p>\n<p><a href="http://www.cs.princeton.edu/courses/archive/fall04/cos226/lectures/string.4up.pdf">http://www.cs.princeton.edu/courses/archive/fall04/cos226/lectures/string.4up.pdf</a></p>\n<p><a href="http://en.wikipedia.org/wiki/Rabin-Karp_string_search_algorithm">http://en.wikipedia.org/wiki/Rabin-Karp_string_search_algorithm</a></p>\n<p><strong>Related Posts:</strong><br />\n<a href="http://geeksforgeeks.org/?p=11871">Searching for Patterns | Set 1 (Naive Pattern Searching)</a><br />\n<a href="http://geeksforgeeks.org/?p=11902">Searching for Patterns | Set 2 (KMP Algorithm)</a></p>\n\r\n\t\t\t<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<!-- Big Rectangle Blog Bottom -->\r\n<ins class="adsbygoogle"\r\n     style="display:inline-block;width:336px;height:280px"\r\n     data-ad-client="ca-pub-9465609616171866"\r\n     data-ad-slot="4061219431"></ins>\r\n<script>\r\n(adsbygoogle = window.adsbygoogle || []).push({});\r\n</script>\r\n<br></br>\r\n\t\t</div><!-- .entry-content -->\r\n\t\t\t\t\r\n\t\t\r\n\r\n\t\t<footer class="entry-meta">\r\n\t\t<span class="post-comment"><a href="http://www.geeksforgeeks.org/searching-for-patterns-set-3-rabin-karp-algorithm/#comments" class="commentslink" ><span class="dsq-postid" data-dsqidentifier="11937 http://geeksforgeeks.org/?p=11937">27 Comments</span></a> <!--added for comments by Shubham-->\r\n\t\t</span><span>Category: <a href="http://www.geeksforgeeks.org/category/algorithm/pattern-searching/" rel="category tag">Pattern Searching</a></span> <span>Tags: <a href="http://www.geeksforgeeks.org/tag/pattern-searching/" rel="tag">Pattern Searching</a></span> \r\n           \t          \t\r\n\t\t\t\t\t</footer><!-- .entry-meta -->\r\n\t</article><!-- #post -->\r\n<div class="related_posts"><h3>Related Posts:</h3><ul><li><a href="http://www.geeksforgeeks.org/%c2%ad%c2%adkasais-algorithm-for-construction-of-lcp-array-from-suffix-array/" title="\xc2\xad\xc2\xadkasai\xe2\x80\x99s Algorithm for Construction of LCP array from Suffix Array">\xc2\xad\xc2\xadkasai\xe2\x80\x99s Algorithm for Construction of LCP array from Suffix Array</a></li><li><a href="http://www.geeksforgeeks.org/search-a-word-in-a-2d-grid-of-characters/" title="Search a Word in a 2D Grid of characters">Search a Word in a 2D Grid of characters</a></li><li><a href="http://www.geeksforgeeks.org/z-algorithm-linear-time-pattern-searching-algorithm/" title="Z algorithm (Linear time pattern searching Algorithm)">Z algorithm (Linear time pattern searching Algorithm)</a></li><li><a href="http://www.geeksforgeeks.org/suffix-tree-application-6-longest-palindromic-substring/" title="Suffix Tree Application 6 &#8211; Longest Palindromic Substring">Suffix Tree Application 6 &#8211; Longest Palindromic Substring</a></li><li><a href="http://www.geeksforgeeks.org/manachers-algorithm-linear-time-longest-palindromic-substring-part-4/" title="Manacher&#8217;s Algorithm &#8211; Linear Time Longest Palindromic Substring &#8211; Part 4">Manacher&#8217;s Algorithm &#8211; Linear Time Longest Palindromic Substring &#8211; Part 4</a></li><li><a href="http://www.geeksforgeeks.org/manachers-algorithm-linear-time-longest-palindromic-substring-part-3-2/" title="Manacher&#8217;s Algorithm &#8211; Linear Time Longest Palindromic Substring &#8211; Part 3">Manacher&#8217;s Algorithm &#8211; Linear Time Longest Palindromic Substring &#8211; Part 3</a></li><li><a href="http://www.geeksforgeeks.org/manachers-algorithm-linear-time-longest-palindromic-substring-part-2/" title="Manacher&#8217;s Algorithm &#8211; Linear Time Longest Palindromic Substring &#8211; Part 2">Manacher&#8217;s Algorithm &#8211; Linear Time Longest Palindromic Substring &#8211; Part 2</a></li><li><a href="http://www.geeksforgeeks.org/manachers-algorithm-linear-time-longest-palindromic-substring-part-1/" title="Manacher&#8217;s Algorithm &#8211; Linear Time Longest Palindromic Substring &#8211; Part 1">Manacher&#8217;s Algorithm &#8211; Linear Time Longest Palindromic Substring &#8211; Part 1</a></li></ul></div><br></br>\r\n\r\n<!-- Added on 29 Oct 2015 for next and previous from same category -->\r\n<nav class="nav-single">\r\n\t\t\t\t\t<div class="assistive-text">Post navigation</div>\r\n\t\t\t\t\t<span class="nav-previous"><a href="http://www.geeksforgeeks.org/searching-for-patterns-set-2-kmp-algorithm/" rel="prev">Previous post in category</a></span>\r\n\t\t\t\t\t<span class="nav-next"><a href="http://www.geeksforgeeks.org/pattern-searching-set-4-a-naive-string-matching-algo-question/" rel="next">Next post in category</a></span>\r\n\t\t\t\t</nav><!-- .nav-single -->\r\n\r\n\r\n<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>\r\n    <script type="text/javascript">\r\n    $(document).ready(function(){\r\n        $.ajax({\r\n            url:"http://courses.geeksforgeeks.org/plugin.php",\r\n            method:"POST",\r\n            dataType:"json",\r\n            data:{post_id:$("#ratePlugin").attr("pid"),url:window.location.href},\r\n            xhrFields:{withCredentials:true},\r\n            success:function(response){\r\n                $("#ratePlugin").html(response.rate);\r\n                $("#markPlugin").html(response.mark);\r\n            },\r\n            complete:function(){\r\n                $(".box").click(function(){\r\n                    rrequest({post_id:$("#ratePlugin").attr("pid"),post_title:$("#ratePlugin").attr("ptitle"),rating:$(this).attr("rating"),url:window.location.href});\r\n                });\r\n                $(".mark").click(function(){\r\n                    mrequest({post_id:$("#markPlugin").attr("pid"),post_title:$("#markPlugin").attr("ptitle"),op:$(this).attr("id"),url:window.location.href});\r\n                });\r\n            }\r\n        });\r\n        function rrequest(payload){\r\n            $.ajax({\r\n                url:"http://courses.geeksforgeeks.org/gfgRatings.php",\r\n                method:"POST",\r\n                dataType:"html",\r\n                data:payload,\r\n                xhrFields:{withCredentials:true},\r\n                success:function(response){\r\n                    $("#ratePlugin").html(response);\r\n                },\r\n                complete:function(){\r\n                    $(".box").click(function(){\r\n                        rrequest({post_id:$("#ratePlugin").attr("pid"),post_title:$("#ratePlugin").attr("ptitle"),rating:$(this).attr("rating"),url:window.location.href});\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        //rrequest({post_id:$("#ratePlugin").attr("pid"),url:window.location.href});\r\n        function mrequest(payload){\r\n            $.ajax({\r\n                url:"http://courses.geeksforgeeks.org/gfgMarking.php",\r\n                method:"POST",\r\n                dataType:"html",\r\n                data:payload,\r\n                xhrFields:{withCredentials:true},\r\n                success:function(response){\r\n                    $("#markPlugin").html(response);\r\n                },\r\n                complete:function(){\r\n                    $(".mark").click(function(){\r\n                        mrequest({post_id:$("#markPlugin").attr("pid"),post_title:$("#markPlugin").attr("ptitle"),op:$(this).attr("id"),url:window.location.href});\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        //mrequest({post_id:$("#markPlugin").attr("pid"),url:window.location.href});\r\n    });\r\n</script>\r\n\r\n<div class="plugins">\r\n<div pid="11937" ptitle="Searching for Patterns | Set 3 (Rabin-Karp Algorithm)" id="ratePlugin"></div>\r\n<div pid="11937" ptitle="Searching for Patterns | Set 3 (Rabin-Karp Algorithm)" id="markPlugin"></div>\r\n</div>\r\n\r\n<br></br>\r\n\r\n<script>\r\n  window.fbAsyncInit=function() {\r\n    FB.init({\r\n      appId      : \\\'380853768781431\\\',\r\n      xfbml      : true,\r\n      version    : \\\'v2.3\\\'\r\n    });\r\n  };\r\n\r\n  (function(d, s, id){\r\n     var js, fjs = d.getElementsByTagName(s)[0];\r\n     if (d.getElementById(id)) {return;}\r\n     js = d.createElement(s); js.id = id;\r\n     js.src = "//connect.facebook.net/en_US/sdk.js";\r\n     fjs.parentNode.insertBefore(js, fjs);\r\n   }(document, \\\'script\\\', \\\'facebook-jssdk\\\'));\r\n</script>\r\n<div class="fb-like" data-share="true" data-width="450" data-show-faces="true"></div>\r\n\r\n<br></br>\r\n<p>Writing code in comment? Please use <a href="http://code.geeksforgeeks.org/">code.geeksforgeeks.org</a>, generate link and share the link here.</a>\r\n\t\t\t\t\r\n<div id="disqus_thread">\r\n            <div id="dsq-content">\r\n\r\n\r\n            <ul id="dsq-comments">\r\n                    <li class="comment even thread-even depth-1" id="dsq-comment-34991">\r\n        <div id="dsq-comment-header-34991" class="dsq-comment-header">\r\n            <cite id="dsq-cite-34991">\r\n                <span id="dsq-author-user-34991">Prateek Surana</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-34991" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-34991" class="dsq-comment-message"><p>Nice explanation<br />\n<code><br />\na.out: main.c search.c<br />\n\tgcc -o a.out main.c main.h search.c<br />\nclean:<br />\n\trm -vf a.out *~<br />\n</code></p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-30637">\r\n        <div id="dsq-comment-header-30637" class="dsq-comment-header">\r\n            <cite id="dsq-cite-30637">\r\n                <span id="dsq-author-user-30637">MM</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-30637" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-30637" class="dsq-comment-message"><p>In the code, I don&#8217;t see the variable &#8220;h&#8221; being used anywhere. What&#8217;s the use of the below lines in the program?</p>\n<p>// The value of h would be &#8220;pow(d, M-1)%q&#8221;</p>\n<p>    for (i = 0; i &lt; M-1; i++)</p>\n<p>        h = (h*d)%q;</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-30855">\r\n        <div id="dsq-comment-header-30855" class="dsq-comment-header">\r\n            <cite id="dsq-cite-30855">\r\n                <span id="dsq-author-user-30855">RAHUL KUMAR</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-30855" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-30855" class="dsq-comment-message"><p>chk this line of code&#8230;.<br />\nt = (d*(t &#8211; txt[i]*h) + txt[i+M])%q;</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-29531">\r\n        <div id="dsq-comment-header-29531" class="dsq-comment-header">\r\n            <cite id="dsq-cite-29531">\r\n                <span id="dsq-author-user-29531">renu</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-29531" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-29531" class="dsq-comment-message"><p>why are we choosing &#8216;q&#8217; to be a prime number?and also in hashing we always chose prime number of buckets.why it is so?can someone please reply?</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-30856">\r\n        <div id="dsq-comment-header-30856" class="dsq-comment-header">\r\n            <cite id="dsq-cite-30856">\r\n                <span id="dsq-author-user-30856">RAHUL KUMAR</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-30856" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-30856" class="dsq-comment-message"><p>to calculate the mod value we need prime number .. go through ur basic u will come to know why only prime&#8230; good luck <img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/images/smilies/simple-smile.png" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-21227">\r\n        <div id="dsq-comment-header-21227" class="dsq-comment-header">\r\n            <cite id="dsq-cite-21227">\r\n                <span id="dsq-author-user-21227">lizard</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-21227" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-21227" class="dsq-comment-message"><p>This part in the code is wrong&#8230;</p>\n<pre> <code language="C">\n// Calculate the hash value of pattern and first window of text\n    for (i = 0; i &lt; M; i++)\n    {\n        p = (d*p + pat[i])%q;\n        t = (d*t + txt[i])%q;\n    }\n</code> </pre>\n<p>This should be&#8230;.</p>\n<pre> <code language="C">\n// Calculate the hash value of pattern and first window of text\n    for (i = M-1; i &gt;=0; i--)\n    {\n        p = (d*p + pat[i])%q;\n        t = (d*t + txt[i])%q;\n    }\n</code> </pre>\n<p>Please go through this for my say,<br />\n<a href="http://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_algorithm#Hash_function_used" rel="nofollow">http://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_algorithm#Hash_function_used</a></p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-kartik even depth-2" id="dsq-comment-21255">\r\n        <div id="dsq-comment-header-21255" class="dsq-comment-header">\r\n            <cite id="dsq-cite-21255">\r\n                <span id="dsq-author-user-21255">kartik</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-21255" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-21255" class="dsq-comment-message"><p>It looks correct to me.   </p>\n<p>Consider the strings as strings of digits.  When you want to calculate integer value of say &#8220;2314&#8221;, you start from from first digit.<br />\np = 2<br />\np = 2*10 + 3<br />\np = 23*10 + 1<br />\np = 231*10 + 4<br />\np = 2314</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-3" id="dsq-comment-21272">\r\n        <div id="dsq-comment-header-21272" class="dsq-comment-header">\r\n            <cite id="dsq-cite-21272">\r\n                <span id="dsq-author-user-21272">lizard</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-21272" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-21272" class="dsq-comment-message"><p>Thanks&#8230;.got it..</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment byuser comment-author-abhishek08aug even thread-even depth-1" id="dsq-comment-17985">\r\n        <div id="dsq-comment-header-17985" class="dsq-comment-header">\r\n            <cite id="dsq-cite-17985">\r\n                <span id="dsq-author-user-17985">abhishek08aug</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-17985" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-17985" class="dsq-comment-message"><p>Intelligent \xf0\x9f\x98\x80</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-vibhu-tiwari odd alt thread-odd thread-alt depth-1" id="dsq-comment-14598">\r\n        <div id="dsq-comment-header-14598" class="dsq-comment-header">\r\n            <cite id="dsq-cite-14598">\r\n                <span id="dsq-author-user-14598">Vibhu Tiwari</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-14598" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-14598" class="dsq-comment-message"><p>This is the source code for pattern searching in much less effort with the time complexity of O(n).You can check it for various strings by passing the lengths of the two strings to be matched.The statement pattern match gets printed the number of times that substring occurs in the string.<br />\n#include<stdio .h><br />\n#include<conio .h><br />\nvoid patternsearch(char *a,char *b,int n,int m)<br />\n{  int k,count=0,j=0,i=0,c=0;<br />\n     while(i!=n)<br />\n     {    if(j==m)<br />\n      {j=0;<br />\n      c=c+1;count=0;<br />\n      i=c;}<br />\n         k=a[i]-b[j];<br />\n         if(k==0){<br />\n         count++;}<br />\n         if(count==m)<br />\n         {printf(&#8220;Pattern Match found\\n&#8221;);}<br />\n         i=i+1;<br />\n        j=j+1;<br />\n     }<br />\n     }<br />\n     main()<br />\n     {      char *a=&#8221;ABABABCABABABCABABABC&#8221;;<br />\n            char *b=&#8221;ABABCA&#8221;;<br />\n         patternsearch(a,b,21,6);<br />\n         getch();<br />\n         }</conio></stdio></p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-33056">\r\n        <div id="dsq-comment-header-33056" class="dsq-comment-header">\r\n            <cite id="dsq-cite-33056">\r\n                <span id="dsq-author-user-33056">Castle Age</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-33056" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-33056" class="dsq-comment-message"><p>How? if the a pattern not found, i starts from the C+1. The worst case is m * (n-m -1).</p>\n<p>complexity is not n in the following case:<br />\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB.<br />\nAAAAAAAB</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-14411">\r\n        <div id="dsq-comment-header-14411" class="dsq-comment-header">\r\n            <cite id="dsq-cite-14411">\r\n                <span id="dsq-author-user-14411">Atri</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-14411" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-14411" class="dsq-comment-message"><p>We can save the string matching by using multiple hashing.For e.g. Use one hash function to calculate one hash value,and pass the first hash value as input to a second(different) hash value.If the values given by the second hash function are the same for two strings,we can safely assume that the two strings are same.This can be improved with introducing more hash functions.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-28218">\r\n        <div id="dsq-comment-header-28218" class="dsq-comment-header">\r\n            <cite id="dsq-cite-28218">\r\n                <span id="dsq-author-user-28218">NitHish Divakar</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-28218" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-28218" class="dsq-comment-message"><p>This can only give probablistic matching no matter howmany hash function you use&#8230;.ofcourse more hashing=&gt; probablity is high&#8230;which is acceptable for most practical applications</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment byuser comment-author-sparco odd alt thread-odd thread-alt depth-1" id="dsq-comment-8015">\r\n        <div id="dsq-comment-header-8015" class="dsq-comment-header">\r\n            <cite id="dsq-cite-8015">\r\n                <span id="dsq-author-user-8015">sparco</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-8015" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-8015" class="dsq-comment-message"><p>@sandeep</p>\n<p>Can u explain the modular arithmetic in calculation of next range&#8217;s hash value using the value of h </p>\n<pre> <code language="C">\r\n\r\n// The value of h would be &quot;pow(d, M-1)%q&quot;\r\n    for (i = 0; i &lt; M-1; i++)\r\n        h = (h*d)%q;\r\n\r\nt = (d*(t - txt[i]*h) + txt[i+M])%q;\r\n\r\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-7887">\r\n        <div id="dsq-comment-header-7887" class="dsq-comment-header">\r\n            <cite id="dsq-cite-7887">\r\n                <span id="dsq-author-user-7887">Ishara</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-7887" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-7887" class="dsq-comment-message"><pre> <code language="C">\nGreat Article! Simple &amp; easy to understand. Thx.\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-abhinav08 odd alt thread-odd thread-alt depth-1" id="dsq-comment-5092">\r\n        <div id="dsq-comment-header-5092" class="dsq-comment-header">\r\n            <cite id="dsq-cite-5092">\r\n                <span id="dsq-author-user-5092">Abhinav Kumar</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-5092" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-5092" class="dsq-comment-message"><p>In Rabin Karp Algo we can modify it with the initial and last character checking in the main string for the pattern at index i and then if both are same then we check the chars in between otherwise we increment i.<br />\nThis  reduces the computation involves in hashing.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-4116">\r\n        <div id="dsq-comment-header-4116" class="dsq-comment-header">\r\n            <cite id="dsq-cite-4116">\r\n                <span id="dsq-author-user-4116">ricky</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-4116" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-4116" class="dsq-comment-message"><p>@geeksforgeek&#8230;.Most of The program posted by you is not running when i pasted it on ideone online complier every program is saying so please try to take care of formatting &amp; re-post it again ..hope u got my point</p>\n<p>prog.c:3: error: stray \xe2\x80\x98\\302\xe2\x80\x99 in program<br />\nprog.c:3: error: stray \xe2\x80\x98\\240\xe2\x80\x99 in program<br />\nprog.c:6: error: stray \xe2\x80\x98\\302\xe2\x80\x99 in program<br />\nprog.c:6: error: stray \xe2\x80\x98\\240\xe2\x80\x99 in program<br />\nprog.c:9: error: stray \xe2\x80\x98\\302\xe2\x80\x99 in program<br />\nprog.c:9: error: stray \xe2\x80\x98\\240\xe2\x80\x99 in program<br />\n&amp; so on</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-4082">\r\n        <div id="dsq-comment-header-4082" class="dsq-comment-header">\r\n            <cite id="dsq-cite-4082">\r\n                <span id="dsq-author-user-4082">shubh</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-4082" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-4082" class="dsq-comment-message"><p>Another good link about Rabin-Karp</p>\n<p><a href="http://courses.csail.mit.edu/6.006/spring11/rec/rec06.pdf" rel="nofollow">http://courses.csail.mit.edu/6.006/spring11/rec/rec06.pdf</a></p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-kp101090 even depth-2" id="dsq-comment-4095">\r\n        <div id="dsq-comment-header-4095" class="dsq-comment-header">\r\n            <cite id="dsq-cite-4095">\r\n                <span id="dsq-author-user-4095">kp101090</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-4095" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-4095" class="dsq-comment-message"><p>Its Awesome !! Thanks for the Link .</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt depth-2" id="dsq-comment-17284">\r\n        <div id="dsq-comment-header-17284" class="dsq-comment-header">\r\n            <cite id="dsq-cite-17284">\r\n                <span id="dsq-author-user-17284">Anuj Jindal</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-17284" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-17284" class="dsq-comment-message"><p>in the below given link:<br />\n<a href="http://courses.csail.mit.edu/6.006/spring11/rec/rec06.pdf" rel="nofollow">http://courses.csail.mit.edu/6.006/spring11/rec/rec06.pdf</a></p>\n<p>h(Si+1) = [(h(Si)  (10^5<br />\n\x03 ?rst digit of Si)) \x03 10 + next digit after Si<br />\n] mod m</p>\n<p>SHOULD BE<br />\nh(Si+1) = [(h(Si)  (10^4<br />\n\x03 ?rst digit of Si)) \x03 10 + next digit after Si<br />\n] mod m</p>\n<p>correct me if I am wrong..</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-shek8034 even depth-2" id="dsq-comment-19708">\r\n        <div id="dsq-comment-header-19708" class="dsq-comment-header">\r\n            <cite id="dsq-cite-19708">\r\n                <span id="dsq-author-user-19708">shek8034</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-19708" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-19708" class="dsq-comment-message"><p>Nice Explanation.. Thanks for the link</p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment byuser comment-author-hari6988 odd alt thread-even depth-1" id="dsq-comment-4079">\r\n        <div id="dsq-comment-header-4079" class="dsq-comment-header">\r\n            <cite id="dsq-cite-4079">\r\n                <span id="dsq-author-user-4079">hari6988</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-4079" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-4079" class="dsq-comment-message"><p>The integer value for a string is just multiplication of the ASCII values of all characters of the string</p>\n<p>But, in the code, this is not done&#8230;can u explain how u calculate the integer hash value . what does the number d=256 stand for ?</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-sandeep even depth-2" id="dsq-comment-4081">\r\n        <div id="dsq-comment-header-4081" class="dsq-comment-header">\r\n            <cite id="dsq-cite-4081">\r\n                <span id="dsq-author-user-4081">Sandeep</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-4081" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-4081" class="dsq-comment-message"><p>@hari6988: As mentioned in the post, the multiplication is done using modular arithmetic. </p>\n<p>The following loop calculates hash values (or modular multiplication) for the pattern and for the first substring of size m of text. </p>\n<pre> <code language="C">    \n// Calculate the hash value of pattern and first window of text\n    for (i = 0; i &lt; M; i++)\n    {\n        p = (d*p + pat[i])%q;\n        t = (d*t + txt[i])%q;\n    }\n</code> </pre>\n<p>And the following line of code calculates hash values (or modular multiplication) for other substrings of size m of text</p>\n<pre> <code language="C">\n  t = (d*(t - txt[i]*h) + txt[i+M])%q;\n</code> </pre>\n<p>d is the number of possible characters in pattern and text.  If we consider the ASCII character set then its value is 256.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-3" id="dsq-comment-4117">\r\n        <div id="dsq-comment-header-4117" class="dsq-comment-header">\r\n            <cite id="dsq-cite-4117">\r\n                <span id="dsq-author-user-4117">martin</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-4117" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-4117" class="dsq-comment-message"><p>@sandeep..can you also please post the The Boyer-Moore string searching Algorithm..??</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even depth-3" id="dsq-comment-4118">\r\n        <div id="dsq-comment-header-4118" class="dsq-comment-header">\r\n            <cite id="dsq-cite-4118">\r\n                <span id="dsq-author-user-4118">martin</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-4118" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-4118" class="dsq-comment-message"><p>@sandeep ..also can you please post the comparison between all string searching algo till you have posted ..???</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-4" id="dsq-comment-8011">\r\n        <div id="dsq-comment-header-8011" class="dsq-comment-header">\r\n            <cite id="dsq-cite-8011">\r\n                <span id="dsq-author-user-8011">sparco</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-8011" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-8011" class="dsq-comment-message"><p>Example)</p>\n<p>String  bacbabababacaab<br />\nPattern ababaca</p>\n<p>LPS Array<br />\n 0123456<br />\n ababaca<br />\n 0012301 lps[4]=3=&gt;pattern[4]=String[9]<br />\n\t By using same criteria to form lps array , the last matched sub-pattern in pattern is known . So avoiding backtracking to the first element.</p>\n<p> i=10 j=4<br />\n bacbabababa|caab<br />\n       ababa|ca</p>\n<p>Pattern found at i &#8211; len(pattern)</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-5" id="dsq-comment-8013">\r\n        <div id="dsq-comment-header-8013" class="dsq-comment-header">\r\n            <cite id="dsq-cite-8013">\r\n                <span id="dsq-author-user-8013">sparco</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-8013" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-8013" class="dsq-comment-message"><p>Apologies for the wrong reply</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n            </ul>\r\n\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n<script type="text/javascript">\r\nvar disqus_url = \'http://www.geeksforgeeks.org/searching-for-patterns-set-3-rabin-karp-algorithm/\';\r\nvar disqus_identifier = \'11937 http://geeksforgeeks.org/?p=11937\';\r\nvar disqus_container_id = \'disqus_thread\';\r\nvar disqus_shortname = \'geeksforgeeks\';\r\nvar disqus_title = "Searching for Patterns | Set 3 (Rabin-Karp Algorithm)";\r\nvar disqus_config_custom = window.disqus_config;\r\nvar disqus_config = function () {\r\n    /*\r\n    All currently supported events:\r\n    onReady: fires when everything is ready,\r\n    onNewComment: fires when a new comment is posted,\r\n    onIdentify: fires when user is authenticated\r\n    */\r\n    \r\n    \r\n    this.language = \'\';\r\n    \r\n    if (disqus_config_custom) {\r\n        disqus_config_custom.call(this);\r\n    }\r\n};\r\n\r\n(function() {\r\n    var dsq = document.createElement(\'script\'); dsq.type = \'text/javascript\';\r\n    dsq.async = true;\r\n    dsq.src = \'//\' + disqus_shortname + \'.disqus.com/embed.js\';\r\n    (document.getElementsByTagName(\'head\')[0] || document.getElementsByTagName(\'body\')[0]).appendChild(dsq);\r\n})();\r\n</script>\r\n\r\n\r\n\t\t\t\r\n\t\t</div><!-- #content -->\r\n\t</div><!-- #primary -->\r\n\r\n\r\n\t\t\t<div id="secondary" class="widget-area" role="complementary">\r\n\t\t\t<aside id="text-9" class="widget widget_text">\t\t\t<div class="textwidget"><div id="fb-root"></div>\r\n<script>(function(d, s, id) {\r\n  var js, fjs = d.getElementsByTagName(s)[0];\r\n  if (d.getElementById(id)) return;\r\n  js = d.createElement(s); js.id = id;\r\n  js.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.3&appId=138031159685820";\r\n  fjs.parentNode.insertBefore(js, fjs);\r\n}(document, \'script\', \'facebook-jssdk\'));</script>\r\n\r\n<div class="fb-page" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="300" data-height="180" data-small-header="true" data-adapt-container-width="false" data-hide-cover="true" data-show-facepile="true" data-show-posts="false"><div class="fb-xfbml-parse-ignore"><blockquote cite="https://www.facebook.com/pages/GeeksforGeeks/316764689022"><a href="https://www.facebook.com/pages/GeeksforGeeks/316764689022">GeeksforGeeks</a></blockquote></div></div>\r\n</div>\n\t\t</aside><aside id="text-33" class="widget widget_text">\t\t\t<div class="textwidget"><a href="http://www.springpeople.com/gfg-landing">\r\n<img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/GfG-2.jpg" alt="SpringPeople Ad">\r\n</a>\r\n</div>\n\t\t</aside><aside id="text-14" class="widget widget_text"><p class="widget-title">Popular Posts</p>\t\t\t<div class="textwidget"><ul>\r\n<li><a href="http://www.geeksforgeeks.org/top-algorithms-and-data-structures-for-competitive-programming/">Top 10 Algorithms and Data Structures for Competitive Programming</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/top-10-algorithms-in-interview-questions/">Top 10 algorithms in Interview Questions</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/how-to-begin-with-competitive-programming/">How to begin with Competitive Programming?</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>\r\n<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>\r\n<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding \xe2\x80\x9cextern\xe2\x80\x9d keyword in C</a> </li>\r\n<li><a href="http://www.geeksforgeeks.org/heavy-light-decomposition-set-1-introduction/"> Heavy Light Decomposition</a> </li>\r\n<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>\r\n</ul></div>\n\t\t</aside><aside id="text-17" class="widget widget_text">\t\t\t<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<!-- Big 300x600 Sidebar -->\r\n<ins class="adsbygoogle"\r\n     style="display:inline-block;width:300px;height:600px"\r\n     data-ad-client="ca-pub-9465609616171866"\r\n     data-ad-slot="4402736037"></ins>\r\n<script>\r\n(adsbygoogle = window.adsbygoogle || []).push({});\r\n</script></div>\n\t\t</aside><aside id="text-32" class="widget widget_text">\t\t\t<div class="textwidget"><form style="border:1px solid #ccc;padding:3px;text-align:center;" action="https://feedburner.google.com/fb/a/mailverify" method="post" target="popupwindow" onsubmit="window.open(\'https://feedburner.google.com/fb/a/mailverify?uri=Geeksforgeeks\', \'popupwindow\', \'scrollbars=yes,width=550,height=520\');return true"><p>Subscribe and Never Miss an Article</p><input type="text" style="width:140px" placeholder="Email Address" name="email"/><input type="hidden" value="Geeksforgeeks" name="uri"/><input type="hidden" name="loc" value="en_US"/>&nbsp;&nbsp;<input type="submit" style="background-color: #4cb96b;" value="Subscribe" /></form></div>\n\t\t</aside><aside id="text-18" class="widget widget_text">\t\t\t<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<!-- LargeRectangleSide -->\r\n<ins class="adsbygoogle"\r\n     style="display:inline-block;width:336px;height:280px"\r\n     data-ad-client="ca-pub-9465609616171866"\r\n     data-ad-slot="1884636833"></ins>\r\n<script>\r\n(adsbygoogle = window.adsbygoogle || []).push({});\r\n</script></div>\n\t\t</aside><aside id="text-13" class="widget widget_text">\t\t\t<div class="textwidget"><ul><li><a href="http://geeksquiz.com/category/articles/puzzle/">Common Interview Puzzles</a></li><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/advanced-data-structure/">Advanced Data Structures</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/pattern-searching/">Pattern Searching</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li><li><a href="http://www.geeksforgeeks.org/category/searching/">Searching</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/sorting/">Sorting</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/Hash/">Hashing</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/algorithm/analysis/">Analysis of Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/algorithm/mathematical/">Mathematical Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/algorithm/randomized/">Randomized Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>\r\n</ul>\r\n\r\n\r\n\r\n\r\n</div>\n\t\t</aside><aside id="categories-384568212" class="widget widget_categories"><p class="widget-title">All Categories</p><label class="screen-reader-text" for="cat">All Categories</label><select name=\'cat\' id=\'cat\' class=\'postform\' >\n\t<option value=\'-1\'>Select Category</option>\n\t<option class="level-0" value="1762">Advanced Data Structure&nbsp;&nbsp;(69)</option>\n\t<option class="level-0" value="1744">Algorithm&nbsp;&nbsp;(403)</option>\n\t<option class="level-1" value="1745">&nbsp;&nbsp;&nbsp;Analysis&nbsp;&nbsp;(16)</option>\n\t<option class="level-1" value="1748">&nbsp;&nbsp;&nbsp;Backtracking&nbsp;&nbsp;(11)</option>\n\t<option class="level-1" value="1750">&nbsp;&nbsp;&nbsp;Divide and Conquer&nbsp;&nbsp;(29)</option>\n\t<option class="level-1" value="1746">&nbsp;&nbsp;&nbsp;Dynamic Programming&nbsp;&nbsp;(91)</option>\n\t<option class="level-1" value="1754">&nbsp;&nbsp;&nbsp;Geometric&nbsp;&nbsp;(14)</option>\n\t<option class="level-1" value="1747">&nbsp;&nbsp;&nbsp;Greedy&nbsp;&nbsp;(20)</option>\n\t<option class="level-1" value="1753">&nbsp;&nbsp;&nbsp;Mathematical&nbsp;&nbsp;(123)</option>\n\t<option class="level-1" value="1749">&nbsp;&nbsp;&nbsp;Pattern Searching&nbsp;&nbsp;(29)</option>\n\t<option class="level-1" value="1757">&nbsp;&nbsp;&nbsp;Randomized&nbsp;&nbsp;(19)</option>\n\t<option class="level-1" value="1751">&nbsp;&nbsp;&nbsp;Searching&nbsp;&nbsp;(43)</option>\n\t<option class="level-1" value="1752">&nbsp;&nbsp;&nbsp;Sorting&nbsp;&nbsp;(40)</option>\n\t<option class="level-0" value="3">Arrays&nbsp;&nbsp;(80)</option>\n\t<option class="level-0" value="18">Articles&nbsp;&nbsp;(25)</option>\n\t<option class="level-0" value="1761">Binary Search Tree&nbsp;&nbsp;(37)</option>\n\t<option class="level-0" value="17">Bit Magic&nbsp;&nbsp;(56)</option>\n\t<option class="level-0" value="14">C/C++ Puzzles&nbsp;&nbsp;(244)</option>\n\t<option class="level-0" value="1790">Competitive Programming&nbsp;&nbsp;(4)</option>\n\t<option class="level-0" value="1710">GBlog&nbsp;&nbsp;(55)</option>\n\t<option class="level-0" value="67">GFacts&nbsp;&nbsp;(43)</option>\n\t<option class="level-0" value="97">Graph&nbsp;&nbsp;(74)</option>\n\t<option class="level-0" value="1756">Hash&nbsp;&nbsp;(21)</option>\n\t<option class="level-0" value="1755">Heap&nbsp;&nbsp;(18)</option>\n\t<option class="level-0" value="1140">Interview Experiences&nbsp;&nbsp;(1,050)</option>\n\t<option class="level-0" value="87">Java&nbsp;&nbsp;(55)</option>\n\t<option class="level-0" value="8">Linked Lists&nbsp;&nbsp;(70)</option>\n\t<option class="level-0" value="1760">Matrix&nbsp;&nbsp;(39)</option>\n\t<option class="level-0" value="66">MCQ&nbsp;&nbsp;(95)</option>\n\t<option class="level-0" value="4">Misc&nbsp;&nbsp;(40)</option>\n\t<option class="level-0" value="5">Output&nbsp;&nbsp;(55)</option>\n\t<option class="level-0" value="1767">Project&nbsp;&nbsp;(21)</option>\n\t<option class="level-0" value="1789">Python&nbsp;&nbsp;(5)</option>\n\t<option class="level-0" value="1743">Queue&nbsp;&nbsp;(16)</option>\n\t<option class="level-0" value="1742">Stack&nbsp;&nbsp;(25)</option>\n\t<option class="level-0" value="7">Strings&nbsp;&nbsp;(61)</option>\n\t<option class="level-0" value="1788">Technical Scripter&nbsp;&nbsp;(13)</option>\n\t<option class="level-0" value="19">Trees&nbsp;&nbsp;(114)</option>\n</select>\n\n<script type=\'text/javascript\'>\n/* <![CDATA[ */\n(function() {\n\tvar dropdown = document.getElementById( "cat" );\n\tfunction onCatChange() {\n\t\tif ( dropdown.options[ dropdown.selectedIndex ].value > 0 ) {\n\t\t\tlocation.href = "http://www.geeksforgeeks.org/?cat=" + dropdown.options[ dropdown.selectedIndex ].value;\n\t\t}\n\t}\n\tdropdown.onchange = onCatChange;\n})();\n/* ]]> */\n</script>\n\n</aside><aside id="text-21" class="widget widget_text"><p class="widget-title">Recent Comments</p>\t\t\t<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>\n\t\t</aside><aside id="tag_cloud-3" class="widget widget_tag_cloud"><p class="widget-title">Tags</p><div class="tagcloud"><a href=\'http://www.geeksforgeeks.org/tag/adobe/\' class=\'tag-link-148\' title=\'32 topics\' style=\'font-size: 12.941176470588pt;\'>Adobe</a>\n<a href=\'http://www.geeksforgeeks.org/tag/advance-data-structures/\' class=\'tag-link-152\' title=\'31 topics\' style=\'font-size: 12.838235294118pt;\'>Advance Data Structures</a>\n<a href=\'http://www.geeksforgeeks.org/tag/advanced-data-structures/\' class=\'tag-link-150\' title=\'38 topics\' style=\'font-size: 13.661764705882pt;\'>Advanced Data Structures</a>\n<a href=\'http://www.geeksforgeeks.org/tag/amazon/\' class=\'tag-link-141\' title=\'253 topics\' style=\'font-size: 22pt;\'>Amazon</a>\n<a href=\'http://www.geeksforgeeks.org/tag/array/\' class=\'tag-link-68\' title=\'12 topics\' style=\'font-size: 8.7205882352941pt;\'>array</a>\n<a href=\'http://www.geeksforgeeks.org/tag/backtracking/\' class=\'tag-link-112\' title=\'11 topics\' style=\'font-size: 8.4117647058824pt;\'>Backtracking</a>\n<a href=\'http://www.geeksforgeeks.org/tag/bharti-softbank-hike/\' class=\'tag-link-1214\' title=\'10 topics\' style=\'font-size: 8pt;\'>Bharti SoftBank (HIKE)</a>\n<a href=\'http://www.geeksforgeeks.org/tag/bit-magic/\' class=\'tag-link-17\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>Bit Magic</a>\n<a href=\'http://www.geeksforgeeks.org/tag/c/\' class=\'tag-link-86\' title=\'18 topics\' style=\'font-size: 10.470588235294pt;\'>C++</a>\n<a href=\'http://www.geeksforgeeks.org/tag/cn/\' class=\'tag-link-142\' title=\'12 topics\' style=\'font-size: 8.7205882352941pt;\'>CN</a>\n<a href=\'http://www.geeksforgeeks.org/tag/c-puzzle/\' class=\'tag-link-69\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>c puzzle</a>\n<a href=\'http://www.geeksforgeeks.org/tag/d-e-shaw/\' class=\'tag-link-823\' title=\'17 topics\' style=\'font-size: 10.264705882353pt;\'>D-E-Shaw</a>\n<a href=\'http://www.geeksforgeeks.org/tag/dbms/\' class=\'tag-link-139\' title=\'11 topics\' style=\'font-size: 8.4117647058824pt;\'>DBMS</a>\n<a href=\'http://www.geeksforgeeks.org/tag/divide-and-conquer/\' class=\'tag-link-113\' title=\'27 topics\' style=\'font-size: 12.220588235294pt;\'>Divide and Conquer</a>\n<a href=\'http://www.geeksforgeeks.org/tag/dynamic-programming/\' class=\'tag-link-111\' title=\'83 topics\' style=\'font-size: 17.058823529412pt;\'>Dynamic Programming</a>\n<a href=\'http://www.geeksforgeeks.org/tag/flipkart/\' class=\'tag-link-173\' title=\'46 topics\' style=\'font-size: 14.485294117647pt;\'>Flipkart</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate/\' class=\'tag-link-114\' title=\'88 topics\' style=\'font-size: 17.367647058824pt;\'>GATE</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-2012/\' class=\'tag-link-133\' title=\'10 topics\' style=\'font-size: 8pt;\'>GATE-CS-2012</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-c-language/\' class=\'tag-link-72\' title=\'10 topics\' style=\'font-size: 8pt;\'>GATE-CS-C-Language</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-ds-algo/\' class=\'tag-link-79\' title=\'35 topics\' style=\'font-size: 13.352941176471pt;\'>GATE-CS-DS-&amp;-Algo</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-older/\' class=\'tag-link-145\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>GATE-CS-Older</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gfact/\' class=\'tag-link-67\' title=\'20 topics\' style=\'font-size: 10.882352941176pt;\'>GFacts</a>\n<a href=\'http://www.geeksforgeeks.org/tag/goldman-sachs/\' class=\'tag-link-590\' title=\'20 topics\' style=\'font-size: 10.882352941176pt;\'>Goldman Sachs</a>\n<a href=\'http://www.geeksforgeeks.org/tag/google/\' class=\'tag-link-155\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>Google</a>\n<a href=\'http://www.geeksforgeeks.org/tag/graph/\' class=\'tag-link-97\' title=\'45 topics\' style=\'font-size: 14.382352941176pt;\'>Graph</a>\n<a href=\'http://www.geeksforgeeks.org/tag/greedy-algorithm/\' class=\'tag-link-159\' title=\'20 topics\' style=\'font-size: 10.882352941176pt;\'>Greedy Algorithm</a>\n<a href=\'http://www.geeksforgeeks.org/tag/hashing/\' class=\'tag-link-250\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>Hashing</a>\n<a href=\'http://www.geeksforgeeks.org/tag/interview-experience/\' class=\'tag-link-126\' title=\'216 topics\' style=\'font-size: 21.382352941176pt;\'>Interview Experience</a>\n<a href=\'http://www.geeksforgeeks.org/tag/java/\' class=\'tag-link-87\' title=\'61 topics\' style=\'font-size: 15.720588235294pt;\'>Java</a>\n<a href=\'http://www.geeksforgeeks.org/tag/maq-software/\' class=\'tag-link-1392\' title=\'11 topics\' style=\'font-size: 8.4117647058824pt;\'>MAQ Software</a>\n<a href=\'http://www.geeksforgeeks.org/tag/mathematicalalgo/\' class=\'tag-link-154\' title=\'73 topics\' style=\'font-size: 16.544117647059pt;\'>MathematicalAlgo</a>\n<a href=\'http://www.geeksforgeeks.org/tag/matrix/\' class=\'tag-link-211\' title=\'21 topics\' style=\'font-size: 11.088235294118pt;\'>Matrix</a>\n<a href=\'http://www.geeksforgeeks.org/tag/microsoft/\' class=\'tag-link-104\' title=\'95 topics\' style=\'font-size: 17.676470588235pt;\'>Microsoft</a>\n<a href=\'http://www.geeksforgeeks.org/tag/morgan-stanley/\' class=\'tag-link-167\' title=\'17 topics\' style=\'font-size: 10.264705882353pt;\'>Morgan Stanley</a>\n<a href=\'http://www.geeksforgeeks.org/tag/operating-systems/\' class=\'tag-link-110\' title=\'19 topics\' style=\'font-size: 10.676470588235pt;\'>Operating systems</a>\n<a href=\'http://www.geeksforgeeks.org/tag/oracle/\' class=\'tag-link-171\' title=\'24 topics\' style=\'font-size: 11.705882352941pt;\'>Oracle</a>\n<a href=\'http://www.geeksforgeeks.org/tag/pattern-searching/\' class=\'tag-link-107\' title=\'26 topics\' style=\'font-size: 12.014705882353pt;\'>Pattern Searching</a>\n<a href=\'http://www.geeksforgeeks.org/tag/puzzle/\' class=\'tag-link-70\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>puzzle</a>\n<a href=\'http://www.geeksforgeeks.org/tag/python/\' class=\'tag-link-1770\' title=\'21 topics\' style=\'font-size: 11.088235294118pt;\'>Python</a>\n<a href=\'http://www.geeksforgeeks.org/tag/recursion/\' class=\'tag-link-85\' title=\'21 topics\' style=\'font-size: 11.088235294118pt;\'>Recursion</a>\n<a href=\'http://www.geeksforgeeks.org/tag/samsung/\' class=\'tag-link-180\' title=\'12 topics\' style=\'font-size: 8.7205882352941pt;\'>Samsung</a>\n<a href=\'http://www.geeksforgeeks.org/tag/sap-labs/\' class=\'tag-link-1414\' title=\'23 topics\' style=\'font-size: 11.5pt;\'>SAP Labs</a>\n<a href=\'http://www.geeksforgeeks.org/tag/snapdeal/\' class=\'tag-link-1246\' title=\'16 topics\' style=\'font-size: 9.9558823529412pt;\'>SnapDeal</a>\n<a href=\'http://www.geeksforgeeks.org/tag/stack/\' class=\'tag-link-94\' title=\'17 topics\' style=\'font-size: 10.264705882353pt;\'>stack</a>\n<a href=\'http://www.geeksforgeeks.org/tag/stack-queue/\' class=\'tag-link-899\' title=\'12 topics\' style=\'font-size: 8.7205882352941pt;\'>Stack-Queue</a></div>\n</aside><aside id="text-25" class="widget widget_text">\t\t\t<div class="textwidget"><ul>\r\n<li><h2><a href="http://geeksquiz.com/">GeeksQuiz</a></h2></li>\r\n\r\n<li><h2><a href="http://code.geeksforgeeks.org/">GeeksforGeeksIDE</a></h2></li>\r\n\r\n<li><h2><a href="http://www.practice.geeksforgeeks.org/">GeeksforGeeks Practice</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/data-structures/">Data Structures</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/c/">C Programming</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++ Programming</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/java/">Java Programming</a></h2></li>\r\n\r\n<li><h2><a href="http://geeksquiz.com/books/">Books</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Experiences</a></h2></li>\r\n\r\n<li><h2><a href="http://geeksquiz.com/gate-corner-2/">GATE CS</a></h2></li>\r\n\r\n<li><h2><a href="http://www.gatecs.geeksquiz.com">GATE CS Forum</a></h2></li>\r\n\r\n<li><h2><a href="https://play.google.com/store/apps/details?id=free.programming.programming">Android App</a></h2></li>\r\n</ul>\r\n\r\n</div>\n\t\t</aside>\t\t</div><!-- #secondary -->\r\n\t\t</div><!-- #main .wrapper -->\r\n\t<footer id="colophon" role="contentinfo">\r\n\t\t<div class="site-info">\r\n\t\t<div class="clear"></div>\r\n\t\t</div><!-- .site-info -->\r\n\t\t</footer><!-- #colophon -->\r\n<center>\r\n<div class="iconic-footer">\r\n\r\n@geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>  <a href="http://www.geeksforgeeks.org/about/"> &nbsp; &nbsp; &nbsp; &nbsp;About Us!&nbsp; &nbsp; &nbsp; &nbsp;</a><a href="http://www.geeksforgeeks.org/new/ad.htm"> &nbsp; &nbsp; &nbsp; &nbsp;Advertise with us!&nbsp; &nbsp; &nbsp; &nbsp;</a>\r\n\r\n      \t\t\t</div></center><!-- .site-info -->\r\n\r\n\t\t\t\t<div class="clear"></div>\r\n</div><!-- #page -->\r\n\r\n        <script type="text/javascript">\r\n        // <![CDATA[\r\n        var disqus_shortname = \'geeksforgeeks\';\r\n        (function () {\r\n            var nodes = document.getElementsByTagName(\'span\');\r\n            for (var i = 0, url; i < nodes.length; i++) {\r\n                if (nodes[i].className.indexOf(\'dsq-postid\') != -1) {\r\n                    nodes[i].parentNode.setAttribute(\'data-disqus-identifier\', nodes[i].getAttribute(\'data-dsqidentifier\'));\r\n                    url = nodes[i].parentNode.href.split(\'#\', 1);\r\n                    if (url.length == 1) { url = url[0]; }\r\n                    else { url = url[1]; }\r\n                    nodes[i].parentNode.href = url + \'#disqus_thread\';\r\n                }\r\n            }\r\n            var s = document.createElement(\'script\'); \r\n            s.async = true;\r\n            s.type = \'text/javascript\';\r\n            s.src = \'//\' + disqus_shortname + \'.disqus.com/count.js\';\r\n            (document.getElementsByTagName(\'HEAD\')[0] || document.getElementsByTagName(\'BODY\')[0]).appendChild(s);\r\n        }());\r\n        // ]]>\r\n        </script>\r\n        <script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushPython.js\'></script>\n<script type=\'text/javascript\'>\n\t(function(){\n\t\tvar corecss = document.createElement(\'link\');\n\t\tvar themecss = document.createElement(\'link\');\n\t\tvar corecssurl = "http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9b";\r\n\t\tif ( corecss.setAttribute ) {\r\n\t\t\t\tcorecss.setAttribute( "rel", "stylesheet" );\r\n\t\t\t\tcorecss.setAttribute( "type", "text/css" );\r\n\t\t\t\tcorecss.setAttribute( "href", corecssurl );\r\n\t\t} else {\r\n\t\t\t\tcorecss.rel = "stylesheet";\r\n\t\t\t\tcorecss.href = corecssurl;\r\n\t\t}\r\n\t\tdocument.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );\r\n\t\tvar themecssurl = "http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9b";\r\n\t\tif ( themecss.setAttribute ) {\r\n\t\t\t\tthemecss.setAttribute( "rel", "stylesheet" );\r\n\t\t\t\tthemecss.setAttribute( "type", "text/css" );\r\n\t\t\t\tthemecss.setAttribute( "href", themecssurl );\r\n\t\t} else {\r\n\t\t\t\tthemecss.rel = "stylesheet";\r\n\t\t\t\tthemecss.href = themecssurl;\r\n\t\t}\r\n\t\t//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);\r\n\t\tdocument.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );\r\n\t})();\n\tSyntaxHighlighter.config.strings.expandSource = \'+ expand source\';\n\tSyntaxHighlighter.config.strings.help = \'?\';\n\tSyntaxHighlighter.config.strings.alert = \'SyntaxHighlighter\\n\\n\';\n\tSyntaxHighlighter.config.strings.noBrush = \'Can\\\'t find brush for: \';\n\tSyntaxHighlighter.config.strings.brushNotHtmlScript = \'Brush wasn\\\'t configured for html-script option: \';\n\tSyntaxHighlighter.defaults[\'gutter\'] = false;\n\tSyntaxHighlighter.defaults[\'pad-line-numbers\'] = true;\n\tSyntaxHighlighter.defaults[\'toolbar\'] = false;\n\tSyntaxHighlighter.all();\r\n</script>\r\n<link rel=\'stylesheet\' id=\'tabby-print-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/tabby-responsive-tabs/css/tabby-print.css\' type=\'text/css\' media=\'all\' />\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/js/comment-reply.min.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/js/selectnav.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/js/jquery/jquery.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/js/jquery/jquery-migrate.min.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/tabby-responsive-tabs/js/tabby.js\'></script>\n\n<script>jQuery(document).ready(function($) { RESPONSIVEUI.responsiveTabs(); })</script>\n\r\n\r\n<script type="text/javascript">\r\n\r\n  var _gaq = _gaq || [];\r\n  _gaq.push([\'_setAccount\', \'UA-12148232-1\']);\r\n  _gaq.push([\'_trackPageview\']);\r\n\r\n  (function() {\r\n    var ga = document.createElement(\'script\'); ga.type = \'text/javascript\'; ga.async = true;\r\n    ga.src = (\'https:\' == document.location.protocol ? \'https://ssl\' : \'http://www\') + \'.google-analytics.com/ga.js\';\r\n    var s = document.getElementsByTagName(\'script\')[0]; s.parentNode.insertBefore(ga, s);\r\n  })();\r\n\r\n</script>  \r\n<script async type="text/javascript" src="//cdn.fancybar.net/ac/fancybar.js?zoneid=1502&serve=C6ADVKE&placement=geeksforgeeks" id="_fancybar_js"></script>\r\n</body>\r\n</html>\n<!-- Dynamic page generated in 0.364 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2016-02-28 23:04:41 -->\n\n<!-- Compression = gzip -->\n<!-- super cache -->'
p839
sb.