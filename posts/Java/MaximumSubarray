<b>Title: </b>Maximum Subarray  <b>Source: </b><a target='_blank' href='https://leetcode.com/problems/maximum-subarray/'>leetcode.com</a><p><p>
Find the contiguous subarray within an array (containing at least one number) which has the largest sum.
</p><p>
For example, given the array <code>[−2,1,−3,4,−1,2,1,−5,4]</code>,<br/>
the contiguous subarray <code>[4,−1,2,1]</code> has the largest sum = <code>6</code>.
</p><p class="showspoilers"><a href="#" onclick="showSpoilers(this); return false;">click to show more practice.</a></p><div class="spoilers"><b>More practice:</b>
<p>If you have figured out the O(<i>n</i>) solution, try coding another solution using the divide and conquer approach, which is more subtle.</p>
</div></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* https://leetcode.com/problems/maximum-subarray/ */
class MaximumSubarray
{
	public static void main(String args[])
	{
		MaximumSubarray ms = new MaximumSubarray();
		//int nums[] = {-2, 1, -3, 4, -1, 2, 1, -5, 4};
		int nums[] = {-2, -1};
		System.out.println(ms.maxSubArray(nums));
	}

	public int maxSubArray(int[] nums)
	{
		int[] dp = new int[nums.length];
		dp[0] = nums[0];

		int max = dp[0];
		for(int i=1;i<nums.length;i++)
		{
			dp[i] = Math.max(dp[i-1]+nums[i], nums[i]);
			//dp[i] = dp[i]<0?0:dp[i];
			max = Math.max(dp[i], max);
		}
		return max;
	}
}
</pre>