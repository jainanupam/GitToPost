<b>Title: </b>Unique Paths II  <b>Source: </b><a target='_blank' href='https://leetcode.com/problems/unique-paths-ii/'>leetcode.com</a><p><p>Follow up for "Unique Paths":</p><p>Now consider if some obstacles are added to the grids. How many unique paths would there be?</p><p>An obstacle and empty space is marked as <code>1</code> and <code>0</code> respectively in the grid.</p><p>For example,<br/>
<p>There is one obstacle in the middle of a 3x3 grid as illustrated below.</p>
<pre>
[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
</pre>
<p>The total number of unique paths is <code>2</code>.</p>
<p><b>Note:</b> <i>m</i> and <i>n</i> will be at most 100.</p></p><div>
<p><a href="/subscribe/">Subscribe</a> to see which companies asked this question</p>
</div><div>
<div class="btn btn-xs btn-warning" id="tags">Show Tags</div>
<span class="hidebutton">
<a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>
<a class="btn btn-xs btn-primary" href="/tag/dynamic-programming/">Dynamic Programming</a>
</span>
</div><div>
<div class="btn btn-xs btn-warning" id="similar">Show Similar Problems</div>
<span class="hidebutton">
<a class="btn btn-xs btn-primary" href="/problems/unique-paths/"> (M) Unique Paths</a>
</span>
</div></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* https://leetcode.com/problems/unique-paths-ii/ */
class UniquePathsII
{
	public static void main(String args[])
	{
		int[][] obstacleGrid = {{0, 0, 0},
								{0, 1, 1},
								{0, 1, 0}};
		UniquePathsII solution = new UniquePathsII();
		System.out.println(solution.uniquePathsWithObstacles(obstacleGrid));
	}

	public int uniquePathsWithObstacles(int[][] obstacleGrid)
	{
		int m = obstacleGrid.length;
		int n = obstacleGrid[obstacleGrid.length-1].length;
		int[][] dp = new int[m][n];
		for(int i=0;i<m;i++)
		{
			for(int j=0;j<n;j++)
				dp[i][j]=-1;
		}
		helper(m-1, n-1, dp, obstacleGrid);
		return dp[m-1][n-1]==-1?0:dp[m-1][n-1];
	}

	int helper(int i, int j, int[][] dp, int[][] obstacleGrid)
	{
		if(i<0 ||j<0 || obstacleGrid[i][j]==1)
			return 0;
		if(i==0 && j==0)
		{
			return dp[i][j]=1;
		}
		else
		{
			dp[i][j] = dp[i][j]!=-1?dp[i][j]:(helper(i-1, j, dp, obstacleGrid) + helper(i, j-1, dp, obstacleGrid));
			return dp[i][j];
		}
	}
}
</pre><br><br><h3>Python solution</h3><pre class="lang:python decode:true ">''' https://leetcode.com/problems/unique-paths-ii/ '''

class Solution(object):
    def uniquePathsWithObstacles(self, obstacleGrid):
        """
        :type obstacleGrid: List[List[int]]
        :rtype: int
        """
        m = len(obstacleGrid)
        n = len(obstacleGrid[0])
        if obstacleGrid[0][0] == 1:
            return 0
        flag = True
        for i in range(n):
            if obstacleGrid[0][i] == 1:
                obstacleGrid[0][i] = -1
                flag = False
            else:
                if flag:
                    obstacleGrid[0][i] = 1
        
        flag = True
        for i in range(1,m):
            if obstacleGrid[i][0] == 1:
                obstacleGrid[i][0] = -1
                flag = False
            else:
                if flag:
                    obstacleGrid[i][0] = 1
        
        for i in range(1,m):
            for j in range(1,n):
                if obstacleGrid[i][j] == 1:
                    obstacleGrid[i][j] = -1
                else:
                    if obstacleGrid[i-1][j] > 0 and obstacleGrid[i][j-1] > 0:
                        obstacleGrid[i][j] = obstacleGrid[i-1][j] + obstacleGrid[i][j-1]
                    else:
                        obstacleGrid[i][j] = max(obstacleGrid[i-1][j], obstacleGrid[i][j-1])
        if obstacleGrid[m-1][n-1] == -1:
            return 0
        return obstacleGrid[m-1][n-1]
                
</pre>