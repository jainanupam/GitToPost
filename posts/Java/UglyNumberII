<b>Title: </b>Ugly Number II  <b>Source: </b><a target='_blank' href='https://leetcode.com/problems/ugly-number-ii/'>leetcode.com</a><p><p>
Write a program to find the <code>n</code>-th ugly number.
</p><p>
Ugly numbers are positive numbers whose prime factors only include <code>2, 3, 5</code>. For example, <code>1, 2, 3, 4, 5, 6, 8, 9, 10, 12</code> is the sequence of the first <code>10</code> ugly numbers.
</p><p>
Note that <code>1</code> is typically treated as an ugly number.
</p><ol id="hints">
<li class="hint">The naive approach is to call <code>isUgly</code> for every number until you reach the n<sup>th</sup> one. Most numbers are <i>not</i> ugly. Try to focus your effort on generating only the ugly ones.</li>
<li class="hint">An ugly number must be multiplied by either 2, 3, or 5 from a smaller ugly number.</li>
<li class="hint">The key is how to maintain the order of the ugly numbers. Try a similar approach of merging from three sorted lists: L<sub>1</sub>, L<sub>2</sub>, and L<sub>3</sub>.</li>
<li class="hint">Assume you have U<sub>k</sub>, the k<sup>th</sup> ugly number. Then U<sub>k+1</sub> must be Min(L<sub>1</sub> * 2, L<sub>2</sub> * 3, L<sub>3</sub> * 5).</li>
</ol></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* https://leetcode.com/problems/ugly-number-ii/ */

//generate n-th ugly number
class UglyNumberII
{
	// Assume you have Uk, the kth ugly number. 
	// Then Uk+1 must be Min(L1 * 2, L2 * 3, L3 * 5).
	public int nthUglyNumber(int n)
	{
		if(n<=0)
			return -1;
 		if(n<=3)
 			return n;
 		int[] arr = new int[n+1];
 		arr[0] = -1;
 		arr[1] = 1;
 		arr[2] = 2;
 		arr[3] = 3;
 		arr[4] = 5;
 		int pos = 2;
 		for(int i = 5;i<n+1;i++)
 		{
 			arr[i] = min(arr[pos] * 2, arr[pos] * 3, arr[pos] * 5);
 			pos++;
 		}
 		for(int i=0;i<arr.length;i++)
 			System.out.print(arr[i]+" ");
 		return arr[n];
    }

    public int min(int a , int b, int c)
    {
    	int min = a;
    	if(b < min)
    		min = b;
    	if(c < min)
    		min = c;
    	return min;
    }

	public static void main(String args[])
	{
		UglyNumberII u = new UglyNumberII();
		System.out.println(u.nthUglyNumber(10));
	}
}</pre>