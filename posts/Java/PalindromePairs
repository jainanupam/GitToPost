<b>Title: </b>
            336. Palindrome Pairs
            <b>Source: </b><a target='_blank' href='https://leetcode.com/problems/palindrome-pairs/'>leetcode.com</a><p><section class="action action-btn-set">
<a class="icon-btn btn" href="https://discuss.leetcode.com/category/420" onclick="ga('send', 'event', 'discuss', 'click', 'palindrome-pairs');" target="_blank">
<i aria-hidden="true" class="fa fa-commenting-o"></i>Discuss
          </a>
<button class="icon-btn disabled" data-placement="top" data-toggle="tooltip" title="Not available yet, please check back later." type="button">
<i aria-hidden="true" class="fa fa-book">
</i><span class="hidden-xs">Editorial </span>Solution
          </button>
<a class="icon-btn pull-right-sm btn" href="/problems/random-one-question/" onclick="ga('send', 'event', 'pick-one-detail', 'click');">
<i aria-hidden="true" class="fa fa-random"></i>Pick One
          </a>
</section><hr class="line dotted">
</hr></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* https://leetcode.com/problems/palindrome-pairs/ */
import java.util.*;
public class PalindromePairs
{
	public static void main(String args[])
	{
		PalindromePairs p = new PalindromePairs();
		//System.out.println(p.palindromePairs(new String[]{"abcd", "dcba", "lls", "s", "sssll"}));
		//System.out.println(p.palindromePairs(new String[]{"bat", "tab", "cat"}));
		System.out.println(p.palindromePairs(new String[]{"a","b","c","ab","ac","aa"}));
	}

	public List<List<Integer>> palindromePairs(String[] words) 
	{
		TrieNode root = new TrieNode('\0');
        HashMap<String, Integer> mapWords = new HashMap<>();
        List<List<Integer>> res = new ArrayList<>();
        for(int i=0;i<words.length;++i)
        {
        	StringBuilder sb = new StringBuilder(words[i]);
        	root.insert(sb.reverse().toString());
        	mapWords.put(words[i], i);
        }

        for(String s1 : mapWords.keySet())
        {
        	if(!s1.isEmpty())
        	{
        		List<String> list = root.getWords(s1);
        		for(String s:list)
        		{
        			String s2 = new StringBuilder(s).reverse().toString();
        			String temp = s1 + s2;
        			if(!s1.equals(s2) && isPalindrome(temp))
        			{
        				List<Integer> tempList = new ArrayList<>();
        				tempList.add(mapWords.get(s1));
        				tempList.add(mapWords.get(s2));
        				res.add(tempList);
        			}
        		}
        	}
        	else
        	{
        		for(String s2 : words)
        		{
        			if(!s1.equals(s2) && isPalindrome(s2))
        			{
        				List<Integer> tempList = new ArrayList<>();
        				tempList.add(mapWords.get(s1));
        				tempList.add(mapWords.get(s2));
        				res.add(tempList);
        				tempList = new ArrayList<>();
        				tempList.add(mapWords.get(s2));
        				tempList.add(mapWords.get(s1));
        				res.add(tempList);
        			}
        		}
        	}
        }
        return res;
    }

    private boolean isPalindrome(String s)
    {
    	int left = 0;
    	int right = s.length()-1;
    	while(left<=right)
    	{
    		if(s.charAt(left)!=s.charAt(right))
    		{
    			return false;
    		}
    		++left;
    		--right;
    	}
    	return true;
    }
}

class TrieNode
{
	char c;
	boolean isWord;
	HashMap<Character, TrieNode> children;

	TrieNode(char c)
	{
		this.c = c;
		this.children = new HashMap<>();
	}

	public void insert(String word)
	{
		if(word==null || word.isEmpty())
			return;
		char temp = word.charAt(0);
		TrieNode child = this.children.get(temp);
		if(child==null)
		{
			child = new TrieNode(temp);
			this.children.put(temp, child);
		}
		if(word.length()>1)
			child.insert(word.substring(1));
		else
			child.isWord = true;
	}

	public List<String> getWords(String prefix)
	{
		List<String> res = new ArrayList<>();
		getWordsHelper(prefix, prefix, res);
		return res;
	}

	public void getWordsHelper(String p, String prefix, List<String> res)
	{
		if(prefix==null || prefix.isEmpty())
			return;
		TrieNode child = this.children.get(prefix.charAt(0));
		if(child==null)
			return;
		if(prefix.length()>1)
			child.getWordsHelper(p, prefix.substring(1), res);
		else
			helper(child, p, "", res);
		return;
	}

	public void helper(TrieNode child, String prefix, String temp, List<String> res)
	{
		if(child.isWord==true)
		{
			//System.out.println(child.c+":"+prefix+temp);
			res.add(prefix+temp);
		}
		for(Character c : child.children.keySet())
		{
			TrieNode tempChild = child.children.get(c);
			helper(tempChild, prefix, temp+tempChild.c, res);
		}
	}
}</pre>