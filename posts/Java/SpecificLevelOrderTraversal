<b>Title: </b>Perfect Binary Tree Specific Level Order Traversal  <b>Source: </b><a target='_blank' href='http://www.geeksforgeeks.org/perfect-binary-tree-specific-level-order-traversal/'>www.geeksforgeeks.org</a><p><p>Given a <a href="http://xlinux.nist.gov/dads//HTML/perfectBinaryTree.html" target="_blank" title="perfect binary tree">Perfect Binary Tree</a> like below:<br/>
(click on image to get a clear view)<span id="more-132437"></span></p><p><a href="http://www.geeksforgeeks.org/wp-content/uploads/image4.png"><img alt="image(4)" class="aligncenter size-full wp-image-137579" height="254" sizes="(max-width: 429px) 100vw, 429px" src="http://www.geeksforgeeks.org/wp-content/uploads/image4.png" srcset="http://www.geeksforgeeks.org/wp-content/uploads/image4.png 429w, http://www.geeksforgeeks.org/wp-content/uploads/image4-300x178.png 300w" width="429"/></a></p><p>Print the level order of nodes in following specific manner:</p><pre> <font size="1"> <span style="color: blue;">1</span> <span style="color: red;">2 3</span> <span style="color: blue;">4 7 5 6</span> <span style="color: red;">8 15 9 14 10 13 11 12</span> <span style="color: blue;">16 31 17 30 18 29 19 28 20 27 21 26  22 25 23 24</span></font></pre><p>i.e. print nodes in level order but nodes should be from left and right side alternatively. Here 1<sup>st</sup> and 2<sup>nd</sup> levels are trivial.<br/>
While 3<sup>rd</sup> level: 4(left), 7(right), 5(left), 6(right) are printed.<br/>
While 4<sup>th</sup> level: 8(left), 15(right), 9(left), 14(right), .. are printed.<br/>
While 5<sup>th</sup> level: 16(left), 31(right), 17(left), 30(right), .. are printed.</p></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* http://www.geeksforgeeks.org/perfect-binary-tree-specific-level-order-traversal/ */
import java.util.List;
import java.util.ArrayList;
public class SpecificLevelOrderTraversal
{
	public static void main(String args[])
	{
		Node root = new Node(1);
		root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
 
        root.left.left = new Node(4);
        root.left.right = new Node(5);
        root.right.left = new Node(6);
        root.right.right = new Node(7);
 
        root.left.left.left = new Node(8);
        root.left.left.right = new Node(9);
        root.left.right.left = new Node(10);
        root.left.right.right = new Node(11);
        root.right.left.left = new Node(12);
        root.right.left.right = new Node(13);
        root.right.right.left = new Node(14);
        root.right.right.right = new Node(15);
 
        root.left.left.left.left = new Node(16);
        root.left.left.left.right = new Node(17);
        root.left.left.right.left = new Node(18);
        root.left.left.right.right = new Node(19);
        root.left.right.left.left = new Node(20);
        root.left.right.left.right = new Node(21);
        root.left.right.right.left = new Node(22);
        root.left.right.right.right = new Node(23);
        root.right.left.left.left = new Node(24);
        root.right.left.left.right = new Node(25);
        root.right.left.right.left = new Node(26);
        root.right.left.right.right = new Node(27);
        root.right.right.left.left = new Node(28);
        root.right.right.left.right = new Node(29);
        root.right.right.right.left = new Node(30);
        root.right.right.right.right = new Node(31);

        SpecificLevelOrderTraversal s = new SpecificLevelOrderTraversal();
        s.printSpecificLevelOrderTraversal(root);
	}

	public void printSpecificLevelOrderTraversal(Node root)
	{
		//if root equal to null then return
		if(root==null)
			return;
		System.out.print(root.val+" ");
		//We are not checking right child node since the tree is perfect binary tree
		if(root.left==null)
			return;
		System.out.print(root.left.val+" "+root.right.val+" ");
		if(root.left.left == null)
			return;
		List<Node> list = new ArrayList<>();
		list.add(root.left);
		list.add(root.right);
		while(!list.isEmpty())
		{
			Node first = list.remove(0);
			Node second = list.remove(0);
			System.out.print(first.left.val + " "
							+ second.right.val +" "
							+ first.right.val + " "
							+ second.left.val + " ");
			if(first.left.left!=null)
			{
				list.add(first.left);
				list.add(second.right);
				list.add(first.right);
				list.add(second.left);
			}
		}
	}
}

class Node
{
	Node left;
	Node right;
	int val;

	public Node(int val)
	{
		this.val = val;
	}
}</pre>