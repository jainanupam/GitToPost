<b>Title: </b>Search a 2D Matrix II  <b>Source: </b><a target='_blank' href='https://leetcode.com/problems/search-a-2d-matrix-ii/'>leetcode.com</a><p><p>Write an efficient algorithm that searches for a value in an <i>m</i> x <i>n</i> matrix. This matrix has the following properties:</p><p>
<ul>
<li>Integers in each row are sorted in ascending from left to right.</li>
<li>Integers in each column are sorted in ascending from top to bottom.</li>
</ul>
</p><p>
For example,</p><p>
Consider the following matrix:
</p><pre>
[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
</pre><p>Given <b>target</b> = <code>5</code>, return <code>true</code>.</p><p>Given <b>target</b> = <code>20</code>, return <code>false</code>.</p></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* https://leetcode.com/problems/search-a-2d-matrix-ii/ */
public class SearchA2DMatrixII
{
    public static void main(String args[])
    {
        SearchA2DMatrixII s = new SearchA2DMatrixII();
        int[][] matrix = {
                            {1,   4,  7, 11, 15},
                            {2,   5,  8, 12, 19},
                            {3,   6,  9, 16, 22},
                            {10, 13, 14, 17, 24},
                            {18, 21, 23, 26, 30}
                        };
        System.out.println(s.searchMatrix(matrix, 25));
    }

    public boolean searchMatrix(int[][] matrix, int target)
    {
        int row = 0;
        int col = matrix[0].length-1;
        while(row<matrix.length && col>-1)
        {
            if(matrix[row][col]==target)
                return true;
            else if(matrix[row][col] > target)
                col--;
            else if(matrix[row][col] < target)
                row++;
        }
        return false;
    }
}
</pre>