<b>Title: </b>
            130. Surrounded Regions
            <b>Source: </b><a target='_blank' href='https://leetcode.com/problems/surrounded-regions/'>leetcode.com</a><p><section class="action action-btn-set">
<a class="icon-btn btn" href="https://discuss.leetcode.com/category/138" onclick="ga('send', 'event', 'discuss', 'click', 'surrounded-regions');" target="_blank">
<i aria-hidden="true" class="fa fa-commenting-o"></i>Discuss
          </a>
<button class="icon-btn disabled" data-placement="top" data-toggle="tooltip" title="Not available yet, please check back later." type="button">
<i aria-hidden="true" class="fa fa-book">
</i><span class="hidden-xs">Editorial </span>Solution
          </button>
<a class="icon-btn pull-right-sm btn" href="/problems/random-one-question/" onclick="ga('send', 'event', 'pick-one-detail', 'click');">
<i aria-hidden="true" class="fa fa-random"></i>Pick One
          </a>
</section><hr class="line dotted">
</hr></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* https://leetcode.com/problems/surrounded-regions/ */

/* 
Idea is simple: the only 'O's that will NOT change to 'X's are those at the edges and those horizontally or vertically connected to the 'O's at the edges. So, first find out all the 'O's at the edges, mark them as '#', and keep checking their surrounding 'O's and mark them as '#'. Then loop the board again, change 'O's to 'X's and change those who was marked as 'M's to 'O's. 
*/
import java.util.*;
public class SurroundedRegions
{
	public static void main(String args[])
	{
		/*
		char[][] board = {
							{'X', 'X', 'X', 'X'},
							{'X', 'O', 'O', 'X'},
							{'X', 'X', 'O', 'X'},
							{'X', 'O', 'X', 'X'}
		};
		*/
		char[][] board = {
							{'O', 'O', 'O', 'O', 'O'},
							{'O', 'O', 'O', 'O', 'O'},
							{'O', 'O', 'X', 'O', 'O'},
							{'O', 'O', 'O', 'O', 'O'},
							{'O', 'O', 'O', 'O', 'O'},
		};
		SurroundedRegions s = new SurroundedRegions();
		s.solve(board);
		for(char[] c : board)
		{
			System.out.println(Arrays.toString(c));
		}
	}

	public void solve(char[][] board) 
	{
        for(int i=0;i<board.length;++i)
        {
        	for(int j=0;j<board[i].length;++j)
        	{
        		if(i==0 || i==board.length-1 || j==0 || j==board[i].length-1)
        		{
        			if(board[i][j]=='O')
        			{
        				board[i][j] = '#';
        				connected(board, i, j);
        			}
        		}
        	}
        }

       for(int i=0;i<board.length;++i)
        {
        	for(int j=0;j<board[i].length;++j)
        	{
        		if(board[i][j]=='O')
        			board[i][j] = 'X';
        	}
        }

        for(int i=0;i<board.length;++i)
        {
        	for(int j=0;j<board[i].length;++j)
        	{
        		if(board[i][j]=='#')
        			board[i][j] = 'O';
        	}
        }
    }

    public void connected(char[][] board, int i, int j)
    {
    	if(i>board.length || i<0 || j> board[i].length || j<0)
    		return;
    	if(i+1 < board.length && board[i+1][j]=='O')
    	{
    		board[i+1][j] = '#';
    		connected(board, i+1, j);
    	}
    	if(i-1 >= 0 && board[i-1][j]=='O')
    	{
    		board[i-1][j] = '#';
    		connected(board, i-1, j);
    	}
    	if(j+1 < board[i].length && board[i][j+1]=='O')
    	{
    		board[i][j+1] = '#';
    		connected(board, i, j+1);
    	}
    	if(j-1 >= 0 && board[i][j-1]=='O')
    	{
    		board[i][j-1] = '#';
    		connected(board, i, j-1);
    	}
    }
}</pre>