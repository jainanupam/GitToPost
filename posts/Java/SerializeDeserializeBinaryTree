<b>Title: </b>
            297. Serialize and Deserialize Binary Tree
            <b>Source: </b><a target='_blank' href='https://leetcode.com/problems/serialize-and-deserialize-binary-tree/'>leetcode.com</a><p><section class="action action-btn-set">
<a class="icon-btn btn" href="https://discuss.leetcode.com/category/375" onclick="ga('send', 'event', 'discuss', 'click', 'serialize-and-deserialize-binary-tree');" target="_blank">
<i aria-hidden="true" class="fa fa-commenting-o"></i>Discuss
          </a>
<button class="icon-btn disabled" data-placement="top" data-toggle="tooltip" title="Not available yet, please check back later." type="button">
<i aria-hidden="true" class="fa fa-book">
</i><span class="hidden-xs">Editorial </span>Solution
          </button>
<a class="icon-btn pull-right-sm btn" href="/problems/random-one-question/" onclick="ga('send', 'event', 'pick-one-detail', 'click');">
<i aria-hidden="true" class="fa fa-random"></i>Pick One
          </a>
</section><hr class="line dotted">
</hr></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* https://leetcode.com/problems/serialize-and-deserialize-binary-tree/ */
/* http://www.geeksforgeeks.org/serialize-deserialize-binary-tree/ */
import java.util.*;
public class SerializeDeserializeBinaryTree
{
	public static void main(String args[])
	{
		TreeNode root = new TreeNode(1);
		//root.left = new TreeNode(2);
		root.right = new TreeNode(3);

		root.right.left = new TreeNode(4);
		root.right.right = new TreeNode(5);

		SerializeDeserializeBinaryTree s = new SerializeDeserializeBinaryTree();
		s.printTree(root);
		String data = s.serialize(root);
		System.out.println(data);
		TreeNode dRoot = s.deserialize(data);
		s.printTree(dRoot);
	}

	public String serialize(TreeNode root) 
	{
		List<String> result = new ArrayList<>();
		preorder(root, result);
		int i = result.size()-1;
		while(!result.get(i).equals("null"))
			result.remove(i);
		return result.toString();
    }

    public void preorder(TreeNode root, List<String> result)
    {
    	if(root==null)
    	{
    		result.add("null");
    		return;
    	}
    	result.add(root.data+"");
    	preorder(root.left, result);
    	preorder(root.right, result);
    }

    public TreeNode deserialize(String data) 
    {
    	data = data.replace("[", "");
    	data = data.replace("]", "");
    	String[] a = data.split(", ");
    	
 		TreeNode root = create(a, new Index());
        return root;
    }

    public TreeNode create(String[] a, Index index)
    {
    	TreeNode root = null;
    	if(index.idx < a.length)
    	{
    		if(!a[index.idx].equals("null"))
    		{
    			root = new TreeNode(Integer.parseInt(a[index.idx]));
    			index.idx++;
    			root.left = create(a, index);
    			index.idx++;
    			root.right = create(a, index);
    			return root;
    		}
    	}
    	return root;
    }

    public void printTree(TreeNode root)
    {
    	if(root==null)
    		return;
    	printTree(root.left);
    	System.out.print(root.data+" ");
    	printTree(root.right);
    }

    class Index
	{
   	 	int idx;
	}
}

class TreeNode
{
	int data;
	TreeNode left;
	TreeNode right;

	TreeNode(int data)
	{
		this.data = data;
	}
}

class Index
{
    int idx;
}</pre>