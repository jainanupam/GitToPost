<b>Title: </b>Inplace rotate square matrix by 90 degrees | Set 1  <b>Source: </b><a target='_blank' href='http://www.geeksforgeeks.org/inplace-rotate-square-matrix-by-90-degrees/'>www.geeksforgeeks.org</a><p><p>Given an square matrix, turn it by 90 degrees in anti-clockwise direction without using any extra space.</p><p>Examples:</p><pre>Input
 1  2  3
 4  5  6
 7  8  9

Output:
 3  6  9 
 2  5  8 
 1  4  7 

Input:
 1  2  3  4 
 5  6  7  8 
 9 10 11 12 
13 14 15 16 

Output:
 4  8 12 16 
 3  7 11 15 
 2  6 10 14 
 1  5  9 13</pre><div id="practiceLinkDiv">
<h2><a href="http://practice.geeksforgeeks.org/problems/rotate-by-90-degree/0">Recommended: Please solve it on “<b><i><u>PRACTICE</u></i></b>” first, before moving on to the solution.</a></h2>
</div><p>An approach that requires extra space is already discussed <a href="http://www.geeksforgeeks.org/turn-an-image-by-90-degree/">here</a>.</p><p><strong>How to do without extra space?</strong><br/>
Below are some important observations.</p><p><em>First row of source –&gt; First column of destination, elements filled in opposite order</em></p><p>Second row of source –&gt; Second column of destination, elements filled in opposite order</p><p>so … on</p><p>Last row of source –&gt; Last column of destination, elements filled in opposite order.</p><p>An N x N matrix will have floor(N/2) square cycles. For example, a 4 X 4 matrix will have 2 cycles. The first cycle is formed by its 1st row, last column, last row and 1st column. The second cycle is formed by 2nd row, second-last column, second-last row and 2nd column.</p><p>The idea is for each square cycle, we swap the elements involved with the corresponding cell in the matrix in anti-clockwise direction i.e. from top to left, left to bottom, bottom to right and from right to top one at a time. We use nothing but a temporary variable to achieve this.</p><p>Below steps demonstrate the idea</p><pre>
<strong>First Cycle (Involves Red Elements)</strong>
<span style="color: red;"> 1  2  3 4 </span>
<span style="color: red;"> 5</span>  6  7 <span style="color: red;"> 8 </span>
<span style="color: red;"> 9</span> 10 11 <span style="color: red;">12 </span>
<span style="color: red;"> 13 14 15 16 </span>

 
Moving first group of four elements (First
elements of 1st row, last row, 1st column 
and last column) of first cycle in counter
clockwise. 
<span style="color: green;"> 4</span>  2  3 <span style="color: green;">16</span>
 5  6  7 8 
 9 10 11 12 
<span style="color: green;"> 1</span> 14  15 <span style="color: green;">13</span> 
 
Moving next group of four elements of 
first cycle in counter clockwise 
 4 <span style="color: green;"> 8</span>  3 16 
 5  6  7 <span style="color: green;"> 15 </span> 
 <span style="color: green;">2</span>  10 11 12 
 1  14  <span style="color: green;">9</span> 13 

Moving final group of four elements of 
first cycle in counter clockwise 
 4  8 <span style="color: green;">12</span> 16 
 <span style="color: green;">3</span>  6  7 15 
 2 10 11 <span style="color: green;">14</span> 
 1  <span style="color: green;">5</span>  9 13 


<strong>Second Cycle (Involves Blue Elements)</strong>
 4  8 12 16 
 3 <span style="color: blue;"> 6 7</span>  15 
 2  <span style="color: blue;">10 11</span> 14 
 1  5  9 13 

Fixing second cycle
 4  8 12 16 
 3 <span style="color: green;"> 7 11</span> 15 
 2  <span style="color: green;">6 10</span> 14 
 1  5  9 13</pre><p>Below is C++ implementation of above idea.</p><pre class="brush: c; highlight: [8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]; title: ; notranslate" title="">
// C++ program to rotate a matrix by 90 degrees
#include &lt;bits/stdc++.h&gt;
#define N 4
using namespace std;

void displayMatrix(int mat[N][N]);

// An Inplace function to rotate a N x N matrix
// by 90 degrees in anti-clockwise direction
void rotateMatrix(int mat[][N])
{
    // Consider all squares one by one
    for (int x = 0; x &lt; N / 2; x++)
    {
        // Consider elements in group of 4 in 
        // current square
        for (int y = x; y &lt; N-x-1; y++)
        {
            // store current cell in temp variable
            int temp = mat[x][y];

            // move values from right to top
            mat[x][y] = mat[y][N-1-x];

            // move values from bottom to right
            mat[y][N-1-x] = mat[N-1-x][N-1-y];

            // move values from left to bottom
            mat[N-1-x][N-1-y] = mat[N-1-y][x];

            // assign temp to left
            mat[N-1-y][x] = temp;
        }
    }
}

// Function to print the matrix
void displayMatrix(int mat[N][N])
{
    for (int i = 0; i &lt; N; i++)
    {
        for (int j = 0; j &lt; N; j++)
            printf("%2d ", mat[i][j]);

        printf("\n");
    }
    printf("\n");
}


/* Driver program to test above functions */
int main()
{
    // Test Case 1
    int mat[N][N] =
    {
        {1, 2, 3, 4},
        {5, 6, 7, 8},
        {9, 10, 11, 12},
        {13, 14, 15, 16}
    };


    // Tese Case 2
    /* int mat[N][N] = {
                        {1, 2, 3},
                        {4, 5, 6},
                        {7, 8, 9}
                    };
     */

    // Tese Case 3
    /*int mat[N][N] = {
                    {1, 2},
                    {4, 5}
                };*/

    //displayMatrix(mat);

    rotateMatrix(mat);

    // Print rotated matrix
    displayMatrix(mat);

    return 0;
}
</pre><p>Output:</p><pre>Rotated Matrix
 4  8 12 16 
 3  7 11 15 
 2  6 10 14 
 1  5  9 13 
</pre><p><strong>Exercise: </strong>Turn 2D matrix by 90 degrees in clockwise direction without using extra space.</p><p><strong><a href="http://www.geeksforgeeks.org/rotate-matrix-90-degree-without-using-extra-space-set-2/">Rotate a matrix by 90 degree without using any extra space | Set 2</a></strong></p><div id="companyTagsDiv">
<h3>Asked in: <a href="http://practice.geeksforgeeks.org/company/Microsoft/">Microsoft</a></h3>
</div><p>Related QA Topic : <a href="http://qa.geeksforgeeks.org/4493/rotate-the-matrix-inplace">http://qa.geeksforgeeks.org/4493/rotate-the-matrix-inplace</a></p><p>This article is contributed by <strong>Aditya Goel</strong>. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.</p><p>Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above</p><div class="AdsParent" style="width:100%;">
<span class="rectangleAd">
<!--
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
 Big Rectangle Blog Bottom 
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4061219431"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
-->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- GfGDownLeftNew -->
<ins class="adsbygoogle" data-ad-client="ca-pub-9465609616171866" data-ad-format="auto" data-ad-slot="5794942435" style="display:block"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
</span>
<span class="responsiveAd">
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- newMobile2 -->
<ins class="adsbygoogle" data-ad-client="ca-pub-9465609616171866" data-ad-format="auto" data-ad-slot="1950485631" style="display:block"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
</span>
</div><h1><strong><a href="http://quiz.geeksforgeeks.org/gate-corner-2/">GATE CS Corner</a>
   <a href="http://practice.geeksforgeeks.org/company-tags">Company Wise Coding Practice</a></strong></h1></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* http://www.geeksforgeeks.org/inplace-rotate-square-matrix-by-90-degrees/ */
/* https://leetcode.com/problems/rotate-image/ */
class RotateImage
{
	public static void main(String args[])
	{
		int[][] image = {
					{1, 2, 3, 4 },
					{5, 6, 7, 8 },
					{9, 10,11,12},
					{13,14,15,16}
				};
		printMatrix(image);
		RotateImage solution = new RotateImage();
		solution.rotate(image);
		printMatrix(image);

	}

	public void rotate(int[][] image)
	{
		int layer = image.length/2;
		for(int j=0;j<layer;j++)
		{

			int length = image.length-1-(2*j);
			System.out.println("layer: "+j + " length: "+length);
			for(int i=0;i<length;i++)
			{
				System.out.println("i: "+i);
				int temp = image[j][i];
				//left-bottom -> left-top
				image[j][i] = image[length][j];
				//printMatrix(image);
				//right-bottom -> left-bottom
				image[length][j] = image[length][length];
				//printMatrix(image);
				//top-right -> right-bottom
				image[length][length] = image[i][length];
				//printMatrix(image);
				//top-left -> top-right
				image[i][length] = temp;
			}
			printMatrix(image);
		}
	}

	static void printMatrix(int[][] image)
	{
		for(int[] row: image)
		{
			for(int num:row)
			{
				System.out.print(num+"\t");
			}
			System.out.println();
		}
		System.out.println();
	}
}
</pre>