<b>Title: </b>Merge Intervals  <b>Source: </b><a target='_blank' href='https://leetcode.com/problems/merge-intervals/'>leetcode.com</a><p><p>Given a collection of intervals, merge all overlapping intervals.</p><p>
For example,<br/>
Given <code>[1,3],[2,6],[8,10],[15,18]</code>,<br/>
return <code>[1,6],[8,10],[15,18]</code>.
</p></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* https://leetcode.com/problems/merge-intervals/ */
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Stack;

public class MergeIntervals
{
	public List<Interval> merge(List<Interval> intervals) 
	{
		this.sort(intervals);
       	Stack<Interval> stack = new Stack<>();
       	for(Interval interval : intervals)
       	{
       		if(stack.isEmpty())
       		{
       			stack.push(interval);
       			continue;
       		}
       		Interval i = stack.peek();
       		if(interval.start <= i.start)
       		{
       			//System.out.println("1");
       			if((i.start < interval.end && interval.end <= i.end)
       				|| (i.end < interval.end))
       			{
       				stack.pop();
       				int s = interval.start < i.start ? interval.start : i.start;
       				int e = interval.end < i.end ? i.end:interval.end;
       				stack.push(new Interval(s, e));
       			}
       		}
       		else if(i.start < interval.start)
       		{
       			//System.out.println("2");
       			if(interval.start <= i.end)
       			{
       				stack.pop();
       				int e = interval.end < i.end ? i.end : interval.end;
       				stack.push(new Interval(i.start, e));
       			}
       			else
       			{
       				stack.push(interval);
       			}
       		}
       	}
       	ArrayList<Interval> a = new ArrayList<>(stack);
       	return a;
    }

    public void sort(List<Interval> intervals)
    {
    	Collections.sort(intervals, new Comparator<Interval>(){
    		public int compare(Interval i1, Interval i2)
    		{
    			return i1.start-i2.start;
    		}
    	});
    }

    public void print(List<Interval> intervals)
    {
    	for(Interval interval : intervals)
    	{
    		System.out.println("["+interval.start+", "+interval.end+"]");
    	}
    }

    public static void main(String args[])
    {
    	MergeIntervals mi = new MergeIntervals();
    	List<Interval> list = new ArrayList<>();
    	list.add(new Interval(1, 3));
    	list.add(new Interval(2, 6));
    	list.add(new Interval(8, 10));
    	list.add(new Interval(9, 11));
    	list.add(new Interval(15, 18));
    	//mi.print(list);
    	mi.print(mi.merge(list));
    }
}

class Interval 
{
    int start;
    int end;
    Interval() 
    { 
    	start = 0; 
    	end = 0; 
   	}
    
    Interval(int s, int e) 
    { 
    	start = s; 
    	end = e; 
   	}
}</pre>