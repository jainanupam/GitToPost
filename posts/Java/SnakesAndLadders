<b>Title: </b>Snake and Ladder Problem  <b>Source: </b><a target='_blank' href='http://www.geeksforgeeks.org/snake-ladder-problem-2/'>www.geeksforgeeks.org</a><p><p>Given a snake and ladder board, find the minimum number of dice throws required to reach the destination or last cell from source or 1st cell.<span id="more-131708"></span> Basically, the player has total control over outcome of dice throw and wants to find out minimum number of throws required to reach last cell.</p><p>If the player reaches a cell which is base of a ladder, the player has to climb up that ladder and if reaches a cell is mouth of the snake, has to go down to the tail of snake without a dice throw.</p><p><a href="http://www.geeksforgeeks.org/wp-content/uploads/snakesladders.jpg"><img alt="snakesladders" class="alignright size-full wp-image-1818" height="200" src="http://www.geeksforgeeks.org/wp-content/uploads/snakesladders-300x249.jpg" width="250"/></a></p><p>For example consider the board shown on right side (taken from <a href="http://achillesniggle.wordpress.com/2013/08/17/snakes-and-ladders/" target="_blank">here</a>), the minimum number of dice throws required to reach cell 30 from cell 1 is 3.   Following are steps.</p><p>a) First throw two on dice to reach cell number 3 and then ladder to reach 22<br/>
b) Then throw 6 to reach 28.<br/>
c) Finally through 2 to reach 30.</p><p>There can be other solutions as well like (2, 2, 6), (2, 4, 4), (2, 3, 5).. etc.</p><div id="practiceLinkDiv">
<h2><a href="http://practice.geeksforgeeks.org/problems/snake-and-ladder-problem/0">Recommended: Please solve it on “<b><i><u>PRACTICE</u></i></b>” first, before moving on to the solution.</a></h2>
</div><p>The idea is to consider the given snake and ladder board as a directed graph with number of vertices equal to the number of cells in the board.   The problem reduces to finding the shortest path in a graph. Every vertex of the graph has an edge to next six vertices if next 6 vertices do not have a snake or ladder.  If any of the next six vertices has a snake or ladder, then the edge from current vertex goes to the top of the ladder or tail of the snake.  Since all edges are of equal weight, we can efficiently find shortest path using <a href="http://www.geeksforgeeks.org/breadth-first-traversal-for-a-graph/" target="_blank">Breadth First Search</a> of the graph.  </p><p>Following is C++ implementation of the above idea.  The input is represented by two things, first is ‘N’ which is number of cells in the given board, second is an array ‘move[0…N-1]’ of size N.  An entry move[i] is -1 if there is no snake and no ladder from i, otherwise move[i] contains index of destination cell for the snake or the ladder at i.</p><div class="responsive-tabs">
<h2 class="tabtitle">C++</h2>
<div class="tabcontent">
<pre class="brush: c; highlight: [15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79]; title: ; notranslate" title="">
// C++ program to find minimum number of dice throws required to
// reach last cell from first cell of a given snake and ladder
// board
#include&lt;iostream&gt;
#include &lt;queue&gt;
using namespace std;

// An entry in queue used in BFS
struct queueEntry
{
    int v;     // Vertex number
    int dist;  // Distance of this vertex from source
};

// This function returns minimum number of dice throws required to
// Reach last cell from 0'th cell in a snake and ladder game.
// move[] is an array of size N where N is no. of cells on board
// If there is no snake or ladder from cell i, then move[i] is -1
// Otherwise move[i] contains cell to which snake or ladder at i
// takes to.
int getMinDiceThrows(int move[], int N)
{
    // The graph has N vertices. Mark all the vertices as
    // not visited
    bool *visited = new bool[N];
    for (int i = 0; i &lt; N; i++)
        visited[i] = false;

    // Create a queue for BFS
    queue&lt;queueEntry&gt; q;

    // Mark the node 0 as visited and enqueue it.
    visited[0] = true;
    queueEntry s = {0, 0};  // distance of 0't vertex is also 0
    q.push(s);  // Enqueue 0'th vertex

    // Do a BFS starting from vertex at index 0
    queueEntry qe;  // A queue entry (qe)
    while (!q.empty())
    {
        qe = q.front();
        int v = qe.v; // vertex no. of queue entry

        // If front vertex is the destination vertex,
        // we are done
        if (v == N-1)
            break;

        // Otherwise dequeue the front vertex and enqueue
        // its adjacent vertices (or cell numbers reachable
        // through a dice throw)
        q.pop();
        for (int j=v+1; j&lt;=(v+6) &amp;&amp; j&lt;N; ++j)
        {
            // If this cell is already visited, then ignore
            if (!visited[j])
            {
                // Otherwise calculate its distance and mark it
                // as visited
                queueEntry a;
                a.dist = (qe.dist + 1);
                visited[j] = true;

                // Check if there a snake or ladder at 'j'
                // then tail of snake or top of ladder
                // become the adjacent of 'i'
                if (move[j] != -1)
                    a.v = move[j];
                else
                    a.v = j;
                q.push(a);
            }
        }
    }

    // We reach here when 'qe' has last vertex
    // return the distance of vertex in 'qe'
    return qe.dist;
}

// Driver program to test methods of graph class
int main()
{
    // Let us construct the board given in above diagram
    int N = 30;
    int moves[N];
    for (int i = 0; i&lt;N; i++)
        moves[i] = -1;

    // Ladders
    moves[2] = 21;
    moves[4] = 7;
    moves[10] = 25;
    moves[19] = 28;

    // Snakes
    moves[26] = 0;
    moves[20] = 8;
    moves[16] = 3;
    moves[18] = 6;

    cout &lt;&lt; "Min Dice throws required is " &lt;&lt; getMinDiceThrows(moves, N);
    return 0;
}
</pre>
</div><h2 class="tabtitle">Java</h2>
<div class="tabcontent">
<pre class="brush: java; highlight: [17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76]; title: ; notranslate" title="">
// Java program to find minimum number of dice 
// throws required to reach last cell from first 
// cell of a given snake and ladder board

import java.util.LinkedList;
import java.util.Queue;

public class SnakesLadder 
{
	// An entry in queue used in BFS
	static class qentry 
	{
		int v;// Vertex number
		int dist;// Distance of this vertex from source
	}

	// This function returns minimum number of dice 
	// throws required to Reach last cell from 0'th cell 
	// in a snake and ladder game. move[] is an array of 
	// size N where N is no. of cells on board If there 
	// is no snake or ladder from cell i, then move[i] 
	// is -1 Otherwise move[i] contains cell to which 
	// snake or ladder at i takes to.
	static int getMinDiceThrows(int move[], int n) 
	{
		int visited[] = new int[n];
		Queue&lt;qentry&gt; q = new LinkedList&lt;&gt;();
		qentry qe = new qentry();
		qe.v = 0;
		qe.dist = 0;

		// Mark the node 0 as visited and enqueue it.
		visited[0] = 1;
		q.add(qe);

		// Do a BFS starting from vertex at index 0
		while (!q.isEmpty()) 
		{
			qe = q.remove();
			int v = qe.v;

			// If front vertex is the destination 
			// vertex, we are done
			if (v == n - 1)
				break;

			// Otherwise dequeue the front vertex and 
			// enqueue its adjacent vertices (or cell 
			// numbers reachable through a dice throw)
			for (int j = v + 1; j &lt;= (v + 6) &amp;&amp; j &lt; n; ++j) 
			{
				// If this cell is already visited, then ignore
				if (visited[j] == 0)
				{
					// Otherwise calculate its distance and 
					// mark it as visited
					qentry a = new qentry();
					a.dist = (qe.dist + 1);
					visited[j] = 1;

					// Check if there a snake or ladder at 'j'
					// then tail of snake or top of ladder
					// become the adjacent of 'i'
					if (move[j] != -1)
						a.v = move[j];
					else
						a.v = j;
					q.add(a);
				}
			}
		}

		// We reach here when 'qe' has last vertex
		// return the distance of vertex in 'qe'
		return qe.dist;
	}

	public static void main(String[] args) 
	{
		// Let us construct the board given in above diagram
		int N = 30;
		int moves[] = new int[N];
		for (int i = 0; i &lt; N; i++)
			moves[i] = -1;

		// Ladders
		moves[2] = 21;
		moves[4] = 7;
		moves[10] = 25;
		moves[19] = 28;

		// Snakes
		moves[26] = 0;
		moves[20] = 8;
		moves[16] = 3;
		moves[18] = 6;

		System.out.println("Min Dice throws required is " + 
		                  getMinDiceThrows(moves, N));
	}
}
</pre>
<p></p></div></div><pre>Min Dice throws required is 3</pre><p>Time complexity of the above solution is O(N) as every cell is added and removed only once from queue. And a typical enqueue or dequeue operation takes O(1) time.</p><div id="companyTagsDiv">
<h3>Asked in: <a href="http://practice.geeksforgeeks.org/company/Amazon/">Amazon</a>, <a href="http://practice.geeksforgeeks.org/company/Belzabar/">Belzabar</a>, <a href="http://practice.geeksforgeeks.org/company/Flipkart/">Flipkart</a>, <a href="http://practice.geeksforgeeks.org/company/MAQ Software/">MAQ Software</a></h3>
</div><p>This article is contributed by <strong>Siddharth</strong>. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.</p><div class="AdsParent" style="width:100%;">
<span class="rectangleAd">
<!--
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
 Big Rectangle Blog Bottom 
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4061219431"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
-->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- GfGDownLeftNew -->
<ins class="adsbygoogle" data-ad-client="ca-pub-9465609616171866" data-ad-format="auto" data-ad-slot="5794942435" style="display:block"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
</span>
<span class="responsiveAd">
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- newMobile2 -->
<ins class="adsbygoogle" data-ad-client="ca-pub-9465609616171866" data-ad-format="auto" data-ad-slot="1950485631" style="display:block"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
</span>
</div><h1><strong><a href="http://quiz.geeksforgeeks.org/gate-corner-2/">GATE CS Corner</a>
   <a href="http://practice.geeksforgeeks.org/company-tags">Company Wise Coding Practice</a></strong></h1></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* http://www.geeksforgeeks.org/snake-ladder-problem-2/ */
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
public class SnakesAndLadders
{
	public static void main(String args[])
	{
		int N = 30;
		int[] moves = new int[N];

		Arrays.fill(moves, -1);
		//Ladders
		moves[2] = 21;
		moves[4] = 7;
		moves[10] = 25;
		moves[19] = 28;

		//snakes
		moves[26] = 0;
		moves[20] = 8;
		moves[16] = 3;
		moves[18] = 6;
		SnakesAndLadders s = new SnakesAndLadders();
		System.out.println(s.getMinimumDistance(moves));
	}

	public int getMinimumDistance(int[] moves)
	{
		boolean[] visited = new boolean[moves.length];
		Queue<QueueEntry> q = new LinkedList<>();

		visited[0] = true;
		QueueEntry node = new QueueEntry(0, 0);
		q.add(node);
		QueueEntry temp = null;
		//do BFS starting from node 0 
		//all the nodes that are reachable from any node (1-6)
		while(!q.isEmpty())
		{
			temp = q.poll();
			if(temp.v == moves.length-1)
				break;
			for(int i=temp.v+1; i<temp.v+7 && i<moves.length; ++i)
			{
				if(!visited[i])
				{
					QueueEntry a = new QueueEntry(i, temp.distance+1);
					visited[i] = true;
					if(moves[i]!=-1)
						a.v = moves[i];
					q.add(a);
				}
			}
		}
		return temp.distance;
	}
}

class QueueEntry
{
	int v;
	int distance;

	QueueEntry(int v, int distance)
	{
		this.v = v;
		this.distance = distance;
	}
}</pre>