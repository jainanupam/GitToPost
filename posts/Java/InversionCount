<b>Title: </b>Count Inversions in an array | Set 1 (Using Merge Sort)  <b>Source: </b><a target='_blank' href='http://www.geeksforgeeks.org/counting-inversions/'>www.geeksforgeeks.org</a><p><p><em>Inversion Count </em>for an array indicates – how far (or close) the array is from being sorted. If array is already sorted then inversion count is 0. If array is sorted in reverse order that inversion count is the maximum. <span id="more-3968"></span><br/>
Formally speaking, two elements a[i] and a[j] form an inversion if a[i] &gt; a[j] and i &lt; j </p><p><strong> Example:</strong><br/>
The sequence 2, 4, 1, 3, 5 has three inversions (2, 1), (4, 1), (4, 3).</p><div id="practiceLinkDiv">
<h2><a href="http://practice.geeksforgeeks.org/problems/inversion-of-array/0">Recommended: Please solve it on “<b><i><u>PRACTICE</u></i></b>” first, before moving on to the solution.</a></h2>
</div><p> <br/>
<strong>METHOD 1 (Simple)</strong><br/>
For each element, count number of elements which are on right side of it and are smaller than it.<br/>
<div class="responsive-tabs">
<h2 class="tabtitle">C</h2>
<div class="tabcontent">
</div></div></p><pre class="brush: c; title: ; notranslate" title="">
#include &lt;bits/stdc++.h&gt;
int getInvCount(int arr[], int n)
{
  int inv_count = 0;
  for (int i = 0; i &lt; n - 1; i++)
    for (int j = i+1; j &lt; n; j++)
      if (arr[i] &gt; arr[j])
        inv_count++;

  return inv_count;
}

/* Driver progra to test above functions */
int main(int argv, char** args)
{
  int arr[] = {1, 20, 6, 4, 5};
  int n = sizeof(arr)/sizeof(arr[0]);
  printf(" Number of inversions are %d \n", getInvCount(arr, n));
  return 0;
}
</pre></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* http://www.geeksforgeeks.org/counting-inversions/*/
import java.util.Arrays;
public class InversionCount
{
	public static void main(String args[])
	{
		int[] arr = {1, 20, 6, 4, 5};
		InversionCount i = new InversionCount();
		System.out.println(i.countInversions(arr));
	}

	public int countInversions(int[] arr)
	{
		int[] temp = Arrays.copyOf(arr, arr.length);
		int count = mergeSort(temp, new int[temp.length], 0, arr.length-1);
		System.out.println(Arrays.toString(temp));
		return count;
	}

	//Using merge sort
	private int mergeSort(int[] arr, int[] temp, int leftIndex, int rightIndex)
	{
		int invCount = 0;
		int midIndex = 0;
		if(rightIndex > leftIndex)
		{
			midIndex = (leftIndex + rightIndex)/2;
			invCount = mergeSort(arr, temp, leftIndex, midIndex);
			invCount += mergeSort(arr, temp, midIndex+1, rightIndex);
			//look out for the midIndex 
			invCount += merge(arr, temp, leftIndex, midIndex+1, rightIndex);
		}
		return invCount;
	}

	//merge routine - returns the number of inversions
	private int merge(int[] arr, int[] temp, int leftIndex, int midIndex, int rightIndex)
	{
		int i = leftIndex; //starting index in the left subarray
		int j = midIndex; //starting index in the right subarray
		int k = leftIndex; //starting index in the temp array

		int invCount = 0;

		while(i<=midIndex-1 && j <=rightIndex)
		{
			if(arr[i]<=arr[j])
			{
				temp[k++] = arr[i++];
			}
			else
			{
				temp[k++] = arr[j++];
				invCount = invCount + (midIndex - i);
			}
		}
		//copy the remaining arrays
		while(i<=midIndex-1)
		{
			temp[k++] = arr[i++];
		}

		while(j<=rightIndex)
		{
			temp[k++] = arr[j++];
		}
		System.out.println("# "+Arrays.toString(temp));
		//copy the temp array to original array
		for(int x = leftIndex; x<=rightIndex;++x)
		{
			arr[x] = temp[x];
		}
		//System.out.println("# "+Arrays.toString(arr));
		return invCount;
	}
}</pre>