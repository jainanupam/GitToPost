<b>Title: </b>165. Compare Version Numbers  <b>Source: </b><a target='_blank' href='https://leetcode.com/problems/compare-version-numbers/'>leetcode.com</a><p><p>Compare two version numbers <i>version1</i> and <i>version2</i>.<br/>
If <i>version1</i> &gt; <i>version2</i> return 1, if <i>version1</i> &lt; <i>version2</i> return -1, otherwise return 0.</p><p>You may assume that the version strings are non-empty and contain only digits and the <code>.</code> character.<br/>
The <code>.</code> character does not represent a decimal point and is used to separate number sequences.<br/>
For instance, <code>2.5</code> is not "two and a half" or "half way to version three", it is the fifth second-level revision of the second first-level revision.</p><p>Here is an example of version numbers ordering:</p><pre>0.1 &lt; 1.1 &lt; 1.2 &lt; 13.37</pre></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* https://leetcode.com/problems/compare-version-numbers/ */
class VersionNumbers
{
	public int compareVersion(String version1, String version2)
	{
		//split the two strings on "."
		String[] v1 = version1.split("\\.");
		String[] v2 = version2.split("\\.");
		int i=0;
		int j=0;
		//get the length of the arrays
		int m = v1.length;
		int n = v2.length;
		while(i<m && j<n)
		{
			//compare v1[i] with v2[i]
			if(Integer.parseInt(v1[i]) 	> Integer.parseInt(v2[i]))
				return 1;
			else if(Integer.parseInt(v1[i]) < Integer.parseInt(v2[i]))
				return -1;
			i++;
			j++;
		}
		//check the remaining elements in the array (if any)
		for(;i<m;i++)
			if(Integer.parseInt(v1[i]) 	> 0)
				return 1;
		for(;j<n;j++)
			if(Integer.parseInt(v2[j]) 	> 0)
				return -1;
		return 0;
    }

	public static void main(String args[])
	{
		VersionNumbers vn = new VersionNumbers();
		vn.compareVersion("1", "1.1");
	}
}
</pre>