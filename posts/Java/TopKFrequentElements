<b>Title: </b>
            347. Top K Frequent Elements
            <b>Source: </b><a target='_blank' href='https://leetcode.com/problems/top-k-frequent-elements/'>leetcode.com</a><p><section class="action action-btn-set">
<a class="icon-btn btn" href="https://discuss.leetcode.com/category/431" onclick="ga('send', 'event', 'discuss', 'click', 'top-k-frequent-elements');" target="_blank">
<i aria-hidden="true" class="fa fa-commenting-o"></i>Discuss
          </a>
<button class="icon-btn disabled" data-placement="top" data-toggle="tooltip" title="Not available yet, please check back later." type="button">
<i aria-hidden="true" class="fa fa-book">
</i><span class="hidden-xs">Editorial </span>Solution
          </button>
<a class="icon-btn pull-right-sm btn" href="/problems/random-one-question/" onclick="ga('send', 'event', 'pick-one-detail', 'click');">
<i aria-hidden="true" class="fa fa-random"></i>Pick One
          </a>
</section><hr class="line dotted">
</hr></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* https://leetcode.com/problems/top-k-frequent-elements/ */
/* https://leetcode.com/discuss/108288/3-java-solution-using-array-maxheap-treemap */
import java.util.PriorityQueue;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Comparator;
import java.util.TreeMap;
public class TopKFrequentElements
{
	public static void main(String args[])
	{
		int[] nums = {1,1,1,2,2,3};
		TopKFrequentElements t = new TopKFrequentElements();
		t.topKFrequent(nums, 2);
		t.topKFrequentTreeMap(nums, 2);
	}

	public List<Integer> topKFrequent(int[] nums, int k) 
	{
		if(nums==null || k ==0)
		{
			return new ArrayList<Integer>();
		}
		if(nums.length < 2)
		{
			List<Integer> temp = new ArrayList<>();
			temp.add(nums[0]);
			return temp;
		}
		Map<Integer, Integer> map = new HashMap<>();
        
        for(int i=0;i<nums.length;++i)
        {
        	map.put(nums[i], map.getOrDefault(nums[i], 0)+1);
        }

        PriorityQueue<Map.Entry<Integer, Integer>> pq =
        	new PriorityQueue<>(new Comparator<Map.Entry<Integer, Integer>>(){
        		public int compare(Map.Entry<Integer, Integer> e1, Map.Entry<Integer, Integer> e2)
        		{
        			return e2.getValue() - e1.getValue();
        		}
        	});
        //System.out.println(pq);
        for(Map.Entry<Integer, Integer> entry: map.entrySet())
        {
        	pq.add(entry);
        }
        System.out.println(pq);
        List<Integer> list = new ArrayList<>();
        for(int i=0;i<k;++i)
        {
        	Map.Entry<Integer, Integer> temp = pq.poll();
        	list.add(temp.getKey());
        }
        System.out.println(list);
        return list;
    }
}</pre><br><br><h3>Python solution</h3><pre class="lang:python decode:true ">''' https://leetcode.com/problems/top-k-frequent-elements/ '''
''' 72 ms
class Solution(object):
    def topKFrequent(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
        d = {}
        for n in nums:
            if n in d:
                d[n] += 1
            else:
                d[n] = 1
        ds = {}
        keys = d.keys()
        for key in keys:
            if d[key] in ds:
                ds[d[key]].append(key)
            else:
                ds[d[key]] = [key]
        keys = sorted(ds.keys(), reverse=True)
        cnt = 0
        result = []
        for key in keys:
            ns = ds[key]
            ln = len(ns)
            if cnt + ln <= k:
                result += ds[key]
            elif cnt < k:
                result += ds[key][:k-cnt]
            else:
                break
            cnt += ln
        return result
</pre>