<b>Title: </b>
            386. Lexicographical Numbers
            <b>Source: </b><a target='_blank' href='https://leetcode.com/problems/lexicographical-numbers/'>leetcode.com</a><p><section class="action action-btn-set">
<a class="icon-btn btn" href="https://discuss.leetcode.com/category/508" onclick="ga('send', 'event', 'discuss', 'click', 'lexicographical-numbers');" target="_blank">
<i aria-hidden="true" class="fa fa-commenting-o"></i>Discuss
          </a>
<button class="icon-btn disabled" data-placement="top" data-toggle="tooltip" title="Not available yet, please check back later." type="button">
<i aria-hidden="true" class="fa fa-book">
</i><span class="hidden-xs">Editorial </span>Solution
          </button>
<a class="icon-btn pull-right-sm btn" href="/problems/random-one-question/" onclick="ga('send', 'event', 'pick-one-detail', 'click');">
<i aria-hidden="true" class="fa fa-random"></i>Pick One
          </a>
</section><hr class="line dotted">
</hr></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* https://leetcode.com/problems/lexicographical-numbers/ */
import java.util.*;

public class LexicographicalNumbers
{
	public static void main(String[] args)
	{
		LexicographicalNumbers l = new LexicographicalNumbers();
		//l.lexicalOrder(5678);
		//l.lexicalOrder(1);
		//l.lexicalOrder(100);
		//System.out.println(l.lexicalOrder(13));
		//System.out.println(l.lexicalOrder(9));
		System.out.println(l.lexicalOrder(100));
		//System.out.println(l.lexicalOrder(1));
		//System.out.println(l.lexicalOrder(2));
	}

	public List<Integer> lexicalOrder(int n) 
	{
		List<Integer> list = new ArrayList<>();
		if(n > 9)
		{
			Node[] nodes = new Node[9];
			for(int i=0;i<9;i++)
			{
				nodes[i] = new Node(i+1);
			}

			for(int i=0;i<8;++i)
			{
				nodes[i].next = nodes[i+1];
			}
			Node p = nodes[0];
			if(n>9)
				helper(n, nodes);
			
			
			while(p!=null)
			{
				list.add(p.val);	
				p = p.next;
			}
		}
		else if(n>0 && n<10)
		{
			for(int i=0; i<n; ++i)
			{
				list.add(i+1);
			}
		}

		return list;
    }

    public void helper(int n, Node[] nodes)
    {
    	for(int i=9; i<n; ++i)
    	{
    		int div = (int)Math.pow(10, (int)Math.log10(i+1));
    		//System.out.println(div);
    		int index = ((i+1)/div)-1;
    		//System.out.println(index);
    		Node temp = nodes[index];
 			System.out.println("div: "+div+" index: "+index+" temp: "+temp.val);
    		Node newNode = new Node(i+1);
    		newNode.next = temp.next;
    		temp.next = newNode;
    		nodes[index] = newNode;
    	}
    }

    class Node
	{
		int val;
		Node next;

		public Node(int val)
		{
			this.val = val;
		}
	}
}

</pre>