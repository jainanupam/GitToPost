<b>Title: </b>Remove duplicates from an unsorted linked list  <b>Source: </b><a target='_blank' href='http://www.geeksforgeeks.org/remove-duplicates-from-an-unsorted-linked-list/'>www.geeksforgeeks.org</a><p><p>Write a removeDuplicates() function which takes a list and deletes any duplicate nodes from the list. The list is not sorted. <span id="more-5036"></span></p><p>For example if the linked list is 12-&gt;11-&gt;12-&gt;21-&gt;41-&gt;43-&gt;21 then removeDuplicates() should convert the list to 12-&gt;11-&gt;21-&gt;41-&gt;43. </p><p><strong>METHOD 1 (Using two loops)</strong><br/>
This is the simple way where two loops are used. Outer loop is used to pick the elements one by one and inner loop compares the picked element with rest of the elements.  </p><p>Thanks to Gaurav Saxena for his help in writing this code.</p><div class="responsive-tabs">
<h2 class="tabtitle">C</h2>
<div class="tabcontent">
<pre class="brush: cpp; title: ; notranslate" title="">
/* Program to remove duplicates in an unsorted array */

#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;

/* A linked list node */
struct node
{
 int data;
 struct node *next;
};

/* Function to remove duplicates from a unsorted linked list */
void removeDuplicates(struct node *start)
{
  struct node *ptr1, *ptr2, *dup;
  ptr1 = start;

  /* Pick elements one by one */
  while(ptr1 != NULL &amp;&amp; ptr1-&gt;next != NULL)
  {
     ptr2 = ptr1;

     /* Compare the picked element with rest of the elements */
     while(ptr2-&gt;next != NULL)
     {
       /* If duplicate then delete it */
       if(ptr1-&gt;data == ptr2-&gt;next-&gt;data)
       {
          /* sequence of steps is important here */
          dup = ptr2-&gt;next;
          ptr2-&gt;next = ptr2-&gt;next-&gt;next;
          free(dup);
       }
       else /* This is tricky */
       {
          ptr2 = ptr2-&gt;next;
       }
     }
     ptr1 = ptr1-&gt;next;
  }
}

/* UTILITY FUNCTIONS */
/* Function to push a node */
void push(struct node** head_ref, int new_data);

/* Function to print nodes in a given linked list */
void printList(struct node *node);

/* Druver program to test above function */
int main()
{
  struct node *start = NULL;

  /* The constructed linked list is:
   10-&gt;12-&gt;11-&gt;11-&gt;12-&gt;11-&gt;10*/
  push(&amp;start, 10);
  push(&amp;start, 11);
  push(&amp;start, 12);
  push(&amp;start, 11);
  push(&amp;start, 11);
  push(&amp;start, 12);
  push(&amp;start, 10);

  printf("\n Linked list before removing duplicates ");
  printList(start);

  removeDuplicates(start);

  printf("\n Linked list after removing duplicates ");
  printList(start);

  getchar();
}

/* Function to push a node */
void push(struct node** head_ref, int new_data)
{
  /* allocate node */
  struct node* new_node =
            (struct node*) malloc(sizeof(struct node));

  /* put in the data  */
  new_node-&gt;data  = new_data;

  /* link the old list off the new node */
  new_node-&gt;next = (*head_ref);

  /* move the head to point to the new node */
  (*head_ref)    = new_node;
}

/* Function to print nodes in a given linked list */
void printList(struct node *node)
{
  while(node != NULL)
  {
    printf("%d ", node-&gt;data);
    node = node-&gt;next;
  }
}
</pre>
</div><h2 class="tabtitle">Java</h2>
<div class="tabcontent">
<pre class="brush: java; title: ; notranslate" title="">
// Java program to remove duplicates from unsorted linked list

class LinkedList {

    static Node head;

    static class Node {

        int data;
        Node next;

        Node(int d) {
            data = d;
            next = null;
        }
    }

    /* Function to remove duplicates from a unsorted linked list */
    void remove_duplicates() {
        Node ptr1 = null, ptr2 = null, dup = null;
        ptr1 = head;

        /* Pick elements one by one */
        while (ptr1 != null &amp;&amp; ptr1.next != null) {
            ptr2 = ptr1;

            /* Compare the picked element with rest of the elements */
            while (ptr2.next != null) {

                /* If duplicate then delete it */
                if (ptr1.data == ptr2.next.data) {

                    /* sequence of steps is important here */
                    dup = ptr2.next;
                    ptr2.next = ptr2.next.next;
                    System.gc();
                } else /* This is tricky */ {
                    ptr2 = ptr2.next;
                }
            }
            ptr1 = ptr1.next;
        }
    }

    void printList(Node node) {
        while (node != null) {
            System.out.print(node.data + " ");
            node = node.next;
        }
    }

    public static void main(String[] args) {
        LinkedList list = new LinkedList();
        list.head = new Node(10);
        list.head.next = new Node(12);
        list.head.next.next = new Node(11);
        list.head.next.next.next = new Node(11);
        list.head.next.next.next.next = new Node(12);
        list.head.next.next.next.next.next = new Node(11);
        list.head.next.next.next.next.next.next = new Node(10);

        System.out.println("Linked List before removing duplicates ");
        list.printList(head);

        list.remove_duplicates();
        System.out.println("");
        System.out.println("Linked List after removing duplicates");
        list.printList(head);

    }
}

// This code has been contributed by Mayank Jaiswal
</pre>
</div></div><p>Time Complexity: O(n^2)</p><p><strong>METHOD 2 (Use Sorting)</strong><br/>
In general, Merge Sort is the best suited sorting algorithm for sorting linked lists efficiently.<br/>
1)	Sort the elements using Merge Sort.  We will soon be writing a post about sorting a linked list.  O(nLogn)<br/>
2)	Remove duplicates in linear time using the <a href="http://geeksforgeeks.org/?p=5075">algorithm for removing duplicates in sorted Linked List. O(n)<br/>
</a></p><p>Please note that this method doesnâ€™t preserve the original order of elements.</p><p>Time Complexity: O(nLogn)</p><p><strong>METHOD 3 (Use Hashing)</strong><br/>
We traverse the link list from head to end.  For every newly encountered element, we check whether it is in the hash table: if yes, we remove it; otherwise we put it in the hash table.</p><p>Thanks to bearwang  for suggesting this method.</p><p>Time Complexity:  O(n) on average (assuming that hash table access time is O(1) on average).  </p><p></p></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* http://www.geeksforgeeks.org/remove-duplicates-from-an-unsorted-linked-list/ */

//the idea is to use hashset, loop through each node and check whether 
//the node is already present in the hashset or not 
//if present then delete the node from hashset 
//otherwise add it to hashset

import java.util.HashSet;
import java.util.Set;
public class DeleteDuplicateFromUnsortedList
{
	public void deleteDuplicates(ListNode head)
	{
		if(head == null || head.next == null)
			return;
		Set<Integer> set = new HashSet<Integer>();
		ListNode p = head;
		while(p != null)
		{
			printLinkedList(head);
			if(!set.contains(p.val))
			{
				set.add(p.val);
				p = p.next;
			}
			else
			{
				ListNode p2 = head;
				while(p2.next!=p)
					p2 = p2.next;

				p2.next = p.next;
				p = p2.next;
			}
		}
	}

	public static void main(String args[])
	{
		//12->11->12->21->41->43->21
		ListNode head = new ListNode(12);
		head.next = new ListNode(11);
		head.next.next = new ListNode(12);
		head.next.next.next = new ListNode(21);
		head.next.next.next.next = new ListNode(41);
		head.next.next.next.next.next = new ListNode(43);
		head.next.next.next.next.next.next = new ListNode(21);

		DeleteDuplicateFromUnsortedList d = new DeleteDuplicateFromUnsortedList();
		d.deleteDuplicates(head);
		d.printLinkedList(head);
	}

	public void printLinkedList(ListNode head)
	{
		ListNode p = head;
		while(p!=null)
		{
			System.out.print(p.val + "\t");
			p = p.next;
		}
		System.out.println();
	}
}

class ListNode
{
	int val;
	ListNode next;
	ListNode(int val)
	{
		this.val = val;
	}
}</pre>