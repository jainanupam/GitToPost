<b>Title: </b>Sort a stack using recursion  <b>Source: </b><a target='_blank' href='http://www.geeksforgeeks.org/sort-a-stack-using-recursion/'>www.geeksforgeeks.org</a><p><p>Given a stack, sort it using recursion. Use of any loop constructs like while, for..etc is not allowed. We can only use the following ADT functions on Stack S: <span id="more-135684"></span></p><pre>
is_empty(S)  : Tests whether stack is empty or not.
push(S)	     : Adds new element to the stack.
pop(S)	     : Removes top element from the stack.
top(S)	     : Returns value of the top element. Note that this
               function does not remove element from the stack.</pre></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* http://www.geeksforgeeks.org/sort-a-stack-using-recursion/ */

import java.util.Stack;
class SortStackRecursively
{
	public static void main(String args[])
	{
		Stack<Integer> stack = new Stack<Integer>();
		stack.push(-3);
		stack.push(2);
		stack.push(5);
		stack.push(8);
		stack.push(3);
		stack.push(0);
		SortStackRecursively s = new SortStackRecursively();
		s.sort(stack, 0);
		while(!stack.isEmpty())
			System.out.println(stack.pop());
	}

	public void sort(Stack<Integer> stack, Integer temp)
	{
		if(!stack.isEmpty())
		{
			temp = stack.pop(); // pop stack recursively until it is empty
			sort(stack, temp);
			if(stack.isEmpty()) //if the stack is empty then push element
				stack.push(temp);
			else if(stack.peek() > temp) //if top is greater than temp pop it
			{
				int top = stack.pop();
				stack.push(temp); //push temp
				sort(stack, temp); // move temp to its sorted position
				stack.push(top); // push top
			}
			else
				stack.push(temp);
		}
	}
}
</pre>