<b>Title: </b>Word Search  <b>Source: </b><a target='_blank' href='https://leetcode.com/problems/word-search/'>leetcode.com</a><p><p>
Given a 2D board and a word, find if the word exists in the grid.
</p><p>
The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.
</p><p>
For example,<br/>
Given <b>board</b> = 
<pre>
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]
</pre>
<b>word</b> = <code>"ABCCED"</code>, -&gt; returns <code>true</code>,<br/>
<b>word</b> = <code>"SEE"</code>, -&gt; returns <code>true</code>,<br/>
<b>word</b> = <code>"ABCB"</code>, -&gt; returns <code>false</code>.<br/>
</p></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* https://leetcode.com/problems/word-search/ */
import java.util.Arrays;
class WordSearch
{
	public static void main(String args[])
	{
		char[][] board = {
 							{'A','B','C','E'},
  							{'S','F','C','S'},
  							{'A','D','E','E'}
						};
		WordSearch ws = new WordSearch();
		String word = "SEE";
		System.out.println(ws.exist(board, word));
	}

	public boolean exist(char[][] board, String word)
	{
		boolean[][] visited = new boolean[board.length][board[0].length];
		for(int i=0;i<board.length;i++)
			Arrays.fill(visited[i], false);
		for(int i=0;i<board.length;i++)
		{
			for(int j=0;j<board[i].length;j++)
			{
				//System.out.println("-----------");
				if(existHelper(i, j, board, word, 0, visited))
					return true;
			}
		}
		return false;
	}

	//Backtracking
	public boolean existHelper(int i, int j, char[][] board, String word, int pos, boolean[][] visited)
	{
		if(pos==word.length())
			return true;
        if(isSafe(i, j, board, word, pos, visited))
        {
        	//System.out.println("row: "+i+" col: "+j+" pos: "+pos);
        	visited[i][j] = true;
        	if(existHelper(i+1, j, board, word, pos+1, visited))
        		return true;
        	if(existHelper(i, j+1, board, word, pos+1, visited))
        		return true;
        	if(existHelper(i-1, j, board, word, pos+1, visited))
        		return true;
        	if(existHelper(i, j-1, board, word, pos+1, visited))
        		return true;
        	visited[i][j] = false;
        }
        return false;
    }

    public boolean isSafe(int row, int col, char[][] board, String word, int pos, boolean [][] visited)
    {
    	if(row<board.length && row>=0 && col < board[row].length && col >=0 && visited[row][col]!=true && board[row][col]==word.charAt(pos))
    		return true;
    	return false;
    }
}
</pre>