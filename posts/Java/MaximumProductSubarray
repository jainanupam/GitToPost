<b>Title: </b>Maximum Product Subarray  <b>Source: </b><a target='_blank' href='http://www.geeksforgeeks.org/maximum-product-subarray/'>www.geeksforgeeks.org</a><p><p>Given an array that contains both positive and negative integers, find the product of the maximum product subarray. Expected Time complexity is O(n) and only O(1) extra space can be used.<span id="more-22216"></span></p><p><strong>Examples:</strong>
<pre>
Input: arr[] = {6, -3, -10, 0, 2}
Output:   180  // The subarray is {6, -3, -10}

Input: arr[] = {-1, -3, -10, 0, 60}
Output:   60  // The subarray is {60}

Input: arr[] = {-2, -3, 0, -2, -40}
Output:   80  // The subarray is {-2, -40}
</pre>
<div id="practiceLinkDiv">
<h2>
<a href="http://practice.geeksforgeeks.org/problems/maximum-product-subarray/0">Recommended: Please solve it on “<b><i><u>PRACTICE</u></i></b> ” first, before moving on to the solution.</a><br/>
</h2>
</div></p></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* http://www.geeksforgeeks.org/maximum-product-subarray/ */
/* https://leetcode.com/problems/maximum-product-subarray/ */

class MaximumProductSubarray
{
	public int maxProduct1(int[] nums) 
	{
        int localMax = 1;
        int localMin = 1;
        int globalMax = 1;
        for(int i=0; i<nums.length; i++)
        {
        	if(nums[i] > 0)
        	{
        		localMax = localMax * nums[i];
        		localMin = Math.min(localMin * nums[i], 1);
        	}
        	else if(nums[i]==0)
        	{
        		localMax = 1;
        		localMin = 1;
        	}
        	else if(nums[i] < 0)
        	{
        		int temp = localMax;
        		localMax = Math.max(localMin * nums[i], 1);
        		localMin = temp * nums[i];
        	}
        	if(localMax > globalMax)
        	{
        		globalMax = localMax;
        	}
        }
        return globalMax;
    }

    public int maxProduct(int[] nums)
    {
    	if(nums==null || nums.length==0)
    		return 0;
    	int maxLocal = nums[0];
    	int minLocal = nums[0];
    	int globalMax = nums[0];
    	for(int i=0;i<nums.length;++i)
    	{
    		int temp = maxLocal;
    		maxLocal = Math.max(Math.max(temp * nums[i], nums[i]), nums[i] * minLocal);
    		minLocal = Math.min(Math.min(temp * nums[i], nums[i]), nums[i] * minLocal);
    		globalMax = Math.max(globalMax, maxLocal);
    	}
    	return globalMax;
    }

    public static void main(String args[])
    {
    	MaximumProductSubarray m = new MaximumProductSubarray();
    	//int arr[] = {6, -3, -10, 0, 2};
    	//int arr[] = {-1, -3, -10, 0, 60};
    	int arr[] = {-2, -3, 0, -2, -40};
    	System.out.println(m.maxProduct(arr));
    }
}</pre>