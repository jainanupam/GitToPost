<b>Title: </b>
            332. Reconstruct Itinerary
            <b>Source: </b><a target='_blank' href='https://leetcode.com/problems/reconstruct-itinerary/'>leetcode.com</a><p><section class="action action-btn-set">
<a class="icon-btn btn" href="https://discuss.leetcode.com/category/416" onclick="ga('send', 'event', 'discuss', 'click', 'reconstruct-itinerary');" target="_blank">
<i aria-hidden="true" class="fa fa-commenting-o"></i>Discuss
          </a>
<button class="icon-btn disabled" data-placement="top" data-toggle="tooltip" title="Not available yet, please check back later." type="button">
<i aria-hidden="true" class="fa fa-book">
</i><span class="hidden-xs">Editorial </span>Solution
          </button>
<a class="icon-btn pull-right-sm btn" href="/problems/random-one-question/" onclick="ga('send', 'event', 'pick-one-detail', 'click');">
<i aria-hidden="true" class="fa fa-random"></i>Pick One
          </a>
</section><hr class="line dotted">
</hr></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* https://leetcode.com/problems/reconstruct-itinerary/ */
import java.util.*;
public class ReconstructItinerary
{
	public static void main(String args[])
	{
		String[][] tickets = {{"MUC", "LHR"}, {"JFK", "MUC"}, {"SFO", "SJC"}, {"LHR", "SFO"}};
		//String[][] tickets = {{"JFK","SFO"},{"JFK","ATL"},{"SFO","ATL"},{"ATL","JFK"},{"ATL","SFO"}};
		ReconstructItinerary r = new ReconstructItinerary();
		System.out.println(r.findItinerary(tickets));
	}

	public List<String> findItinerary(String[][] tickets) 
	{
		if(tickets==null || tickets.length==0)
			return new ArrayList<String>();
		//Build a adjacency list from tickets
		Map<String, ArrayList<String>> adjList = new HashMap<>();
		for(String[] fromTo : tickets)
		{
			if(adjList.containsKey(fromTo[0]))
			{
				adjList.get(fromTo[0]).add(fromTo[1]);
			}
			else
			{
				ArrayList<String> list = new ArrayList<>();
				list.add(fromTo[1]);
				adjList.put(fromTo[0], list);
			}
		}

		//Sort the arrayLists
		for(String key : adjList.keySet())
		{
			Collections.sort(adjList.get(key));
		}
		ArrayList<String> result = new ArrayList<>();
		reconstruct(adjList, "JFK", result);
		return result;
    }

    public void reconstruct(Map<String, ArrayList<String>> adjList,
    							String start, List<String> result)
   	{
   		//result.add(start);
   		List<String> adjacent = adjList.get(start);
   		while(adjacent!=null && adjacent.size()>0)
   		{
   			String node = adjacent.remove(0);
   			reconstruct(adjList, node, result);
   		}
   		result.add(0, start);
   	}
}

</pre>