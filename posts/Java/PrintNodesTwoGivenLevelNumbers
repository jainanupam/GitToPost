<b>Title: </b>Print nodes between two given level numbers of a binary tree  <b>Source: </b><a target='_blank' href='http://www.geeksforgeeks.org/given-binary-tree-print-nodes-two-given-level-numbers/'>www.geeksforgeeks.org</a><p><p>Given a binary tree and two level numbers ‘low’ and ‘high’, print nodes from level low to level high.<span id="more-131846"></span></p><pre>
For example consider the binary tree given in below diagram. 

Input: Root of below tree, low = 2, high = 4

Output:
8 22
4 12
10 14</pre><p><img alt="BST_LCA" class="aligncenter" height="220" src="http://www.geeksforgeeks.org/wp-content/uploads/2009/08/BST_LCA.gif" title="BST_LCA" width="236"/></p><p>A <strong>Simple Method</strong> is to first write a recursive function that prints nodes of a given level number. Then call recursive function in a loop from low to high.  Time complexity of this method is O(n<sup>2</sup>)<br/>
We can print nodes <strong>in O(n) time </strong>using queue based iterative level order traversal. The idea is to do simple queue based level order traversal.  While doing inorder traversal, add a marker node at the end.  Whenever we see a marker node, we increase level number.  If level number is between low and high, then print nodes.  </p><p>The following is the implementation of above idea.</p><div class="responsive-tabs">
<h2 class="tabtitle">C++</h2>
<div class="tabcontent">
<pre class="brush: cpp; highlight: [13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62]; title: ; notranslate" title="">
// A C++ program to print Nodes level by level berween given two levels.
#include &lt;iostream&gt;
#include &lt;queue&gt;
using namespace std;

/* A binary tree Node has key, pointer to left and right children */
struct Node
{
    int key;
    struct Node* left, *right;
};

/* Given a binary tree, print nodes from level number 'low' to level
   number 'high'*/
void printLevels(Node* root, int low, int high)
{
    queue &lt;Node *&gt; Q;

    Node *marker = new Node; // Marker node to indicate end of level

    int level = 1;   // Initialize level number

    // Enqueue the only first level node and marker node for end of level
    Q.push(root);
    Q.push(marker);

    // Simple level order traversal loop
    while (Q.empty() == false)
    {
        // Remove the front item from queue
        Node *n = Q.front();
        Q.pop();

        // Check if end of level is reached
        if (n == marker)
        {
            // print a new line and increment level number
            cout &lt;&lt; endl;
            level++;

            // Check if marker node was last node in queue or
            // level number is beyond the given upper limit
            if (Q.empty() == true || level &gt; high) break;

            // Enqueue the marker for end of next level
            Q.push(marker);

            // If this is marker, then we don't need print it
            // and enqueue its children
            continue;
        }

        // If level is equal to or greater than given lower level,
        // print it
        if (level &gt;= low)
            cout &lt;&lt; n-&gt;key &lt;&lt; " ";

        // Enqueue children of non-marker node
        if (n-&gt;left != NULL)  Q.push(n-&gt;left);
        if (n-&gt;right != NULL) Q.push(n-&gt;right);
    }
}

/* Helper function that allocates a new Node with the
   given key and NULL left and right pointers. */
Node* newNode(int key)
{
    Node* temp = new Node;
    temp-&gt;key = key;
    temp-&gt;left = temp-&gt;right = NULL;
    return (temp);
}

/* Driver program to test above functions*/
int main()
{
    // Let us construct the BST shown in the above figure
    struct Node *root        = newNode(20);
    root-&gt;left               = newNode(8);
    root-&gt;right              = newNode(22);
    root-&gt;left-&gt;left         = newNode(4);
    root-&gt;left-&gt;right        = newNode(12);
    root-&gt;left-&gt;right-&gt;left  = newNode(10);
    root-&gt;left-&gt;right-&gt;right = newNode(14);

    cout &lt;&lt; "Level Order traversal between given two levels is";
    printLevels(root, 2, 3);

    return 0;
}
</pre>
</div><h2 class="tabtitle">Java</h2>
<div class="tabcontent">
<pre class="brush: java; title: ; notranslate" title="">
// Java program to print Nodes level by level between given two levels
import java.util.LinkedList;
import java.util.Queue;
 
/* A binary tree Node has key, pointer to left and right children */
class Node 
{
    int data;
    Node left, right;
 
    public Node(int item) 
    {
        data = item;
        left = right = null;
    }
}
 
class BinaryTree 
{
    Node root;
 
    /* Given a binary tree, print nodes from level number 'low' to level
       number 'high'*/
    void printLevels(Node node, int low, int high) 
    {
        Queue&lt;Node&gt; Q = new LinkedList&lt;&gt;();
 
        Node  marker = new Node(4); // Marker node to indicate end of level
 
        int level = 1;   // Initialize level number
 
        // Enqueue the only first level node and marker node for end of level
        Q.add(node);
        Q.add(marker);
 
        // Simple level order traversal loop
        while (Q.isEmpty() == false) 
        {
            // Remove the front item from queue
            Node  n = Q.peek();
            Q.remove();
 
            // Check if end of level is reached
            if (n == marker) 
            {
                // print a new line and increment level number
                System.out.println("");
                level++;
 
                // Check if marker node was last node in queue or
                // level number is beyond the given upper limit
                if (Q.isEmpty() == true || level &gt; high)
                    break;
 
                // Enqueue the marker for end of next level
                Q.add(marker);
                 
                // If this is marker, then we don't need print it
                // and enqueue its children
                continue;
            }
 
            // If level is equal to or greater than given lower level,
            // print it
            if (level &gt;= low)
                System.out.print( n.data + " ");

            // Enqueue children of non-marker node
            if (n.left != null)
                Q.add(n.left);
            
            if (n.right != null) 
                Q.add(n.right);
            
        }
    }
 
    // Driver program to test for above functions
    public static void main(String args[]) 
    {
        BinaryTree tree = new BinaryTree();
        tree.root = new Node(20);
        tree.root.left = new Node(8);
        tree.root.right = new Node(22);
 
        tree.root.left.left = new Node(4);
        tree.root.left.right = new Node(12);
        tree.root.left.right.left = new Node(10);
        tree.root.left.right.right = new Node(14);
 
        System.out.print("Level Order traversal between given two levels is ");
        tree.printLevels(tree.root, 2, 3);
 
    }
}
 
// This code has been contributed by Mayank Jaiswal

</pre>
</div><h2 class="tabtitle">Python</h2>
<div class="tabcontent">
<pre class="brush: python; title: ; notranslate" title="">

# Python program to print nodes level by level betweeen 
# given two levels

# A binary tree node
class Node:
    # Constructor tor create a new node
    def __init__(self, key):
        self.key = key 
        self.left = None
        self.right = None
    
# Given a binary tree, print nodes form level number 'low'
# to level number 'high'

def printLevels(root, low, high):
    Q = [] 
    
    marker  = Node(11114) # Marker node to indicate end of level
    
    level = 1 # Initialize level number

    # Enqueue the only first level node and marker node for 
    # end of level
    Q.append(root)
    Q.append(marker)
    
    #print Q 
    # Simple level order traversal loop
    while(len(Q) &gt;0):
        # Remove the front item from queue
        n = Q[0]
        Q.pop(0)
        #print Q
        # Check if end of level is reached
        if n == marker:
            # print a new line and increment level number
            print 
            level += 1
        
            # Check if marker node was last node in queue
            # or level nubmer is beyond the given upper limit
            if len(Q) == 0 or level &gt; high:
                break
            
            # Enqueue the marker for end of next level
            Q.append(marker)
            
            # If this is marker, then we don't need print it
            # and enqueue its children
            continue
        if level &gt;= low:
                print n.key,
            
        # Enqueue children of non-marker node
        if n.left is not None:
            Q.append(n.left)
            Q.append(n.right)

# Driver program to test the above function
root = Node(20)
root.left = Node(8)
root.right = Node(22)
root.left.left = Node(4)
root.left.right = Node(12)
root.left.right.left = Node(10)
root.left.right.right = Node(14)

print "Level Order Traversal between given two levels is",
printLevels(root,2,3)

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)

</pre>
</div></div><pre>
Level Order traversal between given two levels is
8 22
4 12 </pre><p>Time complexity of above method is O(n) as it does a simple level order traversal. </p><p>This article is contributed by <strong>Frank</strong>. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above</p><div class="AdsParent" style="width:100%;">
<span class="rectangleAd">
<!--
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
 Big Rectangle Blog Bottom 
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4061219431"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
-->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- GfGDownLeftNew -->
<ins class="adsbygoogle" data-ad-client="ca-pub-9465609616171866" data-ad-format="auto" data-ad-slot="5794942435" style="display:block"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
</span>
<span class="responsiveAd">
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- newMobile2 -->
<ins class="adsbygoogle" data-ad-client="ca-pub-9465609616171866" data-ad-format="auto" data-ad-slot="1950485631" style="display:block"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
</span>
</div><h1><strong><a href="http://quiz.geeksforgeeks.org/gate-corner-2/">GATE CS Corner</a>
   <a href="http://practice.geeksforgeeks.org/company-tags">Company Wise Coding Practice</a></strong></h1></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* http://www.geeksforgeeks.org/given-binary-tree-print-nodes-two-given-level-numbers/ */
import java.util.Queue;
import java.util.LinkedList;

public class PrintNodesTwoGivenLevelNumbers
{
	public static void main(String args[])
	{
		TreeNode root = new TreeNode(20);
		
		root.left = new TreeNode(8);
		root.right = new TreeNode(22);

		root.left.left = new TreeNode(4);
		root.left.right = new TreeNode(12);

		root.left.right.left = new TreeNode(10);
		root.left.right.right = new TreeNode(14);

		PrintNodesTwoGivenLevelNumbers p = new PrintNodesTwoGivenLevelNumbers();
		p.printInorder(root);
		p.printNodes(root, 2, 3);

	}

	public void printInorder(TreeNode root)
	{
		if(root==null)
			return;
		printInorder(root.left);
		System.out.println(root.val);
		printInorder(root.right);
	}

	public void printNodes(TreeNode root, int levelFrom, int levelTo)
	{
		Queue<TreeNode> next = new LinkedList<>();
		Queue<TreeNode> curr = null;
		next.add(root);
		int level = 1;
		while(!next.isEmpty())
		{
			curr = next;
			next = new LinkedList<>();
			while(!curr.isEmpty())
			{
				TreeNode temp = curr.remove();
				if(level>=levelFrom && level<=levelTo)
				{
					System.out.print(temp.val+"\t");
				}
				else if(level>levelFrom)
				{
					return;
				}
				if(temp.left!=null)
					next.add(temp.left);
				if(temp.right!=null)
					next.add(temp.right);
			}
			System.out.println();
			++level;
		}
	}
}

class TreeNode
{
	int val;
	TreeNode left;
	TreeNode right;

	TreeNode(int val)
	{
		this.val = val;
	}

	public String toString()
	{
		return val+"";
	}
}</pre>