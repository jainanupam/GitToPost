<b>Title: </b>Implement a stack using single queue  <b>Source: </b><a target='_blank' href='http://www.geeksforgeeks.org/implement-a-stack-using-single-queue/?utm_source=feedburner&utm_medium=email&utm_campaign=Feed%3A+Geeksforgeeks+%28GeeksforGeeks%29'>www.geeksforgeeks.org</a><p><p>We are given queue data structure, the task is to implement stack using only given queue data structure.</p><p>We have discussed <a href="http://www.geeksforgeeks.org/implement-stack-using-queue/">a solution that uses two queues</a>.  In this article, a new solution is discussed that uses only one queue.  This solution assumes that we can find size of queue at any point.  The idea is to keep newly inserted element always at front, keeping order of previous elements same. Below are complete steps.</p><pre>
// x is the element to be pushed and s is stack
<strong>push(s, x) </strong>
  1) Let size of q be s. 
  1) Enqueue x to q
  2) One by one Dequeue s items from queue and enqueue them.
  
// Removes an item from stack
<strong>pop(s)</strong>
  1) Dequeue an item from q

</pre><p>Below is implementation of the idea.</p><div class="responsive-tabs">
<h2 class="tabtitle">C++</h2>
<div class="tabcontent">
<pre class="brush: cpp; highlight: [17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47]; title: ; notranslate" title="">
// C++ program to implement a stack using
// single queue
#include&lt;bits/stdc++.h&gt;
using namespace std;

// User defined stack that uses a queue
class Stack
{
    queue&lt;int&gt;q;
public:
    void push(int val);
    void pop();
    int top();
    bool empty();
};

// Push operation
void Stack::push(int val)
{
    //  Get previous size of queue
    int s = q.size();

    // Push current element
    q.push(val);

    // Pop (or Dequeue) all previous
    // elements and put them after current
    // element
    for (int i=0; i&lt;s; i++)
    {
        // this will add front element into
        // rear of queue
        q.push(q.front());

        // this will delete front element
        q.pop();
    }
}

// Removes the top element
void Stack::pop()
{
    if (q.empty())
        cout &lt;&lt; "No elements\n";
    else
        q.pop();
}

// Returns top of stack
int  Stack::top()
{
    return (q.empty())? -1 : q.front();
}

// Returns true if Stack is empty else false
bool Stack::empty()
{
    return (q.empty());
}

// Driver code
int main()
{
    Stack s;
    s.push(10);
    s.push(20);
    cout &lt;&lt; s.top() &lt;&lt; endl;
    s.pop();
    s.push(30);
    s.pop();
    cout &lt;&lt; s.top() &lt;&lt; endl;
    return 0;
}
</pre>
</div><h2 class="tabtitle">Java</h2>
<div class="tabcontent">
<pre class="brush: java; highlight: [11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56]; title: ; notranslate" title="">
// Java program to implement stack using a 
// single queue

import java.util.LinkedList;
import java.util.Queue;

public class stack 
{
	Queue&lt;Integer&gt; q = new LinkedList&lt;Integer&gt;();
	
	// Push operation
	void push(int val) 
	{
		// get previous size of queue
		int size = q.size();
		
		// Add current element
		q.add(val);
		
		// Pop (or Dequeue) all previous
	    // elements and put them after current
	    // element
		for (int i = 0; i &lt; size; i++) 
		{
			// this will add front element into
	        // rear of queue
			int x = q.remove();
			q.add(x);
		}
	}
	
	// Removes the top element
	int pop() 
	{
		if (q.isEmpty()) 
		{
			System.out.println("No elements");
			return -1;
		}
		int x = q.remove();
		return x;
	}
	
	// Returns top of stack
	int top() 
	{
		if (q.isEmpty())
			return -1;
		return q.peek();
	}
	
	// Returns true if Stack is empty else false
	boolean isEmpty() 
	{
		return q.isEmpty();
	}

    // Driver program to test above methods
	public static void main(String[] args) 
	{
		stack s = new stack();
		s.push(10);
		s.push(20);
		System.out.println("Top element :" + s.top());
		s.pop();
		s.push(30);
		s.pop();
		System.out.println("Top element :" + s.top());
	}
}

// This code is contributed by Rishabh Mahrsee
</pre>
<p></p></div></div><pre>
20
10</pre><div>
<iframe allowfullscreen="" frameborder="0" height="374" src="https://www.youtube.com/embed/hC1UplBFEj0?feature=oembed" width="665"></iframe>
</div><p>This article is contributed by <strong>Manu Agrawal</strong>. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.</p><p>Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.</p><div class="AdsParent" style="width:100%;">
<span class="rectangleAd">
<!--
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
 Big Rectangle Blog Bottom 
<ins class="adsbygoogle"
     style="display:inline-block;width:336px;height:280px"
     data-ad-client="ca-pub-9465609616171866"
     data-ad-slot="4061219431"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
-->
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- GfGDownLeftNew -->
<ins class="adsbygoogle" data-ad-client="ca-pub-9465609616171866" data-ad-format="auto" data-ad-slot="5794942435" style="display:block"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
</span>
<span class="responsiveAd">
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- newMobile2 -->
<ins class="adsbygoogle" data-ad-client="ca-pub-9465609616171866" data-ad-format="auto" data-ad-slot="1950485631" style="display:block"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
</span>
</div><h1><strong><a href="http://quiz.geeksforgeeks.org/gate-corner-2/">GATE CS Corner</a>
   <a href="http://practice.geeksforgeeks.org/company-tags">Company Wise Coding Practice</a></strong></h1></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* http://www.geeksforgeeks.org/implement-a-stack-using-single-queue/?utm_source=feedburner&utm_medium=email&utm_campaign=Feed%3A+Geeksforgeeks+%28GeeksforGeeks%29 */
import java.util.*;
public class StackUsingSingleQueue
{
	Queue<Integer> q;

	StackUsingSingleQueue()
	{
		q = new LinkedList<>();
	}

	public static void main(String args[])
	{
		StackUsingSingleQueue s = new StackUsingSingleQueue();
    	s.push(10);
    	s.push(20);
    	System.out.println(s.top());
    	s.pop();
    	s.push(30);
    	s.pop();
    	System.out.println(s.top());
	}

	public int top()
	{
		return q.size()==0?-1:q.element();
	}

	public void push(int a)
	{
		if(q.size()==0)
			q.add(a);
		else
		{
			int n = q.size();
			q.add(a);
			for(int i=0;i<n;i++)
			{
				q.add(q.remove());
			}
		}
	}

	public int pop()
	{
		return q.size()==0?-1:q.remove();
	}

}</pre>