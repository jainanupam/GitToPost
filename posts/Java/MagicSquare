<b>Title: </b>Magic Square  <b>Source: </b><a target='_blank' href='http://www.geeksforgeeks.org/magic-square/'>www.geeksforgeeks.org</a><p><p>A <a href="http://en.wikipedia.org/wiki/Magic_square">magic square</a> of order n is an arrangement of n^2 numbers, usually distinct integers, in a square, such that the n numbers in all rows,<span id="more-22238"></span> all columns, and both diagonals sum to the same constant. A magic square contains the integers from 1 to n^2. </p><p>The constant sum in every row, column and diagonal is called the <a href="http://en.wikipedia.org/wiki/Magic_constant">magic constant or magic sum</a>, M. The magic constant of a normal magic square depends only on n and has the following value:<br/>
M =  n(n^2+1)/2</p><pre>For normal magic squares of order n = 3, 4, 5, ...,
 the magic constants are: 15, 34, 65, 111, 175, 260, ... </pre><p>In this post, we will discuss how programmatically we can generate a magic square of size n.  Before we go further, consider the below examples:</p><pre>
Magic Square of size 3
-----------------------
  2   7   6
  9   5   1
  4   3   8
Sum in each row &amp; each column = 3*(3^2+1)/2 = 15


Magic Square of size 5
----------------------
  9   3  22  16  15
  2  21  20  14   8
 25  19  13   7   1
 18  12   6   5  24
 11  10   4  23  17
Sum in each row &amp; each column = 5*(5^2+1)/2 = 65


Magic Square of size 7
----------------------
 20  12   4  45  37  29  28
 11   3  44  36  35  27  19
  2  43  42  34  26  18  10
 49  41  33  25  17   9   1
 40  32  24  16   8   7  48
 31  23  15  14   6  47  39
 22  21  13   5  46  38  30
Sum in each row &amp; each column = 7*(7^2+1)/2 = 175
</pre><p>Did you find any pattern in which the numbers are stored?<br/>
In any magic square, the first number i.e. 1 is stored at position (n/2, n-1). Let this position be (i,j). The next number is stored at position (i-1, j+1) where we can consider each row &amp; column as circular array i.e. they wrap around.</p><p><strong>Three conditions hold:</strong></p><p>1. The position of next number is calculated by decrementing row number of previous number by 1, and incrementing the column number of previous number by 1. At any time, if the calculated row position becomes -1, it will wrap around to n-1. Similarly, if the calculated column position becomes n, it will wrap around to 0.</p><p>2. If the magic square already contains a number at the calculated position, calculated column position will be decremented by 2, and calculated row position will be incremented by 1.</p><p>3. If the calculated row position is -1 &amp; calculated column position is n, the new position would be: (0, n-2). </p><pre>
Example:
Magic Square of size 3
----------------------
 2  7  6
 9  5  1
 4  3  8 

<strong>Steps:</strong>
1. position of number 1 = (3/2, 3-1) = (1, 2)
2. position of number 2 = (1-1, 2+1) = (0, 0)
3. position of number 3 = (0-1, 0+1) = (3-1, 1) = (2, 1)
4. position of number 4 = (2-1, 1+1) = (1, 2)
   Since, at this position, 1 is there. So, apply condition 2.
   new position=(1+1,2-2)=(2,0)
5. position of number 5=(2-1,0+1)=(1,1)
6. position of number 6=(1-1,1+1)=(0,2)
7. position of number 7 = (0-1, 2+1) = (-1,3) // this is tricky, see condition 3 
   new position = (0, 3-2) = (0,1)
8. position of number 8=(0-1,1+1)=(-1,2)=(2,2) //wrap around
9. position of number 9=(2-1,2+1)=(1,3)=(1,0) //wrap around
</pre><p>Based on the above approach, following is the working code:<br/>
<div class="responsive-tabs">
<h2 class="tabtitle">C/C++</h2>
<div class="tabcontent">
</div></div></p><pre class="brush: c; highlight: [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55]; title: ; notranslate" title="">
#include&lt;stdio.h&gt;
#include&lt;string.h&gt;

// A function to generate odd sized magic squares
void generateSquare(int n)
{
    int magicSquare[n][n];

    // set all slots as 0
    memset(magicSquare, 0, sizeof(magicSquare));

    // Initialize position for 1
    int i = n/2;
    int j = n-1;

    // One by one put all values in magic square
    for (int num=1; num &lt;= n*n; )
    {
        if (i==-1 &amp;&amp; j==n) //3rd condition
        {
            j = n-2;
            i = 0;
        }
        else
        {
            //1st condition helper if next number goes to out of square's right side
            if (j == n)
                j = 0;
            //1st condition helper if next number is goes to out of square's upper side
            if (i &lt; 0)
                i=n-1;
        }
        if (magicSquare[i][j]) //2nd condition
        {
            j -= 2;
            i++;
            continue;
        }
        else
            magicSquare[i][j] = num++; //set number

        j++;  i--; //1st condition
    }


    // print magic square
    printf("The Magic Square for n=%d:\nSum of each row or column %d:\n\n",
            n, n*(n*n+1)/2);
    for(i=0; i&lt;n; i++)
    {
        for(j=0; j&lt;n; j++)
            printf("%3d ", magicSquare[i][j]);
        printf("\n");
    }
}

// Driver program to test above function
int main()
{
    int n = 7; // Works only when n is odd
    generateSquare (n);
    return 0;
}
</pre></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* http://www.geeksforgeeks.org/magic-square/ */
/*
The following is a procedure for constructing an nxn magic square for any odd
integer n.
Place 1 in the middle of the top row, Then, after integer k has been placed,
move up one row and one column to the right to place the next integer k + 1,
unless one of the following occurs:
- If a move takes you above the top row in the jth column, move to the
bottom of the jth column and place k + 1 there.
- If the move takes you outside to the right of the square in the ith row, place
k + 1 in the ith row on the left side.
- If a move takes you to an already filled cell or if you move out of the square
at the upper right-hand corner, place k + 1 immediately below k.
*/
import java.util.Arrays;
public class MagicSquare
{
	public static void main(String args[])
	{
		MagicSquare m = new MagicSquare();
		int[][] magicSquare = m.create(3);
		m.print(magicSquare);
		m.print(m.create(5));
		m.print(m.create(7));
	}

	public void print(int[][] square)
	{
		for(int i=0;i<square.length;++i)
		{
			System.out.println(Arrays.toString(square[i]));
		}
		System.out.println();
	}

	public int[][] create(int n)
	{
		if(n%2==0)
		{
			System.out.println("works only when n is odd");
			return null;
		}
		int[][] square = new int[n][n];
		int row = 0;
		int col = n/2;

		//continue until all numbers have been placed 
		for(int i=1; i<= n*n;)
		{
			//System.out.println(row+":"+col);
			//if you move out of the square at the upper right-hand corner
			if(row==-1 && col==n)
			{
				//place k + 1 immediately below k
				row = 1;
				col = n-1; 
				continue;
			}
			//If a move takes you above the top row in the jth column, 
			//move to the bottom of the jth column and place k + 1 there
			else if(row<=-1 && col < n)
			{
				//place k + 1 in the ith row on the left side
				row = n+row;
				continue;
			}
			//If the move takes you outside to the right of the square 
			//in the ith row
			else if(row >-1 && col == n)
			{
				col = 0;
				continue;	
			}
			//If a move takes you to an already filled cell
			//place k + 1 immediately below k
			else if(square[row][col]!=0)
			{
				row = row+2;
				col = col-1;
				continue;
			}
			square[row][col] = i++;
			//print(square);
			--row;
			++col;
		}
		return square;
	}
}</pre>