<b>Title: </b>Print nodes at k distance from root  <b>Source: </b><a target='_blank' href='http://www.geeksforgeeks.org/print-nodes-at-k-distance-from-root/'>www.geeksforgeeks.org</a><p><p>Given a root of a tree, and an integer k. Print all the nodes which are at k distance from root. <span id="more-8615"></span></p><p>For example, in the below tree, 4, 5 &amp; 8 are at distance 2 from root. <!--more--></p><pre>
            1
          /   \
        2      3
      /  \    /
    4     5  8 
</pre><div id="practiceLinkDiv">
<h2><a href="http://practice.geeksforgeeks.org/problems/k-distance-from-root/1">Recommended: Please solve it on “<b><i><u>PRACTICE</u></i></b>” first, before moving on to the solution.</a></h2>
</div><p>The problem can be solved using recursion.  Thanks to eldho for suggesting the solution.</p><div class="responsive-tabs">
<h2 class="tabtitle">C</h2>
<div class="tabcontent">
<pre class="brush: c; title: ; notranslate" title="">
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

/* A binary tree node has data, pointer to left child
   and a pointer to right child */
struct node
{
   int data;
   struct node* left;
   struct node* right;
};

void printKDistant(struct node *root , int k)    
{
   if(root == NULL) 
      return;
   if( k == 0 )
   {
      printf( "%d ", root-&gt;data );
      return ;
   }
   else
   {      
      printKDistant( root-&gt;left, k-1 ) ;
      printKDistant( root-&gt;right, k-1 ) ;
   }
}

/* Helper function that allocates a new node with the
   given data and NULL left and right pointers. */
struct node* newNode(int data)
{
  struct node* node = (struct node*)
                       malloc(sizeof(struct node));
  node-&gt;data = data;
  node-&gt;left = NULL;
  node-&gt;right = NULL;

  return(node);
}

/* Driver program to test above functions*/
int main()
{

  /* Constructed binary tree is
            1
          /   \
        2      3
      /  \    /
    4     5  8 
  */
  struct node *root = newNode(1);
  root-&gt;left        = newNode(2);
  root-&gt;right       = newNode(3);
  root-&gt;left-&gt;left  = newNode(4);
  root-&gt;left-&gt;right = newNode(5);
  root-&gt;right-&gt;left = newNode(8);  

  printKDistant(root, 2);

  getchar();
  return 0;
}
</pre>
</div><h2 class="tabtitle">Java</h2>
<div class="tabcontent">
<pre class="brush: java; title: ; notranslate" title="">
// Java program to print nodes at k distance from root
 
/* A binary tree node has data, pointer to left child
   and a pointer to right child */
class Node 
{
    int data;
    Node left, right;
 
    Node(int item) 
    {
        data = item;
        left = right = null;
    }
}
 
class BinaryTree 
{
    Node root;
 
    void printKDistant(Node node, int k) 
    {
        if (node == null)
            return;
        if (k == 0) 
        {
            System.out.print(node.data + " ");
            return;
        } 
        else 
        {
            printKDistant(node.left, k - 1);
            printKDistant(node.right, k - 1);
        }
    }
    
    /* Driver program to test above functions */
    public static void main(String args[]) {
        BinaryTree tree = new BinaryTree();
        
        /* Constructed binary tree is
                1
              /   \
             2     3
            /  \   /
           4    5 8 
        */
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.right = new Node(5);
        tree.root.right.left = new Node(8);
 
        tree.printKDistant(tree.root, 2);
    }
}
 
// This code has been contributed by Mayank Jaiswal

</pre>
</div><h2 class="tabtitle">Python</h2>
<div class="tabcontent">
<pre class="brush: python; title: ; notranslate" title="">

# Python program to find the nodes at k distance from root

# A Binary tree node
class Node:
    
    # Constructor to create a new node
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

def printKDistant(root, k):
    
    if root is None:
        return 
    if k == 0:
        print root.data,
    else:
        printKDistant(root.left, k-1)
        printKDistant(root.right, k-1)

# Driver program to test above function
"""
   Constructed binary tree is
            1
          /   \
        2      3
      /  \    /
    4     5  8 
"""
root = Node(1)
root.left = Node(2)
root.right = Node(3)
root.left.left = Node(4)
root.left.right = Node(5)
root.right.left = Node(8)

printKDistant(root, 2)

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)

</pre>
<p></p></div></div></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* http://www.geeksforgeeks.org/print-nodes-at-k-distance-from-root/ */
/* Constructed binary tree is
            1
          /   \
        2      3
      /  \    /
    4     5  8 
*/
class PrintNodesAtKDistance
{
	public static void main(String args[])
	{
		TreeNode root = new TreeNode(1);
		root.left = new TreeNode(2);
		root.right = new TreeNode(3);

		root.left.left = new TreeNode(4);
		root.left.right = new TreeNode(5);

		root.right.left = new TreeNode(8);

		PrintNodesAtKDistance p = new PrintNodesAtKDistance();
		p.kDistanceNode(root, 3, 1);
	}

	public void kDistanceNode(TreeNode root, int k,int level)
	{

		if(level == k && root!= null)
		{
			System.out.print(root.val+" ");
			return;
		}
		if(level < k)
		{
			kDistanceNode(root.left, k, level+1);
			kDistanceNode(root.right, k, level+1);
		}
	}
}

class TreeNode
{
	TreeNode left;
	TreeNode right;

	int val;

	TreeNode(int val)
	{
		this.val = val;
	}
}</pre>