<b>Title: </b>
            329. Longest Increasing Path in a Matrix
            <b>Source: </b><a target='_blank' href='https://leetcode.com/problems/longest-increasing-path-in-a-matrix/'>leetcode.com</a><p><section class="action action-btn-set">
<a class="icon-btn btn" href="https://discuss.leetcode.com/category/410" onclick="ga('send', 'event', 'discuss', 'click', 'longest-increasing-path-in-a-matrix');" target="_blank">
<i aria-hidden="true" class="fa fa-commenting-o"></i>Discuss
          </a>
<button class="icon-btn btn" onclick="confirmations.confirm_see_solution(
                    event,
                    '/articles/longest-increasing-path-matrix/',
                    false
                    );" type="button">
<i aria-hidden="true" class="fa fa-book">
</i><span class="hidden-xs">Editorial </span>Solution
          </button>
<a class="icon-btn pull-right-sm btn" href="/problems/random-one-question/" onclick="ga('send', 'event', 'pick-one-detail', 'click');">
<i aria-hidden="true" class="fa fa-random"></i>Pick One
          </a>
</section><hr class="line dotted">
</hr></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* https://leetcode.com/problems/longest-increasing-path-in-a-matrix/ */
import java.util.*;
public class LongestIncreasingPathInMatrix
{
	public static void main(String args[])
	{
		/*int[][] matrix =  {
  							{9,9,4},
  							{6,6,8},
  							{2,1,1}
						};*/
		int[][] matrix =  {
  							{7,8,9},
  							{9,7,6},
  							{7,2,3}
						};
		LongestIncreasingPathInMatrix l = new LongestIncreasingPathInMatrix();
		System.out.println(l.longestIncreasingPath(matrix));

	}

	public int longestIncreasingPath(int[][] matrix) 
	{
		int max = 0;
        for(int r=0;r<matrix.length;++r)
        {
        	for(int c=0;c<matrix[r].length;++c)
        	{
        		max = Math.max(dfs(matrix,r,c,0, Integer.MIN_VALUE, new HashSet<Pair>()), max);
        	}
        }
        return max;
    }

    public int dfs(int[][] matrix, int r, int c, int length, int prev, HashSet<Pair> set)
    {
    	if(isSafe(matrix, r, c, prev, set))
    	{
    		Pair p = new Pair(r, c);
    		set.add(p);
    		int res =  max(dfs(matrix, r+1, c, length+1, matrix[r][c], set),
    				   dfs(matrix, r-1, c, length+1, matrix[r][c], set),
    				   dfs(matrix, r, c+1, length+1, matrix[r][c], set),
    				   dfs(matrix, r, c-1, length+1, matrix[r][c], set));
    		set.remove(p);
    		return res;
    	}
    	return length;
    }

    public boolean isSafe(int[][] matrix, int x, int y, int val, HashSet<Pair> set)
    {
    	if(x>=0 && x<matrix.length 
    		&& y>=0 && y<matrix[x].length 
    		&& matrix[x][y]>val
    		&& !set.contains(new Pair(x, y)))
    		return true;
    	return false;
    }

    public int max(int a, int b, int c, int d)
    {
    	int p = Math.max(a, b);
    	int q = Math.max(c, d);
    	return Math.max(p, q);
    }
}</pre>