<b>Title: </b>Dynamic Programming | Set 10 ( 0-1 Knapsack Problem)  <b>Source: </b><a target='_blank' href='http://www.geeksforgeeks.org/dynamic-programming-set-10-0-1-knapsack-problem/'>www.geeksforgeeks.org</a><p><p>Given weights and values of n items, put these items in a knapsack of capacity W to get the maximum total value in the knapsack. <span id="more-18430"></span> In other words, given two integer arrays val[0..n-1] and wt[0..n-1] which represent values and weights associated with n items respectively. Also given an integer W which represents knapsack capacity, find out the maximum value subset of val[] such that sum of the weights of this subset is smaller than or equal to W. You cannot break an item, either pick the complete item, or donâ€™t pick it (0-1 property).</p><p>A simple solution is to consider all subsets of items and calculate the total weight and value of all subsets.  Consider the only subsets whose total weight is smaller than W. From all such subsets, pick the maximum value subset.</p><p><strong>1) Optimal Substructure:</strong><br/>
To consider all subsets of items, there can be two cases for every item: (1) the item is included in the optimal subset, (2) not included in the optimal set.<br/>
Therefore, the maximum value that can be obtained from n items is max of following two values.<br/>
1) Maximum value obtained by n-1 items and W weight (excluding nth item).<br/>
2) Value of nth item plus maximum value obtained by n-1 items and W minus weight of the nth item (including nth item).  </p><p>If weight of nth item is greater than W, then the nth item cannot be included and case 1 is the only possibility. </p><p><strong>2) Overlapping Subproblems</strong><br/>
Following is recursive implementation that simply follows the recursive structure mentioned above.<br/>
<div class="responsive-tabs">
<h2 class="tabtitle">C/C++</h2>
<div class="tabcontent">
</div></div></p><pre class="brush: cpp; highlight: [7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]; title: ; notranslate" title="">
/* A Naive recursive implementation of 0-1 Knapsack problem */
#include&lt;stdio.h&gt;

// A utility function that returns maximum of two integers
int max(int a, int b) { return (a &gt; b)? a : b; }

// Returns the maximum value that can be put in a knapsack of capacity W
int knapSack(int W, int wt[], int val[], int n)
{
   // Base Case
   if (n == 0 || W == 0)
       return 0;

   // If weight of the nth item is more than Knapsack capacity W, then
   // this item cannot be included in the optimal solution
   if (wt[n-1] &gt; W)
       return knapSack(W, wt, val, n-1);

   // Return the maximum of two cases: 
   // (1) nth item included 
   // (2) not included
   else return max( val[n-1] + knapSack(W-wt[n-1], wt, val, n-1),
                    knapSack(W, wt, val, n-1)
                  );
}

// Driver program to test above function
int main()
{
    int val[] = {60, 100, 120};
    int wt[] = {10, 20, 30};
    int  W = 50;
    int n = sizeof(val)/sizeof(val[0]);
    printf("%d", knapSack(W, wt, val, n));
    return 0;
}
</pre></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* http://www.geeksforgeeks.org/dynamic-programming-set-10-0-1-knapsack-problem/ */

class KnapsackDP
{
	// Recursive
	public int solve(int[] value, int[] weight, int w)
	{
		return helper(value, weight, w, 0);
	}

	public int helper(int[] value, int[] weight, int w, int i)
	{
		if(i>=value.length)
			return 0;
		if(weight[i] > w)
			return helper(value, weight, w, i+1);
		else
			return Math.max(value[i]+helper(value, weight, w-weight[i], i+1), helper(value, weight, w, i+1));
	}

	//DP
	public int solveDP(int[] value, int[] weight, int w)
	{
		int[][] dp = new int[value.length+1][w+1];
		for(int i=0; i<=value.length; i++)
		{
			for(int j=0; j<=w; j++)
			{
				if(i==0 || j==0)
					dp[i][j] = 0;
				else
				{
					if(weight[i-1] <= j)
						dp[i][j] = Math.max(value[i-1] + dp[i-1][j-weight[i-1]], dp[i-1][j]);
					else
						dp[i][j] = dp[i-1][j];
				}
			}
		}
		return dp[value.length][w];
	}

	public static void main(String args[])
	{
		int value[] = {60, 100, 120};
    	int weight[] = {10, 20, 30};
    	int w = 50;
    	KnapsackDP k = new KnapsackDP();
    	System.out.println(k.solveDP(value, weight, w));
	}
}</pre>