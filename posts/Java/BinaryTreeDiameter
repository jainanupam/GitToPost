<b>Title: </b>Diameter of a Binary Tree  <b>Source: </b><a target='_blank' href='http://www.geeksforgeeks.org/diameter-of-a-binary-tree/'>www.geeksforgeeks.org</a><p><p>The diameter of a tree (sometimes called the width) is the number of nodes on the longest path between two leaves in the tree.  <span id="more-5687"></span>The diagram below shows two trees each with diameter nine, the leaves that form the ends of a longest path are shaded (note that there is more than one path in each tree of length nine, but no path longer than nine nodes). </p><p><a href="http://geeksforgeeks.org/wp-content/uploads/tree_diameter.GIF"><img alt="" class="aligncenter size-full wp-image-5737" height="236" src="http://geeksforgeeks.org/wp-content/uploads/tree_diameter.GIF" title="tree_diameter" width="633"/></a></p><p>The diameter of a tree T is the largest of the following quantities:</p><p>* the diameter of T’s left subtree<br/>
* the diameter of T’s right subtree<br/>
* the longest path between leaves that goes through the root of T (this can be computed from the heights of the subtrees of T) </p><p>Implementation:<br/>
<div class="responsive-tabs">
<h2 class="tabtitle">C</h2>
<div class="tabcontent">
</div></div></p><pre class="brush: cpp; title: ; notranslate" title="">
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

/* A binary tree node has data, pointer to left child
   and a pointer to right child */
struct node
{
    int data;
    struct node* left, *right;
};

/* function to create a new node of tree and returns pointer */
struct node* newNode(int data);

/* returns max of two integers */
int max(int a, int b);

/* function to Compute height of a tree. */
int height(struct node* node);

/* Function to get diameter of a binary tree */
int diameter(struct node * tree)
{
   /* base case where tree is empty */
   if (tree == 0)
     return 0;

  /* get the height of left and right sub-trees */
  int lheight = height(tree-&gt;left);
  int rheight = height(tree-&gt;right);

  /* get the diameter of left and right sub-trees */
  int ldiameter = diameter(tree-&gt;left);
  int rdiameter = diameter(tree-&gt;right);

  /* Return max of following three
   1) Diameter of left subtree
   2) Diameter of right subtree
   3) Height of left subtree + height of right subtree + 1 */
  return max(lheight + rheight + 1, max(ldiameter, rdiameter));
} 

/* UTILITY FUNCTIONS TO TEST diameter() FUNCTION */

/*  The function Compute the "height" of a tree. Height is the 
    number f nodes along the longest path from the root node 
    down to the farthest leaf node.*/
int height(struct node* node)
{
   /* base case tree is empty */ 
   if(node == NULL)
       return 0;

   /* If tree is not empty then height = 1 + max of left 
      height and right heights */    
   return 1 + max(height(node-&gt;left), height(node-&gt;right));
} 

/* Helper function that allocates a new node with the
   given data and NULL left and right pointers. */
struct node* newNode(int data)
{
  struct node* node = (struct node*)
                       malloc(sizeof(struct node));
  node-&gt;data = data;
  node-&gt;left = NULL;
  node-&gt;right = NULL;

  return(node);
}

/* returns maximum of two integers */
int max(int a, int b)
{
  return (a &gt;= b)? a: b;
}    

/* Driver program to test above functions*/
int main()
{

  /* Constructed binary tree is 
            1
          /   \
        2      3
      /  \
    4     5
  */
  struct node *root = newNode(1);
  root-&gt;left        = newNode(2);
  root-&gt;right       = newNode(3);
  root-&gt;left-&gt;left  = newNode(4);
  root-&gt;left-&gt;right = newNode(5);

  printf("Diameter of the given binary tree is %d\n", diameter(root));

  getchar();
  return 0;
}
</pre></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* http://www.geeksforgeeks.org/diameter-of-a-binary-tree/ */
public class BinaryTreeDiameter
{
	int max = -1;
	//determine the height of the tree
	public int height(TreeNode root)
	{
		//if the root is null 
		//then is no node in the tree or we have reached the leaf node 
		//of the tree (terminating condition in recursion)
		if(root==null)
			return 0;
		//the height of the tree is 1 plus maximum of height of the left
		//subtree and height of right subtree
		return 1 + Math.max(height(root.left), height(root.right));
	}
	//the diameter of a tree is the farthest distance between two 
	//nodes
	public int diameter(TreeNode root)
	{
		if(root==null)
			return 0;
		//get the height of the left subtree
		int leftSubTreeHeight = height(root.left);
		//get the height of the right subtree
		int rightSubTreeHeight = height(root.right);

		//get the left diameter
		int leftDiameter = diameter(root.left);
		//get the right diameter
		int rightDiamter = diameter(root.right);
		// Return max of following three
   		// 1) Diameter of left subtree
   		// 2) Diameter of right subtree
   		// 3) Height of left subtree + height of right subtree + 1
		return Math.max(leftSubTreeHeight + rightSubTreeHeight + 1
					, Math.max(leftDiameter, rightDiamter));
	}

	public static void main(String args[])
	{
		BinaryTreeDiameter b = new BinaryTreeDiameter();
		TreeNode root = new TreeNode(1);
		root.left = new TreeNode(2);
		root.right = new TreeNode(3);
		root.left.left = new TreeNode(4);
		//root.left.left.left = new TreeNode(8);
		//root.left.left.left.left = new TreeNode(9);
		root.left.right = new TreeNode(5);
		//root.left.right.left = new TreeNode(6);
		//root.left.right.left.right = new TreeNode(7);
		root.right.left = new TreeNode(6);
		root.right.right = new TreeNode(7);
		System.out.println(b.diameter(root));
	}
}

class TreeNode
{
	TreeNode left;
	TreeNode right;
	int val;

	TreeNode(int val)
	{
		this.val = val;
		this.left = null;
		this.right = null;
	}
}
</pre>