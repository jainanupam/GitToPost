<b>Title: </b>Get Level of a node in a Binary Tree  <b>Source: </b><a target='_blank' href='http://www.geeksforgeeks.org/get-level-of-a-node-in-a-binary-tree/'>www.geeksforgeeks.org</a><p><p>Given a Binary Tree  and a key, write a function that returns level of the key.  </p><p>For example, consider the following tree. If the input key is 3, then your function should return 1. <span id="more-10962"></span> If the input key is 4, then your function should return 3.  And for key which is not present in key, then your function should return 0.</p><p><a href="http://www.geeksforgeeks.org/wp-content/uploads/2009/11/tree_bst.gif"><img alt="" class="alignnone size-full wp-image-3060" height="156" src="http://www.geeksforgeeks.org/wp-content/uploads/2009/11/tree_bst.gif" title="tree_bst" width="259"/></a></p><div id="practiceLinkDiv">
<h2><a href="http://practice.geeksforgeeks.org/problems/level-of-a-node-in-binary-tree/1">Recommended: Please solve it on “<b><i><u>PRACTICE</u></i></b>” first, before moving on to the solution.</a></h2>
</div><p>The idea is to start from the root and level as 1. If the key matches with root’s data, return level.  Else recursively call for left and right subtrees with level as level + 1.</p><div class="responsive-tabs">
<h2 class="tabtitle">C</h2>
<div class="tabcontent">
<pre class="brush: c; highlight: [11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]; title: ; notranslate" title="">#include&lt;stdio.h&gt;

/* A tree node structure */
struct node
{
    int data;
    struct node *left;
    struct node *right;
};

/* Helper function for getLevel().  It returns level of the data if data is
   present in tree, otherwise returns 0.*/
int getLevelUtil(struct node *node, int data, int level)
{
    if (node == NULL)
        return 0;

    if (node-&gt;data == data)
        return level;

    int downlevel = getLevelUtil(node-&gt;left, data, level+1);
    if (downlevel != 0)
        return downlevel;

    downlevel = getLevelUtil(node-&gt;right, data, level+1);
    return downlevel;
}

/* Returns level of given data value */
int getLevel(struct node *node, int data)
{
    return getLevelUtil(node,data,1);
}

/* Utility function to create a new Binary Tree node */
struct node* newNode(int data)
{
    struct node *temp = new struct node;
    temp-&gt;data = data;
    temp-&gt;left = NULL;
    temp-&gt;right = NULL;

    return temp;
}

/* Driver function to test above functions */
int main()
{
    struct node *root = new struct node;
    int x;

    /* Constructing tree given in the above figure */
    root = newNode(3);
    root-&gt;left = newNode(2);
    root-&gt;right = newNode(5);
    root-&gt;left-&gt;left = newNode(1);
    root-&gt;left-&gt;right = newNode(4);

    for (x = 1; x &lt;=5; x++)
    {
      int level = getLevel(root, x);
      if (level)
        printf(" Level of %d is %d\n", x, getLevel(root, x));
      else
        printf(" %d is not present in tree \n", x);

    }

    getchar();
    return 0;
}
</pre>
</div><h2 class="tabtitle">Java</h2>
<div class="tabcontent">
<pre class="brush: java; highlight: [19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41]; title: ; notranslate" title="">
/* A tree node structure */
class Node 
{
    int data;
    Node left, right;
 
    public Node(int d) 
    {
        data = d;
        left = right = null;
    }
}
 
class BinaryTree 
{
 
    Node root;
 
    /* Helper function for getLevel().  It returns level of the data
    if data is present in tree, otherwise returns 0.*/
    int getLevelUtil(Node node, int data, int level) 
    {
        if (node == null)
            return 0;
 
        if (node.data == data)
            return level;
 
        int downlevel = getLevelUtil(node.left, data, level + 1);
        if (downlevel != 0)
            return downlevel;
 
        downlevel = getLevelUtil(node.right, data, level + 1);
        return downlevel;
    }
 
    /* Returns level of given data value */
    int getLevel(Node node, int data) 
    {
        return getLevelUtil(node, data, 1);
    }
 
    /* Driver function to test above functions */
    public static void main(String[] args) 
    {
        BinaryTree tree = new BinaryTree();
 
        /* Constructing tree given in the above figure */
        tree.root = new Node(3);
        tree.root.left = new Node(2);
        tree.root.right = new Node(5);
        tree.root.left.left = new Node(1);
        tree.root.left.right = new Node(4);
        for (int x = 1; x &lt;= 5; x++) 
        {
            int level = tree.getLevel(tree.root, x);
            if (level != 0)
                System.out.println("Level of " + x + " is "
                        + tree.getLevel(tree.root, x));
            else
                System.out.println(x + " is not present in tree");
        }
    }
}
 
// This code has been contributed by Mayank Jaiswal(mayank_24)

</pre>
<p></p></div></div></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* http://www.geeksforgeeks.org/get-level-of-a-node-in-a-binary-tree/ */
import java.util.*;
public class GetLevelofNodeBinaryTree
{
	public static void main(String args[])
	{		
		TreeNode root = new TreeNode(3);
		root.left = new TreeNode(2);
		root.right = new TreeNode(5);
		root.left.left = new TreeNode(1);
		root.left.right = new TreeNode(4);

		HashMap<Integer, Integer> map = new HashMap<>();
		GetLevelofNodeBinaryTree g = new GetLevelofNodeBinaryTree();
		for(int i=1;i<=5;i++)
		{
			map.put(i, g.getNodeLevel(root, i, 1));
		}	
		System.out.println(map);

		System.out.println(g.getNodeLevel(root, 7, 1));
	}	

	public int getNodeLevel(TreeNode root, int i, int level)
	{
		if(root==null)
			return 0;
		if(root.val == i)
		{
			return level;
		}
		int left = getNodeLevel(root.left, i, level+1); 
		int right = getNodeLevel(root.right, i, level+1);
		return Math.max(left, right);
	}


}
class TreeNode
{
	TreeNode left;
	TreeNode right;

	int val;

	TreeNode(int val)
	{
		this.val = val;	
	}
}</pre>