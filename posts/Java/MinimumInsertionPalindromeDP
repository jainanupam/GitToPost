<b>Title: </b>Dynamic Programming | Set 28 (Minimum insertions to form a palindrome)  <b>Source: </b><a target='_blank' href='http://www.geeksforgeeks.org/dynamic-programming-set-28-minimum-insertions-to-form-a-palindrome/'>www.geeksforgeeks.org</a><p><p>Given a string, find the minimum number of characters to be inserted to convert it to palindrome.<span id="more-117391"></span></p></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* http://www.geeksforgeeks.org/dynamic-programming-set-28-minimum-insertions-to-form-a-palindrome/*/

class MinimumInsertionsPalindromeDP
{
	public static void main(String args[])
	{
		MinimumInsertionsPalindromeDP m = new MinimumInsertionsPalindromeDP();
		String str = "geeks";
		System.out.println(m.findInsertions(str));
	}

	public int findInsertions(String str)
	{
		int n = str.length();
		//dp[i][j] denotes the minimum elements needs to be inserted to make
		//str(i to j) a palindrome
		int[][] dp = new int[n][n];

		for(int gap = 1; gap<n; ++gap)
		{
			for(int lo=0, hi=gap; hi<n;++lo,++hi)
			{
				if(str.charAt(lo)==str.charAt(hi))
					dp[lo][hi] = dp[lo+1][hi-1];
				else
					dp[lo][hi] = Math.min(dp[lo+1][hi], dp[lo][hi-1])+1;
			}
		}
		return dp[0][n-1];
	}
}</pre><br><br><h3>Java solution</h3><pre class="lang:java decode:true ">/* http://www.geeksforgeeks.org/dynamic-programming-set-28-minimum-insertions-to-form-a-palindrome/ */
class MinimumInsertionsPalindrome
{
	public static void main(String args[])
	{
		MinimumInsertionsPalindrome m = new MinimumInsertionsPalindrome();
		String str = "geeks";
		System.out.println(m.findInsertions(str, 0, str.length()-1));
	}

	public int findInsertions(String str, int lo, int hi)
	{
		if(lo > hi)
			return Integer.MAX_VALUE;
		//if lo == hi then there is only 1 character in string
		if(lo == hi)
			return 0;
		//if lo == hi-1 then there are only two characters in string
		//if str(lo) == str(hi) then both characters are equal
		//if str(lo) != str(hi) then both characters are not equal 
		//then we can add a character on either side
		if(lo == hi - 1)
			return str.charAt(lo)==str.charAt(hi)?0:1;

		if(str.charAt(lo)==str.charAt(hi))
			return findInsertions(str, lo+1, hi-1);
		else
			return Math.min(findInsertions(str, lo+1, hi), findInsertions(str, lo, hi-1))+1;
	}
}</pre>