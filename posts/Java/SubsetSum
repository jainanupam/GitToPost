<b>Title: </b>Dynamic Programming | Set 25 (Subset Sum Problem)  <b>Source: </b><a target='_blank' href='http://www.geeksforgeeks.org/dynamic-programming-subset-sum-problem/'>www.geeksforgeeks.org</a><p><p>Given a set of non-negative integers, and a value <em>sum</em>, determine if there is a subset of the given set with sum equal to given <em>sum</em>.<span id="more-28860"></span></p><pre>
Examples: set[] = {3, 34, 4, 12, 5, 2}, sum = 9
Output:  True  //There is a subset (4, 5) with sum 9.
</pre><p>Let isSubSetSum(int set[], int n, int sum) be the function to find whether there is a subset of set[] with sum equal to <em>sum</em>.  n is the number of elements in set[].</p><p>The isSubsetSum problem can be divided into two subproblems<br/>
…a) Include the last element, recur for n = n-1, sum = sum – set[n-1]<br/>
…b) Exclude the last element, recur for n = n-1.<br/>
If any of the above the above subproblems return true, then return true. </p><p>Following is the recursive formula for isSubsetSum() problem.</p><pre>
isSubsetSum(set, n, sum) = isSubsetSum(set, n-1, sum) || 
                           isSubsetSum(arr, n-1, sum-set[n-1])
<strong>Base Cases:</strong>
isSubsetSum(set, n, sum) = false, if sum &gt; 0 and n == 0
isSubsetSum(set, n, sum) = true, if sum == 0 
</pre><p>Following is naive recursive implementation that simply follows the recursive structure mentioned above.</p><pre class="brush: cpp; highlight: [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]; title: ; notranslate" title="">
// A recursive solution for subset sum problem
#include &lt;stdio.h&gt;

// Returns true if there is a subset of set[] with sun equal to given sum
bool isSubsetSum(int set[], int n, int sum)
{
   // Base Cases
   if (sum == 0)
     return true;
   if (n == 0 &amp;&amp; sum != 0)
     return false;

   // If last element is greater than sum, then ignore it
   if (set[n-1] &gt; sum)
     return isSubsetSum(set, n-1, sum);

   /* else, check if sum can be obtained by any of the following
      (a) including the last element
      (b) excluding the last element   */
   return isSubsetSum(set, n-1, sum) || isSubsetSum(set, n-1, sum-set[n-1]);
}

// Driver program to test above function
int main()
{
  int set[] = {3, 34, 4, 12, 5, 2};
  int sum = 9;
  int n = sizeof(set)/sizeof(set[0]);
  if (isSubsetSum(set, n, sum) == true)
     printf("Found a subset with given sum");
  else
     printf("No subset with given sum");
  return 0;
}
</pre><p>Output:
<pre> Found a subset with given sum </pre>
<p>The above solution may try all subsets of given set in worst case. Therefore time complexity of the above solution is exponential. The problem is in-fact <a href="http://en.wikipedia.org/wiki/NP-complete" target="_blank">NP-Complete</a> (There is no known polynomial time solution for this problem).</p>
<p><strong>We can solve the problem in <a href="http://en.wikipedia.org/wiki/Pseudo-polynomial_time" target="_blank">Pseudo-polynomial time</a> using Dynamic programming. </strong> We create a boolean 2D table subset[][] and fill it in bottom up manner. The value of subset[i][j] will be true if there is a subset of set[0..j-1] with sum equal to i., otherwise false. Finally, we return subset[sum][n]</p>
<pre class="brush: cpp; highlight: [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39]; title: ; notranslate" title="">
// A Dynamic Programming solution for subset sum problem
#include &lt;stdio.h&gt;

// Returns true if there is a subset of set[] with sun equal to given sum
bool isSubsetSum(int set[], int n, int sum)
{
    // The value of subset[i][j] will be true if there is a subset of set[0..j-1]
    //  with sum equal to i
    bool subset[sum+1][n+1];

    // If sum is 0, then answer is true
    for (int i = 0; i &lt;= n; i++)
      subset[0][i] = true;

    // If sum is not 0 and set is empty, then answer is false
    for (int i = 1; i &lt;= sum; i++)
      subset[i][0] = false;

     // Fill the subset table in botton up manner
     for (int i = 1; i &lt;= sum; i++)
     {
       for (int j = 1; j &lt;= n; j++)
       {
         subset[i][j] = subset[i][j-1];
         if (i &gt;= set[j-1])
           subset[i][j] = subset[i][j] || subset[i - set[j-1]][j-1];
       }
     }

    /* // uncomment this code to print table
     for (int i = 0; i &lt;= sum; i++)
     {
       for (int j = 0; j &lt;= n; j++)
          printf ("%4d", subset[i][j]);
       printf("\n");
     } */

     return subset[sum][n];
}

// Driver program to test above function
int main()
{
  int set[] = {3, 34, 4, 12, 5, 2};
  int sum = 9;
  int n = sizeof(set)/sizeof(set[0]);
  if (isSubsetSum(set, n, sum) == true)
     printf("Found a subset with given sum");
  else
     printf("No subset with given sum");
  return 0;
}
</pre>
<p>Output:
<pre>Found a subset with given sum</pre>
<p>Time complexity of the above solution is O(sum*n).</p>
<p>Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.</p>
<script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- Big Rectangle Blog Bottom -->
<ins class="adsbygoogle" data-ad-client="ca-pub-9465609616171866" data-ad-slot="4061219431" style="display:inline-block;width:336px;height:280px"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
<br/>
</p></p></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* http://www.geeksforgeeks.org/dynamic-programming-subset-sum-problem/ */
/* 
set[] = {3, 34, 4, 12, 5, 2}, sum = 11
Output:  True  //There is a subset (4, 5, 2) with sum 9.
*/
class SubsetSum
{
	public boolean isSubsetSum(int[] set, int sum)
	{
		return helper(set, sum, set.length-1);
	}
	
	// idea is to check all the subset of set recursively
	public boolean helper(int[] set, int sum, int i)
	{
		//since we subtracting any number added to the subset from the sum
		//if the sum equals to 0, we have found the subset
		//return true
		if(sum==0)
			return true;
		//i denotes the elements of the set checked so far
		//so if i==0, we have checked all the elements 
		//return false
		if(i==0 && sum > 0)
			return false;
		//if sum >= set[i] then 
		// 1. we can include the set[i] in the subset or 
		// 2. we can exclude the set[i] in the subset
		if(sum>=set[i])
			return helper(set, sum-set[i], i-1) || helper(set, sum, i-1);
		return helper(set, sum, i-1);
	}

	public static void main(String args[])
	{
		int set[] = {3, 34, 4, 12, 5, 2};
		int sum = 9;

		SubsetSum s = new SubsetSum();
		System.out.println(s.isSubsetSum(set, sum));
	}
}</pre><br><br><h3>Java solution</h3><pre class="lang:java decode:true ">/* http://www.geeksforgeeks.org/dynamic-programming-subset-sum-problem/ */
import java.util.Arrays;

class SubsetSumDP
{
	public boolean isSubsetSum(int[] set, int sum)
	{
		// The value of subset[i][j] will be true if there is a subset of set[0..j-1]
    	//  with sum equal to i
		boolean[][] dp = new boolean[sum+1][set.length+1];
		Arrays.fill(dp[0], true);
		for(int i=0;i<=set.length;i++)
			dp[i][0] = false;

		for(int i=1;i<=sum;i++)
		{
			for(int j=1;j<=set.length;j++)
			{
				//if the jth element is not included
				dp[i][j] = dp[i][j-1];
				if(i>=set[j-1])
				{
					//either jth element id not included then dp[i][j] = dp[i][j-1]
					//or it is included then dp[i][j] = dp[i-set[j-1]][j]
					dp[i][j] = dp[i][j] || dp[i-set[j-1]][j];
				}
			}
		}
		return dp[sum][set.length];

	}

	public static void main(String args[])
	{
		int set[] = {3, 34, 4, 12, 5, 2};
		int sum = 9;

		SubsetSumDP s = new SubsetSumDP();
		System.out.println(s.isSubsetSum(set, sum));
	}
}</pre>