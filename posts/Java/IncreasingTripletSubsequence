<b>Title: </b>
            334. Increasing Triplet Subsequence
            <b>Source: </b><a target='_blank' href='https://leetcode.com/problems/increasing-triplet-subsequence/'>leetcode.com</a><p><section class="action action-btn-set">
<a class="icon-btn btn" href="https://discuss.leetcode.com/category/418" onclick="ga('send', 'event', 'discuss', 'click', 'increasing-triplet-subsequence');" target="_blank">
<i aria-hidden="true" class="fa fa-commenting-o"></i>Discuss
          </a>
<button class="icon-btn disabled" data-placement="top" data-toggle="tooltip" title="Not available yet, please check back later." type="button">
<i aria-hidden="true" class="fa fa-book">
</i><span class="hidden-xs">Editorial </span>Solution
          </button>
<a class="icon-btn pull-right-sm btn" href="/problems/random-one-question/" onclick="ga('send', 'event', 'pick-one-detail', 'click');">
<i aria-hidden="true" class="fa fa-random"></i>Pick One
          </a>
</section><hr class="line dotted">
</hr></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* https://leetcode.com/problems/increasing-triplet-subsequence/ */
import java.util.Arrays;
public class IncreasingTripletSubsequence
{
	public static void main(String args[])
	{
		IncreasingTripletSubsequence i = new IncreasingTripletSubsequence();
		int[] nums = {10, 9, 2, 5, 3, 7, 101, 18};
		System.out.println(i.increasingTriplet(nums));
		System.out.println(i.helperLISDP(nums));
	}

	public boolean increasingTriplet(int[] nums) 
	{
		System.out.println(helperI(nums));
		System.out.println(helperDP(nums));
    	return helper(nums, 0, 0, -1);
    }

    public boolean helper(int[] nums, int count, int index ,int prev)
    {
    	if(index >= nums.length)
    		return false;
    	if(count == 3)
    		return true;
    	boolean a = false;
    	boolean b = false;
    	if(nums[index] > prev)
    	{
    		a = helper(nums, count+1, index+1, nums[index]) 
    				|| helper(nums, count, index+1, prev); 
    	}
    	else
    		b = helper(nums, count, index+1, prev);
    	return a || b;
    }

    public boolean helperDP(int[] nums)
    {
    	int[] dp = new int[nums.length];
    	Arrays.fill(dp, 1);

    	for(int i = 1; i<nums.length; ++i)
    	{
    		for(int j=0; j<i; ++j)
    		{
    			if(nums[i] > nums[j])
    			{
    				dp[i] = Math.max(dp[i], dp[j]+1);
    			}
    		}
    		if(dp[i] == 3)
    			return true;
    	}
    	return false;
    }

    public boolean helperI(int[] nums)
    {
    	if(nums.length < 3)
    		return false;
    	int min = nums[0];
    	int min2 = Integer.MAX_VALUE;
    	//using three pointers to keep track increasing subsequence
    	for(int i=1;i<nums.length;++i)
    	{
    		if(nums[i] < min)
    		{
    			min = nums[i];
    		}
    		else if(nums[i] > min && nums[i]< min2)
    		{
    			min2 = nums[i];
    		}
    		else if(nums[i] > min2)
    		{
    			return true;
    		}
    	}
    	return false;
    }

    public int helperLIS(int[] nums, int count, int index, int prev)
    {
    	//if the index is equal to nums.length
    	//then return count
    	if(index >= nums.length)
    		return count;
    	int a = 0;
    	int b = 0;
    	//otherwise check if the element at index is greater than
    	//prev element
    	if(nums[index] > prev)
    	{
    		//we will either include this element or we are not
    		//case 1: including the current element in subsequence (count+1)
    		//case 2: not including the current element
    		a = Math.max(helperLIS(nums, count+1, index+1, nums[index]),
    			helperLIS(nums, count, index+1, prev));
    	}
    	else
    	{
    		b = helperLIS(nums, count, index+1, prev);
    	}
    	return Math.max(a, b);
    }

    public int helperLISDP(int[] nums)
    {
    	int[] dp = new int[nums.length];
    	//initialize each element of dp with 1
    	//since each element is a subsequence of length 1 
   		Arrays.fill(dp, 1);
   		//outer loop
    	for(int i=1;i<nums.length;++i)
    	{
    		//inner loop to compare the element at i with all the 
    		//elements occurring before i
    		for(int j=0;j<i;++j)
    		{
    			//if the element at i is greater than element at j;
    			if(nums[i] > nums[j])
    			{
    				//then the value of dp[i] is maximum of either the value at dp[i] or 
    				//the value at dp[j] +1 (if we are including element at j)
    				dp[i] = Math.max(dp[i], dp[j]+1);
    			}
    		}
    	}
    	int max = Integer.MIN_VALUE;
    	for(int i=0;i<dp.length;++i)
    	{
    		if(dp[i] > max)
    			max = dp[i];
    	}
    	return max;
    }
}</pre>