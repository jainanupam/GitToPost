<b>Title: </b>331. Verify Preorder Serialization of a Binary Tree  <b>Source: </b><a target='_blank' href='https://leetcode.com/problems/verify-preorder-serialization-of-a-binary-tree/'>leetcode.com</a><p><p>One way to serialize a binary tree is to use pre-order traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as <code>#</code>.</p><pre>
     _9_
    /   \
   3     2
  / \   / \
 4   1  #  6
/ \ / \   / \
# # # #   # #
</pre><p>For example, the above binary tree can be serialized to the string <code>"9,3,4,#,#,1,#,#,2,#,6,#,#"</code>, where <code>#</code> represents a null node.
</p><p>Given a string of comma separated values, verify whether it is a correct preorder traversal serialization of a binary tree. Find an algorithm without reconstructing the tree.</p><p>Each comma separated value in the string must be either an integer or a character <code>'#'</code> representing <code>null</code> pointer.</p><p>You may assume that the input format is always valid, for example it could never contain two consecutive commas such as <code>"1,,3"</code>.</p><p><strong>Example 1:</strong><br>
<code>"9,3,4,#,#,1,#,#,2,#,6,#,#"</code><br>
Return <code>true</code></br></br></p><p><strong>Example 2:</strong><br>
<code>"1,#"</code><br>
Return <code>false</code></br></br></p><p><strong>Example 3:</strong><br>
<code>"9,#,#,1"</code><br>
Return <code>false</code></br></br></p></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* https://leetcode.com/problems/verify-preorder-serialization-of-a-binary-tree/ */
import java.util.Stack;
public class VerifyPreorderSerialization
{

	//the idea is to use a stack and push the element into the stack when the
	//the current item is not equal to "#" and when the current item is equal 
	//to the "#", then check the top element on the stack
	public boolean isValidSerialization(String preorder) 
	{
		Stack<String> stack = new Stack<String>();
        String[] s = preorder.split(",");
        //if the length of array is 0
        //then there is no node in the binary tree
        //return false
        if(s.length==0)
        {
        	return false;
        }
        //if the length of the array is 1
        //check if s[0] is equal to "#", then tree consists of null node
        //check if s[0] is not equal to "#", then return false (valid binary
        //tree with single node will have "9,#,#")
        if(s.length==1)
        {
            if(s[0].equals("#"))
                return true;
            else
                return false;
        }
        //push the first element in the array into the stack
        stack.push(s[0]);
        for(int i=1;i<s.length;i++)
        {
        	//if s[i] is not equals to "#", then push
        	if(!s[i].equals("#"))
        	{
        		stack.push(s[i]);
        	}
        	//if s[i] is equals to "#" 
        	else if(s[i].equals("#"))
        	{
        		//then check if the top element on the stack is not equals 
        		//to "#" 
        		if(!"#".equals(stack.peek()))
        		{
        			stack.push(s[i]);
        		}
        		//if the top element on the stack is equals to "#"
        		//then call pushPoundSymbol
        		else
        		{
        			if(!pushPoundSymbol(stack, s[i]))
        				return false;
        		}
        	}
        }

        if(stack.size()==1 && "#".equals(stack.peek()))
        	return true;
        else
        	return false;
    }

    public boolean pushPoundSymbol(Stack<String> stack, String symbol)
    {
    	//if the stack is empty or the top element in the stack is not equals 
    	//to "#" then push the symbol on to the stack
    	if(stack.isEmpty() || !"#".equals(stack.peek()))
    	{
    		stack.push(symbol);
    	}
    	else
    	{
    		//check if the size of the stack is greater than 1
    		if(stack.size()>1)
    		{
    			//pop the top element that ie "#" and check if the next top
    			//element is not "#"
    			stack.pop();
    			//if the top element is not "#" then pop the top element
    			//else return false
    			if(!"#".equals(stack.peek()))
    				stack.pop();
    			else
    				return false;
    			return pushPoundSymbol(stack, "#");
    		}
    		else
    			return false;
    	}
    	return true;
    }

    public static void main(String args[])
    {
    	VerifyPreorderSerialization v = new VerifyPreorderSerialization();
    	//String serializedString = "9,3,4,#,#,1,#,#,2,#,6,#,#";
    	String serializedString = "4,#,#,1";
    	System.out.println(v.isValidSerialization(serializedString));
    }
}</pre><br><br><h3>Python solution</h3><pre class="lang:python decode:true ">''' https://leetcode.com/problems/verify-preorder-serialization-of-a-binary-tree/ '''

class Solution(object):
    def isValidSerialization(self, preorder):
        """
        :type preorder: str
        :rtype: bool
        """
        lst = []
        index = -1
        preorder = preorder.split(",")
        ln = len(preorder)
        root_flag = False
        if len(preorder) == 1 and preorder[0] == '#':
            return True
        
        for i,c in enumerate(preorder):
            # enumerate over each element in preorder tree
            if c == '#':
                if not lst:
                    return False
                
                lst[-1].append(True)
                while index >= 0 and len(lst[-1]) > 2:
                    lst.pop()
                    index -= 1
                if index == -1 and i + 1 != ln:
                    return False
                
            else:
                root_flag = True
                if lst:
                    x = lst[index]
                    x.append(True)
                index += 1
                lst.append([c])
                
        while index >= 0:
            x = lst[index]
            if len(x) == 3:
                index -= 1
            else:
                break
        return not (index >= 0)
</pre>