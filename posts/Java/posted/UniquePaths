<b>Title: </b>Unique Paths  <b>Source: </b><a target='_blank' href='https://leetcode.com/problems/unique-paths/'>leetcode.com</a><p><p>A robot is located at the top-left corner of a <i>m</i> x <i>n</i> grid (marked 'Start' in the diagram below).</p><p>The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).</p><p>How many possible unique paths are there?</p><p>
<img src="http://leetcode.com/wp-content/uploads/2014/12/robot_maze.png"/><br/>
<p style="font-size: 11px">Above is a 3 x 7 grid. How many possible unique paths are there?
</p>
<p><b>Note:</b> <i>m</i> and <i>n</i> will be at most 100.</p></p><div>
<p><a href="/subscribe/">Subscribe</a> to see which companies asked this question</p>
</div><div>
<div class="btn btn-xs btn-warning" id="tags">Show Tags</div>
<span class="hidebutton">
<a class="btn btn-xs btn-primary" href="/tag/array/">Array</a>
<a class="btn btn-xs btn-primary" href="/tag/dynamic-programming/">Dynamic Programming</a>
</span>
</div><div>
<div class="btn btn-xs btn-warning" id="similar">Show Similar Problems</div>
<span class="hidebutton">
<a class="btn btn-xs btn-primary" href="/problems/unique-paths-ii/"> (M) Unique Paths II</a>
<a class="btn btn-xs btn-primary" href="/problems/minimum-path-sum/"> (M) Minimum Path Sum</a>
<a class="btn btn-xs btn-primary" href="/problems/dungeon-game/"> (H) Dungeon Game</a>
</span>
</div></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* https://leetcode.com/problems/unique-paths/ */
class UniquePaths
{
	public static void main(String args[])
	{
		UniquePaths solution = new UniquePaths();
		System.out.println(solution.uniquePaths(3, 7));
	}

	public int uniquePaths(int m, int n)
	{
		int[][] dp = new int[m][n];
		for(int i=0;i<m;i++)
		{
			for(int j=0;j<n;j++)
				dp[i][j]=-1;
		}
		helper(m-1, n-1, dp);
		return dp[m-1][n-1];
	}

	int helper(int i, int j, int[][] dp)
	{
		if(i<0 ||j<0)
			return 0;
		if(i==0 && j==0)
		{
			return dp[i][j]=1;
		}
		else
		{
			dp[i][j] = dp[i][j]!=-1?dp[i][j]:(helper(i-1, j, dp) + helper(i, j-1, dp));
			return dp[i][j];
		}
	}
}
</pre>