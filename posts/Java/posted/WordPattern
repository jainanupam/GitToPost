<b>Title: </b>Word Pattern  <b>Source: </b><a target='_blank' href='https://leetcode.com/problems/word-pattern/'>leetcode.com</a><p><p>Given a <code>pattern</code> and a string <code>str</code>, find if <code>str</code> follows the same pattern.</p><p> Here <b>follow</b> means a full match, such that there is a bijection between a letter in <code>pattern</code> and a <b>non-empty</b> word in <code>str</code>.</p><p>
<b>Examples:</b><br>
<ol>
<li>pattern = <code>"abba"</code>, str = <code>"dog cat cat dog"</code> should return true.</li>
<li>pattern = <code>"abba"</code>, str = <code>"dog cat cat fish"</code> should return false.</li>
<li>pattern = <code>"aaaa"</code>, str = <code>"dog cat cat dog"</code> should return false.</li>
<li>pattern = <code>"abba"</code>, str = <code>"dog dog dog dog"</code> should return false.</li>
</ol>
</br></p><p>
<b>Notes:</b><br>
You may assume <code>pattern</code> contains only lowercase letters, and <code>str</code> contains lowercase letters separated by a single space.
</br></p></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* https://leetcode.com/problems/word-pattern/ */
import java.util.HashMap;
class WordPattern
{
	public static void main(String args[])
    {
    	 String pattern = "abba"; String str = "dog cat cat dog";
		// String pattern = "abba"; String str = "dog cat cat fish";
  		// String pattern = "aaaa"; String str = "dog cat cat dog";
		 // String pattern = "abba"; String str = "dog dog dog dog";
		WordPattern w = new WordPattern();
		System.out.println(w.wordPattern(pattern, str));
    }

	public boolean wordPattern(String pattern, String str) 
	{
		if(str==null || pattern==null)
			false;
        String[] words = str.split("\\s");
        if(pattern.length()!=words.length)
        	return false;
        HashMap<Character, String> map1 = new HashMap<>();
        HashMap<String, Character> map2 = new HashMap<>();
        for(int i=0;i<pattern.length();i++)
        {
        	System.out.println("i:"+i);
        	if(map1.containsKey(pattern.charAt(i)))
        	{
        		if(!words[i].equals(map1.get(pattern.charAt(i))))
        			return false;
        	}
        	else
        	{
        		map1.put(pattern.charAt(i), words[i]);
        		if(!map2.containsKey(words[i]))
        		{
        			map2.put(words[i], pattern.charAt(i));
        		}
        		else
   					return false;
        	}
        }
        return true;
    }
}</pre><br><br><h3>Python solution</h3><pre class="lang:python decode:true ">''' https://leetcode.com/problems/word-pattern/ '''

class Solution(object):
    def wordPattern(self, pattern, str):
        """
        :type pattern: str
        :type str: str
        :rtype: bool
        """
        dict = {}
        st = set()
        str = str.split()
        ln = len(str)
        if len(pattern) != ln:
            #print len(pattern), ln
            return False
        i = 0
        for c in pattern:
            if str[i] in dict:
                if dict[str[i]] != c:
                    return False
            else:
                if c in st:
                    return False
                else:
                    st.add(c)
                dict[str[i]] = c
            
            i += 1
        return True
</pre>