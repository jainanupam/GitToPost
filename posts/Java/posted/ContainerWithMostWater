<b>Title: </b>Container With Most Water  <b>Source: </b><a target='_blank' href='https://leetcode.com/problems/container-with-most-water/'>leetcode.com</a><p><p>Given <i>n</i> non-negative integers <i>a<sub>1</sub></i>, <i>a<sub>2</sub></i>, ..., <i>a<sub>n</sub></i>, where each represents a point at coordinate (<i>i</i>, <i>a<sub>i</sub></i>). <i>n</i> vertical lines are drawn such that the two endpoints of line <i>i</i> is at (<i>i</i>, <i>a<sub>i</sub></i>) and (<i>i</i>, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.
</p><p>Note: You may not slant the container.
</p></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/*https://leetcode.com/problems/container-with-most-water/*/

public class ContainerWithMostWater
{
    public static void main(String args[])
    {
        ContainerWithMostWater c = new ContainerWithMostWater();
        int[] height = {4, 3 , 2, 1};
        System.out.println(c.maxArea(height));
    }

    public int maxArea(int[] height)
    {
        int p1 = 0;
        int p2 = height.length-1;
        int maxArea = 0;
        while(p1<p2)
        {
            int area = (p2-p1) * Math.min(height[p1], height[p2]);
            if(area > maxArea)
                maxArea = area;
            if(height[p1]<=height[p2])
                p1++;
            else if(height[p2]<height[p1])
                p2--;
        }
        return maxArea;
    }
}
</pre>