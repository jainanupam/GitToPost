<b>Title: </b>Word Search  <b>Source: </b><a target='_blank' href='https://leetcode.com/problems/word-search/'>leetcode.com</a><p><p>
Given a 2D board and a word, find if the word exists in the grid.
</p><p>
The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.
</p><p>
For example,<br/>
Given <b>board</b> = 
<pre>
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]
</pre>
<b>word</b> = <code>"ABCCED"</code>, -&gt; returns <code>true</code>,<br/>
<b>word</b> = <code>"SEE"</code>, -&gt; returns <code>true</code>,<br/>
<b>word</b> = <code>"ABCB"</code>, -&gt; returns <code>false</code>.<br/>
</p></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* https://leetcode.com/problems/word-search/ */
import java.util.Arrays;
class WordSearch
{
	public static void main(String args[])
	{
		char[][] board = {
 							{'A','B','C','E'},
  							{'S','F','C','S'},
  							{'A','D','E','E'}
						};
		WordSearch ws = new WordSearch();
		String word = "SEE";
		System.out.println(ws.exist(board, word));
	}

	public boolean exist(char[][] board, String word)
	{
		boolean[][] visited = new boolean[board.length][board[0].length];
		for(int i=0;i<board.length;i++)
			Arrays.fill(visited[i], false);
		for(int i=0;i<board.length;i++)
		{
			for(int j=0;j<board[i].length;j++)
			{
				//System.out.println("-----------");
				if(existHelper(i, j, board, word, 0, visited))
					return true;
			}
		}
		return false;
	}

	//Backtracking
	public boolean existHelper(int i, int j, char[][] board, String word, int pos, boolean[][] visited)
	{
		if(pos==word.length())
			return true;
        if(isSafe(i, j, board, word, pos, visited))
        {
        	//System.out.println("row: "+i+" col: "+j+" pos: "+pos);
        	visited[i][j] = true;
        	if(existHelper(i+1, j, board, word, pos+1, visited))
        		return true;
        	if(existHelper(i, j+1, board, word, pos+1, visited))
        		return true;
        	if(existHelper(i-1, j, board, word, pos+1, visited))
        		return true;
        	if(existHelper(i, j-1, board, word, pos+1, visited))
        		return true;
        	visited[i][j] = false;
        }
        return false;
    }

    public boolean isSafe(int row, int col, char[][] board, String word, int pos, boolean [][] visited)
    {
    	if(row<board.length && row>=0 && col < board[row].length && col >=0 && visited[row][col]!=true && board[row][col]==word.charAt(pos))
    		return true;
    	return false;
    }
}
</pre><br><br><h3>Python solution</h3><pre class="lang:python decode:true ">''' https://leetcode.com/problems/word-search/ '''

class Solution(object):
    def __init__(self):
        self.rows = 0
        self.cols = 0
        
    def helper(self, board, word, i, j, wi, ln):
        if wi == ln:
            return True
        res = False
        
        if (i+1 < self.rows) and (board[i+1][j] == word[wi]):
            board[i+1][j] = '0'
            res = self.helper(board, word, i+1, j, wi+1, ln)
            if res:
                return res
            board[i+1][j] = word[wi]
        if (i > 0) and (board[i-1][j] == word[wi]):
            board[i-1][j] = '0'
            res = self.helper(board, word, i-1, j, wi+1, ln)
            if res:
                return res
            board[i-1][j] = word[wi]
        if (j+1 < self.cols) and (board[i][j+1] == word[wi]):
            board[i][j+1] = '0'
            res = self.helper(board, word, i, j+1, wi+1, ln)
            if res:
                return res
            board[i][j+1] = word[wi]
        if (j > 0) and (board[i][j-1] == word[wi]):
            board[i][j-1] = '0'
            res = self.helper(board, word, i, j-1, wi+1, ln)
            if res:
                return res
            board[i][j-1] = word[wi]
        return res
                
    def exist(self, board, word):
        """
        :type board: List[List[str]]
        :type word: str
        :rtype: bool
        """
        self.rows = len(board)
        self.cols = len(board[0])
        ln = len(word)
        res = False
        for i in range(self.rows):
            for j in range(self.cols):
                if word[0] == board[i][j]:
                    board[i][j] = '0'
                    res = self.helper(board, word, i, j, 1, ln)
                    board[i][j] = word[0]
                if res:
                    break
                
            if res:
                break
        return res
</pre>