<b>Title: </b>Backtracking | Set 2 (Rat in a Maze)  <b>Source: </b><a target='_blank' href='http://www.geeksforgeeks.org/backttracking-set-2-rat-in-a-maze/'>www.geeksforgeeks.org</a><p><p>We have discussed Backtracking and Knightâ€™s tour problem in <a href="http://geeksforgeeks.org/?p=12916">Set 1</a>.  Let us discuss Rat in a <a href="http://en.wikipedia.org/wiki/Maze">Maze </a>as another example problem that can be solved using Backtracking.<span id="more-13376"></span></p><p>A Maze is given as N*N binary matrix of blocks where source block is the upper left most block i.e., maze[0][0] and destination block is lower rightmost block i.e., maze[N-1][N-1].  A rat starts from source and has to reach destination. The rat can move only in two directions: forward and down.<br/>
In the maze matrix, 0 means the block is dead end and 1 means the block can be used in the path from source to destination. Note that this is a simple version of the typical Maze problem. For example, a more complex version can be that the rat can move in 4 directions and a more complex version can be with limited number of moves.</p><p>Following is an example maze.</p><pre> Gray blocks are dead ends (value = 0). </pre><p><a href="http://geeksforgeeks.org/wp-content/uploads/ratinmaze_filled11.png"><img alt="" class="aligncenter size-full wp-image-13423" height="157" src="http://geeksforgeeks.org/wp-content/uploads/ratinmaze_filled11.png" title="ratinmaze_filled1" width="181"/></a></p><p>Following is binary matrix representation of the above maze.</p><pre>
                {1, 0, 0, 0}
                {1, 1, 0, 1}
                {0, 1, 0, 0}
                {1, 1, 1, 1}
</pre><p>Following is maze with highlighted solution path.</p><p><a href="http://geeksforgeeks.org/wp-content/uploads/ratinmaze_filled_path1.png"><img alt="" class="aligncenter size-full wp-image-13424" height="157" src="http://geeksforgeeks.org/wp-content/uploads/ratinmaze_filled_path1.png" title="ratinmaze_filled_path" width="176"/></a></p><p>Following is the solution matrix (output of program) for the above input matrx.</p><pre>
                {1, 0, 0, 0}
                {1, 1, 0, 0}
                {0, 1, 0, 0}
                {0, 1, 1, 1}
 All enteries in solution path are marked as 1.
</pre><p><strong>Naive Algorithm</strong><br/>
The Naive Algorithm is to generate all paths from source to destination and one by one check if the generated path satisfies the constraints.</p><pre>while there are untried paths
{
   generate the next path
   if this path has all blocks as 1
   {
      print this path;
   }
}</pre><p><strong>Backtrackng Algorithm</strong></p><pre>If destination is reached
    print the solution matrix
Else
   a) Mark current cell in solution matrix as 1. 
   b) Move forward in horizontal direction and recursively check if this 
       move leads to a solution. 
   c) If the move chosen in the above step doesn't lead to a solution
       then move down and check if  this move leads to a solution. 
   d) If none of the above solutions work then unmark this cell as 0 
       (BACKTRACK) and return false.
</pre><p><strong>Implementation of Backtracking solution</strong><br/>
<div class="responsive-tabs">
<h2 class="tabtitle">C/C++</h2>
<div class="tabcontent">
</div></div></p></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* http://www.geeksforgeeks.org/backttracking-set-2-rat-in-a-maze/ */
class RatMaze
{
	private static final int N = 4;
	private final int[][] maze;
	private final int[][] solution;

	public RatMaze()
	{
		maze =  new int[][]{
					{1, 0, 0, 0},
        			{1, 1, 0, 1},
        			{0, 1, 0, 0},
        			{1, 1, 1, 1}
    			};
    	solution = new int[N][N];
	}

	public static void main(String args[])
	{
		RatMaze ratMaze = new RatMaze();
		if(!ratMaze.solveMaze(0, 0))
			System.out.println("Solution doesn't exist");
	}

	public boolean solveMaze(int x, int y)
	{
		if(x==N-1 && y==N-1)
		{
			solution[x][y] =1;
			printSolution();
			return true;
		}
		if(isSafe(x, y))
		{
			solution[x][y] = 1;
			if(solveMaze(x, y+1))
				return true;
			if(solveMaze(x+1, y))
				return true;
			solution[x][y] = 0;
			//return false;
		}
		return false;
	}

	public boolean isSafe(int x, int y)
	{
		if(x >=0 && x<N && y>=0 && y<N && maze[x][y]!=0)
			return true;
		return false;
	}

	public void printSolution()
	{
		for(int row=0;row<N;row++)
		{
			for(int col=0;col<N;col++)
				System.out.print(solution[row][col]+" ");
			System.out.println();
		}
		System.out.println();
	}
}
</pre>