<b>Title: </b>
            126. Word Ladder II
            <b>Source: </b><a target='_blank' href='https://leetcode.com/problems/word-ladder-ii/'>leetcode.com</a><p><section class="action action-btn-set">
<a class="icon-btn btn" href="https://discuss.leetcode.com/category/134" onclick="ga('send', 'event', 'discuss', 'click', 'word-ladder-ii');" target="_blank">
<i aria-hidden="true" class="fa fa-commenting-o"></i>Discuss
          </a>
<button class="icon-btn disabled" data-placement="top" data-toggle="tooltip" title="Not available yet, please check back later." type="button">
<i aria-hidden="true" class="fa fa-book">
</i><span class="hidden-xs">Editorial </span>Solution
          </button>
<a class="icon-btn pull-right-sm btn" href="/problems/random-one-question/" onclick="ga('send', 'event', 'pick-one-detail', 'click');">
<i aria-hidden="true" class="fa fa-random"></i>Pick One
          </a>
</section><hr class="line dotted">
</hr></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* https://leetcode.com/problems/word-ladder-ii/ */
/*
Shortest Word Ladder 
beginWord = "hit"
endWord = "cog"
wordList = ["hot","dot","dog","lot","log"]
*/
import java.util.*;
public class ShortestWordLadders
{	
	HashMap<String, TreeNode> map = new HashMap<>();
	public static void main(String args[])
	{
		String beginWord = "hit";
		String endWord = "cog";
		Set<String> wordList = new HashSet<>();
		wordList.add("hot");
		wordList.add("dot");
		wordList.add("dog");
		wordList.add("lot");
		wordList.add("log");
		//wordList.add("hog");
		ShortestWordLadders s = new ShortestWordLadders();
		//s.getWordsAtOneEditDistance(wordList, "hot", new LinkedList<String>());
		System.out.println(s.findLadders(beginWord, endWord, wordList));
	}

	public List<List<String>> findLadders(String beginWord, String endWord, Set<String> wordList) 
	{
		wordList.add(endWord);
       	Queue<String> next = new LinkedList<String>();
 		Queue<String> curr = null;
 		List<String> list = new ArrayList<>();
 		List<List<String>> result = new ArrayList<>();
 		next.add(beginWord);
 		TreeNode root = new TreeNode(beginWord);
 		this.map.put(beginWord, root);
 		int count = 0;
 		int min = Integer.MAX_VALUE;
 		while(!next.isEmpty())
 		{
 			count++;
 			curr = next;
 			next = new LinkedList<>();
 			while(!curr.isEmpty())
 			{
 				String temp = curr.poll();
 				list.add(temp);
 				if(temp.equals(endWord))
 				{
 					if(count < min)
 						min = count;
 					result.add(new ArrayList<String>(list));
 				}
 				else
 				{
 					getWordsAtOneEditDistance(wordList, temp, next, endWord); 
 				}
 			}
 		}
 		System.out.println(root.children+ " : "+min);
 		List<String> path = new ArrayList<>();
 		printPath(root, path, "", min, 0);
 		System.out.println("path: "+path);
 		return result;
    }


 	public void getWordsAtOneEditDistance(Set<String> wordList,
 										  String temp,
 										  Queue<String> next,
 										  String endWord)
 	{
 		StringBuilder sb = new StringBuilder(temp);
 		for(int i=0;i<temp.length();i++)
 		{
 			for(char c = 'a'; c<='z';++c)
 			{
 				if(c!=temp.charAt(i))
 				{
 					String s = temp.substring(0, i)+c+temp.substring(i+1);
 					//System.out.println(s);
 					if(wordList.contains(s))
 					{
 						if(!s.equals(endWord))
 						{
 							wordList.remove(s);
 						}
 						next.add(s);
 						TreeNode node = new TreeNode(s);
 						TreeNode parent = getTreeNode(temp);
 						if(parent!=null)
 						{
 							parent.children.add(node);
 							this.map.put(s, node);
 						}
 						else
 						{
 							System.out.println("########");
 						}
 					}
 				}
 			}
 		}
 		System.out.println(next);
 		System.out.println(wordList);
 	}

 	public TreeNode getTreeNode(String value)
 	{
 		return this.map.getOrDefault(value, null);
 	}

 	public void printPath(TreeNode root, List<String> list, String s, int min, int count)
 	{
 		s = s + " "+root.value;
 		count++;
 		if(count<=min)
 		{
 			if(root.children.isEmpty())
 			{
 				list.add(s);
 			}	
 			for(TreeNode child : root.children)
 			{
 				printPath(child, list, s, min, count);
 			}
 		}
 		return;
 	}
}

class TreeNode
{
	String value;
	List<TreeNode> children;

	TreeNode(String value)
	{
		this.value = value;
		this.children = new ArrayList<>();
	}

	public String toString()
	{
		return this.value;
	}
}</pre>