<b>Title: </b>
            330. Patching Array
            <b>Source: </b><a target='_blank' href='https://leetcode.com/problems/patching-array/'>leetcode.com</a><p><section class="action action-btn-set">
<a class="icon-btn btn" href="https://discuss.leetcode.com/category/411" onclick="ga('send', 'event', 'discuss', 'click', 'patching-array');" target="_blank">
<i aria-hidden="true" class="fa fa-commenting-o"></i>Discuss
          </a>
<button class="icon-btn btn" onclick="confirmations.confirm_see_solution(
                    event,
                    '/articles/patching-array/',
                    false
                    );" type="button">
<i aria-hidden="true" class="fa fa-book">
</i><span class="hidden-xs">Editorial </span>Solution
          </button>
<a class="icon-btn pull-right-sm btn" href="/problems/random-one-question/" onclick="ga('send', 'event', 'pick-one-detail', 'click');">
<i aria-hidden="true" class="fa fa-random"></i>Pick One
          </a>
</section><hr class="line dotted">
</hr></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* https://leetcode.com/problems/patching-array/ */

public class PatchingArray
{
	public static void main(String args[])
	{
		PatchingArray p = new PatchingArray();
		int[] nums = {1, 3};
		int n = 6;
		System.out.println(p.minPatches(nums, n));
        nums = new int[]{1, 5, 10};
        n = 20;
        System.out.println(p.minPatches(nums, n));
        nums = new int[]{1, 2, 5, 6, 20};
        n = 50;
        System.out.println(p.minPatches(nums, n));
	}

	public int minPatches(int[] nums, int n) 
	{
        //we can get all number no greater than the maximum number
		int maxReach = nums[0];
        int patch = 0;
        int i = 1;
        while(maxReach < n)
        {
            if(i<nums.length && nums[i]<= maxReach)
            {
                maxReach += nums[i];
                i++;        
            }
            else
            {
                 patch++;
                maxReach += (maxReach+1);
            }
        }
        return patch;
    }
}</pre><br><br><h3>Java solution</h3><pre class="lang:java decode:true ">/* https://leetcode.com/problems/patching-array/ */
import java.util.Map;
import java.util.HashMap;

public class RecurringSequenceinFraction
{
	public static void main(String args[])
	{
		RecurringSequenceinFraction r = new RecurringSequenceinFraction();
		System.out.println(1%3);
		System.out.println(r.fractionToDecimal(10, 3));
		System.out.println(r.fractionToDecimal(1, 3));
		System.out.println(r.fractionToDecimal(50, 22));
		System.out.println(r.fractionToDecimal(2, 4));
		System.out.println(r.fractionToDecimal(1, 7));
		System.out.println(r.fractionToDecimal(-22, -2));
		System.out.println(r.fractionToDecimal(-2147483648, 1));
	}


	public String fractionToDecimal(int numerator, int denominator)
	{
	    long n = numerator;
	    long d = denominator;
	    boolean negative = false;
        if(d==0)
            return null;
        if(n == 0)
            return "0";
        if(n < 0 && d < 0)
        {
        	n *= -1;
      		d *= -1;
        }
        else if(n < 0)
        {
        	//System.out.println("111");
            negative = true;
            n *= -1;
        }
        else if(d < 0)
        {
        	negative = true;
        	d *= -1;
        }
		String result = "";
		if(n > d)
		{
			result += (n/d);
		    if(n%d!=0)
		        result +=".";
		    else if(n%d==0)
		    {
		    	if(negative)
				{
		   		 	result = "-"+result;
				}
				return result;
			}
		}
		else
			result = "0.";
		result+= getDecimalPart(n,d);
		//System.out.println(result);
		if(negative)
		{
		    result = "-"+result;
		}
		return result;

	}

	public String getDecimalPart(long numerator, long denominator)
	{
		Map<Long, Integer> map = new HashMap<>();
		//if numerator is greater than denominator
		long remainder = numerator%denominator;
		String result = "";
		while(remainder!=0 && !map.containsKey(remainder))
		{
			map.put(remainder, result.length());
			remainder = remainder * 10;
			result += (remainder)/denominator;
			remainder = remainder%denominator;
		}
		if(remainder!=0)
		{
			int pos = map.get(remainder);
			result = result.substring(0, pos) + "("+result.substring(pos)+")";
			//System.out.println(result);
		}
		return result;
	}
}</pre>