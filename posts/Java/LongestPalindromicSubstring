<b>Title: </b>Longest Palindromic Substring | Set 1  <b>Source: </b><a target='_blank' href='http://www.geeksforgeeks.org/longest-palindrome-substring-set-1/'>www.geeksforgeeks.org</a><p></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* http://www.geeksforgeeks.org/longest-palindrome-substring-set-1/ */
/* https://leetcode.com/problems/longest-palindromic-substring/ */
import java.util.Arrays;
class LongestPalindromicSubstring
{
	public int longestPalindromicSubstring(String s)
	{
		int l = s.length();
		
		//indicate maximum length of the palindrome found so far
		int maxLength=1;
		
		//dp[i][j] is true if substring is palindrome
		boolean dp[][] = new boolean[l][l];
		for(int i=0;i<l;i++)
			Arrays.fill(dp[i], false);

		// all substring of length 1 are palindrome
		for(int i=0;i<l;i++)
			dp[i][i] = true;

		//starting index of the palindromic substring
		int start = 0;
		//check substring of length 2
		for(int i=0; i<l-1;i++)
		{
			if(s.charAt(i) == s.charAt(i+1))
			{
				dp[i][i+1] = true;
				maxLength = 2;
				start = i;
			}
		}

		//check the substring of length greater than 2
		//i denote the length of the string
		for(int i=3; i<=l; i++)
		{
			//creating window of size i
			for(int j=0;j<l-i+1;j++)
			{
				//ending index of the substring with window size i
				int k = j + i - 1;
				//check the substring from jth index to kth index is palindrome
				//for eg : current window contains geekkeeg
				//we are checking whether the substring eekkee is palindrome 
				if(dp[j+1][k-1]==true && s.charAt(j) == s.charAt(k))
				{
					dp[j][k] =  true;
					if(i > maxLength)
					{
						start = j;
						maxLength = i;
					}
				}
			}
		}
		System.out.println("Longest Palindromic Substring: "+ s.substring(start, start+maxLength));
		return maxLength;
	}

	public String longestPalindrome(String s) 
	{
        boolean dp[][] = new boolean[s.length()][s.length()];

        int maxLength = 1;
        int startIndex = 0;
        //All the substrings of length 1 will be palindrome of length 1
        for(int i=0;i<dp.length;++i)
        {
        	Arrays.fill(dp[i], false);
        }
        for(int i=0;i<dp.length;++i)
        {
        	dp[i][i] = true;
        }
        //All the substring of length 2 are palindrome if first and last character of substring are equal
        for(int i=0;i<dp.length-1;i++)
        {
        	if(s.charAt(i)==s.charAt(i+1))
        	{
        		dp[i][i+1] = true;
        		maxLength = 2;
        		startIndex = i;
        	}
        }

        //check all the substring

        int l = s.length();
        for(int i=3;i<=l;++i)
        {
        	for(int j=0;j<=l-i;++j)
        	{
        		int k = i+j-1;
        		if(dp[j+1][k-1]==true && s.charAt(j)==s.charAt(k))
        		{
        			dp[j][k] = true;
        			if(i>maxLength)
        			{
        				maxLength = i;
        				startIndex = j;
        			}
        		}
        	}
        }
        System.out.println(startIndex + ":"+maxLength);
        return s.substring(startIndex, startIndex + maxLength);
    }


	public static void main(String args[])
	{
		LongestPalindromicSubstring l = new LongestPalindromicSubstring();
		String str = "forgeeksskeegfor";
		System.out.println(l.longestPalindromicSubstring(str));
		System.out.println(l.longestPalindrome("ccc"));
	}
}</pre>