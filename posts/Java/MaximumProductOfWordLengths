<b>Title: </b>
            318. Maximum Product of Word Lengths
            <b>Source: </b><a target='_blank' href='https://leetcode.com/problems/maximum-product-of-word-lengths/'>leetcode.com</a><p><section class="action action-btn-set">
<a class="icon-btn btn" href="https://discuss.leetcode.com/category/398" onclick="ga('send', 'event', 'discuss', 'click', 'maximum-product-of-word-lengths');" target="_blank">
<i aria-hidden="true" class="fa fa-commenting-o"></i>Discuss
          </a>
<button class="icon-btn disabled" data-placement="top" data-toggle="tooltip" title="Not available yet, please check back later." type="button">
<i aria-hidden="true" class="fa fa-book">
</i><span class="hidden-xs">Editorial </span>Solution
          </button>
<a class="icon-btn pull-right-sm btn" href="/problems/random-one-question/" onclick="ga('send', 'event', 'pick-one-detail', 'click');">
<i aria-hidden="true" class="fa fa-random"></i>Pick One
          </a>
</section><hr class="line dotted">
</hr></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* https://leetcode.com/problems/maximum-product-of-word-lengths/ */
import java.util.*;
public class MaximumProductOfWordLengths
{
	public static void main(String args[])
	{
		String[] words = {"abcw", "baz", "foo", "bar", "xtfn", "abcdef"};
		MaximumProductOfWordLengths m = new MaximumProductOfWordLengths();
		System.out.println(m.maxProduct(words));
	}

	public int maxProduct(String[] words) 
	{
        int[] a = new int[words.length];
        for(int i=0;i<words.length;++i)
        {
        	for(char c : words[i].toCharArray())
        	{
        		//'or'ing the ascii value of all the characters
        		//storing it in array 
        		a[i] |= 1<<(c-'a');
        	}
        }

        System.out.println(Arrays.toString(a));
        int maxProduct = 0;
        for(int i = 0;i<a.length-1;++i)
        {
        	for(int j = i+1;j<a.length;++j)
        	{
        		if((a[i]&a[j])==0)
        		{
        			maxProduct = Math.max(maxProduct, words[i].length() * words[j].length());
        		}
        	}
        }
        return maxProduct;
    }
}</pre>