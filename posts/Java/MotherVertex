<b>Title: </b>Find a Mother Vertex in a Graph  <b>Source: </b><a target='_blank' href='http://www.geeksforgeeks.org/find-a-mother-vertex-in-a-graph/'>www.geeksforgeeks.org</a><p><p><strong>What is a Mother Vertex?</strong><br/>
A mother vertex in a graph G = (V,E) is a vertex v such that all other vertices in G can be reached by a path from v.</p></p>

<h3>Java solution</h3><pre class="lang:java decode:true ">/* http://www.geeksforgeeks.org/find-a-mother-vertex-in-a-graph/ */
import java.util.*;
public class MotherVertex
{
	public static void main(String args[])
	{
		Graph g = new Graph();
    	g.addEdge(0, 1);
    	g.addEdge(0, 2);
    	g.addEdge(1, 3);
    	g.addEdge(4, 1);
    	g.addEdge(6, 4);
    	g.addEdge(5, 6);
    	g.addEdge(5, 2);
    	g.addEdge(6, 0);
    	System.out.println(g.map);
	}

	public int dfs(Graph g)
	{
		boolean[] visited = new boolean[g.map.size()];
		int v = 0;
		for(int i=0;i<g.map.size();i++)
		{
			if(g.map.containsKey(i))
			{
				if(!visited[i])
				{
					dfsUtil(i);
					v = i;
				}
			}
		}
		return v;
	}

	public int dfsUtil(Graph g, int node, boolean[] visited)
	{
		visited[node] = true;
		ArrayList<Integer> adjacent = g.map.get(node);
		for(int i=0;i<adjacent.size();++i)
		{
			int temp = adjacent.get(i);
			if(!visited[temp])
				dfsUtil(g, temp, visited);
		}
	}
}

class Graph
{
	HashMap<Integer, ArrayList<Integer>> map;
	Graph()
	{
		this.map = new HashMap<>(); 
	}

	public void addEdge(int a, int b)
	{
		if(!map.containsKey(a))
		{
			map.put(a, new ArrayList<>());
		}
		map.get(a).add(b);
	}
}</pre>