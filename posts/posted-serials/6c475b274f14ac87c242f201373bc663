ccopy_reg
_reconstructor
p0
(cpost
Post
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'post_file'
p6
S'/Users/anupamjain/code/gitRepo/GitToPost/posts/Java/DeleteDuplicateFromUnsortedList'
p7
sS'files_covered'
p8
c__builtin__
set
p9
((lp10
S'/Users/anupamjain/code/gitRepo/Questions/Algo/Java/DeleteDuplicateFromUnsortedList.java'
p11
atp12
Rp13
sS'title'
p14
VRemove duplicates from an unsorted linked list
p15
sS'file_name'
p16
g11
sS'link'
p17
S'http://www.geeksforgeeks.org/remove-duplicates-from-an-unsorted-linked-list/'
p18
sS'host_name'
p19
S'www.geeksforgeeks.org'
p20
sS'problem_text'
p21
g0
(cbs4.element
Tag
p22
g2
Ntp23
Rp24
(dp25
S'can_be_empty_element'
p26
I00
sS'previous_element'
p27
NsS'next_sibling'
p28
NsS'name'
p29
S'p'
p30
sS'parent'
p31
NsS'namespace'
p32
NsS'prefix'
p33
NsS'previous_sibling'
p34
NsS'attrs'
p35
(dp36
sS'next_element'
p37
g0
(g22
g2
Ntp38
Rp39
(dp40
g26
I00
sg27
g24
sg28
g0
(g22
g2
Ntp41
Rp42
(dp43
g26
I00
sg27
g0
(g22
g2
Ntp44
Rp45
(dp46
g26
I00
sg27
g0
(cbs4.element
NavigableString
p47
c__builtin__
unicode
p48
VWrite a removeDuplicates() function which takes a list and deletes any duplicate nodes from the list. The list is not sorted. 
p49
tp50
Rp51
(dp52
g34
Nsg27
g39
sg28
g45
sg37
g45
sg31
g39
sbsg28
Nsg29
Vspan
p53
sg31
g39
sg32
Nsg33
Nsg34
g51
sg35
(dp54
Vid
p55
Vmore-5036
p56
ssg37
g42
sS'parser_class'
p57
cbs4
BeautifulSoup
p58
sS'hidden'
p59
I00
sS'contents'
p60
(lp61
sbsg28
g0
(g22
g2
Ntp62
Rp63
(dp64
g26
I00
sg27
g0
(g47
g48
VFor example if the linked list is 12->11->12->21->41->43->21 then removeDuplicates() should convert the list to 12->11->21->41->43. 
p65
tp66
Rp67
(dp68
g34
Nsg27
g42
sg28
Nsg37
g63
sg31
g42
sbsg28
g0
(g22
g2
Ntp69
Rp70
(dp71
g26
I00
sg27
g0
(g47
g48
V\u000aThis is the simple way where two loops are used. Outer loop is used to pick the elements one by one and inner loop compares the picked element with rest of the elements.  
p72
tp73
Rp74
(dp75
g34
g0
(g22
g2
Ntp76
Rp77
(dp78
g26
I01
sg27
g0
(g47
g48
VMETHOD 1 (Using two loops)
p79
tp80
Rp81
(dp82
g34
Nsg27
g0
(g22
g2
Ntp83
Rp84
(dp85
g26
I00
sg27
g63
sg28
g77
sg29
Vstrong
p86
sg31
g63
sg32
Nsg33
Nsg34
Nsg35
(dp87
sg37
g81
sg57
g58
sg59
I00
sg60
(lp88
g81
asbsg28
Nsg37
g77
sg31
g84
sbsg28
g74
sg29
Vbr
p89
sg31
g63
sg32
Nsg33
Nsg34
g84
sg35
(dp90
sg37
g74
sg57
g58
sg59
I00
sg60
(lp91
sbsg27
g77
sg28
Nsg37
g70
sg31
g63
sbsg28
g0
(g22
g2
Ntp92
Rp93
(dp94
g26
I00
sg27
g0
(g47
g48
VThanks to Gaurav Saxena for his help in writing this code.
p95
tp96
Rp97
(dp98
g34
Nsg27
g70
sg28
Nsg37
g93
sg31
g70
sbsg28
g0
(g22
g2
Ntp99
Rp100
(dp101
g26
I00
sg27
g0
(g47
g48
V\u000a
p102
tp103
Rp104
(dp105
g34
g0
(g22
g2
Ntp106
Rp107
(dp108
g26
I00
sg27
g0
(g47
g48
V\u000a
p109
tp110
Rp111
(dp112
g34
Nsg27
g0
(g22
g2
Ntp113
Rp114
(dp115
g26
I00
sg27
g0
(g47
g48
V\u000a
p116
tp117
Rp118
(dp119
g34
g0
(g22
g2
Ntp120
Rp121
(dp122
g26
I00
sg27
g0
(g47
g48
V\u000a
p123
tp124
Rp125
(dp126
g34
g0
(g22
g2
Ntp127
Rp128
(dp129
g26
I00
sg27
g0
(g47
g48
V\u000a
p130
tp131
Rp132
(dp133
g34
Nsg27
g0
(g22
g2
Ntp134
Rp135
(dp136
g26
I00
sg27
g0
(g47
g48
V\u000a
p137
tp138
Rp139
(dp140
g34
g0
(g22
g2
Ntp141
Rp142
(dp143
g26
I00
sg27
g0
(g47
g48
V\u000a
p144
tp145
Rp146
(dp147
g34
Nsg27
g93
sg28
g142
sg37
g142
sg31
g93
sbsg28
g139
sg29
Vh2
p148
sg31
g93
sg32
Nsg33
Nsg34
g146
sg35
(dp149
Vclass
p150
(lp151
Vtabtitle
p152
assg37
g0
(g47
g48
VC
p153
tp154
Rp155
(dp156
g34
Nsg27
g142
sg28
Nsg37
g139
sg31
g142
sbsg57
g58
sg59
I00
sg60
(lp157
g155
asbsg27
g155
sg28
g135
sg37
g135
sg31
g93
sbsg28
g121
sg29
Vdiv
p158
sg31
g93
sg32
Nsg33
Nsg34
g139
sg35
(dp159
Vclass
p160
(lp161
Vtabcontent
p162
assg37
g132
sg57
g58
sg59
I00
sg60
(lp163
g132
ag128
ag125
asbsg28
g128
sg37
g128
sg31
g135
sbsg28
g125
sg29
Vpre
p164
sg31
g135
sg32
Nsg33
Nsg34
g132
sg35
(dp165
Vclass
p166
(lp167
Vbrush:
p168
aVcpp;
p169
aVtitle:
p170
aV;
p171
aVnotranslate
p172
asVtitle
p173
V
p174
ssg37
g0
(g47
g48
V\u000a/* Program to remove duplicates in an unsorted array */\u000a\u000a#include<stdio.h>\u000a#include<stdlib.h>\u000a\u000a/* A linked list node */\u000astruct node\u000a{\u000a int data;\u000a struct node *next;\u000a};\u000a\u000a/* Function to remove duplicates from a unsorted linked list */\u000avoid removeDuplicates(struct node *start)\u000a{\u000a  struct node *ptr1, *ptr2, *dup;\u000a  ptr1 = start;\u000a\u000a  /* Pick elements one by one */\u000a  while(ptr1 != NULL && ptr1->next != NULL)\u000a  {\u000a     ptr2 = ptr1;\u000a\u000a     /* Compare the picked element with rest of the elements */\u000a     while(ptr2->next != NULL)\u000a     {\u000a       /* If duplicate then delete it */\u000a       if(ptr1->data == ptr2->next->data)\u000a       {\u000a          /* sequence of steps is important here */\u000a          dup = ptr2->next;\u000a          ptr2->next = ptr2->next->next;\u000a          free(dup);\u000a       }\u000a       else /* This is tricky */\u000a       {\u000a          ptr2 = ptr2->next;\u000a       }\u000a     }\u000a     ptr1 = ptr1->next;\u000a  }\u000a}\u000a\u000a/* UTILITY FUNCTIONS */\u000a/* Function to push a node */\u000avoid push(struct node** head_ref, int new_data);\u000a\u000a/* Function to print nodes in a given linked list */\u000avoid printList(struct node *node);\u000a\u000a/* Druver program to test above function */\u000aint main()\u000a{\u000a  struct node *start = NULL;\u000a\u000a  /* The constructed linked list is:\u000a   10->12->11->11->12->11->10*/\u000a  push(&start, 10);\u000a  push(&start, 11);\u000a  push(&start, 12);\u000a  push(&start, 11);\u000a  push(&start, 11);\u000a  push(&start, 12);\u000a  push(&start, 10);\u000a\u000a  printf("\u005cn Linked list before removing duplicates ");\u000a  printList(start);\u000a\u000a  removeDuplicates(start);\u000a\u000a  printf("\u005cn Linked list after removing duplicates ");\u000a  printList(start);\u000a\u000a  getchar();\u000a}\u000a\u000a/* Function to push a node */\u000avoid push(struct node** head_ref, int new_data)\u000a{\u000a  /* allocate node */\u000a  struct node* new_node =\u000a            (struct node*) malloc(sizeof(struct node));\u000a\u000a  /* put in the data  */\u000a  new_node->data  = new_data;\u000a\u000a  /* link the old list off the new node */\u000a  new_node->next = (*head_ref);\u000a\u000a  /* move the head to point to the new node */\u000a  (*head_ref)    = new_node;\u000a}\u000a\u000a/* Function to print nodes in a given linked list */\u000avoid printList(struct node *node)\u000a{\u000a  while(node != NULL)\u000a  {\u000a    printf("%d ", node->data);\u000a    node = node->next;\u000a  }\u000a}\u000a
p175
tp176
Rp177
(dp178
g34
Nsg27
g128
sg28
Nsg37
g125
sg31
g128
sbsg57
g58
sg59
I00
sg60
(lp179
g177
asbsg27
g177
sg28
Nsg37
g121
sg31
g135
sbsg28
g118
sg29
Vh2
p180
sg31
g93
sg32
Nsg33
Nsg34
g135
sg35
(dp181
Vclass
p182
(lp183
Vtabtitle
p184
assg37
g0
(g47
g48
VJava
p185
tp186
Rp187
(dp188
g34
Nsg27
g121
sg28
Nsg37
g118
sg31
g121
sbsg57
g58
sg59
I00
sg60
(lp189
g187
asbsg27
g187
sg28
g114
sg37
g114
sg31
g93
sbsg28
Nsg29
Vdiv
p190
sg31
g93
sg32
Nsg33
Nsg34
g118
sg35
(dp191
Vclass
p192
(lp193
Vtabcontent
p194
assg37
g111
sg57
g58
sg59
I00
sg60
(lp195
g111
ag107
ag104
asbsg28
g107
sg37
g107
sg31
g114
sbsg28
g104
sg29
Vpre
p196
sg31
g114
sg32
Nsg33
Nsg34
g111
sg35
(dp197
Vclass
p198
(lp199
Vbrush:
p200
aVjava;
p201
aVtitle:
p202
ag171
aVnotranslate
p203
asVtitle
p204
g174
ssg37
g0
(g47
g48
V\u000a// Java program to remove duplicates from unsorted linked list\u000a\u000aclass LinkedList {\u000a\u000a    static Node head;\u000a\u000a    static class Node {\u000a\u000a        int data;\u000a        Node next;\u000a\u000a        Node(int d) {\u000a            data = d;\u000a            next = null;\u000a        }\u000a    }\u000a\u000a    /* Function to remove duplicates from a unsorted linked list */\u000a    void remove_duplicates() {\u000a        Node ptr1 = null, ptr2 = null, dup = null;\u000a        ptr1 = head;\u000a\u000a        /* Pick elements one by one */\u000a        while (ptr1 != null && ptr1.next != null) {\u000a            ptr2 = ptr1;\u000a\u000a            /* Compare the picked element with rest of the elements */\u000a            while (ptr2.next != null) {\u000a\u000a                /* If duplicate then delete it */\u000a                if (ptr1.data == ptr2.next.data) {\u000a\u000a                    /* sequence of steps is important here */\u000a                    dup = ptr2.next;\u000a                    ptr2.next = ptr2.next.next;\u000a                    System.gc();\u000a                } else /* This is tricky */ {\u000a                    ptr2 = ptr2.next;\u000a                }\u000a            }\u000a            ptr1 = ptr1.next;\u000a        }\u000a    }\u000a\u000a    void printList(Node node) {\u000a        while (node != null) {\u000a            System.out.print(node.data + " ");\u000a            node = node.next;\u000a        }\u000a    }\u000a\u000a    public static void main(String[] args) {\u000a        LinkedList list = new LinkedList();\u000a        list.head = new Node(10);\u000a        list.head.next = new Node(12);\u000a        list.head.next.next = new Node(11);\u000a        list.head.next.next.next = new Node(11);\u000a        list.head.next.next.next.next = new Node(12);\u000a        list.head.next.next.next.next.next = new Node(11);\u000a        list.head.next.next.next.next.next.next = new Node(10);\u000a\u000a        System.out.println("Linked List before removing duplicates ");\u000a        list.printList(head);\u000a\u000a        list.remove_duplicates();\u000a        System.out.println("");\u000a        System.out.println("Linked List after removing duplicates");\u000a        list.printList(head);\u000a\u000a    }\u000a}\u000a\u000a// This code has been contributed by Mayank Jaiswal\u000a
p205
tp206
Rp207
(dp208
g34
Nsg27
g107
sg28
Nsg37
g104
sg31
g107
sbsg57
g58
sg59
I00
sg60
(lp209
g207
asbsg27
g207
sg28
Nsg37
g100
sg31
g114
sbsg28
g0
(g22
g2
Ntp210
Rp211
(dp212
g26
I00
sg27
g0
(g47
g48
VTime Complexity: O(n^2)
p213
tp214
Rp215
(dp216
g34
Nsg27
g100
sg28
Nsg37
g211
sg31
g100
sbsg28
g0
(g22
g2
Ntp217
Rp218
(dp219
g26
I00
sg27
g0
(g47
g48
V\u000a
p220
tp221
Rp222
(dp223
g34
g0
(g22
g2
Ntp224
Rp225
(dp226
g26
I01
sg27
g0
(g47
g48
Valgorithm for removing duplicates in sorted Linked List. O(n)
p227
tp228
Rp229
(dp230
g34
Nsg27
g0
(g22
g2
Ntp231
Rp232
(dp233
g26
I00
sg27
g0
(g47
g48
V\u000a2)	Remove duplicates in linear time using the 
p234
tp235
Rp236
(dp237
g34
g0
(g22
g2
Ntp238
Rp239
(dp240
g26
I01
sg27
g0
(g47
g48
V\u000a1)	Sort the elements using Merge Sort.  We will soon be writing a post about sorting a linked list.  O(nLogn)
p241
tp242
Rp243
(dp244
g34
g0
(g22
g2
Ntp245
Rp246
(dp247
g26
I01
sg27
g0
(g47
g48
V\u000aIn general, Merge Sort is the best suited sorting algorithm for sorting linked lists efficiently.
p248
tp249
Rp250
(dp251
g34
g0
(g22
g2
Ntp252
Rp253
(dp254
g26
I01
sg27
g0
(g47
g48
VMETHOD 2 (Use Sorting)
p255
tp256
Rp257
(dp258
g34
Nsg27
g0
(g22
g2
Ntp259
Rp260
(dp261
g26
I00
sg27
g211
sg28
g253
sg29
Vstrong
p262
sg31
g211
sg32
Nsg33
Nsg34
Nsg35
(dp263
sg37
g257
sg57
g58
sg59
I00
sg60
(lp264
g257
asbsg28
Nsg37
g253
sg31
g260
sbsg28
g250
sg29
Vbr
p265
sg31
g211
sg32
Nsg33
Nsg34
g260
sg35
(dp266
sg37
g250
sg57
g58
sg59
I00
sg60
(lp267
sbsg27
g253
sg28
g246
sg37
g246
sg31
g211
sbsg28
g243
sg29
Vbr
p268
sg31
g211
sg32
Nsg33
Nsg34
g250
sg35
(dp269
sg37
g243
sg57
g58
sg59
I00
sg60
(lp270
sbsg27
g246
sg28
g239
sg37
g239
sg31
g211
sbsg28
g236
sg29
Vbr
p271
sg31
g211
sg32
Nsg33
Nsg34
g243
sg35
(dp272
sg37
g236
sg57
g58
sg59
I00
sg60
(lp273
sbsg27
g239
sg28
g232
sg37
g232
sg31
g211
sbsg28
Nsg29
Va
p274
sg31
g211
sg32
Nsg33
Nsg34
g236
sg35
(dp275
Vhref
p276
Vhttp://geeksforgeeks.org/?p=5075
p277
ssg37
g229
sg57
g58
sg59
I00
sg60
(lp278
g229
ag225
ag222
asbsg28
g225
sg37
g225
sg31
g232
sbsg28
g222
sg29
Vbr
p279
sg31
g232
sg32
Nsg33
Nsg34
g229
sg35
(dp280
sg37
g222
sg57
g58
sg59
I00
sg60
(lp281
sbsg27
g225
sg28
Nsg37
g218
sg31
g232
sbsg28
g0
(g22
g2
Ntp282
Rp283
(dp284
g26
I00
sg27
g0
(g47
g48
VPlease note that this method doesn\u2019t preserve the original order of elements.
p285
tp286
Rp287
(dp288
g34
Nsg27
g218
sg28
Nsg37
g283
sg31
g218
sbsg28
g0
(g22
g2
Ntp289
Rp290
(dp291
g26
I00
sg27
g0
(g47
g48
VTime Complexity: O(nLogn)
p292
tp293
Rp294
(dp295
g34
Nsg27
g283
sg28
Nsg37
g290
sg31
g283
sbsg28
g0
(g22
g2
Ntp296
Rp297
(dp298
g26
I00
sg27
g0
(g47
g48
V\u000aWe traverse the link list from head to end.  For every newly encountered element, we check whether it is in the hash table: if yes, we remove it; otherwise we put it in the hash table.
p299
tp300
Rp301
(dp302
g34
g0
(g22
g2
Ntp303
Rp304
(dp305
g26
I01
sg27
g0
(g47
g48
VMETHOD 3 (Use Hashing)
p306
tp307
Rp308
(dp309
g34
Nsg27
g0
(g22
g2
Ntp310
Rp311
(dp312
g26
I00
sg27
g290
sg28
g304
sg29
Vstrong
p313
sg31
g290
sg32
Nsg33
Nsg34
Nsg35
(dp314
sg37
g308
sg57
g58
sg59
I00
sg60
(lp315
g308
asbsg28
Nsg37
g304
sg31
g311
sbsg28
g301
sg29
Vbr
p316
sg31
g290
sg32
Nsg33
Nsg34
g311
sg35
(dp317
sg37
g301
sg57
g58
sg59
I00
sg60
(lp318
sbsg27
g304
sg28
Nsg37
g297
sg31
g290
sbsg28
g0
(g22
g2
Ntp319
Rp320
(dp321
g26
I00
sg27
g0
(g47
g48
VThanks to bearwang  for suggesting this method.
p322
tp323
Rp324
(dp325
g34
Nsg27
g297
sg28
Nsg37
g320
sg31
g297
sbsg28
g0
(g22
g2
Ntp326
Rp327
(dp328
g26
I00
sg27
g0
(g47
g48
VTime Complexity:  O(n) on average (assuming that hash table access time is O(1) on average).  
p329
tp330
Rp331
(dp332
g34
Nsg27
g320
sg28
Nsg37
g327
sg31
g320
sbsg28
Nsg29
Vp
p333
sg31
g24
sg32
Nsg33
Nsg34
g320
sg35
(dp334
sg37
Nsg57
g58
sg59
I00
sg60
(lp335
sbsg29
g333
sg31
g24
sg32
Nsg33
Nsg34
g297
sg35
(dp336
sg37
g331
sg57
g58
sg59
I00
sg60
(lp337
g331
asbsg29
g333
sg31
g24
sg32
Nsg33
Nsg34
g290
sg35
(dp338
sg37
g324
sg57
g58
sg59
I00
sg60
(lp339
g324
asbsg29
g333
sg31
g24
sg32
Nsg33
Nsg34
g283
sg35
(dp340
sg37
g311
sg57
g58
sg59
I00
sg60
(lp341
g311
ag304
ag301
asbsg29
g333
sg31
g24
sg32
Nsg33
Nsg34
g218
sg35
(dp342
sg37
g294
sg57
g58
sg59
I00
sg60
(lp343
g294
asbsg29
g333
sg31
g24
sg32
Nsg33
Nsg34
g211
sg35
(dp344
sg37
g287
sg57
g58
sg59
I00
sg60
(lp345
g287
asbsg29
g333
sg31
g24
sg32
Nsg33
Nsg34
g100
sg35
(dp346
sg37
g260
sg57
g58
sg59
I00
sg60
(lp347
g260
ag253
ag250
ag246
ag243
ag239
ag236
ag232
asbsg29
g333
sg31
g24
sg32
Nsg33
Nsg34
g93
sg35
(dp348
sg37
g215
sg57
g58
sg59
I00
sg60
(lp349
g215
asbsg29
Vdiv
p350
sg31
g24
sg32
Nsg33
Nsg34
g70
sg35
(dp351
Vclass
p352
(lp353
Vresponsive-tabs
p354
assg37
g146
sg57
g58
sg59
I00
sg60
(lp355
g146
ag142
ag139
ag135
ag121
ag118
ag114
asbsg29
g333
sg31
g24
sg32
Nsg33
Nsg34
g63
sg35
(dp356
sg37
g97
sg57
g58
sg59
I00
sg60
(lp357
g97
asbsg29
g333
sg31
g24
sg32
Nsg33
Nsg34
g42
sg35
(dp358
sg37
g84
sg57
g58
sg59
I00
sg60
(lp359
g84
ag77
ag74
asbsg29
g333
sg31
g24
sg32
Nsg33
Nsg34
g39
sg35
(dp360
sg37
g67
sg57
g58
sg59
I00
sg60
(lp361
g67
asbsg29
g333
sg31
g24
sg32
Nsg33
Nsg34
Nsg35
(dp362
sg37
g51
sg57
g58
sg59
I00
sg60
(lp363
g51
ag45
asbsg57
Nsg59
I00
sg60
(lp364
g39
ag42
ag63
ag70
ag93
ag100
ag211
ag218
ag283
ag290
ag297
ag320
ag327
asbsS'raw_page'
p365
S'<!DOCTYPE html>\r\n<!--[if IE 7]>\r\n<html class="ie ie7" lang="en-US" prefix="og: http://ogp.me/ns#">\r\n<![endif]-->\r\n<!--[if IE 8]>\r\n<html class="ie ie8" lang="en-US" prefix="og: http://ogp.me/ns#">\r\n<![endif]-->\r\n<!--[if !(IE 7) | !(IE 8)  ]><!-->\r\n<html lang="en-US" prefix="og: http://ogp.me/ns#">\r\n<!--<![endif]-->\r\n<head>\r\n<meta charset="UTF-8" />\r\n<meta name="viewport" content="width=device-width" />\r\n\r\n<meta property="og:image" content="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/gfg_200X200.png">\r\n<meta property="og:image:type" content="image/png">\r\n<meta property="og:image:width" content="200">\r\n<meta property="og:image:height" content="200">\r\n\r\n<title>Remove duplicates from an unsorted linked list - GeeksforGeeks</title>\r\n<link rel="profile" href="http://gmpg.org/xfn/11" />\r\n<link rel="pingback" href="http://www.geeksforgeeks.org/xmlrpc.php" />\r\n<!--[if lt IE 9]>\r\n<script src="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/js/html5.js" type="text/javascript"></script>\r\n<![endif]-->\r\n\n<!-- This site is optimized with the Yoast SEO plugin v3.0.7 - https://yoast.com/wordpress/plugins/seo/ -->\n<link rel="canonical" href="http://www.geeksforgeeks.org/remove-duplicates-from-an-unsorted-linked-list/" />\n<meta property="og:locale" content="en_US" />\n<meta property="og:type" content="article" />\n<meta property="og:title" content="Remove duplicates from an unsorted linked list - GeeksforGeeks" />\n<meta property="og:description" content="Write a removeDuplicates() function which takes a list and deletes any duplicate nodes from the list. The list is not sorted. For example if the linked list is 12-&gt;11-&gt;12-&gt;21-&gt;41-&gt;43-&gt;21 then removeDuplicates() should convert the list to 12-&gt;11-&gt;21-&gt;41-&gt;43. METHOD 1 (Using two loops) This is the simple way where two loops are used. Outer loop is\xe2\x80\xa6 Read More &raquo;" />\n<meta property="og:url" content="http://www.geeksforgeeks.org/remove-duplicates-from-an-unsorted-linked-list/" />\n<meta property="og:site_name" content="GeeksforGeeks" />\n<meta property="article:section" content="Linked Lists" />\n<meta property="article:published_time" content="2010-02-24T21:08:53+00:00" />\n<meta property="article:modified_time" content="2016-01-14T10:13:50+00:00" />\n<meta property="og:updated_time" content="2016-01-14T10:13:50+00:00" />\n<!-- / Yoast SEO plugin. -->\n\n\t\t<script type="text/javascript">\n\t\t\twindow._wpemojiSettings = {"baseUrl":"http:\\/\\/s.w.org\\/images\\/core\\/emoji\\/72x72\\/","ext":".png","source":{"concatemoji":"http:\\/\\/www.geeksforgeeks.org\\/wp-includes\\/js\\/wp-emoji-release.min.js"}};\n\t\t\t!function(a,b,c){function d(a){var c=b.createElement("canvas"),d=c.getContext&&c.getContext("2d");return d&&d.fillText?(d.textBaseline="top",d.font="600 32px Arial","flag"===a?(d.fillText(String.fromCharCode(55356,56812,55356,56807),0,0),c.toDataURL().length>3e3):(d.fillText(String.fromCharCode(55357,56835),0,0),0!==d.getImageData(16,16,1,1).data[0])):!1}function e(a){var c=b.createElement("script");c.src=a,c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f,g;c.supports={simple:d("simple"),flag:d("flag")},c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.simple&&c.supports.flag||(g=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",g,!1),a.addEventListener("load",g,!1)):(a.attachEvent("onload",g),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&&f.twemoji&&(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);\n\t\t</script>\n\t\t<style type="text/css">\nimg.wp-smiley,\nimg.emoji {\n\tdisplay: inline !important;\n\tborder: none !important;\n\tbox-shadow: none !important;\n\theight: 1em !important;\n\twidth: 1em !important;\n\tmargin: 0 .07em !important;\n\tvertical-align: -0.1em !important;\n\tbackground: none !important;\n\tpadding: 0 !important;\n}\n</style>\n<link rel=\'stylesheet\' id=\'wp-pagenavi-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/wp-pagenavi/pagenavi-css.css\' type=\'text/css\' media=\'all\' />\n<link rel=\'stylesheet\' id=\'themonic-fonts-css\'  href=\'http://fonts.googleapis.com/css?family=Ubuntu:400,700&#038;subset=latin,latin-ext\' type=\'text/css\' media=\'all\' />\n<link rel=\'stylesheet\' id=\'themonic-style-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/style.css\' type=\'text/css\' media=\'all\' />\n<link rel=\'stylesheet\' id=\'custom-style-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/custom.css\' type=\'text/css\' media=\'all\' />\n<!--[if lt IE 9]>\n<link rel=\'stylesheet\' id=\'themonic-ie-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/css/ie.css\' type=\'text/css\' media=\'all\' />\n<![endif]-->\n<meta name="generator" content="WordPress 4.2.7" />\n<style type="text/css" id="custom-background-css">\nbody.custom-background { background-color: #ffffff; }\n</style>\n<style type="text/css" id="syntaxhighlighteranchor"></style>\n<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<script>\r\n  (adsbygoogle = window.adsbygoogle || []).push({\r\n    google_ad_client: "ca-pub-9465609616171866",\r\n    enable_page_level_ads: true\r\n  });\r\n</script>\r\n</head>\r\n<body class="single single-post postid-5036 single-format-standard custom-background custom-background-white custom-font-enabled">\r\n<div id="page" class="hfeed site">\r\n\t<header id="masthead" class="site-header" role="banner">\r\n\t\t\t\t\t<hgroup>\r\n\t\t\t<a href="http://www.geeksforgeeks.org/" title="GeeksforGeeks" rel="home">GeeksforGeeks</a>\r\n\t\t\t\t<br .../> <a class="site-description">A computer science portal for geeks</a>\r\n\t\t</hgroup>\r\n\r\n<div style="float:right;">\r\n<hgroup style="float:right;">   \r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://www.geeksforgeeks.org/campus-ambassador-program-by-geeksforgeeks/">CA</a>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://geeksquiz.com/gate-corner-2/">GATE CS</a>\r\n\r\n<strong><a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://practice.geeksforgeeks.org/">Practice</a></strong>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://www.geeksforgeeks.org/suggest/">Suggest</a>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://code.geeksforgeeks.org/">IDE</a>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://qa.geeksforgeeks.org/">Q&A</a>\r\n\r\n<a style="padding:0px 30px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://geeksquiz.com/">GeeksQuiz</a>\r\n\r\n</hgroup><br></br>\r\n\r\n<span style="display:inline-block; width:300px;float:right;">\r\n<script>\r\n  (function() {\r\n    var cx = \'009682134359037907028:tj6eafkv_be\';\r\n    var gcse = document.createElement(\'script\');\r\n    gcse.type = \'text/javascript\';\r\n    gcse.async = true;\r\n    gcse.src = (document.location.protocol == \'https:\' ? \'https:\' : \'http:\') +\r\n        \'//cse.google.com/cse.js?cx=\' + cx;\r\n    var s = document.getElementsByTagName(\'script\')[0];\r\n    s.parentNode.insertBefore(gcse, s);\r\n  })();\r\n</script>\r\n<gcse:search></gcse:search>\r\n\r\n<style type="text/css">\r\n  .gsc-control-cse {\r\n     padding: 0px 10px;\r\n  } \r\n\r\n  .gsc-control-cse {\r\n    font-family: "Trebuchet MS", sans-serif;\r\n    /*border-color: #E1F3DA;*/\r\n    /*background-color: #E1F3DA;*/\r\n  }\r\n  input.gsc-input {\r\n    border-color: #94CC7A;\r\n  }\r\n  input.gsc-search-button {\r\n    border-color: #94CC7A;\r\n    background-color: #4CB96B;\r\n    margin-top:7px;\r\n  }\r\n  .gsc-tabHeader.gsc-tabhInactive {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gsc-tabHeader.gsc-tabhActive {\r\n    border-color: #A9DA92;\r\n    background-color: #A9DA92;\r\n  }\r\n  .gsc-tabsArea {\r\n    border-color: #A9DA92;\r\n  }\r\n  .gsc-webResult.gsc-result {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gsc-webResult.gsc-result:hover {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:link,\r\n  .gs-webResult.gs-result a.gs-title:link b {\r\n    color: #009900;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:visited,\r\n  .gs-webResult.gs-result a.gs-title:visited b {\r\n    color: #009900;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:hover,\r\n  .gs-webResult.gs-result a.gs-title:hover b {\r\n    color: #003300;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:active,\r\n  .gs-webResult.gs-result a.gs-title:active b {\r\n    color: #009900;\r\n  }\r\n  .gsc-cursor-page {\r\n    color: #009900;\r\n  }\r\n  a.gsc-trailing-more-results:link {\r\n    color: #009900;\r\n  }\r\n  .gs-webResult.gs-result .gs-snippet {\r\n    color: #454545;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl {\r\n    color: #33cc00;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl-short {\r\n    color: #33cc00;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl-short {\r\n    display: none;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl-long {\r\n    display: block;\r\n  }\r\n  .gsc-cursor-box {\r\n    border-color: #A9DA92;\r\n  }\r\n  .gsc-results .gsc-cursor-page {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {\r\n    border-color: #A9DA92;\r\n    background-color: #A9DA92;\r\n  }\r\n  .gs-promotion.gs-result {\r\n    border-color: #94CC7A;\r\n    background-color: #CBE8B4;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:link {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:visited {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:hover {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:active {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result .gs-snippet {\r\n    color: #454545;\r\n  }\r\n  .gs-promotion.gs-result .gs-visibleUrl,\r\n  .gs-promotion.gs-result .gs-visibleUrl-short {\r\n    color: #815FA7;\r\n  }\r\n  .gsib_a {\r\n    padding : 2px;\r\n  }\r\n</style>    \r\n</span>\r\n</div>\r\n\r\n\t\t\r\n\t\t\r\n\t\t<nav id="site-navigation" class="themonic-nav" role="navigation">\r\n\t\t\t<a class="assistive-text" href="#content" title="Skip to content">Skip to content</a>\r\n\t\t\t<div class="menu-iconic-container"><ul id="menu-top" class="nav-menu"><li id="menu-item-135003" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-135003"><a href="http://www.geeksforgeeks.org/">Home</a></li>\n<li id="menu-item-135004" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-135004"><a title="Algorithms" href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algo</a>\n<ul class="sub-menu">\n\t<li id="menu-item-135030" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135030"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#AnalysisofAlgorithms">Analysis of Algorithms</a></li>\n\t<li id="menu-item-135031" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135031"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#SearchingandSorting">Searching and Sorting</a></li>\n\t<li id="menu-item-135032" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135032"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#GreedyAlgorithms">Greedy Algorithms</a></li>\n\t<li id="menu-item-135033" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135033"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#DynamicProgramming">Dynamic Programming</a></li>\n\t<li id="menu-item-135034" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135034"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#PatternSearching">Pattern Searching</a></li>\n\t<li id="menu-item-135035" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135035"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#OtherStringAlgorithms">Other String Algorithms</a></li>\n\t<li id="menu-item-135036" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135036"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#Backtracking">Backtracking</a></li>\n\t<li id="menu-item-135037" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135037"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#DivideandConquer">Divide and Conquer</a></li>\n\t<li id="menu-item-135038" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135038"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#GeometricAlgorithms">Geometric Algorithms</a></li>\n\t<li id="menu-item-135039" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135039"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#MathematicalAlgorithms">Mathematical Algorithms</a></li>\n\t<li id="menu-item-135040" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135040"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#BitAlgorithms">Bit Algorithms</a></li>\n\t<li id="menu-item-135041" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135041"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#GraphAlgorithms">Graph Algorithms</a></li>\n\t<li id="menu-item-135042" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135042"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#RandomizedAlgorithms">Randomized Algorithms</a></li>\n</ul>\n</li>\n<li id="menu-item-135010" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-135010"><a title="Data Structures" href="http://www.geeksforgeeks.org/data-structures/">DS</a>\n<ul class="sub-menu">\n\t<li id="menu-item-135045" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135045"><a href="http://www.geeksforgeeks.org/data-structures/#LinkedList">LinkedList</a></li>\n\t<li id="menu-item-135046" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135046"><a href="http://www.geeksforgeeks.org/data-structures/#Stack">Stack</a></li>\n\t<li id="menu-item-135047" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135047"><a href="http://www.geeksforgeeks.org/data-structures/#Queue">Queue</a></li>\n\t<li id="menu-item-135048" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135048"><a href="http://www.geeksforgeeks.org/data-structures/#BinaryTree">Binary Tree</a></li>\n\t<li id="menu-item-135049" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135049"><a href="http://www.geeksforgeeks.org/data-structures/#BinarySearchTree">Binary Search Tree</a></li>\n\t<li id="menu-item-135050" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135050"><a href="http://www.geeksforgeeks.org/data-structures/#Heap">Heap</a></li>\n\t<li id="menu-item-135051" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135051"><a href="http://www.geeksforgeeks.org/data-structures/#Hashing">Hashing</a></li>\n\t<li id="menu-item-135052" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135052"><a href="http://www.geeksforgeeks.org/data-structures/#Graph">Graph</a></li>\n\t<li id="menu-item-135053" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135053"><a href="http://www.geeksforgeeks.org/data-structures/#AdvancedDataStructure">Advanced Data Structure</a></li>\n\t<li id="menu-item-135054" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135054"><a href="http://www.geeksforgeeks.org/data-structures/#Array">Array</a></li>\n\t<li id="menu-item-135055" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135055"><a href="http://www.geeksforgeeks.org/data-structures/#Matrix">Matrix</a></li>\n\t<li id="menu-item-135056" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135056"><a href="http://www.geeksforgeeks.org/data-structures/#Misc">Misc</a></li>\n</ul>\n</li>\n<li id="menu-item-135014" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135014"><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview</a></li>\n<li id="menu-item-135006" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135006"><a href="http://www.geeksforgeeks.org/c/">C</a></li>\n<li id="menu-item-135007" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135007"><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>\n<li id="menu-item-135012" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135012"><a href="http://www.geeksforgeeks.org/java/">Java</a></li>\n<li id="menu-item-137004" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-137004"><a href="http://www.geeksforgeeks.org/python/">Python</a></li>\n<li id="menu-item-135009" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135009"><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>\n<li id="menu-item-135016" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135016"><a href="http://qa.geeksforgeeks.org/index.php?qa=ask">Ask a Q</a></li>\n<li id="menu-item-135077" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135077"><a href="https://play.google.com/store/apps/details?id=free.programming.programming">AndroidApp</a></li>\n<li id="menu-item-135367" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135367"><a href="http://www.geeksforgeeks.org/category/guestblogs/">GBlog</a></li>\n<li id="menu-item-135028" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135028"><a href="http://www.geeksforgeeks.org/category/gfact/">GFact</a></li>\n<li id="menu-item-136004" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-136004"><a href="http://www.geeksforgeeks.org/category/project/">Project</a></li>\n<li id="menu-item-136978" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-136978"><a href="http://www.geeksforgeeks.org/jobs/">Jobs</a></li>\n<li id="menu-item-135019" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135019"><a href="http://www.geeksforgeeks.org/category/c-arrays/">Arr</a></li>\n<li id="menu-item-135022" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135022"><a href="http://www.geeksforgeeks.org/category/c-strings/">String</a></li>\n<li id="menu-item-135937" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135937"><a href="http://www.geeksforgeeks.org/category/matrix/">Matrix</a></li>\n<li id="menu-item-135023" class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-parent current-post-parent menu-item-135023"><a href="http://www.geeksforgeeks.org/category/linked-list/">Linked List</a></li>\n<li id="menu-item-135029" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135029"><a href="http://www.geeksforgeeks.org/category/stack/">Stack</a></li>\n<li id="menu-item-135932" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135932"><a href="http://www.geeksforgeeks.org/category/queue/">Q</a></li>\n<li id="menu-item-136299" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-136299"><a href="http://www.geeksforgeeks.org/category/hash/">Hash</a></li>\n<li id="menu-item-135941" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135941"><a href="http://www.geeksforgeeks.org/category/heap/">Heap</a></li>\n<li id="menu-item-135020" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135020"><a href="http://www.geeksforgeeks.org/category/tree/">Tree</a></li>\n<li id="menu-item-135940" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135940"><a href="http://www.geeksforgeeks.org/category/binary-search-tree/">BST</a></li>\n<li id="menu-item-135024" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135024"><a href="http://www.geeksforgeeks.org/category/graph/">Graph</a></li>\n<li id="menu-item-135017" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135017"><a href="http://www.geeksforgeeks.org/category/c-puzzles/">C/C++</a></li>\n<li id="menu-item-135027" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135027"><a href="http://www.geeksforgeeks.org/category/bit-magic/">Bit</a></li>\n<li id="menu-item-135021" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135021"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/">MCQ</a></li>\n<li id="menu-item-135018" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135018"><a href="http://www.geeksforgeeks.org/category/c-programs/">Misc</a></li>\n<li id="menu-item-135025" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135025"><a href="http://www.geeksforgeeks.org/category/program-output/">O/P</a></li>\n</ul></div>\t\t</nav><!-- #site-navigation -->\r\n\t\t<div class="clear"></div>\r\n\t</header><!-- #masthead -->\r\n\r\n\t<div id="main" class="wrapper">\t<div id="primary" class="site-content">\r\n\t\t<div id="content" role="main">\r\n\r\n\t\t\t\t\t\t\t\r\n\t<article id="post-5036" class="post-5036 post type-post status-publish format-standard hentry category-linked-list">\r\n\t\t\t\t<header class="entry-header">\r\n\t\t\t\t\t\t<h1 class="entry-title">Remove duplicates from an unsorted linked list</h1>\r\n\t\t\t\t\r\n\t\t\t</header><!-- .entry-header -->\r\n\r\n\t\t\t\t<div class="entry-content">\r\n\t\t\t<p>Write a removeDuplicates() function which takes a list and deletes any duplicate nodes from the list. The list is not sorted. <span id="more-5036"></span></p>\n<p>For example if the linked list is 12->11->12->21->41->43->21 then removeDuplicates() should convert the list to 12->11->21->41->43. </p>\n<p><strong>METHOD 1 (Using two loops)</strong><br />\nThis is the simple way where two loops are used. Outer loop is used to pick the elements one by one and inner loop compares the picked element with rest of the elements.  </p>\n<p>Thanks to Gaurav Saxena for his help in writing this code.</p>\n<div class="responsive-tabs">\n<h2 class="tabtitle">C</h2>\n<div class="tabcontent">\n\n<pre class="brush: cpp; title: ; notranslate" title="">\r\n/* Program to remove duplicates in an unsorted array */\r\n\r\n#include&lt;stdio.h&gt;\r\n#include&lt;stdlib.h&gt;\r\n\r\n/* A linked list node */\r\nstruct node\r\n{\r\n int data;\r\n struct node *next;\r\n};\r\n\r\n/* Function to remove duplicates from a unsorted linked list */\r\nvoid removeDuplicates(struct node *start)\r\n{\r\n  struct node *ptr1, *ptr2, *dup;\r\n  ptr1 = start;\r\n\r\n  /* Pick elements one by one */\r\n  while(ptr1 != NULL &amp;&amp; ptr1-&gt;next != NULL)\r\n  {\r\n     ptr2 = ptr1;\r\n\r\n     /* Compare the picked element with rest of the elements */\r\n     while(ptr2-&gt;next != NULL)\r\n     {\r\n       /* If duplicate then delete it */\r\n       if(ptr1-&gt;data == ptr2-&gt;next-&gt;data)\r\n       {\r\n          /* sequence of steps is important here */\r\n          dup = ptr2-&gt;next;\r\n          ptr2-&gt;next = ptr2-&gt;next-&gt;next;\r\n          free(dup);\r\n       }\r\n       else /* This is tricky */\r\n       {\r\n          ptr2 = ptr2-&gt;next;\r\n       }\r\n     }\r\n     ptr1 = ptr1-&gt;next;\r\n  }\r\n}\r\n\r\n/* UTILITY FUNCTIONS */\r\n/* Function to push a node */\r\nvoid push(struct node** head_ref, int new_data);\r\n\r\n/* Function to print nodes in a given linked list */\r\nvoid printList(struct node *node);\r\n\r\n/* Druver program to test above function */\r\nint main()\r\n{\r\n  struct node *start = NULL;\r\n\r\n  /* The constructed linked list is:\r\n   10-&gt;12-&gt;11-&gt;11-&gt;12-&gt;11-&gt;10*/\r\n  push(&amp;start, 10);\r\n  push(&amp;start, 11);\r\n  push(&amp;start, 12);\r\n  push(&amp;start, 11);\r\n  push(&amp;start, 11);\r\n  push(&amp;start, 12);\r\n  push(&amp;start, 10);\r\n\r\n  printf(&quot;\\n Linked list before removing duplicates &quot;);\r\n  printList(start);\r\n\r\n  removeDuplicates(start);\r\n\r\n  printf(&quot;\\n Linked list after removing duplicates &quot;);\r\n  printList(start);\r\n\r\n  getchar();\r\n}\r\n\r\n/* Function to push a node */\r\nvoid push(struct node** head_ref, int new_data)\r\n{\r\n  /* allocate node */\r\n  struct node* new_node =\r\n            (struct node*) malloc(sizeof(struct node));\r\n\r\n  /* put in the data  */\r\n  new_node-&gt;data  = new_data;\r\n\r\n  /* link the old list off the new node */\r\n  new_node-&gt;next = (*head_ref);\r\n\r\n  /* move the head to point to the new node */\r\n  (*head_ref)    = new_node;\r\n}\r\n\r\n/* Function to print nodes in a given linked list */\r\nvoid printList(struct node *node)\r\n{\r\n  while(node != NULL)\r\n  {\r\n    printf(&quot;%d &quot;, node-&gt;data);\r\n    node = node-&gt;next;\r\n  }\r\n}\r\n</pre>\n\n</div><h2 class="tabtitle">Java</h2>\n<div class="tabcontent">\n\n<pre class="brush: java; title: ; notranslate" title="">\r\n// Java program to remove duplicates from unsorted linked list\r\n\r\nclass LinkedList {\r\n\r\n    static Node head;\r\n\r\n    static class Node {\r\n\r\n        int data;\r\n        Node next;\r\n\r\n        Node(int d) {\r\n            data = d;\r\n            next = null;\r\n        }\r\n    }\r\n\r\n    /* Function to remove duplicates from a unsorted linked list */\r\n    void remove_duplicates() {\r\n        Node ptr1 = null, ptr2 = null, dup = null;\r\n        ptr1 = head;\r\n\r\n        /* Pick elements one by one */\r\n        while (ptr1 != null &amp;&amp; ptr1.next != null) {\r\n            ptr2 = ptr1;\r\n\r\n            /* Compare the picked element with rest of the elements */\r\n            while (ptr2.next != null) {\r\n\r\n                /* If duplicate then delete it */\r\n                if (ptr1.data == ptr2.next.data) {\r\n\r\n                    /* sequence of steps is important here */\r\n                    dup = ptr2.next;\r\n                    ptr2.next = ptr2.next.next;\r\n                    System.gc();\r\n                } else /* This is tricky */ {\r\n                    ptr2 = ptr2.next;\r\n                }\r\n            }\r\n            ptr1 = ptr1.next;\r\n        }\r\n    }\r\n\r\n    void printList(Node node) {\r\n        while (node != null) {\r\n            System.out.print(node.data + &quot; &quot;);\r\n            node = node.next;\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        LinkedList list = new LinkedList();\r\n        list.head = new Node(10);\r\n        list.head.next = new Node(12);\r\n        list.head.next.next = new Node(11);\r\n        list.head.next.next.next = new Node(11);\r\n        list.head.next.next.next.next = new Node(12);\r\n        list.head.next.next.next.next.next = new Node(11);\r\n        list.head.next.next.next.next.next.next = new Node(10);\r\n\r\n        System.out.println(&quot;Linked List before removing duplicates &quot;);\r\n        list.printList(head);\r\n\r\n        list.remove_duplicates();\r\n        System.out.println(&quot;&quot;);\r\n        System.out.println(&quot;Linked List after removing duplicates&quot;);\r\n        list.printList(head);\r\n\r\n    }\r\n}\r\n\r\n// This code has been contributed by Mayank Jaiswal\r\n</pre>\n</div></div>\n<p>Time Complexity: O(n^2)</p>\n<p><strong>METHOD 2 (Use Sorting)</strong><br />\nIn general, Merge Sort is the best suited sorting algorithm for sorting linked lists efficiently.<br />\n1)\tSort the elements using Merge Sort.  We will soon be writing a post about sorting a linked list.  O(nLogn)<br />\n2)\tRemove duplicates in linear time using the <a href="http://geeksforgeeks.org/?p=5075">algorithm for removing duplicates in sorted Linked List. O(n)<br />\n</a></p>\n<p>Please note that this method doesn&#8217;t preserve the original order of elements.</p>\n<p>Time Complexity: O(nLogn)</p>\n<p><strong>METHOD 3 (Use Hashing)</strong><br />\nWe traverse the link list from head to end.  For every newly encountered element, we check whether it is in the hash table: if yes, we remove it; otherwise we put it in the hash table.</p>\n<p>Thanks to bearwang  for suggesting this method.</p>\n<p>Time Complexity:  O(n) on average (assuming that hash table access time is O(1) on average).  </p>\n<p></br><br />\nPlease write comments if you find any of the above explanations/algorithms incorrect, or a better ways to solve the same problem.</p>\n\r\n\t\t\t<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<!-- Big Rectangle Blog Bottom -->\r\n<ins class="adsbygoogle"\r\n     style="display:inline-block;width:336px;height:280px"\r\n     data-ad-client="ca-pub-9465609616171866"\r\n     data-ad-slot="4061219431"></ins>\r\n<script>\r\n(adsbygoogle = window.adsbygoogle || []).push({});\r\n</script>\r\n<br></br>\r\n\t\t</div><!-- .entry-content -->\r\n\t\t\t\t\r\n\t\t\r\n\r\n\t\t<footer class="entry-meta">\r\n\t\t<span class="post-comment"><a href="http://www.geeksforgeeks.org/remove-duplicates-from-an-unsorted-linked-list/#comments" class="commentslink" ><span class="dsq-postid" data-dsqidentifier="5036 http://geeksforgeeks.org/?p=5036">48 Comments</span></a> <!--added for comments by Shubham-->\r\n\t\t</span><span>Category: <a href="http://www.geeksforgeeks.org/category/linked-list/" rel="category tag">Linked Lists</a></span> <span></span> \r\n           \t          \t\r\n\t\t\t\t\t</footer><!-- .entry-meta -->\r\n\t</article><!-- #post -->\r\n<div class="related_posts"><h3>Related Posts:</h3><ul><li><a href="http://www.geeksforgeeks.org/merge-two-sorted-linked-lists-such-that-merged-list-is-in-reverse-order/" title="Merge two sorted linked lists such that merged list is in reverse order">Merge two sorted linked lists such that merged list is in reverse order</a></li><li><a href="http://www.geeksforgeeks.org/compare-two-strings-represented-as-linked-lists/" title="Compare two strings represented as linked lists">Compare two strings represented as linked lists</a></li><li><a href="http://www.geeksforgeeks.org/rearrange-a-given-linked-list-in-place/" title="Rearrange a given linked list in-place.">Rearrange a given linked list in-place.</a></li><li><a href="http://www.geeksforgeeks.org/how-to-sort-a-linked-list-that-is-sorted-alternating-ascending-and-descending-orders/" title="Sort a linked list that is sorted alternating ascending and descending orders?">Sort a linked list that is sorted alternating ascending and descending orders?</a></li><li><a href="http://www.geeksforgeeks.org/select-a-random-node-from-a-singly-linked-list/" title="Select a Random Node from a Singly Linked List">Select a Random Node from a Singly Linked List</a></li><li><a href="http://www.geeksforgeeks.org/merge-sort-for-doubly-linked-list/" title="Merge Sort for Doubly Linked List">Merge Sort for Doubly Linked List</a></li><li><a href="http://www.geeksforgeeks.org/point-to-next-higher-value-node-in-a-linked-list-with-an-arbitrary-pointer/" title="Point to next higher value node in a linked list with an arbitrary pointer">Point to next higher value node in a linked list with an arbitrary pointer</a></li><li><a href="http://www.geeksforgeeks.org/swap-nodes-in-a-linked-list-without-swapping-data/" title="Swap nodes in a linked list without swapping data">Swap nodes in a linked list without swapping data</a></li></ul></div><br></br>\r\n\r\n<!-- Added on 29 Oct 2015 for next and previous from same category -->\r\n<nav class="nav-single">\r\n\t\t\t\t\t<div class="assistive-text">Post navigation</div>\r\n\t\t\t\t\t<span class="nav-previous"><a href="http://www.geeksforgeeks.org/remove-duplicates-from-a-sorted-linked-list/" rel="prev">Previous post in category</a></span>\r\n\t\t\t\t\t<span class="nav-next"><a href="http://www.geeksforgeeks.org/reverse-a-doubly-linked-list/" rel="next">Next post in category</a></span>\r\n\t\t\t\t</nav><!-- .nav-single -->\r\n\r\n\r\n<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>\r\n    <script type="text/javascript">\r\n    $(document).ready(function(){\r\n        $.ajax({\r\n            url:"http://courses.geeksforgeeks.org/plugin.php",\r\n            method:"POST",\r\n            dataType:"json",\r\n            data:{post_id:$("#ratePlugin").attr("pid"),url:window.location.href},\r\n            xhrFields:{withCredentials:true},\r\n            success:function(response){\r\n                $("#ratePlugin").html(response.rate);\r\n                $("#markPlugin").html(response.mark);\r\n            },\r\n            complete:function(){\r\n                $(".box").click(function(){\r\n                    rrequest({post_id:$("#ratePlugin").attr("pid"),post_title:$("#ratePlugin").attr("ptitle"),rating:$(this).attr("rating"),url:window.location.href});\r\n                });\r\n                $(".mark").click(function(){\r\n                    mrequest({post_id:$("#markPlugin").attr("pid"),post_title:$("#markPlugin").attr("ptitle"),op:$(this).attr("id"),url:window.location.href});\r\n                });\r\n            }\r\n        });\r\n        function rrequest(payload){\r\n            $.ajax({\r\n                url:"http://courses.geeksforgeeks.org/gfgRatings.php",\r\n                method:"POST",\r\n                dataType:"html",\r\n                data:payload,\r\n                xhrFields:{withCredentials:true},\r\n                success:function(response){\r\n                    $("#ratePlugin").html(response);\r\n                },\r\n                complete:function(){\r\n                    $(".box").click(function(){\r\n                        rrequest({post_id:$("#ratePlugin").attr("pid"),post_title:$("#ratePlugin").attr("ptitle"),rating:$(this).attr("rating"),url:window.location.href});\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        //rrequest({post_id:$("#ratePlugin").attr("pid"),url:window.location.href});\r\n        function mrequest(payload){\r\n            $.ajax({\r\n                url:"http://courses.geeksforgeeks.org/gfgMarking.php",\r\n                method:"POST",\r\n                dataType:"html",\r\n                data:payload,\r\n                xhrFields:{withCredentials:true},\r\n                success:function(response){\r\n                    $("#markPlugin").html(response);\r\n                },\r\n                complete:function(){\r\n                    $(".mark").click(function(){\r\n                        mrequest({post_id:$("#markPlugin").attr("pid"),post_title:$("#markPlugin").attr("ptitle"),op:$(this).attr("id"),url:window.location.href});\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        //mrequest({post_id:$("#markPlugin").attr("pid"),url:window.location.href});\r\n    });\r\n</script>\r\n\r\n<div class="plugins">\r\n<div pid="5036" ptitle="Remove duplicates from an unsorted linked list" id="ratePlugin"></div>\r\n<div pid="5036" ptitle="Remove duplicates from an unsorted linked list" id="markPlugin"></div>\r\n</div>\r\n\r\n<br></br>\r\n\r\n<script>\r\n  window.fbAsyncInit=function() {\r\n    FB.init({\r\n      appId      : \\\'380853768781431\\\',\r\n      xfbml      : true,\r\n      version    : \\\'v2.3\\\'\r\n    });\r\n  };\r\n\r\n  (function(d, s, id){\r\n     var js, fjs = d.getElementsByTagName(s)[0];\r\n     if (d.getElementById(id)) {return;}\r\n     js = d.createElement(s); js.id = id;\r\n     js.src = "//connect.facebook.net/en_US/sdk.js";\r\n     fjs.parentNode.insertBefore(js, fjs);\r\n   }(document, \\\'script\\\', \\\'facebook-jssdk\\\'));\r\n</script>\r\n<div class="fb-like" data-share="true" data-width="450" data-show-faces="true"></div>\r\n\r\n<br></br>\r\n<p>Writing code in comment? Please use <a href="http://code.geeksforgeeks.org/">code.geeksforgeeks.org</a>, generate link and share the link here.</a>\r\n\t\t\t\t\r\n<div id="disqus_thread">\r\n            <div id="dsq-content">\r\n\r\n\r\n            <ul id="dsq-comments">\r\n                    <li class="comment even thread-even depth-1" id="dsq-comment-36155">\r\n        <div id="dsq-comment-header-36155" class="dsq-comment-header">\r\n            <cite id="dsq-cite-36155">\r\n                <span id="dsq-author-user-36155">Vivek Garg</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-36155" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-36155" class="dsq-comment-message"><p>Here is c++ implementation for this topic using hashTable..</p>\n<p>void removeDuplicates(linkedlist list){</p>\n<p>node *temp=list.head;</p>\n<p>linkedlist hashlist[100];</p>\n<p>node *prevNode=NULL;/*It is used because my pop function take the prevNode as input and remove the node after prevNode.*/</p>\n<p>while(temp!=NULL)</p>\n<p>{</p>\n<p>if(isNodeInhashlist(temp,hashlist))</p>\n<p>{</p>\n<p>list.pop(prevNode);</p>\n<p>}</p>\n<p>else</p>\n<p>{</p>\n<p>hashlist[hashFunction(temp-&gt;data)].push(temp-&gt;data);</p>\n<p>}</p>\n<p>prevNode=temp;</p>\n<p>temp=temp-&gt;next;</p>\n<p>}</p>\n<p>}</p>\n<p>bool isNodeInhashlist(node *checkingNode,linkedlist hashlist[]){</p>\n<p>int index=hashFunction(checkingNode-&gt;data);</p>\n<p>node *tempHead=hashlist[index].head;</p>\n<p>while(tempHead!=NULL)</p>\n<p>{</p>\n<p>if(tempHead-&gt;data==checkingNode-&gt;data) return true;</p>\n<p>}</p>\n<p>return false;</p>\n<p>}</p>\n<p>int hashFunction(int elem){</p>\n<p>return elem%100;</p>\n<p>}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-35259">\r\n        <div id="dsq-comment-header-35259" class="dsq-comment-header">\r\n            <cite id="dsq-cite-35259">\r\n                <span id="dsq-author-user-35259">Arun Dixit</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-35259" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-35259" class="dsq-comment-message"><p>Following is java implementation using hashSet:</p>\n<p>public void removeDuplicatesUnsorted(Node head){</p>\n<p>    HashSet elem = new HashSet();</p>\n<p>    Node curr=head.next;</p>\n<p>    Node prev=head;</p>\n<p>    elem.add(head.data);</p>\n<p>    while(curr!=null){</p>\n<p>        if(elem.contains(curr.data)){</p>\n<p>            prev.next=curr.next;</p>\n<p>            curr=null;</p>\n<p>            curr=prev.next;</p>\n<p>            }</p>\n<p>        else{</p>\n<p>            elem.add(curr.data);</p>\n<p>            prev=curr;</p>\n<p>            curr=curr.next;</p>\n<p>            }</p>\n<p>        }</p>\n<p>    }</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-35115">\r\n        <div id="dsq-comment-header-35115" class="dsq-comment-header">\r\n            <cite id="dsq-cite-35115">\r\n                <span id="dsq-author-user-35115">Himanshu Dagar</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-35115" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-35115" class="dsq-comment-message"><p>Hashing is Perfect method for this<br />\nWe can use map for this (one is key and another one is mapped value)</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-35072">\r\n        <div id="dsq-comment-header-35072" class="dsq-comment-header">\r\n            <cite id="dsq-cite-35072">\r\n                <span id="dsq-author-user-35072">Sunil</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-35072" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-35072" class="dsq-comment-message"><p>I have a better solution for this. For hashtable we need to again use extra memory. space constraint. If the interviewer asks you to give a solution with linear time O(n) with no extra space. please try using bit vectors. It will solve the problem.</p>\n<p>private void removeDuplicates(Node head) {</p>\n<p>\t\tNode iter = head;</p>\n<p>\t\tint checker = 0;</p>\n<p>\t\twhile(iter != null) {</p>\n<p>\t\t\tif((checker &amp; (1 &lt;&lt; iter.data)) != 0) {</p>\n<p>\t\t\t\t// Found duplicate</p>\n<p>\t\t\t\tif(iter.next != null) {</p>\n<p>\t\t\t\t\titer.data = iter.next.data;</p>\n<p>\t\t\t\t\titer.next = iter.next.next;</p>\n<p>\t\t\t\t} else {</p>\n<p>\t\t\t\t\titer = null;</p>\n<p>\t\t\t\t\treturn;</p>\n<p>\t\t\t\t}</p>\n<p>\t\t\t} else {</p>\n<p>\t\t\t\tchecker |= (1 &lt;&lt; iter.data);</p>\n<p>\t\t\t\titer = iter.next;</p>\n<p>\t\t\t}\t\t\t</p>\n<p>\t\t}\t\t</p>\n<p>\t}</p>\n<p>This does the removal of duplicates in just one single run with O(n) speed. with space complexity of just O(1).</p>\n<p>However, in my solution you would get one extra duplicate at the end of the list, i think you can figure out the issue and fix it. </p>\n<p>Ex: right now for input like 1,2,3,0,1,2,3,0<br />\noutput would be 1,2,3,0,0</p>\n<p>The last repeated one is coming at the end. tweak my code to remove that as well. If you feel my solution is wrong, please mail me to &quot;sunilebiz2007@gmail.com&quot;</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-35077">\r\n        <div id="dsq-comment-header-35077" class="dsq-comment-header">\r\n            <cite id="dsq-cite-35077">\r\n                <span id="dsq-author-user-35077">Niks</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-35077" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-35077" class="dsq-comment-message"><p>The above solution is basically trying to store the occurrence of a number in a 32 bit integer. What if I have two numbers like 5 and 37. When 5 is encountered the code sets bit5 to 1 and when 37 is encountered the 32 bit number wraps and again bit 5 is set. Does this not cause 5 and 32 to be treated as duplicates??</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-34464">\r\n        <div id="dsq-comment-header-34464" class="dsq-comment-header">\r\n            <cite id="dsq-cite-34464">\r\n                <span id="dsq-author-user-34464">Akash Panda</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-34464" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-34464" class="dsq-comment-message"><p>Full source code for solution using the Hashing method. </p>\n<p>void RemoveDuplicatesInUnsorted(struct node **head_ref)</p>\n<p>{</p>\n<p>    struct node *current=*head_ref;</p>\n<p>    int a[100]={0};</p>\n<p>    struct node *prev=current;</p>\n<p>    a[current-&gt;data]=1;</p>\n<p>    current=current-&gt;next;</p>\n<p>    while(current!=NULL)</p>\n<p>    {</p>\n<p>        if(a[current-&gt;data]==1)</p>\n<p>        {</p>\n<p>            prev-&gt;next=current-&gt;next;</p>\n<p>            free(current);</p>\n<p>            current=prev-&gt;next;</p>\n<p>        }</p>\n<p>        else</p>\n<p>        {</p>\n<p>            a[current-&gt;data]=1;</p>\n<p>            current=current-&gt;next;</p>\n<p>            prev=prev-&gt;next;</p>\n<p>        }</p>\n<p>    }</p>\n<p>}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-31935">\r\n        <div id="dsq-comment-header-31935" class="dsq-comment-header">\r\n            <cite id="dsq-cite-31935">\r\n                <span id="dsq-author-user-31935">Rich</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-31935" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-31935" class="dsq-comment-message"><p>Don&#8217;t understand the following statement: </p>\n<p>/* Pick elements one by one */</p>\n<p>  while (ptr1 != NULL &amp;&amp; ptr1-&gt;next != NULL)<br />\n{<br />\n        . . .<br />\n}</p>\n<p>I think we could write like this:</p>\n<p>/* Pick elements one by one */</p>\n<p>  while (ptr1 != NULL)</p>\n<p>{<br />\n        . . .<br />\n}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-31907">\r\n        <div id="dsq-comment-header-31907" class="dsq-comment-header">\r\n            <cite id="dsq-cite-31907">\r\n                <span id="dsq-author-user-31907">Codecrawler</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-31907" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-31907" class="dsq-comment-message"><p>How can we make hash table for it? Please provide the code</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-32461">\r\n        <div id="dsq-comment-header-32461" class="dsq-comment-header">\r\n            <cite id="dsq-cite-32461">\r\n                <span id="dsq-author-user-32461">Kunal Arora</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-32461" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-32461" class="dsq-comment-message"><p>1.) We will map every value of linked list to hash table.<br />\n2.) While mapping we can compare if the two values hash to same location in hash table,then we get the address of the hashed value in linked list and delete it.<br />\n3.)Arrange pointers of the linked list .</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-29735">\r\n        <div id="dsq-comment-header-29735" class="dsq-comment-header">\r\n            <cite id="dsq-cite-29735">\r\n                <span id="dsq-author-user-29735">Tandoori</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-29735" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-29735" class="dsq-comment-message"><p>node * partition(node *start)</p>\n<p>\t{</p>\n<p>  \t\tnode *l1=start;</p>\n<p>  \t\tnode *temp1=NULL;</p>\n<p>  \t\tnode *temp2=NULL;</p>\n<p>  \t\tif(start-&gt;next==NULL)</p>\n<p>    \t\treturn start;</p>\n<p>  \t\tnode * l2=f_b_split(start);</p>\n<p>\t\t  if(l1-&gt;next!=NULL)</p>\n<p>   \t\t \ttemp1=partition(l1);</p>\n<p>  \t\t  if(l2-&gt;next!=NULL)</p>\n<p>    \t\t\ttemp2=partition(l2);</p>\n<p> \tif(temp1==NULL || temp2==NULL)</p>\n<p>    \t{</p>\n<p>      \t\tif(temp1==NULL &amp;&amp; temp2==NULL)</p>\n<p>\t\t\ttemp1=s_m(l1,l2);</p>\n<p>      \t\telse if(temp1==NULL)</p>\n<p>\t\t\ttemp1=s_m(l1,temp2);</p>\n<p>      \t\telse if(temp2==NULL)</p>\n<p>\t\t\ttemp1=s_m(temp1,l2);</p>\n<p>\t}</p>\n<p>\t  \telse</p>\n<p>\t    \t\ttemp1=s_m(temp1,temp2);</p>\n<p>\t  \treturn temp1;</p>\n<p>\t}</p>\n<p>\tnode * sort(node * start)</p>\n<p>\t{</p>\n<p>  \t\tnode * temp=partition(start);</p>\n<p>\t\t    return temp;</p>\n<p>\t}</p>\n<p>\tvoid del_dup(node * start)</p>\n<p>\t{</p>\n<p>\t  node * temp;</p>\n<p>\t\tstart=sort(start);</p>\n<p>  \t\twhile(start!=NULL)</p>\n<p>    \t\t{</p>\n<p>      \t\tif(start-&gt;next!=NULL &amp;&amp; start-&gt;data==start-&gt;next-&gt;data  )</p>\n<p>      \t\t\t{</p>\n<p>      \t  \t\t\ttemp=start-&gt;next;</p>\n<p>      \t  \t\t\tstart-&gt;next=start-&gt;next-&gt;next;</p>\n<p>      \t  \t\t\tfree(temp);</p>\n<p>\t  \t\t\tcontinue;</p>\n<p>      \t\t\t}</p>\n<p>      \t\tstart=start-&gt;next;</p>\n<p>    \t\t}</p>\n<p> \t}</p>\n<p>\tvoid main()</p>\n<p>\t {</p>\n<p>   \t\tdel_dup(list1);</p>\n<p>\t\tprint(list1);</p>\n<p>\t}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-29136">\r\n        <div id="dsq-comment-header-29136" class="dsq-comment-header">\r\n            <cite id="dsq-cite-29136">\r\n                <span id="dsq-author-user-29136">Prashant Rathi</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-29136" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-29136" class="dsq-comment-message"><p>here is the code in c</p>\n<p>void removeduplicates(N **r)<br />\n{<br />\n    N *temp1=*r;<br />\n    N *temp2=NULL;<br />\n    N *temp3=NULL;<br />\n    while(temp1-&gt;next!=NULL)<br />\n    {<br />\n        temp2=temp1;<br />\n        while(temp2!=NULL)<br />\n        {<br />\n            temp3=temp2;<br />\n            temp2=temp2-&gt;next;<br />\n            if(temp2==NULL)<br />\n            {<br />\n                break;<br />\n            }<br />\n            if((temp2-&gt;data)==(temp1-&gt;data))<br />\n            {<br />\n                temp3-&gt;next=temp2-&gt;next;<br />\n                free(temp2);<br />\n                temp2=temp3;<br />\n                printf(&#8220;na dup deleted&#8221;);<br />\n            }<br />\n        }<br />\n        temp1=temp1-&gt;next;<br />\n    }<br />\n    //viewall(&amp;r);<br />\n}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-26657">\r\n        <div id="dsq-comment-header-26657" class="dsq-comment-header">\r\n            <cite id="dsq-cite-26657">\r\n                <span id="dsq-author-user-26657">ubiquitous</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-26657" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-26657" class="dsq-comment-message"><p>void removeDuplicates()<br />\n    {<br />\n        if(head == null)return;<br />\n        if(head.next==null)return;<br />\n        Set&lt;K&gt; s = new HashSet&lt;K&gt;();<br />\n        s.add(head.k);<br />\n        Node&lt;K&gt; n = head;<br />\n        while(n!=null &amp;&amp; n.next!=null)<br />\n        {<br />\n            Node&lt;K&gt; temp = n.next;<br />\n            while(true)<br />\n            {<br />\n                if(temp==null)break;<br />\n                if(s.contains(temp.k))<br />\n                {<br />\n                    n.next = temp.next;<br />\n                    temp=temp.next;<br />\n                }<br />\n                else<br />\n                {<br />\n                    break;<br />\n                }<br />\n            }<br />\n            if(temp==null)return;<br />\n            n=n.next;<br />\n            s.add(n.k);<br />\n        }<br />\n    }</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-22298">\r\n        <div id="dsq-comment-header-22298" class="dsq-comment-header">\r\n            <cite id="dsq-cite-22298">\r\n                <span id="dsq-author-user-22298">Karshit</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-22298" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-22298" class="dsq-comment-message"><p>My Code using Unordered_set.. hope you find it useful.. <img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/images/smilies/simple-smile.png" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>\n<pre> <code language="C">\n#include &lt;iostream&gt;\n#include &lt;unordered_set&gt;\n\nusing namespace std;\n\nstruct node {\n    int data;\n    node *next;\n};\n\nnode *create(int n)\n{\n    if (n == 0)\n        return NULL;\n\n    node *head = new node();\n\n    cin &gt;&gt; (head -&gt; data);\n\n    head -&gt; next = NULL;\n    node *p = head;\n\n    for (int i = 1; i &lt; n; i++) {\n        head -&gt; next = new node();\n        head = head -&gt; next;\n\n        cin &gt;&gt; (head -&gt; data);\n        head -&gt; next = NULL;\n    }\n\n    return p;\n}\n\nvoid print(node *head)\n{\n    while (head) {\n        cout &lt;&lt; head -&gt; data &lt;&lt; &quot; &quot;;\n        head = head -&gt; next;\n    }\n}\n\nvoid rem_duplicate(node *head)\n{\n    node *temp;\n    unordered_set &lt;int&gt; s;\n    s.insert(head -&gt; data);\n\n    while (head -&gt; next) {\n        if (s.find(head -&gt; next -&gt; data) != s.end()) {\n            temp = head -&gt; next -&gt; next;\n            delete(head -&gt; next);\n            head -&gt; next = temp;\n\n        } else {\n            head = head -&gt; next;\n            s.insert(head -&gt; data);\n        }\n    }\n}\n\nint main()\n{\n    int n;\n    node *head = NULL;\n\n    cin&gt;&gt; n;\n\n    head = create(n);\n\n    print(head);\n\n    rem_duplicate(head);\n\n    cout &lt;&lt; &quot;\\n\\n&quot;;\n\n    print(head);\n\n    return 0;\n}\n\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-20739">\r\n        <div id="dsq-comment-header-20739" class="dsq-comment-header">\r\n            <cite id="dsq-cite-20739">\r\n                <span id="dsq-author-user-20739">12rad</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-20739" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-20739" class="dsq-comment-message"><p>For Java: Using hashMaps</p>\n<pre> <code language="Java">\npublic Linked_List removeOnlyDuplicates(Linked_List list){\n\t\tHashMap&lt;Integer, Integer&gt; map = new HashMap&lt;Integer, Integer&gt;();\n\t\tLinked_List.LNode node = list.head;\n\t\tLinked_List.LNode prev = list.head;\n\t\twhile(node!=null){\n\t\t\tif(map.containsKey(node.data)){\n\t\t\t\tprev.nextPtr = node.nextPtr;\n\t\t\t\t\n\t\t\t}else{\n\t\t\t\tmap.put(node.data, 0);\n\t\t\t\tprev = node;\n\t\t\t}\n\t\t\tnode = node.nextPtr;\n\t\t}\n\t\treturn list;\n\t}/\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-17211">\r\n        <div id="dsq-comment-header-17211" class="dsq-comment-header">\r\n            <cite id="dsq-cite-17211">\r\n                <span id="dsq-author-user-17211">Priyanka</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-17211" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-17211" class="dsq-comment-message"><pre> <code language="C">\nvoid removeDuplicates(struct node *start)\n{\n  struct node *current=start, *save_current=NULL, *next=NULL;\n  int hash_table[INT_MAX]={0};\n  while(current)\n {\n   if(has_table[current-&gt;data])\n   {\n     next=current-&gt;next;\n     free(current);\n     current=next;\n     save_current-&gt;next=current;     \n   } \n   else\n   {\n     hash_table[current-&gt;data]=1;\n     save_current=current;\n     current=current-&gt;next;\n\n }\n  \n}\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-19374">\r\n        <div id="dsq-comment-header-19374" class="dsq-comment-header">\r\n            <cite id="dsq-cite-19374">\r\n                <span id="dsq-author-user-19374">aravind</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-19374" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-19374" class="dsq-comment-message"><p>is save_current node the previous node of the node to be deleted?</p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even depth-2" id="dsq-comment-19873">\r\n        <div id="dsq-comment-header-19873" class="dsq-comment-header">\r\n            <cite id="dsq-cite-19873">\r\n                <span id="dsq-author-user-19873">hary</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-19873" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-19873" class="dsq-comment-message"><p>@priyanka, correct me if I am wrong here . Just modified your code a bit and also you have not made use of the hashfunc anywhere so you should use that as well. Yes do not forget to initialize your hashtbl with 0 before the start of everything.</p>\n<pre> <code language="C">\nwhile(current)\n {\n   if(has_table[current-&gt;data])\n   {\n     save_current-&gt;next=current-&gt;next;\n     free(current);\n     current=save_current-&gt;next;\n   } \n   else\n   {\n     hash_table[current-&gt;data]=1;\n     save_current=current;\n     current=current-&gt;next;\n   }\n \n }\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-11179">\r\n        <div id="dsq-comment-header-11179" class="dsq-comment-header">\r\n            <cite id="dsq-cite-11179">\r\n                <span id="dsq-author-user-11179">abcd</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-11179" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-11179" class="dsq-comment-message"><p>Can someone please share the code for Method 3 listed here.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-17459">\r\n        <div id="dsq-comment-header-17459" class="dsq-comment-header">\r\n            <cite id="dsq-cite-17459">\r\n                <span id="dsq-author-user-17459">gr81</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-17459" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-17459" class="dsq-comment-message"><pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\nvoid remove_duplicate(struct node *head)\n{\n        map&lt;int, int&gt; freq;\n        struct node *cur = head;\n        struct node *prev = NULL;\n        while(cur != NULL)\n        {\n                if(freq[cur-&gt;data])\n                {\n                        struct node *tmp = cur;\n                        prev-&gt;next = cur-&gt;next;\n                        cur = cur-&gt;next;\n                        delete tmp;\n                }\n                else\n                {\n                        freq[cur-&gt;data]++;\n                        prev = cur;\n                        cur = cur-&gt;next;\n                }\n        }\n}\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-9045">\r\n        <div id="dsq-comment-header-9045" class="dsq-comment-header">\r\n            <cite id="dsq-cite-9045">\r\n                <span id="dsq-author-user-9045">user123</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-9045" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-9045" class="dsq-comment-message"><p>method 2 doesn&#8217;t preserve the actual order of nodes&#8230; does it?</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-9048">\r\n        <div id="dsq-comment-header-9048" class="dsq-comment-header">\r\n            <cite id="dsq-cite-9048">\r\n                <span id="dsq-author-user-9048">geeksforgeeks</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-9048" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-9048" class="dsq-comment-message"><p>@user123: Yes, it doesn&#8217;t preserve the original order. We have added a note for the same.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-8906">\r\n        <div id="dsq-comment-header-8906" class="dsq-comment-header">\r\n            <cite id="dsq-cite-8906">\r\n                <span id="dsq-author-user-8906">pr6989</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-8906" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-8906" class="dsq-comment-message"><p>The code below can be modified a bit to maintain the order of the list. The upside is that the complexity is O(n) since :</p>\n<p>Step-1 : O(n)<br />\nStep-3 : O(n)<br />\nStep-4 : O(n)</p>\n<p>Therefore total time complexity= O(n)+O(n)+O(n)~ O(n)<br />\nWe are assuming that the list elements are within the range of integers and the list length is not infinite.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-8905">\r\n        <div id="dsq-comment-header-8905" class="dsq-comment-header">\r\n            <cite id="dsq-cite-8905">\r\n                <span id="dsq-author-user-8905">pr6989</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-8905" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-8905" class="dsq-comment-message"><p>void remdup()<br />\n{   //L is the pointer to the first node</p>\n<p>    if(L==0||L-&gt;next==0)    //one or no nodes in the list<br />\n    {<br />\n        cout&lt;&lt;&quot;List is empty/too small to have duplicates!&quot;;<br />\n        return;<br />\n    }<br />\n    node*q=L;<br />\n    int max=0;<br />\n    while(q!=0)<br />\n    {<br />\n        if(q-&gt;data&gt;max)<br />\n        max=q-&gt;data;</p>\n<p>        q=q-&gt;next;<br />\n    }<br />\n    q=L;<br />\n    int *count=new int[max+1];<br />\n    for(int i=0;i&lt;(max+1); i++)<br />\n    count[i]=0;</p>\n<p>    while(q!=0)<br />\n    {<br />\n        count[q-&gt;data]++;<br />\n        q=q-&gt;next;<br />\n    }<br />\n    q=L;<br />\n    while(q!=0)<br />\n    {<br />\n        if(count[q-&gt;data]&gt;1)<br />\n        {<br />\n            count[q-&gt;data]&#8211;;<br />\n            node*p=q;<br />\n            q=q-&gt;next;<br />\n            delnode(p-&gt;data);<br />\n        }<br />\n        else<br />\n        {<br />\n            q=q-&gt;next;<br />\n        }<br />\n    }<br />\n    delete[] count;<br />\n}</p>\n<p>The procedure is as follows:<br />\n1. Scan the list and find the maximum element(max) &#8211; O(n)<br />\n2. Create a dynamic array of size max+1 and initialize it to zero.<br />\n3. Scan the list again and keep incrementing the count of the elements as you reach the end &#8211; O(n)<br />\n4. Scan the list again from the beginning and check if count in array is greater than 1, then decrement the count,point to the next node and delete that node &#8211; O(n)</p>\n<p>The only drawback is that the order of the list changes.<br />\nFor eg. If the original list is : 1 2 1 2 3 4 3<br />\nthen the new list becomes : 1 2 4 3</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-14587">\r\n        <div id="dsq-comment-header-14587" class="dsq-comment-header">\r\n            <cite id="dsq-cite-14587">\r\n                <span id="dsq-author-user-14587">kiran</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-14587" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-14587" class="dsq-comment-message"><p>for keeping the order you can keep the first occurrence of the nodes whose count value is greater than 1&#8230;. And also change the condition according!!!!</p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-8041">\r\n        <div id="dsq-comment-header-8041" class="dsq-comment-header">\r\n            <cite id="dsq-cite-8041">\r\n                <span id="dsq-author-user-8041">BlackMath</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-8041" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-8041" class="dsq-comment-message"><p>Here&#8217;s a java code which creates a BST out of the list.<br />\nChecks and inserts elements into the tree and then forms the list back to original form without the duplicates.</p>\n<pre> <code language="Java">\n/* Paste your code here (You may delete these lines if not writing code) */\nclass LNode       // class to represent the linkedlist\n{\n  int value;\n  LNode next;\n  \n  LNode (int val)\n  {\n    value = val;\n  }\n}\nclass TNode       // class to represent bst\n{\n  int value;\n  TNode left;\n  TNode right;\n  \n  TNode (int val)\n  {\n    value = val;\n  }\n}\n\npublic class RemoveDuplicatesInListByTree\n{\n  static LNode newList;\n  \n  public static TNode insertIntoTree (TNode tree, LNode a)\n  {\n    if (tree == null)\n    {\n      tree = new TNode (a.value);\n      return tree;\n    }\n    if (a.value == tree.value)\n      return tree;\n    if (a.value &lt; tree.value)\n    {\n      tree.left = insertIntoTree (tree.left, a);\n      return tree;\n    }\n    else\n    {\n      tree.right = insertIntoTree (tree.right, a);\n      return tree;\n    }\n  }\n  \n  public static void inorderTraversal (TNode tree)\n  {\n    if (tree != null)\n    {\n      if (newList == null)\n      {\n        newList = new LNode (tree.value);\n        // return head;\n      }\n      else\n      {\n        LNode tmp = new LNode (tree.value);\n        tmp.next = newList;\n        newList = tmp;\n        // return head;\n      }\n      System.out.print(tree.value + &quot;   &quot;);\n      inorderTraversal (tree.left);\n      inorderTraversal (tree.right);\n    }\n  }\n  \n  public static LNode reverseList (LNode head)\n  {\n    LNode prev = null;\n    LNode curr = head;\n    while (curr != null)\n    {\n      LNode tmp = curr.next;\n      curr.next = prev;\n      prev = curr;\n      curr = tmp;\n    }\n    return prev;\n  }\n  \n  public static void printList (LNode head)\n  {\n    while (head != null)\n    {\n      System.out.print (head.value + &quot;   &quot;);\n      head = head.next;\n    }\n    System.out.println();\n  }\n  \n  public static void main (String args[])\n  {\n    LNode a = new LNode (12);\n    LNode b = new LNode (11);a.next = b;\n    LNode c = new LNode (12);b.next = c;\n    LNode d = new LNode (21);c.next = d;\n    LNode e = new LNode (21);d.next = e;\n    LNode f = new LNode (45);e.next = f;\n    LNode g = new LNode (39);f.next = g;\n    \n    LNode head = a;\n    System.out.println (&quot;The linked list before : &quot;);\n    printList (head);\n    LNode tmp = head;\n    TNode tree = null;\n    while (tmp != null)\n    {\n      tree = insertIntoTree (tree, tmp);\n      tmp = tmp.next;\n    }\n    \n    newList = null;\n    inorderTraversal (tree);\n    newList = reverseList (newList);\n    System.out.println();\n    System.out.println (&quot;The linked list after : &quot;);\n    printList (newList);\n    \n  }\n}\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-6511">\r\n        <div id="dsq-comment-header-6511" class="dsq-comment-header">\r\n            <cite id="dsq-cite-6511">\r\n                <span id="dsq-author-user-6511">pegasus</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-6511" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-6511" class="dsq-comment-message"><p>solution 1 assumes that there&#8217;d be only two instances of any number in the linked list. for handling more than two instances of any value, else should be removed before temp=temp-&gt;next</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-6512">\r\n        <div id="dsq-comment-header-6512" class="dsq-comment-header">\r\n            <cite id="dsq-cite-6512">\r\n                <span id="dsq-author-user-6512">pegasus</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-6512" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-6512" class="dsq-comment-message"><p>sorry, i meant the else before ptr2=ptr2-&gt;next;</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-5775">\r\n        <div id="dsq-comment-header-5775" class="dsq-comment-header">\r\n            <cite id="dsq-cite-5775">\r\n                <span id="dsq-author-user-5775">radhakrishna</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-5775" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-5775" class="dsq-comment-message"><p>in hashtable collision might happens because of hash codes. instead prefer tries. another alternate way to do it is while inserting in BST itself, checkAndInsert checks duplicity and insert node into BST and inorder traversal gives list without duplicates</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-brijesh even thread-even depth-1" id="dsq-comment-5759">\r\n        <div id="dsq-comment-header-5759" class="dsq-comment-header">\r\n            <cite id="dsq-cite-5759">\r\n                <span id="dsq-author-user-5759">Brijesh</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-5759" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-5759" class="dsq-comment-message"><p>If you want to use extra space then there is much much better solution than hash table..i.e. Use a BST/AVL tree to store all elements of the list..once you search for a proper position to insert the element if you find , same no. is already present in the tree delete it from original list&#8230;<br />\nthus time complexity is O(n log(n))  and space complexity O(n). it&#8217;ll give a guaranteed solution , unlike hash-table where size might vary from n to max-min !</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-5002">\r\n        <div id="dsq-comment-header-5002" class="dsq-comment-header">\r\n            <cite id="dsq-cite-5002">\r\n                <span id="dsq-author-user-5002">nranjan</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-5002" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-5002" class="dsq-comment-message"><p>regarding the hash table algo, what will be the size of the buffer?<br />\nIf we use hash function to map the values in the list, there may be collision for unequal list entries<br />\ne.g. 73%10=3(key)  33%10=3(key) for hash function %10<br />\nso one of the elements should be deleted &#8230;</p>\n<p>If this is not the case  then I think I didn&#8217;t get the algo &#8230; please help me out &#8230;</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-3933">\r\n        <div id="dsq-comment-header-3933" class="dsq-comment-header">\r\n            <cite id="dsq-cite-3933">\r\n                <span id="dsq-author-user-3933">Dreamer</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-3933" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-3933" class="dsq-comment-message"><p>After applying the sort and removing duplicates in method 2, how will you preserve the actual order of nodes i.e. 12-&gt;11-&gt;21-&gt;41-&gt;43.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-2166">\r\n        <div id="dsq-comment-header-2166" class="dsq-comment-header">\r\n            <cite id="dsq-cite-2166">\r\n                <span id="dsq-author-user-2166">bunty</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-2166" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-2166" class="dsq-comment-message"><p>We can create a binary search tree with the list and associate a counter with every node and set it to one, if encountered once and delete the node, it encountered more than once.</p>\n<p>Order will be O(n*logn).<br />\nFor every node, log n and so for n elements, O(n*logn)</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-2130">\r\n        <div id="dsq-comment-header-2130" class="dsq-comment-header">\r\n            <cite id="dsq-cite-2130">\r\n                <span id="dsq-author-user-2130">jasmin</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-2130" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-2130" class="dsq-comment-message"><p>where is code for deleting using hash table ??</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-2057">\r\n        <div id="dsq-comment-header-2057" class="dsq-comment-header">\r\n            <cite id="dsq-cite-2057">\r\n                <span id="dsq-author-user-2057">gokul</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-2057" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-2057" class="dsq-comment-message"><p>really nice answers&#8230; thank you geeks4geeks <img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/images/smilies/simple-smile.png" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-shekhu even thread-even depth-1" id="dsq-comment-1348">\r\n        <div id="dsq-comment-header-1348" class="dsq-comment-header">\r\n            <cite id="dsq-cite-1348">\r\n                <span id="dsq-author-user-1348">Shekhu</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-1348" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-1348" class="dsq-comment-message"><p>Java Code:</p>\n<p>public class ListNode<br />\n{<br />\n  int data;<br />\n  ListNode next;<br />\n}</p>\n<p>public removeDuplicatesUnSorted( ListNode p )<br />\n{<br />\n  while( p != null )<br />\n  {<br />\n    // Remove all duplicates in list that match p<br />\n    // Need to check all nodes succeeding p since list is unsorted<br />\n    ListNode q = p; // start with p to allow next node delete<br />\n    while( q != null )<br />\n    {<br />\n      // Is next node to q a duplicate for p?<br />\n      if( q.next != null &amp;&amp; q.next.data == p.data )<br />\n        q.next = q.next.next; // remove successive duplicates<br />\n      else<br />\n        q = q.next; // advance q to next node (non-duplicate)<br />\n    }<br />\n    p = p.next; // advance p<br />\n  }<br />\n}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-geeksforgeeks bypostauthor odd alt thread-odd thread-alt depth-1" id="dsq-comment-1321">\r\n        <div id="dsq-comment-header-1321" class="dsq-comment-header">\r\n            <cite id="dsq-cite-1321">\r\n                <span id="dsq-author-user-1321">GeeksforGeeks</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-1321" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-1321" class="dsq-comment-message"><p>We have added the Hash Table method to the original post. Thanks all for you contribution,</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-2131">\r\n        <div id="dsq-comment-header-2131" class="dsq-comment-header">\r\n            <cite id="dsq-cite-2131">\r\n                <span id="dsq-author-user-2131">jasmin</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-2131" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-2131" class="dsq-comment-message"><p>i need this code for deleting using hash table&#8230;<br />\ndou you have it??</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt depth-2" id="dsq-comment-2830">\r\n        <div id="dsq-comment-header-2830" class="dsq-comment-header">\r\n            <cite id="dsq-cite-2830">\r\n                <span id="dsq-author-user-2830">Anshuman</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-2830" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-2830" class="dsq-comment-message"><p>Can you please post the code for Hash Table method?</p>\n<p>Thanks in advance.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-906">\r\n        <div id="dsq-comment-header-906" class="dsq-comment-header">\r\n            <cite id="dsq-cite-906">\r\n                <span id="dsq-author-user-906">sathiyan k</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-906" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-906" class="dsq-comment-message"><p>when it comes to display entries in the hashmap or hashtable after doing whatever manipulation we want, we can&#8217;t predict the ordering</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-ajaym odd alt depth-2" id="dsq-comment-1174">\r\n        <div id="dsq-comment-header-1174" class="dsq-comment-header">\r\n            <cite id="dsq-cite-1174">\r\n                <span id="dsq-author-user-1174">ajaym</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-1174" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-1174" class="dsq-comment-message"><p>By ordering u mean the sequence of elements in the list. How come using a hash table effect that. I don&#8217;t understand. Kindly explain by an example.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-905">\r\n        <div id="dsq-comment-header-905" class="dsq-comment-header">\r\n            <cite id="dsq-cite-905">\r\n                <span id="dsq-author-user-905">sathiyan k</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-905" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-905" class="dsq-comment-message"><p>wat is wrong with your approach is</p>\n<p>HashTable or hashmap doesn&#8217;t guarantee the ordering. but linked list is ordered data structure right..</p>\n<p>Regards<br />\nSathiyan K</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-756">\r\n        <div id="dsq-comment-header-756" class="dsq-comment-header">\r\n            <cite id="dsq-cite-756">\r\n                <span id="dsq-author-user-756">bearwang</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-756" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-756" class="dsq-comment-message"><p>How about using an extra hash table?</p>\n<p>We traverse the link list from head to end.<br />\nfor the newly encountered element, we check whether it is in the hash table: if yes, we remove it; otherwise we put it in the hash table.</p>\n<p>The running time is O(n)<br />\nSpace complexity is also O(n).</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-kartik even depth-2" id="dsq-comment-781">\r\n        <div id="dsq-comment-header-781" class="dsq-comment-header">\r\n            <cite id="dsq-cite-781">\r\n                <span id="dsq-author-user-781">kartik</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-781" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-781" class="dsq-comment-message"><p>@bearwang: How does hashing guarantee O(n) worst case time complexity here ?</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-3" id="dsq-comment-784">\r\n        <div id="dsq-comment-header-784" class="dsq-comment-header">\r\n            <cite id="dsq-cite-784">\r\n                <span id="dsq-author-user-784">bearwang</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-784" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-784" class="dsq-comment-message"><p>We sequentially search the link list. Once we reach the end of the link list, the work is done. So it is O(n), assuming that hash can access the element in O(1). Right?</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-kartik even depth-4" id="dsq-comment-792">\r\n        <div id="dsq-comment-header-792" class="dsq-comment-header">\r\n            <cite id="dsq-cite-792">\r\n                <span id="dsq-author-user-792">kartik</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-792" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-792" class="dsq-comment-message"><p>@bearwang: Thanks for the clarification. I am not sure if we can assume that hash can access element in O(1) time.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-5" id="dsq-comment-1320">\r\n        <div id="dsq-comment-header-1320" class="dsq-comment-header">\r\n            <cite id="dsq-cite-1320">\r\n                <span id="dsq-author-user-1320">gk_manutd</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-1320" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-1320" class="dsq-comment-message"><p>@kartik: We could use a Bitmap. That would be O(1).</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even depth-2" id="dsq-comment-32662">\r\n        <div id="dsq-comment-header-32662" class="dsq-comment-header">\r\n            <cite id="dsq-cite-32662">\r\n                <span id="dsq-author-user-32662">Kumar</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-32662" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-32662" class="dsq-comment-message"><p>Removing the element from hash table if its repeated may not work if the element is repeated odd number of times. (2nd repeat, remove the element and third repeat will cause insert as the element is not there in the hash table). Instead we can store the element as key and number of times repeated as value and print only the keys which are having value as 1.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n            </ul>\r\n\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n<script type="text/javascript">\r\nvar disqus_url = \'http://www.geeksforgeeks.org/remove-duplicates-from-an-unsorted-linked-list/\';\r\nvar disqus_identifier = \'5036 http://geeksforgeeks.org/?p=5036\';\r\nvar disqus_container_id = \'disqus_thread\';\r\nvar disqus_shortname = \'geeksforgeeks\';\r\nvar disqus_title = "Remove duplicates from an unsorted linked list";\r\nvar disqus_config_custom = window.disqus_config;\r\nvar disqus_config = function () {\r\n    /*\r\n    All currently supported events:\r\n    onReady: fires when everything is ready,\r\n    onNewComment: fires when a new comment is posted,\r\n    onIdentify: fires when user is authenticated\r\n    */\r\n    \r\n    \r\n    this.language = \'\';\r\n    \r\n    if (disqus_config_custom) {\r\n        disqus_config_custom.call(this);\r\n    }\r\n};\r\n\r\n(function() {\r\n    var dsq = document.createElement(\'script\'); dsq.type = \'text/javascript\';\r\n    dsq.async = true;\r\n    dsq.src = \'//\' + disqus_shortname + \'.disqus.com/embed.js\';\r\n    (document.getElementsByTagName(\'head\')[0] || document.getElementsByTagName(\'body\')[0]).appendChild(dsq);\r\n})();\r\n</script>\r\n\r\n\r\n\t\t\t\r\n\t\t</div><!-- #content -->\r\n\t</div><!-- #primary -->\r\n\r\n\r\n\t\t\t<div id="secondary" class="widget-area" role="complementary">\r\n\t\t\t<aside id="text-9" class="widget widget_text">\t\t\t<div class="textwidget"><div id="fb-root"></div>\r\n<script>(function(d, s, id) {\r\n  var js, fjs = d.getElementsByTagName(s)[0];\r\n  if (d.getElementById(id)) return;\r\n  js = d.createElement(s); js.id = id;\r\n  js.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.3&appId=138031159685820";\r\n  fjs.parentNode.insertBefore(js, fjs);\r\n}(document, \'script\', \'facebook-jssdk\'));</script>\r\n\r\n<div class="fb-page" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="300" data-height="180" data-small-header="true" data-adapt-container-width="false" data-hide-cover="true" data-show-facepile="true" data-show-posts="false"><div class="fb-xfbml-parse-ignore"><blockquote cite="https://www.facebook.com/pages/GeeksforGeeks/316764689022"><a href="https://www.facebook.com/pages/GeeksforGeeks/316764689022">GeeksforGeeks</a></blockquote></div></div>\r\n</div>\n\t\t</aside><aside id="text-33" class="widget widget_text">\t\t\t<div class="textwidget"><a href="http://www.springpeople.com/gfg-landing">\r\n<img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/GfG-2.jpg" alt="SpringPeople Ad">\r\n</a>\r\n</div>\n\t\t</aside><aside id="text-14" class="widget widget_text"><p class="widget-title">Popular Posts</p>\t\t\t<div class="textwidget"><ul>\r\n<li><a href="http://www.geeksforgeeks.org/top-algorithms-and-data-structures-for-competitive-programming/">Top 10 Algorithms and Data Structures for Competitive Programming</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/top-10-algorithms-in-interview-questions/">Top 10 algorithms in Interview Questions</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/how-to-begin-with-competitive-programming/">How to begin with Competitive Programming?</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>\r\n<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>\r\n<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding \xe2\x80\x9cextern\xe2\x80\x9d keyword in C</a> </li>\r\n<li><a href="http://www.geeksforgeeks.org/heavy-light-decomposition-set-1-introduction/"> Heavy Light Decomposition</a> </li>\r\n<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>\r\n</ul></div>\n\t\t</aside><aside id="text-17" class="widget widget_text">\t\t\t<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<!-- Big 300x600 Sidebar -->\r\n<ins class="adsbygoogle"\r\n     style="display:inline-block;width:300px;height:600px"\r\n     data-ad-client="ca-pub-9465609616171866"\r\n     data-ad-slot="4402736037"></ins>\r\n<script>\r\n(adsbygoogle = window.adsbygoogle || []).push({});\r\n</script></div>\n\t\t</aside><aside id="text-32" class="widget widget_text">\t\t\t<div class="textwidget"><form style="border:1px solid #ccc;padding:3px;text-align:center;" action="https://feedburner.google.com/fb/a/mailverify" method="post" target="popupwindow" onsubmit="window.open(\'https://feedburner.google.com/fb/a/mailverify?uri=Geeksforgeeks\', \'popupwindow\', \'scrollbars=yes,width=550,height=520\');return true"><p>Subscribe and Never Miss an Article</p><input type="text" style="width:140px" placeholder="Email Address" name="email"/><input type="hidden" value="Geeksforgeeks" name="uri"/><input type="hidden" name="loc" value="en_US"/>&nbsp;&nbsp;<input type="submit" style="background-color: #4cb96b;" value="Subscribe" /></form></div>\n\t\t</aside><aside id="text-18" class="widget widget_text">\t\t\t<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<!-- LargeRectangleSide -->\r\n<ins class="adsbygoogle"\r\n     style="display:inline-block;width:336px;height:280px"\r\n     data-ad-client="ca-pub-9465609616171866"\r\n     data-ad-slot="1884636833"></ins>\r\n<script>\r\n(adsbygoogle = window.adsbygoogle || []).push({});\r\n</script></div>\n\t\t</aside><aside id="text-13" class="widget widget_text">\t\t\t<div class="textwidget"><ul><li><a href="http://geeksquiz.com/category/articles/puzzle/">Common Interview Puzzles</a></li><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/advanced-data-structure/">Advanced Data Structures</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/pattern-searching/">Pattern Searching</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li><li><a href="http://www.geeksforgeeks.org/category/searching/">Searching</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/sorting/">Sorting</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/Hash/">Hashing</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/algorithm/analysis/">Analysis of Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/algorithm/mathematical/">Mathematical Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/algorithm/randomized/">Randomized Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>\r\n</ul>\r\n\r\n\r\n\r\n\r\n</div>\n\t\t</aside><aside id="categories-384568212" class="widget widget_categories"><p class="widget-title">All Categories</p><label class="screen-reader-text" for="cat">All Categories</label><select name=\'cat\' id=\'cat\' class=\'postform\' >\n\t<option value=\'-1\'>Select Category</option>\n\t<option class="level-0" value="1762">Advanced Data Structure&nbsp;&nbsp;(69)</option>\n\t<option class="level-0" value="1744">Algorithm&nbsp;&nbsp;(403)</option>\n\t<option class="level-1" value="1745">&nbsp;&nbsp;&nbsp;Analysis&nbsp;&nbsp;(16)</option>\n\t<option class="level-1" value="1748">&nbsp;&nbsp;&nbsp;Backtracking&nbsp;&nbsp;(11)</option>\n\t<option class="level-1" value="1750">&nbsp;&nbsp;&nbsp;Divide and Conquer&nbsp;&nbsp;(29)</option>\n\t<option class="level-1" value="1746">&nbsp;&nbsp;&nbsp;Dynamic Programming&nbsp;&nbsp;(91)</option>\n\t<option class="level-1" value="1754">&nbsp;&nbsp;&nbsp;Geometric&nbsp;&nbsp;(14)</option>\n\t<option class="level-1" value="1747">&nbsp;&nbsp;&nbsp;Greedy&nbsp;&nbsp;(20)</option>\n\t<option class="level-1" value="1753">&nbsp;&nbsp;&nbsp;Mathematical&nbsp;&nbsp;(123)</option>\n\t<option class="level-1" value="1749">&nbsp;&nbsp;&nbsp;Pattern Searching&nbsp;&nbsp;(29)</option>\n\t<option class="level-1" value="1757">&nbsp;&nbsp;&nbsp;Randomized&nbsp;&nbsp;(19)</option>\n\t<option class="level-1" value="1751">&nbsp;&nbsp;&nbsp;Searching&nbsp;&nbsp;(43)</option>\n\t<option class="level-1" value="1752">&nbsp;&nbsp;&nbsp;Sorting&nbsp;&nbsp;(40)</option>\n\t<option class="level-0" value="3">Arrays&nbsp;&nbsp;(80)</option>\n\t<option class="level-0" value="18">Articles&nbsp;&nbsp;(25)</option>\n\t<option class="level-0" value="1761">Binary Search Tree&nbsp;&nbsp;(37)</option>\n\t<option class="level-0" value="17">Bit Magic&nbsp;&nbsp;(56)</option>\n\t<option class="level-0" value="14">C/C++ Puzzles&nbsp;&nbsp;(244)</option>\n\t<option class="level-0" value="1790">Competitive Programming&nbsp;&nbsp;(4)</option>\n\t<option class="level-0" value="1710">GBlog&nbsp;&nbsp;(55)</option>\n\t<option class="level-0" value="67">GFacts&nbsp;&nbsp;(43)</option>\n\t<option class="level-0" value="97">Graph&nbsp;&nbsp;(74)</option>\n\t<option class="level-0" value="1756">Hash&nbsp;&nbsp;(21)</option>\n\t<option class="level-0" value="1755">Heap&nbsp;&nbsp;(18)</option>\n\t<option class="level-0" value="1140">Interview Experiences&nbsp;&nbsp;(1,050)</option>\n\t<option class="level-0" value="87">Java&nbsp;&nbsp;(55)</option>\n\t<option class="level-0" value="8">Linked Lists&nbsp;&nbsp;(70)</option>\n\t<option class="level-0" value="1760">Matrix&nbsp;&nbsp;(39)</option>\n\t<option class="level-0" value="66">MCQ&nbsp;&nbsp;(95)</option>\n\t<option class="level-0" value="4">Misc&nbsp;&nbsp;(40)</option>\n\t<option class="level-0" value="5">Output&nbsp;&nbsp;(55)</option>\n\t<option class="level-0" value="1767">Project&nbsp;&nbsp;(21)</option>\n\t<option class="level-0" value="1789">Python&nbsp;&nbsp;(5)</option>\n\t<option class="level-0" value="1743">Queue&nbsp;&nbsp;(16)</option>\n\t<option class="level-0" value="1742">Stack&nbsp;&nbsp;(25)</option>\n\t<option class="level-0" value="7">Strings&nbsp;&nbsp;(61)</option>\n\t<option class="level-0" value="1788">Technical Scripter&nbsp;&nbsp;(13)</option>\n\t<option class="level-0" value="19">Trees&nbsp;&nbsp;(114)</option>\n</select>\n\n<script type=\'text/javascript\'>\n/* <![CDATA[ */\n(function() {\n\tvar dropdown = document.getElementById( "cat" );\n\tfunction onCatChange() {\n\t\tif ( dropdown.options[ dropdown.selectedIndex ].value > 0 ) {\n\t\t\tlocation.href = "http://www.geeksforgeeks.org/?cat=" + dropdown.options[ dropdown.selectedIndex ].value;\n\t\t}\n\t}\n\tdropdown.onchange = onCatChange;\n})();\n/* ]]> */\n</script>\n\n</aside><aside id="text-21" class="widget widget_text"><p class="widget-title">Recent Comments</p>\t\t\t<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>\n\t\t</aside><aside id="tag_cloud-3" class="widget widget_tag_cloud"><p class="widget-title">Tags</p><div class="tagcloud"><a href=\'http://www.geeksforgeeks.org/tag/adobe/\' class=\'tag-link-148\' title=\'32 topics\' style=\'font-size: 12.941176470588pt;\'>Adobe</a>\n<a href=\'http://www.geeksforgeeks.org/tag/advance-data-structures/\' class=\'tag-link-152\' title=\'31 topics\' style=\'font-size: 12.838235294118pt;\'>Advance Data Structures</a>\n<a href=\'http://www.geeksforgeeks.org/tag/advanced-data-structures/\' class=\'tag-link-150\' title=\'38 topics\' style=\'font-size: 13.661764705882pt;\'>Advanced Data Structures</a>\n<a href=\'http://www.geeksforgeeks.org/tag/amazon/\' class=\'tag-link-141\' title=\'253 topics\' style=\'font-size: 22pt;\'>Amazon</a>\n<a href=\'http://www.geeksforgeeks.org/tag/array/\' class=\'tag-link-68\' title=\'12 topics\' style=\'font-size: 8.7205882352941pt;\'>array</a>\n<a href=\'http://www.geeksforgeeks.org/tag/backtracking/\' class=\'tag-link-112\' title=\'11 topics\' style=\'font-size: 8.4117647058824pt;\'>Backtracking</a>\n<a href=\'http://www.geeksforgeeks.org/tag/bharti-softbank-hike/\' class=\'tag-link-1214\' title=\'10 topics\' style=\'font-size: 8pt;\'>Bharti SoftBank (HIKE)</a>\n<a href=\'http://www.geeksforgeeks.org/tag/bit-magic/\' class=\'tag-link-17\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>Bit Magic</a>\n<a href=\'http://www.geeksforgeeks.org/tag/c/\' class=\'tag-link-86\' title=\'18 topics\' style=\'font-size: 10.470588235294pt;\'>C++</a>\n<a href=\'http://www.geeksforgeeks.org/tag/cn/\' class=\'tag-link-142\' title=\'12 topics\' style=\'font-size: 8.7205882352941pt;\'>CN</a>\n<a href=\'http://www.geeksforgeeks.org/tag/c-puzzle/\' class=\'tag-link-69\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>c puzzle</a>\n<a href=\'http://www.geeksforgeeks.org/tag/d-e-shaw/\' class=\'tag-link-823\' title=\'17 topics\' style=\'font-size: 10.264705882353pt;\'>D-E-Shaw</a>\n<a href=\'http://www.geeksforgeeks.org/tag/dbms/\' class=\'tag-link-139\' title=\'11 topics\' style=\'font-size: 8.4117647058824pt;\'>DBMS</a>\n<a href=\'http://www.geeksforgeeks.org/tag/divide-and-conquer/\' class=\'tag-link-113\' title=\'27 topics\' style=\'font-size: 12.220588235294pt;\'>Divide and Conquer</a>\n<a href=\'http://www.geeksforgeeks.org/tag/dynamic-programming/\' class=\'tag-link-111\' title=\'83 topics\' style=\'font-size: 17.058823529412pt;\'>Dynamic Programming</a>\n<a href=\'http://www.geeksforgeeks.org/tag/flipkart/\' class=\'tag-link-173\' title=\'46 topics\' style=\'font-size: 14.485294117647pt;\'>Flipkart</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate/\' class=\'tag-link-114\' title=\'88 topics\' style=\'font-size: 17.367647058824pt;\'>GATE</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-2012/\' class=\'tag-link-133\' title=\'10 topics\' style=\'font-size: 8pt;\'>GATE-CS-2012</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-c-language/\' class=\'tag-link-72\' title=\'10 topics\' style=\'font-size: 8pt;\'>GATE-CS-C-Language</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-ds-algo/\' class=\'tag-link-79\' title=\'35 topics\' style=\'font-size: 13.352941176471pt;\'>GATE-CS-DS-&amp;-Algo</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-older/\' class=\'tag-link-145\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>GATE-CS-Older</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gfact/\' class=\'tag-link-67\' title=\'20 topics\' style=\'font-size: 10.882352941176pt;\'>GFacts</a>\n<a href=\'http://www.geeksforgeeks.org/tag/goldman-sachs/\' class=\'tag-link-590\' title=\'20 topics\' style=\'font-size: 10.882352941176pt;\'>Goldman Sachs</a>\n<a href=\'http://www.geeksforgeeks.org/tag/google/\' class=\'tag-link-155\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>Google</a>\n<a href=\'http://www.geeksforgeeks.org/tag/graph/\' class=\'tag-link-97\' title=\'45 topics\' style=\'font-size: 14.382352941176pt;\'>Graph</a>\n<a href=\'http://www.geeksforgeeks.org/tag/greedy-algorithm/\' class=\'tag-link-159\' title=\'20 topics\' style=\'font-size: 10.882352941176pt;\'>Greedy Algorithm</a>\n<a href=\'http://www.geeksforgeeks.org/tag/hashing/\' class=\'tag-link-250\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>Hashing</a>\n<a href=\'http://www.geeksforgeeks.org/tag/interview-experience/\' class=\'tag-link-126\' title=\'216 topics\' style=\'font-size: 21.382352941176pt;\'>Interview Experience</a>\n<a href=\'http://www.geeksforgeeks.org/tag/java/\' class=\'tag-link-87\' title=\'61 topics\' style=\'font-size: 15.720588235294pt;\'>Java</a>\n<a href=\'http://www.geeksforgeeks.org/tag/maq-software/\' class=\'tag-link-1392\' title=\'11 topics\' style=\'font-size: 8.4117647058824pt;\'>MAQ Software</a>\n<a href=\'http://www.geeksforgeeks.org/tag/mathematicalalgo/\' class=\'tag-link-154\' title=\'73 topics\' style=\'font-size: 16.544117647059pt;\'>MathematicalAlgo</a>\n<a href=\'http://www.geeksforgeeks.org/tag/matrix/\' class=\'tag-link-211\' title=\'21 topics\' style=\'font-size: 11.088235294118pt;\'>Matrix</a>\n<a href=\'http://www.geeksforgeeks.org/tag/microsoft/\' class=\'tag-link-104\' title=\'95 topics\' style=\'font-size: 17.676470588235pt;\'>Microsoft</a>\n<a href=\'http://www.geeksforgeeks.org/tag/morgan-stanley/\' class=\'tag-link-167\' title=\'17 topics\' style=\'font-size: 10.264705882353pt;\'>Morgan Stanley</a>\n<a href=\'http://www.geeksforgeeks.org/tag/operating-systems/\' class=\'tag-link-110\' title=\'19 topics\' style=\'font-size: 10.676470588235pt;\'>Operating systems</a>\n<a href=\'http://www.geeksforgeeks.org/tag/oracle/\' class=\'tag-link-171\' title=\'24 topics\' style=\'font-size: 11.705882352941pt;\'>Oracle</a>\n<a href=\'http://www.geeksforgeeks.org/tag/pattern-searching/\' class=\'tag-link-107\' title=\'26 topics\' style=\'font-size: 12.014705882353pt;\'>Pattern Searching</a>\n<a href=\'http://www.geeksforgeeks.org/tag/puzzle/\' class=\'tag-link-70\' title=\'15 topics\' style=\'font-size: 9.6470588235294pt;\'>puzzle</a>\n<a href=\'http://www.geeksforgeeks.org/tag/python/\' class=\'tag-link-1770\' title=\'21 topics\' style=\'font-size: 11.088235294118pt;\'>Python</a>\n<a href=\'http://www.geeksforgeeks.org/tag/recursion/\' class=\'tag-link-85\' title=\'21 topics\' style=\'font-size: 11.088235294118pt;\'>Recursion</a>\n<a href=\'http://www.geeksforgeeks.org/tag/samsung/\' class=\'tag-link-180\' title=\'12 topics\' style=\'font-size: 8.7205882352941pt;\'>Samsung</a>\n<a href=\'http://www.geeksforgeeks.org/tag/sap-labs/\' class=\'tag-link-1414\' title=\'23 topics\' style=\'font-size: 11.5pt;\'>SAP Labs</a>\n<a href=\'http://www.geeksforgeeks.org/tag/snapdeal/\' class=\'tag-link-1246\' title=\'16 topics\' style=\'font-size: 9.9558823529412pt;\'>SnapDeal</a>\n<a href=\'http://www.geeksforgeeks.org/tag/stack/\' class=\'tag-link-94\' title=\'17 topics\' style=\'font-size: 10.264705882353pt;\'>stack</a>\n<a href=\'http://www.geeksforgeeks.org/tag/stack-queue/\' class=\'tag-link-899\' title=\'12 topics\' style=\'font-size: 8.7205882352941pt;\'>Stack-Queue</a></div>\n</aside><aside id="text-25" class="widget widget_text">\t\t\t<div class="textwidget"><ul>\r\n<li><h2><a href="http://geeksquiz.com/">GeeksQuiz</a></h2></li>\r\n\r\n<li><h2><a href="http://code.geeksforgeeks.org/">GeeksforGeeksIDE</a></h2></li>\r\n\r\n<li><h2><a href="http://www.practice.geeksforgeeks.org/">GeeksforGeeks Practice</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/data-structures/">Data Structures</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/c/">C Programming</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++ Programming</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/java/">Java Programming</a></h2></li>\r\n\r\n<li><h2><a href="http://geeksquiz.com/books/">Books</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Experiences</a></h2></li>\r\n\r\n<li><h2><a href="http://geeksquiz.com/gate-corner-2/">GATE CS</a></h2></li>\r\n\r\n<li><h2><a href="http://www.gatecs.geeksquiz.com">GATE CS Forum</a></h2></li>\r\n\r\n<li><h2><a href="https://play.google.com/store/apps/details?id=free.programming.programming">Android App</a></h2></li>\r\n</ul>\r\n\r\n</div>\n\t\t</aside>\t\t</div><!-- #secondary -->\r\n\t\t</div><!-- #main .wrapper -->\r\n\t<footer id="colophon" role="contentinfo">\r\n\t\t<div class="site-info">\r\n\t\t<div class="clear"></div>\r\n\t\t</div><!-- .site-info -->\r\n\t\t</footer><!-- #colophon -->\r\n<center>\r\n<div class="iconic-footer">\r\n\r\n@geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>  <a href="http://www.geeksforgeeks.org/about/"> &nbsp; &nbsp; &nbsp; &nbsp;About Us!&nbsp; &nbsp; &nbsp; &nbsp;</a><a href="http://www.geeksforgeeks.org/new/ad.htm"> &nbsp; &nbsp; &nbsp; &nbsp;Advertise with us!&nbsp; &nbsp; &nbsp; &nbsp;</a>\r\n\r\n      \t\t\t</div></center><!-- .site-info -->\r\n\r\n\t\t\t\t<div class="clear"></div>\r\n</div><!-- #page -->\r\n\r\n        <script type="text/javascript">\r\n        // <![CDATA[\r\n        var disqus_shortname = \'geeksforgeeks\';\r\n        (function () {\r\n            var nodes = document.getElementsByTagName(\'span\');\r\n            for (var i = 0, url; i < nodes.length; i++) {\r\n                if (nodes[i].className.indexOf(\'dsq-postid\') != -1) {\r\n                    nodes[i].parentNode.setAttribute(\'data-disqus-identifier\', nodes[i].getAttribute(\'data-dsqidentifier\'));\r\n                    url = nodes[i].parentNode.href.split(\'#\', 1);\r\n                    if (url.length == 1) { url = url[0]; }\r\n                    else { url = url[1]; }\r\n                    nodes[i].parentNode.href = url + \'#disqus_thread\';\r\n                }\r\n            }\r\n            var s = document.createElement(\'script\'); \r\n            s.async = true;\r\n            s.type = \'text/javascript\';\r\n            s.src = \'//\' + disqus_shortname + \'.disqus.com/count.js\';\r\n            (document.getElementsByTagName(\'HEAD\')[0] || document.getElementsByTagName(\'BODY\')[0]).appendChild(s);\r\n        }());\r\n        // ]]>\r\n        </script>\r\n        <script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushJava.js\'></script>\n<script type=\'text/javascript\'>\n\t(function(){\n\t\tvar corecss = document.createElement(\'link\');\n\t\tvar themecss = document.createElement(\'link\');\n\t\tvar corecssurl = "http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9b";\r\n\t\tif ( corecss.setAttribute ) {\r\n\t\t\t\tcorecss.setAttribute( "rel", "stylesheet" );\r\n\t\t\t\tcorecss.setAttribute( "type", "text/css" );\r\n\t\t\t\tcorecss.setAttribute( "href", corecssurl );\r\n\t\t} else {\r\n\t\t\t\tcorecss.rel = "stylesheet";\r\n\t\t\t\tcorecss.href = corecssurl;\r\n\t\t}\r\n\t\tdocument.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );\r\n\t\tvar themecssurl = "http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9b";\r\n\t\tif ( themecss.setAttribute ) {\r\n\t\t\t\tthemecss.setAttribute( "rel", "stylesheet" );\r\n\t\t\t\tthemecss.setAttribute( "type", "text/css" );\r\n\t\t\t\tthemecss.setAttribute( "href", themecssurl );\r\n\t\t} else {\r\n\t\t\t\tthemecss.rel = "stylesheet";\r\n\t\t\t\tthemecss.href = themecssurl;\r\n\t\t}\r\n\t\t//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);\r\n\t\tdocument.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );\r\n\t})();\n\tSyntaxHighlighter.config.strings.expandSource = \'+ expand source\';\n\tSyntaxHighlighter.config.strings.help = \'?\';\n\tSyntaxHighlighter.config.strings.alert = \'SyntaxHighlighter\\n\\n\';\n\tSyntaxHighlighter.config.strings.noBrush = \'Can\\\'t find brush for: \';\n\tSyntaxHighlighter.config.strings.brushNotHtmlScript = \'Brush wasn\\\'t configured for html-script option: \';\n\tSyntaxHighlighter.defaults[\'gutter\'] = false;\n\tSyntaxHighlighter.defaults[\'pad-line-numbers\'] = true;\n\tSyntaxHighlighter.defaults[\'toolbar\'] = false;\n\tSyntaxHighlighter.all();\r\n</script>\r\n<link rel=\'stylesheet\' id=\'tabby-print-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/tabby-responsive-tabs/css/tabby-print.css\' type=\'text/css\' media=\'all\' />\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/js/comment-reply.min.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/js/selectnav.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/js/jquery/jquery.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/js/jquery/jquery-migrate.min.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/tabby-responsive-tabs/js/tabby.js\'></script>\n\n<script>jQuery(document).ready(function($) { RESPONSIVEUI.responsiveTabs(); })</script>\n\r\n\r\n<script type="text/javascript">\r\n\r\n  var _gaq = _gaq || [];\r\n  _gaq.push([\'_setAccount\', \'UA-12148232-1\']);\r\n  _gaq.push([\'_trackPageview\']);\r\n\r\n  (function() {\r\n    var ga = document.createElement(\'script\'); ga.type = \'text/javascript\'; ga.async = true;\r\n    ga.src = (\'https:\' == document.location.protocol ? \'https://ssl\' : \'http://www\') + \'.google-analytics.com/ga.js\';\r\n    var s = document.getElementsByTagName(\'script\')[0]; s.parentNode.insertBefore(ga, s);\r\n  })();\r\n\r\n</script>  \r\n<script async type="text/javascript" src="//cdn.fancybar.net/ac/fancybar.js?zoneid=1502&serve=C6ADVKE&placement=geeksforgeeks" id="_fancybar_js"></script>\r\n</body>\r\n</html>\n<!-- Dynamic page generated in 0.342 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2016-02-29 01:20:07 -->\n\n<!-- Compression = gzip -->\n<!-- super cache -->'
p366
sb.