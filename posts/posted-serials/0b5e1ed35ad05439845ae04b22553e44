ccopy_reg
_reconstructor
p0
(cpost
Post
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'post_file'
p6
S'/Users/anupamjain/code/gitRepo/GitToPost/posts/Java/CheckIfBinarySearchTree'
p7
sS'files_covered'
p8
c__builtin__
set
p9
((lp10
S'/Users/anupamjain/code/gitRepo/Questions/Algo/Java/CheckIfBinarySearchTree.java'
p11
atp12
Rp13
sS'title'
p14
VA program to check if a binary tree is BST or not
p15
sS'file_name'
p16
g11
sS'link'
p17
S'http://www.geeksforgeeks.org/a-program-to-check-if-a-binary-tree-is-bst-or-not/'
p18
sS'host_name'
p19
S'www.geeksforgeeks.org'
p20
sS'problem_text'
p21
g0
(cbs4.element
Tag
p22
g2
Ntp23
Rp24
(dp25
S'can_be_empty_element'
p26
I00
sS'previous_element'
p27
NsS'next_sibling'
p28
NsS'name'
p29
S'p'
p30
sS'parent'
p31
NsS'namespace'
p32
NsS'prefix'
p33
NsS'previous_sibling'
p34
NsS'attrs'
p35
(dp36
sS'next_element'
p37
g0
(g22
g2
Ntp38
Rp39
(dp40
g26
I00
sg27
g24
sg28
g0
(g22
g2
Ntp41
Rp42
(dp43
g26
I00
sg27
g0
(cbs4.element
NavigableString
p44
c__builtin__
unicode
p45
V\u000a\u2022 Both the left and right subtrees must also be binary search trees.
p46
tp47
Rp48
(dp49
g34
g0
(g22
g2
Ntp50
Rp51
(dp52
g26
I01
sg27
g0
(g44
g45
V\u000a\u2022 The right subtree of a node contains only nodes with keys greater than the node\u2019s key.
p53
tp54
Rp55
(dp56
g34
g0
(g22
g2
Ntp57
Rp58
(dp59
g26
I01
sg27
g0
(g44
g45
V\u000a\u2022 The left subtree of a node contains only nodes with keys less than the node\u2019s key.
p60
tp61
Rp62
(dp63
g34
g0
(g22
g2
Ntp64
Rp65
(dp66
g26
I01
sg27
g0
(g22
g2
Ntp67
Rp68
(dp69
g26
I00
sg27
g0
(g44
g45
VA binary search tree (BST) is a node based binary tree data structure which has the following properties.
p70
tp71
Rp72
(dp73
g34
Nsg27
g39
sg28
g68
sg37
g68
sg31
g39
sbsg28
g65
sg29
Vspan
p74
sg31
g39
sg32
Nsg33
Nsg34
g72
sg35
(dp75
Vid
p76
Vmore-3042
p77
ssg37
g65
sS'parser_class'
p78
cbs4
BeautifulSoup
p79
sS'hidden'
p80
I00
sS'contents'
p81
(lp82
sbsg28
g62
sg29
Vbr
p83
sg31
g39
sg32
Nsg33
Nsg34
g68
sg35
(dp84
sg37
g62
sg78
g79
sg80
I00
sg81
(lp85
sbsg27
g65
sg28
g58
sg37
g58
sg31
g39
sbsg28
g55
sg29
Vbr
p86
sg31
g39
sg32
Nsg33
Nsg34
g62
sg35
(dp87
sg37
g55
sg78
g79
sg80
I00
sg81
(lp88
sbsg27
g58
sg28
g51
sg37
g51
sg31
g39
sbsg28
g48
sg29
Vbr
p89
sg31
g39
sg32
Nsg33
Nsg34
g55
sg35
(dp90
sg37
g48
sg78
g79
sg80
I00
sg81
(lp91
sbsg27
g51
sg28
Nsg37
g42
sg31
g39
sbsg28
g0
(g22
g2
Ntp92
Rp93
(dp94
g26
I00
sg27
g0
(g44
g45
V\u000a\u2022 Each node (item in the tree) has a distinct key.
p95
tp96
Rp97
(dp98
g34
g0
(g22
g2
Ntp99
Rp100
(dp101
g26
I01
sg27
g0
(g44
g45
VFrom the above properties it naturally follows that:
p102
tp103
Rp104
(dp105
g34
Nsg27
g42
sg28
g100
sg37
g100
sg31
g42
sbsg28
g97
sg29
Vbr
p106
sg31
g42
sg32
Nsg33
Nsg34
g104
sg35
(dp107
sg37
g97
sg78
g79
sg80
I00
sg81
(lp108
sbsg27
g100
sg28
Nsg37
g93
sg31
g42
sbsg28
g0
(g22
g2
Ntp109
Rp110
(dp111
g26
I00
sg27
g0
(g22
g2
Ntp112
Rp113
(dp114
g26
I01
sg27
g93
sg28
Nsg29
Vimg
p115
sg31
g93
sg32
Nsg33
Nsg34
Nsg35
(dp116
Vsrc
p117
Vhttp://geeksforgeeks.org/wp-content/uploads/2009/11/BST.gif
p118
sVtitle
p119
VBST
p120
sVheight
p121
V156
p122
sVwidth
p123
V259
p124
sValt
p125
VBST
p126
sVclass
p127
(lp128
Valigncenter
p129
aVsize-full
p130
aVwp-image-3059
p131
assg37
g110
sg78
g79
sg80
I00
sg81
(lp132
sbsg28
Nsg29
Vp
p133
sg31
g24
sg32
Nsg33
Nsg34
g93
sg35
(dp134
sg37
Nsg78
g79
sg80
I00
sg81
(lp135
sbsg29
g133
sg31
g24
sg32
Nsg33
Nsg34
g42
sg35
(dp136
sg37
g113
sg78
g79
sg80
I00
sg81
(lp137
g113
asbsg29
g133
sg31
g24
sg32
Nsg33
Nsg34
g39
sg35
(dp138
sg37
g104
sg78
g79
sg80
I00
sg81
(lp139
g104
ag100
ag97
asbsg29
g133
sg31
g24
sg32
Nsg33
Nsg34
Nsg35
(dp140
sg37
g72
sg78
g79
sg80
I00
sg81
(lp141
g72
ag68
ag65
ag62
ag58
ag55
ag51
ag48
asbsg78
Nsg80
I00
sg81
(lp142
g39
ag42
ag93
ag110
asbsS'raw_page'
p143
S'<!DOCTYPE html>\r\n<!--[if IE 7]>\r\n<html class="ie ie7" lang="en-US" prefix="og: http://ogp.me/ns#">\r\n<![endif]-->\r\n<!--[if IE 8]>\r\n<html class="ie ie8" lang="en-US" prefix="og: http://ogp.me/ns#">\r\n<![endif]-->\r\n<!--[if !(IE 7) | !(IE 8)  ]><!-->\r\n<html lang="en-US" prefix="og: http://ogp.me/ns#">\r\n<!--<![endif]-->\r\n<head>\r\n<meta charset="UTF-8" />\r\n<meta name="viewport" content="width=device-width" />\r\n\r\n<meta property="og:image" content="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/gfg_200X200.png">\r\n<meta property="og:image:type" content="image/png">\r\n<meta property="og:image:width" content="200">\r\n<meta property="og:image:height" content="200">\r\n\r\n<title>A program to check if a binary tree is BST or not - GeeksforGeeks</title>\r\n<link rel="profile" href="http://gmpg.org/xfn/11" />\r\n<link rel="pingback" href="http://www.geeksforgeeks.org/xmlrpc.php" />\r\n<!--[if lt IE 9]>\r\n<script src="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/js/html5.js" type="text/javascript"></script>\r\n<![endif]-->\r\n\n<!-- This site is optimized with the Yoast SEO plugin v3.0.7 - https://yoast.com/wordpress/plugins/seo/ -->\n<link rel="canonical" href="http://www.geeksforgeeks.org/a-program-to-check-if-a-binary-tree-is-bst-or-not/" />\n<meta property="og:locale" content="en_US" />\n<meta property="og:type" content="article" />\n<meta property="og:title" content="A program to check if a binary tree is BST or not - GeeksforGeeks" />\n<meta property="og:description" content="A binary search tree (BST) is a node based binary tree data structure which has the following properties. \xe2\x80\xa2 The left subtree of a node contains only nodes with keys less than the node&#8217;s key. \xe2\x80\xa2 The right subtree of a node contains only nodes with keys greater than the node&#8217;s key. \xe2\x80\xa2 Both the\xe2\x80\xa6 Read More &raquo;" />\n<meta property="og:url" content="http://www.geeksforgeeks.org/a-program-to-check-if-a-binary-tree-is-bst-or-not/" />\n<meta property="og:site_name" content="GeeksforGeeks" />\n<meta property="article:section" content="Binary Search Tree" />\n<meta property="article:published_time" content="2009-11-21T02:04:47+00:00" />\n<meta property="article:modified_time" content="2016-02-20T12:57:52+00:00" />\n<meta property="og:updated_time" content="2016-02-20T12:57:52+00:00" />\n<meta property="og:image" content="http://geeksforgeeks.org/wp-content/uploads/2009/11/BST.gif" />\n<meta property="og:image" content="http://geeksforgeeks.org/wp-content/uploads/2009/11/tree_bst.gif" />\n<!-- / Yoast SEO plugin. -->\n\n\t\t<script type="text/javascript">\n\t\t\twindow._wpemojiSettings = {"baseUrl":"http:\\/\\/s.w.org\\/images\\/core\\/emoji\\/72x72\\/","ext":".png","source":{"concatemoji":"http:\\/\\/www.geeksforgeeks.org\\/wp-includes\\/js\\/wp-emoji-release.min.js"}};\n\t\t\t!function(a,b,c){function d(a){var c=b.createElement("canvas"),d=c.getContext&&c.getContext("2d");return d&&d.fillText?(d.textBaseline="top",d.font="600 32px Arial","flag"===a?(d.fillText(String.fromCharCode(55356,56812,55356,56807),0,0),c.toDataURL().length>3e3):(d.fillText(String.fromCharCode(55357,56835),0,0),0!==d.getImageData(16,16,1,1).data[0])):!1}function e(a){var c=b.createElement("script");c.src=a,c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f,g;c.supports={simple:d("simple"),flag:d("flag")},c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.simple&&c.supports.flag||(g=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",g,!1),a.addEventListener("load",g,!1)):(a.attachEvent("onload",g),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&&f.twemoji&&(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);\n\t\t</script>\n\t\t<style type="text/css">\nimg.wp-smiley,\nimg.emoji {\n\tdisplay: inline !important;\n\tborder: none !important;\n\tbox-shadow: none !important;\n\theight: 1em !important;\n\twidth: 1em !important;\n\tmargin: 0 .07em !important;\n\tvertical-align: -0.1em !important;\n\tbackground: none !important;\n\tpadding: 0 !important;\n}\n</style>\n<link rel=\'stylesheet\' id=\'wp-pagenavi-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/wp-pagenavi/pagenavi-css.css\' type=\'text/css\' media=\'all\' />\n<link rel=\'stylesheet\' id=\'themonic-fonts-css\'  href=\'http://fonts.googleapis.com/css?family=Ubuntu:400,700&#038;subset=latin,latin-ext\' type=\'text/css\' media=\'all\' />\n<link rel=\'stylesheet\' id=\'themonic-style-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/style.css\' type=\'text/css\' media=\'all\' />\n<link rel=\'stylesheet\' id=\'custom-style-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/custom.css\' type=\'text/css\' media=\'all\' />\n<!--[if lt IE 9]>\n<link rel=\'stylesheet\' id=\'themonic-ie-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/css/ie.css\' type=\'text/css\' media=\'all\' />\n<![endif]-->\n<meta name="generator" content="WordPress 4.2.7" />\n<style type="text/css" id="custom-background-css">\nbody.custom-background { background-color: #ffffff; }\n</style>\n<style type="text/css" id="syntaxhighlighteranchor"></style>\n<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<script>\r\n  (adsbygoogle = window.adsbygoogle || []).push({\r\n    google_ad_client: "ca-pub-9465609616171866",\r\n    enable_page_level_ads: true\r\n  });\r\n</script>\r\n</head>\r\n<body class="single single-post postid-3042 single-format-standard custom-background custom-background-white custom-font-enabled">\r\n<div id="page" class="hfeed site">\r\n\t<header id="masthead" class="site-header" role="banner">\r\n\t\t\t\t\t<hgroup>\r\n\t\t\t<a href="http://www.geeksforgeeks.org/" title="GeeksforGeeks" rel="home">GeeksforGeeks</a>\r\n\t\t\t\t<br .../> <a class="site-description">A computer science portal for geeks</a>\r\n\t\t</hgroup>\r\n\r\n<div style="float:right;">\r\n<hgroup style="float:right;">   \r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://www.geeksforgeeks.org/campus-ambassador-program-by-geeksforgeeks/">CA</a>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://geeksquiz.com/gate-corner-2/">GATE CS</a>\r\n\r\n<strong><a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://practice.geeksforgeeks.org/">Practice</a></strong>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://www.geeksforgeeks.org/suggest/">Suggest</a>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://code.geeksforgeeks.org/">IDE</a>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://qa.geeksforgeeks.org/">Q&A</a>\r\n\r\n<a style="padding:0px 30px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://geeksquiz.com/">GeeksQuiz</a>\r\n\r\n</hgroup><br></br>\r\n\r\n<span style="display:inline-block; width:300px;float:right;">\r\n<script>\r\n  (function() {\r\n    var cx = \'009682134359037907028:tj6eafkv_be\';\r\n    var gcse = document.createElement(\'script\');\r\n    gcse.type = \'text/javascript\';\r\n    gcse.async = true;\r\n    gcse.src = (document.location.protocol == \'https:\' ? \'https:\' : \'http:\') +\r\n        \'//cse.google.com/cse.js?cx=\' + cx;\r\n    var s = document.getElementsByTagName(\'script\')[0];\r\n    s.parentNode.insertBefore(gcse, s);\r\n  })();\r\n</script>\r\n<gcse:search></gcse:search>\r\n\r\n<style type="text/css">\r\n  .gsc-control-cse {\r\n     padding: 0px 10px;\r\n  } \r\n\r\n  .gsc-control-cse {\r\n    font-family: "Trebuchet MS", sans-serif;\r\n    /*border-color: #E1F3DA;*/\r\n    /*background-color: #E1F3DA;*/\r\n  }\r\n  input.gsc-input {\r\n    border-color: #94CC7A;\r\n  }\r\n  input.gsc-search-button {\r\n    border-color: #94CC7A;\r\n    background-color: #4CB96B;\r\n    margin-top:7px;\r\n  }\r\n  .gsc-tabHeader.gsc-tabhInactive {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gsc-tabHeader.gsc-tabhActive {\r\n    border-color: #A9DA92;\r\n    background-color: #A9DA92;\r\n  }\r\n  .gsc-tabsArea {\r\n    border-color: #A9DA92;\r\n  }\r\n  .gsc-webResult.gsc-result {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gsc-webResult.gsc-result:hover {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:link,\r\n  .gs-webResult.gs-result a.gs-title:link b {\r\n    color: #009900;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:visited,\r\n  .gs-webResult.gs-result a.gs-title:visited b {\r\n    color: #009900;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:hover,\r\n  .gs-webResult.gs-result a.gs-title:hover b {\r\n    color: #003300;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:active,\r\n  .gs-webResult.gs-result a.gs-title:active b {\r\n    color: #009900;\r\n  }\r\n  .gsc-cursor-page {\r\n    color: #009900;\r\n  }\r\n  a.gsc-trailing-more-results:link {\r\n    color: #009900;\r\n  }\r\n  .gs-webResult.gs-result .gs-snippet {\r\n    color: #454545;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl {\r\n    color: #33cc00;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl-short {\r\n    color: #33cc00;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl-short {\r\n    display: none;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl-long {\r\n    display: block;\r\n  }\r\n  .gsc-cursor-box {\r\n    border-color: #A9DA92;\r\n  }\r\n  .gsc-results .gsc-cursor-page {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {\r\n    border-color: #A9DA92;\r\n    background-color: #A9DA92;\r\n  }\r\n  .gs-promotion.gs-result {\r\n    border-color: #94CC7A;\r\n    background-color: #CBE8B4;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:link {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:visited {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:hover {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:active {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result .gs-snippet {\r\n    color: #454545;\r\n  }\r\n  .gs-promotion.gs-result .gs-visibleUrl,\r\n  .gs-promotion.gs-result .gs-visibleUrl-short {\r\n    color: #815FA7;\r\n  }\r\n  .gsib_a {\r\n    padding : 2px;\r\n  }\r\n</style>    \r\n</span>\r\n</div>\r\n\r\n\t\t\r\n\t\t\r\n\t\t<nav id="site-navigation" class="themonic-nav" role="navigation">\r\n\t\t\t<a class="assistive-text" href="#content" title="Skip to content">Skip to content</a>\r\n\t\t\t<div class="menu-iconic-container"><ul id="menu-top" class="nav-menu"><li id="menu-item-135003" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-135003"><a href="http://www.geeksforgeeks.org/">Home</a></li>\n<li id="menu-item-135004" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-135004"><a title="Algorithms" href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algo</a>\n<ul class="sub-menu">\n\t<li id="menu-item-135030" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135030"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#AnalysisofAlgorithms">Analysis of Algorithms</a></li>\n\t<li id="menu-item-135031" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135031"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#SearchingandSorting">Searching and Sorting</a></li>\n\t<li id="menu-item-135032" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135032"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#GreedyAlgorithms">Greedy Algorithms</a></li>\n\t<li id="menu-item-135033" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135033"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#DynamicProgramming">Dynamic Programming</a></li>\n\t<li id="menu-item-135034" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135034"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#PatternSearching">Pattern Searching</a></li>\n\t<li id="menu-item-135035" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135035"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#OtherStringAlgorithms">Other String Algorithms</a></li>\n\t<li id="menu-item-135036" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135036"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#Backtracking">Backtracking</a></li>\n\t<li id="menu-item-135037" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135037"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#DivideandConquer">Divide and Conquer</a></li>\n\t<li id="menu-item-135038" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135038"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#GeometricAlgorithms">Geometric Algorithms</a></li>\n\t<li id="menu-item-135039" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135039"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#MathematicalAlgorithms">Mathematical Algorithms</a></li>\n\t<li id="menu-item-135040" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135040"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#BitAlgorithms">Bit Algorithms</a></li>\n\t<li id="menu-item-135041" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135041"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#GraphAlgorithms">Graph Algorithms</a></li>\n\t<li id="menu-item-135042" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135042"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#RandomizedAlgorithms">Randomized Algorithms</a></li>\n</ul>\n</li>\n<li id="menu-item-135010" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-135010"><a title="Data Structures" href="http://www.geeksforgeeks.org/data-structures/">DS</a>\n<ul class="sub-menu">\n\t<li id="menu-item-135045" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135045"><a href="http://www.geeksforgeeks.org/data-structures/#LinkedList">LinkedList</a></li>\n\t<li id="menu-item-135046" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135046"><a href="http://www.geeksforgeeks.org/data-structures/#Stack">Stack</a></li>\n\t<li id="menu-item-135047" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135047"><a href="http://www.geeksforgeeks.org/data-structures/#Queue">Queue</a></li>\n\t<li id="menu-item-135048" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135048"><a href="http://www.geeksforgeeks.org/data-structures/#BinaryTree">Binary Tree</a></li>\n\t<li id="menu-item-135049" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135049"><a href="http://www.geeksforgeeks.org/data-structures/#BinarySearchTree">Binary Search Tree</a></li>\n\t<li id="menu-item-135050" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135050"><a href="http://www.geeksforgeeks.org/data-structures/#Heap">Heap</a></li>\n\t<li id="menu-item-135051" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135051"><a href="http://www.geeksforgeeks.org/data-structures/#Hashing">Hashing</a></li>\n\t<li id="menu-item-135052" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135052"><a href="http://www.geeksforgeeks.org/data-structures/#Graph">Graph</a></li>\n\t<li id="menu-item-135053" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135053"><a href="http://www.geeksforgeeks.org/data-structures/#AdvancedDataStructure">Advanced Data Structure</a></li>\n\t<li id="menu-item-135054" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135054"><a href="http://www.geeksforgeeks.org/data-structures/#Array">Array</a></li>\n\t<li id="menu-item-135055" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135055"><a href="http://www.geeksforgeeks.org/data-structures/#Matrix">Matrix</a></li>\n\t<li id="menu-item-135056" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135056"><a href="http://www.geeksforgeeks.org/data-structures/#Misc">Misc</a></li>\n</ul>\n</li>\n<li id="menu-item-135014" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135014"><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview</a></li>\n<li id="menu-item-135006" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135006"><a href="http://www.geeksforgeeks.org/c/">C</a></li>\n<li id="menu-item-135007" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135007"><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>\n<li id="menu-item-135012" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135012"><a href="http://www.geeksforgeeks.org/java/">Java</a></li>\n<li id="menu-item-137004" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-137004"><a href="http://www.geeksforgeeks.org/python/">Python</a></li>\n<li id="menu-item-135009" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135009"><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>\n<li id="menu-item-135016" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135016"><a href="http://qa.geeksforgeeks.org/index.php?qa=ask">Ask a Q</a></li>\n<li id="menu-item-135077" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135077"><a href="https://play.google.com/store/apps/details?id=free.programming.programming">AndroidApp</a></li>\n<li id="menu-item-135367" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135367"><a href="http://www.geeksforgeeks.org/category/guestblogs/">GBlog</a></li>\n<li id="menu-item-135028" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135028"><a href="http://www.geeksforgeeks.org/category/gfact/">GFact</a></li>\n<li id="menu-item-136004" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-136004"><a href="http://www.geeksforgeeks.org/category/project/">Project</a></li>\n<li id="menu-item-136978" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-136978"><a href="http://www.geeksforgeeks.org/jobs/">Jobs</a></li>\n<li id="menu-item-135019" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135019"><a href="http://www.geeksforgeeks.org/category/c-arrays/">Arr</a></li>\n<li id="menu-item-135022" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135022"><a href="http://www.geeksforgeeks.org/category/c-strings/">String</a></li>\n<li id="menu-item-135937" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135937"><a href="http://www.geeksforgeeks.org/category/matrix/">Matrix</a></li>\n<li id="menu-item-135023" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135023"><a href="http://www.geeksforgeeks.org/category/linked-list/">Linked List</a></li>\n<li id="menu-item-135029" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135029"><a href="http://www.geeksforgeeks.org/category/stack/">Stack</a></li>\n<li id="menu-item-135932" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135932"><a href="http://www.geeksforgeeks.org/category/queue/">Q</a></li>\n<li id="menu-item-136299" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-136299"><a href="http://www.geeksforgeeks.org/category/hash/">Hash</a></li>\n<li id="menu-item-135941" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135941"><a href="http://www.geeksforgeeks.org/category/heap/">Heap</a></li>\n<li id="menu-item-135020" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135020"><a href="http://www.geeksforgeeks.org/category/tree/">Tree</a></li>\n<li id="menu-item-135940" class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-parent current-post-parent menu-item-135940"><a href="http://www.geeksforgeeks.org/category/binary-search-tree/">BST</a></li>\n<li id="menu-item-135024" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135024"><a href="http://www.geeksforgeeks.org/category/graph/">Graph</a></li>\n<li id="menu-item-135017" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135017"><a href="http://www.geeksforgeeks.org/category/c-puzzles/">C/C++</a></li>\n<li id="menu-item-135027" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135027"><a href="http://www.geeksforgeeks.org/category/bit-magic/">Bit</a></li>\n<li id="menu-item-135021" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135021"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/">MCQ</a></li>\n<li id="menu-item-135018" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135018"><a href="http://www.geeksforgeeks.org/category/c-programs/">Misc</a></li>\n<li id="menu-item-135025" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135025"><a href="http://www.geeksforgeeks.org/category/program-output/">O/P</a></li>\n</ul></div>\t\t</nav><!-- #site-navigation -->\r\n\t\t<div class="clear"></div>\r\n\t</header><!-- #masthead -->\r\n\r\n\t<div id="main" class="wrapper">\t<div id="primary" class="site-content">\r\n\t\t<div id="content" role="main">\r\n\r\n\t\t\t\t\t\t\t\r\n\t<article id="post-3042" class="post-3042 post type-post status-publish format-standard hentry category-binary-search-tree">\r\n\t\t\t\t<header class="entry-header">\r\n\t\t\t\t\t\t<h1 class="entry-title">A program to check if a binary tree is BST or not</h1>\r\n\t\t\t\t\r\n\t\t\t</header><!-- .entry-header -->\r\n\r\n\t\t\t\t<div class="entry-content">\r\n\t\t\t<p>A binary search tree (BST) is a node based binary tree data structure which has the following properties.<span id="more-3042"></span><br />\n\xe2\x80\xa2 The left subtree of a node contains only nodes with keys less than the node&#8217;s key.<br />\n\xe2\x80\xa2 The right subtree of a node contains only nodes with keys greater than the node&#8217;s key.<br />\n\xe2\x80\xa2 Both the left and right subtrees must also be binary search trees.</p>\n<p>From the above properties it naturally follows that:<br />\n\xe2\x80\xa2 Each node (item in the tree) has a distinct key.</p>\n<p><img src="http://geeksforgeeks.org/wp-content/uploads/2009/11/BST.gif" alt="BST" title="BST" width="259" height="156" class="aligncenter size-full wp-image-3059" /></p>\n<p></br><br />\n<strong>METHOD 1 (Simple but Wrong)</strong><br />\nFollowing is a simple program. For each node, check if left node of it is smaller than the node and right node of it is greater than the node.</p>\n<pre class="brush: cpp; title: ; notranslate" title="">\r\nint isBST(struct node* node) \r\n{ \r\n  if (node == NULL) \r\n    return 1; \r\n    \r\n  /* false if left is &gt; than node */\r\n  if (node-&gt;left != NULL &amp;&amp; node-&gt;left-&gt;data &gt; node-&gt;data) \r\n    return 0; \r\n    \r\n  /* false if right is &lt; than node */\r\n  if (node-&gt;right != NULL &amp;&amp; node-&gt;right-&gt;data &lt; node-&gt;data) \r\n    return 0; \r\n  \r\n  /* false if, recursively, the left or right is not a BST */\r\n  if (!isBST(node-&gt;left) || !isBST(node-&gt;right)) \r\n    return 0; \r\n    \r\n  /* passing all that, it\'s a BST */\r\n  return 1; \r\n}\r\n</pre>\n<p><strong>This approach is wrong as this will return true for below binary tree (and below tree is not a BST because 4 is in left subtree of 3)<br />\n</strong></p>\n<p> <img src="http://geeksforgeeks.org/wp-content/uploads/2009/11/tree_bst.gif" alt="tree_bst" title="tree_bst" width="259" height="156" class="aligncenter size-full wp-image-3060" /></p>\n<p></br><br />\n<br /></br><br />\n<strong>METHOD 2 (Correct but not efficient)</strong><br />\nFor each node, check if max value in left subtree is smaller than the node and min value in right subtree greater than the node.</p>\n<pre class="brush: cpp; title: ; notranslate" title="">\r\n/* Returns true if a binary tree is a binary search tree */ \r\nint isBST(struct node* node) \r\n{ \r\n  if (node == NULL) \r\n    return(true); \r\n    \r\n  /* false if the max of the left is &gt; than us */\r\n  if (node-&gt;left!=NULL &amp;&amp; maxValue(node-&gt;left) &gt; node-&gt;data) \r\n    return(false); \r\n    \r\n  /* false if the min of the right is &lt;= than us */\r\n  if (node-&gt;right!=NULL &amp;&amp; minValue(node-&gt;right) &lt; node-&gt;data) \r\n    return(false); \r\n  \r\n  /* false if, recursively, the left or right is not a BST */\r\n  if (!isBST(node-&gt;left) || !isBST(node-&gt;right)) \r\n    return(false); \r\n    \r\n  /* passing all that, it\'s a BST */\r\n  return(true); \r\n} \r\n</pre>\n<p>It is assumed that you have helper functions minValue() and maxValue() that return the min or max int value from a non-empty tree</p>\n<p></br><br />\n<strong>METHOD 3 (Correct and Efficient)</strong><br />\nMethod 2 above runs slowly since it traverses over some parts of the tree many times. A better solution looks at each node only once. The trick is to write a utility helper function isBSTUtil(struct node* node, int min, int max) that traverses down the tree keeping track of the narrowing min and max allowed values as it goes, looking at each node only once. The initial values for min and max should be INT_MIN and INT_MAX &#8212; they narrow from there. </p>\n<pre>\r\n/* Returns true if the given tree is a binary search tree \r\n (efficient version). */ \r\nint isBST(struct node* node) \r\n{ \r\n  return(isBSTUtil(node, INT_MIN, INT_MAX)); \r\n} \r\n\r\n/* Returns true if the given tree is a BST and its \r\n values are >= min and <= max. */ \r\nint isBSTUtil(struct node* node, int min, int max) \r\n</pre>\n<p><strong>Implementation:</strong><br />\n<div class="responsive-tabs">\n<h2 class="tabtitle">C</h2>\n<div class="tabcontent">\n</p>\n<pre class="brush: cpp; title: ; notranslate" title="">\r\n#include &lt;stdio.h&gt;\r\n#include &lt;stdlib.h&gt;\r\n#include &lt;limits.h&gt;\r\n\r\n/* A binary tree node has data, pointer to left child\r\n   and a pointer to right child */\r\nstruct node\r\n{\r\n    int data;\r\n    struct node* left;\r\n    struct node* right;\r\n};\r\n\r\nint isBSTUtil(struct node* node, int min, int max);\r\n\r\n/* Returns true if the given tree is a binary search tree \r\n (efficient version). */ \r\nint isBST(struct node* node) \r\n{ \r\n  return(isBSTUtil(node, INT_MIN, INT_MAX)); \r\n} \r\n\r\n/* Returns true if the given tree is a BST and its \r\n   values are &gt;= min and &lt;= max. */ \r\nint isBSTUtil(struct node* node, int min, int max) \r\n{ \r\n  /* an empty tree is BST */\r\n  if (node==NULL) \r\n     return 1;\r\n      \r\n  /* false if this node violates the min/max constraint */  \r\n  if (node-&gt;data &lt; min || node-&gt;data &gt; max) \r\n     return 0; \r\n\r\n  /* otherwise check the subtrees recursively, \r\n   tightening the min or max constraint */\r\n  return \r\n    isBSTUtil(node-&gt;left, min, node-&gt;data-1) &amp;&amp;  // Allow only distinct values\r\n    isBSTUtil(node-&gt;right, node-&gt;data+1, max);  // Allow only distinct values\r\n} \r\n\r\n/* Helper function that allocates a new node with the\r\n   given data and NULL left and right pointers. */\r\nstruct node* newNode(int data)\r\n{\r\n  struct node* node = (struct node*)\r\n                       malloc(sizeof(struct node));\r\n  node-&gt;data = data;\r\n  node-&gt;left = NULL;\r\n  node-&gt;right = NULL;\r\n\r\n  return(node);\r\n}\r\n\r\n/* Driver program to test above functions*/\r\nint main()\r\n{\r\n  struct node *root = newNode(4);\r\n  root-&gt;left        = newNode(2);\r\n  root-&gt;right       = newNode(5);\r\n  root-&gt;left-&gt;left  = newNode(1);\r\n  root-&gt;left-&gt;right = newNode(3); \r\n\r\n  if(isBST(root))\r\n    printf(&quot;Is BST&quot;);\r\n  else\r\n    printf(&quot;Not a BST&quot;);\r\n    \r\n  getchar();\r\n  return 0;\r\n}  \r\n</pre>\n\n</div><h2 class="tabtitle">Java</h2>\n<div class="tabcontent">\n\n<pre class="brush: java; highlight: [26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]; title: ; notranslate" title="">\r\n//Java implementation to check if given Binary tree\r\n//is a BST or not\r\n\r\n/* Class containing left and right child of current\r\n node and key value*/\r\nclass Node\r\n{\r\n    int data;\r\n    Node left, right;\r\n\r\n    public Node(int item)\r\n    {\r\n        data = item;\r\n        left = right = null;\r\n    }\r\n}\r\n\r\npublic class BinaryTree\r\n{\r\n    //Root of the Binary Tree\r\n    Node root;\r\n\r\n    /* can give min and max value according to your code or\r\n    can write a function to find min and max value of tree. */\r\n\r\n    /* returns true if given search tree is binary\r\n     search tree (efficient version) */\r\n    boolean isBST()  {\r\n        return isBSTUtil(root, Integer.MIN_VALUE,\r\n                               Integer.MAX_VALUE);\r\n    }\r\n\r\n    /* Returns true if the given tree is a BST and its\r\n      values are &gt;= min and &lt;= max. */\r\n    boolean isBSTUtil(Node node, int min, int max)\r\n    {\r\n        /* an empty tree is BST */\r\n        if (node == null)\r\n            return true;\r\n\r\n        /* false if this node violates the min/max constraints */\r\n        if (node.data &lt; min || node.data &gt; max)\r\n            return false;\r\n\r\n        /* otherwise check the subtrees recursively\r\n        tightening the min/max constraints */\r\n        // Allow only distinct values\r\n        return (isBSTUtil(node.left, min, node.data-1) &amp;&amp;\r\n                isBSTUtil(node.right, node.data+1, max));\r\n    }\r\n\r\n    /* Driver program to test above functions */\r\n    public static void main(String args[])\r\n    {\r\n        BinaryTree tree = new BinaryTree();\r\n        tree.root = new Node(4);\r\n        tree.root.left = new Node(2);\r\n        tree.root.right = new Node(5);\r\n        tree.root.left.left = new Node(1);\r\n        tree.root.left.right = new Node(3);\r\n\r\n        if (tree.isBST())\r\n            System.out.println(&quot;IS BST&quot;);\r\n        else\r\n            System.out.println(&quot;Not a BST&quot;);\r\n    }\r\n}\r\n</pre>\n\n</div><h2 class="tabtitle">Python</h2>\n<div class="tabcontent">\n\n<pre class="brush: python; title: ; notranslate" title="">\r\n\r\n# Python program to check if a binary tree is bst or not\r\n\r\nINT_MAX = 4294967296\r\nINT_MIN = -4294967296\r\n\r\n# A binary tree node\r\nclass Node:\r\n\r\n    # Constructor to create a new node\r\n    def __init__(self, data):\r\n        self.data = data \r\n        self.left = None\r\n        self.right = None\r\n\r\n\r\n# Returns true if the given tree is a binary search tree\r\n# (efficient version)\r\ndef isBST(node):\r\n    return (isBSTUtil(node, INT_MIN, INT_MAX))\r\n\r\n# Retusn true if the given tree is a BST and its values\r\n# &gt;= min and &lt;= max\r\ndef isBSTUtil(node, mini, maxi):\r\n    \r\n    # An empty tree is BST\r\n    if node is None:\r\n        return True\r\n\r\n    # False if thsi node violates min/max constraint\r\n    if node.data &lt; mini or node.data &gt; maxi:\r\n        return False\r\n\r\n    # Otherwise check the subtrees recursively\r\n    # tightening the min or max constraint\r\n    return (isBSTUtil(node.left, mini, node.data -1) and\r\n          isBSTUtil(node.right, node.data+1, max))\r\n\r\n# Driver program to test above function\r\nroot = Node(4)\r\nroot.left = Node(2)\r\nroot.right = Node(5)\r\nroot.left.left = Node(1)\r\nroot.left.right = Node(3)\r\n\r\nif (isBST(root)):\r\n    print &quot;Is BST&quot;\r\nelse:\r\n    print &quot;Not a BST&quot;\r\n\r\n# This code is contributed by Nikhil Kumar Singh(nickzuck_007)\r\n\r\n</pre>\n<p></div></div><br />\nTime Complexity: O(n)<br />\nAuxiliary Space : O(1) if Function Call Stack size is not considered, otherwise O(n)</p>\n<p><strong>METHOD 4(Using In-Order Traversal)</strong><br />\nThanks to <a href="http://www.geeksforgeeks.org/archives/3042/comment-page-1#comment-562">LJW489 </a> for suggesting this method.<br />\n1) Do In-Order Traversal of the given tree and store the result in a temp array.<br />\n3) Check if the temp array is sorted in ascending order, if it is, then the tree is BST.</p>\n<p>Time Complexity: O(n)</p>\n<p>We can avoid the use of Auxiliary Array.  While doing In-Order traversal, we can keep track of previously visited node.  If the value of the currently visited node is less than the previous value, then tree is not BST.  Thanks to <a href="http://www.geeksforgeeks.org/archives/3042/comment-page-1#comment-5805">ygos </a>for this space optimization.</p>\n<div class="responsive-tabs">\n<h2 class="tabtitle">C</h2>\n<div class="tabcontent">\n\n<pre class="brush: cpp; title: ; notranslate" title="">\r\nbool isBST(struct node* root)\r\n{\r\n    static struct node *prev = NULL;\r\n    \r\n    // traverse the tree in inorder fashion and keep track of prev node\r\n    if (root)\r\n    {\r\n        if (!isBST(root-&gt;left))\r\n          return false;\r\n\r\n        // Allows only distinct valued nodes \r\n        if (prev != NULL &amp;&amp; root-&gt;data &lt;= prev-&gt;data)\r\n          return false;\r\n\r\n        prev = root;\r\n\r\n        return isBST(root-&gt;right);\r\n    }\r\n\r\n    return true;\r\n}\r\n</pre>\n\n</div><h2 class="tabtitle">Java</h2>\n<div class="tabcontent">\n\n<pre class="brush: java; title: ; notranslate" title="">\r\n// Java implementation to check if given Binary tree\r\n// is a BST or not\r\n\r\n/* Class containing left and right child of current\r\n node and key value*/\r\nclass Node\r\n{\r\n    int data;\r\n    Node left, right;\r\n\r\n    public Node(int item)\r\n    {\r\n        data = item;\r\n        left = right = null;\r\n    }\r\n}\r\n\r\npublic class BinaryTree\r\n{\r\n    // Root of the Binary Tree\r\n    Node root;\r\n\r\n    // To keep tract of previous node in Inorder Traversal\r\n    Node prev;\r\n\r\n    boolean isBST()  {\r\n        prev = null;\r\n        return isBST(root);\r\n    }\r\n\r\n    /* Returns true if given search tree is binary\r\n       search tree (efficient version) */\r\n    boolean isBST(Node node)\r\n    {\r\n        // traverse the tree in inorder fashion and\r\n        // keep a track of previous node\r\n        if (node != null)\r\n        {\r\n            if (!isBST(node.left))\r\n                return false;\r\n\r\n            // allows only distinct values node\r\n            if (prev != null &amp;&amp; node.data &lt;= prev.data )\r\n                return false;\r\n            prev = node;\r\n            return isBST(node.right);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /* Driver program to test above functions */\r\n    public static void main(String args[])\r\n    {\r\n        BinaryTree tree = new BinaryTree();\r\n        tree.root = new Node(4);\r\n        tree.root.left = new Node(2);\r\n        tree.root.right = new Node(5);\r\n        tree.root.left.left = new Node(1);\r\n        tree.root.left.right = new Node(3);\r\n\r\n        if (tree.isBST())\r\n            System.out.println(&quot;IS BST&quot;);\r\n        else\r\n            System.out.println(&quot;Not a BST&quot;);\r\n    }\r\n}\r\n</pre>\n</div></div>\n<p>The use of static variable can also be avoided by using reference to prev node as a parameter (Similar to <a href="http://www.geeksforgeeks.org/archives/17358">this </a>post).</p>\n<p><strong>Sources:</strong><br />\n<a href="http://en.wikipedia.org/wiki/Binary_search_tree">http://en.wikipedia.org/wiki/Binary_search_tree</a><br />\n<a href="http://cslibrary.stanford.edu/110/BinaryTrees.html">http://cslibrary.stanford.edu/110/BinaryTrees.html</a></p>\n<p>Please write comments if you find any bug in the above programs/algorithms or other ways to solve the same problem. </p>\n\r\n\t\t\t<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<!-- Big Rectangle Blog Bottom -->\r\n<ins class="adsbygoogle"\r\n     style="display:inline-block;width:336px;height:280px"\r\n     data-ad-client="ca-pub-9465609616171866"\r\n     data-ad-slot="4061219431"></ins>\r\n<script>\r\n(adsbygoogle = window.adsbygoogle || []).push({});\r\n</script>\r\n<br></br>\r\n\t\t</div><!-- .entry-content -->\r\n\t\t\t\t\r\n\t\t\r\n\r\n\t\t<footer class="entry-meta">\r\n\t\t<span class="post-comment"><a href="http://www.geeksforgeeks.org/a-program-to-check-if-a-binary-tree-is-bst-or-not/#comments" class="commentslink" ><span class="dsq-postid" data-dsqidentifier="3042 http://geeksforgeeks.org/?p=3042">126 Comments</span></a> <!--added for comments by Shubham-->\r\n\t\t</span><span>Category: <a href="http://www.geeksforgeeks.org/category/binary-search-tree/" rel="category tag">Binary Search Tree</a></span> <span></span> \r\n           \t          \t\r\n\t\t\t\t\t</footer><!-- .entry-meta -->\r\n\t</article><!-- #post -->\r\n<div class="related_posts"><h3>Related Posts:</h3><ul><li><a href="http://www.geeksforgeeks.org/count-inversions-in-an-array-set-2-using-self-balancing-bst/" title="Count inversions in an array | Set 2 (Using Self-Balancing BST)">Count inversions in an array | Set 2 (Using Self-Balancing BST)</a></li><li><a href="http://www.geeksforgeeks.org/print-common-nodes-in-two-binary-search-trees/" title="Print Common Nodes in Two Binary Search Trees">Print Common Nodes in Two Binary Search Trees</a></li><li><a href="http://www.geeksforgeeks.org/construct-all-possible-bsts-for-keys-1-to-n/" title="Construct all possible BSTs for keys 1 to N">Construct all possible BSTs for keys 1 to N</a></li><li><a href="http://www.geeksforgeeks.org/kth-largest-element-in-bst-using-o1-extra-space/" title="K&#8217;th smallest element in BST using O(1) Extra Space">K&#8217;th smallest element in BST using O(1) Extra Space</a></li><li><a href="http://www.geeksforgeeks.org/count-bst-subtrees-that-lie-in-given-range/" title="Count BST subtrees that lie in given range">Count BST subtrees that lie in given range</a></li><li><a href="http://www.geeksforgeeks.org/count-bst-nodes-that-are-in-a-given-range/" title="Count BST nodes that lie in a given range">Count BST nodes that lie in a given range</a></li><li><a href="http://www.geeksforgeeks.org/data-structure-for-future-reservations-for-a-single-resource/" title="Data Structure for a single resource reservations">Data Structure for a single resource reservations</a></li><li><a href="http://www.geeksforgeeks.org/how-to-handle-duplicates-in-binary-search-tree/" title="How to handle duplicates in Binary Search Tree?">How to handle duplicates in Binary Search Tree?</a></li></ul></div><br></br>\r\n\r\n<!-- Added on 29 Oct 2015 for next and previous from same category -->\r\n<nav class="nav-single">\r\n\t\t\t\t\t<div class="assistive-text">Post navigation</div>\r\n\t\t\t\t\t<span class="nav-previous"><a href="http://www.geeksforgeeks.org/find-the-minimum-element-in-a-binary-search-tree/" rel="prev">Previous post in category</a></span>\r\n\t\t\t\t\t<span class="nav-next"><a href="http://www.geeksforgeeks.org/g-fact-18/" rel="next">Next post in category</a></span>\r\n\t\t\t\t</nav><!-- .nav-single -->\r\n\r\n\r\n<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>\r\n    <script type="text/javascript">\r\n    $(document).ready(function(){\r\n        $.ajax({\r\n            url:"http://courses.geeksforgeeks.org/plugin.php",\r\n            method:"POST",\r\n            dataType:"json",\r\n            data:{post_id:$("#ratePlugin").attr("pid"),url:window.location.href},\r\n            xhrFields:{withCredentials:true},\r\n            success:function(response){\r\n                $("#ratePlugin").html(response.rate);\r\n                $("#markPlugin").html(response.mark);\r\n            },\r\n            complete:function(){\r\n                $(".box").click(function(){\r\n                    rrequest({post_id:$("#ratePlugin").attr("pid"),post_title:$("#ratePlugin").attr("ptitle"),rating:$(this).attr("rating"),url:window.location.href});\r\n                });\r\n                $(".mark").click(function(){\r\n                    mrequest({post_id:$("#markPlugin").attr("pid"),post_title:$("#markPlugin").attr("ptitle"),op:$(this).attr("id"),url:window.location.href});\r\n                });\r\n            }\r\n        });\r\n        function rrequest(payload){\r\n            $.ajax({\r\n                url:"http://courses.geeksforgeeks.org/gfgRatings.php",\r\n                method:"POST",\r\n                dataType:"html",\r\n                data:payload,\r\n                xhrFields:{withCredentials:true},\r\n                success:function(response){\r\n                    $("#ratePlugin").html(response);\r\n                },\r\n                complete:function(){\r\n                    $(".box").click(function(){\r\n                        rrequest({post_id:$("#ratePlugin").attr("pid"),post_title:$("#ratePlugin").attr("ptitle"),rating:$(this).attr("rating"),url:window.location.href});\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        //rrequest({post_id:$("#ratePlugin").attr("pid"),url:window.location.href});\r\n        function mrequest(payload){\r\n            $.ajax({\r\n                url:"http://courses.geeksforgeeks.org/gfgMarking.php",\r\n                method:"POST",\r\n                dataType:"html",\r\n                data:payload,\r\n                xhrFields:{withCredentials:true},\r\n                success:function(response){\r\n                    $("#markPlugin").html(response);\r\n                },\r\n                complete:function(){\r\n                    $(".mark").click(function(){\r\n                        mrequest({post_id:$("#markPlugin").attr("pid"),post_title:$("#markPlugin").attr("ptitle"),op:$(this).attr("id"),url:window.location.href});\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        //mrequest({post_id:$("#markPlugin").attr("pid"),url:window.location.href});\r\n    });\r\n</script>\r\n\r\n<div class="plugins">\r\n<div pid="3042" ptitle="A program to check if a binary tree is BST or not" id="ratePlugin"></div>\r\n<div pid="3042" ptitle="A program to check if a binary tree is BST or not" id="markPlugin"></div>\r\n</div>\r\n\r\n<br></br>\r\n\r\n<script>\r\n  window.fbAsyncInit=function() {\r\n    FB.init({\r\n      appId      : \\\'380853768781431\\\',\r\n      xfbml      : true,\r\n      version    : \\\'v2.3\\\'\r\n    });\r\n  };\r\n\r\n  (function(d, s, id){\r\n     var js, fjs = d.getElementsByTagName(s)[0];\r\n     if (d.getElementById(id)) {return;}\r\n     js = d.createElement(s); js.id = id;\r\n     js.src = "//connect.facebook.net/en_US/sdk.js";\r\n     fjs.parentNode.insertBefore(js, fjs);\r\n   }(document, \\\'script\\\', \\\'facebook-jssdk\\\'));\r\n</script>\r\n<div class="fb-like" data-share="true" data-width="450" data-show-faces="true"></div>\r\n\r\n<br></br>\r\n<p>Writing code in comment? Please use <a href="http://code.geeksforgeeks.org/">code.geeksforgeeks.org</a>, generate link and share the link here.</a>\r\n\t\t\t\t\r\n<div id="disqus_thread">\r\n            <div id="dsq-content">\r\n\r\n\r\n            <ul id="dsq-comments">\r\n                    <li class="comment even thread-even depth-1" id="dsq-comment-36527">\r\n        <div id="dsq-comment-header-36527" class="dsq-comment-header">\r\n            <cite id="dsq-cite-36527">\r\n                <span id="dsq-author-user-36527">Joe</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-36527" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-36527" class="dsq-comment-message"><p>I think that there  must be a line &#8216;prev = NULL&#8217; before &#8216;return true;&#8217;<br />\nIs that correct?</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-36526">\r\n        <div id="dsq-comment-header-36526" class="dsq-comment-header">\r\n            <cite id="dsq-cite-36526">\r\n                <span id="dsq-author-user-36526">John</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-36526" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-36526" class="dsq-comment-message"><p>I think that function in method 4 can be used only once by other functions as there is a static variable.Correct me if i am wrong.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-34393">\r\n        <div id="dsq-comment-header-34393" class="dsq-comment-header">\r\n            <cite id="dsq-cite-34393">\r\n                <span id="dsq-author-user-34393">Anjaneya Alluri</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-34393" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-34393" class="dsq-comment-message"><p>I believe we can do either of the Traversals for this problem i.e Inorder, Preorder or Postorder.</p>\n<p>And while we are traversing and adding nodes to the stack , we can make comparisons to the key values and return false if any of which breaks it.</p>\n<p>Eg: , please find the below using Pre Order traversal.</p>\n<p>public boolean BST_check(Node root){<br />\n\t\t//check for null</p>\n<p>\t\tif(root == null){<br />\n\t\t\tSystem.out.println(&#8220;sent null , please recheck the BST&#8221;);<br />\n\t\t\treturn false;<br />\n\t\t}</p>\n<p>\t\tNode cur = root;</p>\n<p>\t\t//check for right and left sub trees<br />\n\t\tboolean done = false;<br />\n\t\tStack&lt;Node&gt; stk = new Stack&lt;Node&gt;();<br />\n\t\tstk.push(cur);</p>\n<p>\t\twhile(!stk.isEmpty()){<br />\n     cur = stk.pop();<br />\n     if(cur.right != null){<br />\n                    if(compare(cur.data,cur.right.data) &gt; 0)return false;<br />\n                    stk.push(cur.right);<br />\n                 }<br />\n     if(cur.left != null){<br />\n                      if(compare(cur.data,cur.left.data) &lt; 0)return false;<br />\n                     stk.push(cur.left);<br />\n               }<br />\n\t\t}<br />\n\t\treturn true;<br />\n\t}</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-34950">\r\n        <div id="dsq-comment-header-34950" class="dsq-comment-header">\r\n            <cite id="dsq-cite-34950">\r\n                <span id="dsq-author-user-34950">Nitin</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-34950" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-34950" class="dsq-comment-message"><p>preorder and postorder traversals of a BST are not guaranteed to be in any specific order.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-33179">\r\n        <div id="dsq-comment-header-33179" class="dsq-comment-header">\r\n            <cite id="dsq-cite-33179">\r\n                <span id="dsq-author-user-33179">Varun</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-33179" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-33179" class="dsq-comment-message"><p>should it not be root-&gt;data &gt; prev-&gt;data instead of root-&gt;data data in method 4 ?</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-33211">\r\n        <div id="dsq-comment-header-33211" class="dsq-comment-header">\r\n            <cite id="dsq-cite-33211">\r\n                <span id="dsq-author-user-33211">varun</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-33211" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-33211" class="dsq-comment-message"><p>my bad !! it is correct only&#8230;</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-33090">\r\n        <div id="dsq-comment-header-33090" class="dsq-comment-header">\r\n            <cite id="dsq-cite-33090">\r\n                <span id="dsq-author-user-33090">Guest</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-33090" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-33090" class="dsq-comment-message"><p>Could someone please point out the mistake in this code(if any):<br />\nassumption: null tree is not bst</p>\n<p>bool is_bst(tree* tree 1)<br />\n{<br />\nif(tree1==NULL) return false;</p>\n<p>if(tree1-&gt;left &amp;&amp; tree1-&gt; right)<br />\nreturn((tree1-&gt;left-&gt;valuevalue) &amp;&amp; (tree1-&gt;right-&gt;value&gt;tree1-&gt;value) &amp;&amp; is_bst(tree1-&gt;left) &amp;&amp; is_bst(tree1-&gt;right));</p>\n<p>else if(tree1-&gt;right)<br />\nreturn((tree1-&gt;right-&gt;value&gt;tree1-&gt;value) &amp;&amp; is_bst(tree1-&gt;right));</p>\n<p>else if(tree1-&gt;left)<br />\nreturn((tree1-&gt;left-&gt;valuevalue) &amp;&amp; is_bst(tree1-&gt;left));</p>\n<p>return true;<br />\n}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-31853">\r\n        <div id="dsq-comment-header-31853" class="dsq-comment-header">\r\n            <cite id="dsq-cite-31853">\r\n                <span id="dsq-author-user-31853">dmr</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-31853" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-31853" class="dsq-comment-message"><p>A doubt in method 4,  if someone can explain. Why can&#8217;t I replace below lines:<br />\n<code><br />\nif (!isBST(root-&gt;left))<br />\n          return false;<br />\n</code><br />\nWITH:<br />\n<code><br />\nreturn isBST(root-&gt;left)<br />\n</code><br />\nI get wrong answer if I does so.<br />\nBut per my understanding, they are same..NO ?</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-32001">\r\n        <div id="dsq-comment-header-32001" class="dsq-comment-header">\r\n            <cite id="dsq-cite-32001">\r\n                <span id="dsq-author-user-32001">gourav pathak</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-32001" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-32001" class="dsq-comment-message"><p>No they are different<br />\nWhen you write &#8220;if(!isBST(root-&gt;left) return false&#8221;<br />\nit means if left subtree is not a bst then return false(if left subtree is a bst then it returns nothing,it checks further if right subtree is also a bst)</p>\n<p>But when you write return isBST(root-&gt;left) it returns true if left subtree is a bst&#8230;.which is wrong as we have to further check whether right subtree is a bst or not</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-3" id="dsq-comment-32052">\r\n        <div id="dsq-comment-header-32052" class="dsq-comment-header">\r\n            <cite id="dsq-cite-32052">\r\n                <span id="dsq-author-user-32052">dmr</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-32052" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-32052" class="dsq-comment-message"><p>ok&#8230;.i get your point. But when then we write &#8220;return isBST(root-&gt;right);&#8221; for the right subtree case. Shouldn&#8217;t it be handled like left subtree case ? like: if(!isBST(root-&gt;right)) {return;}</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-4" id="dsq-comment-32386">\r\n        <div id="dsq-comment-header-32386" class="dsq-comment-header">\r\n            <cite id="dsq-cite-32386">\r\n                <span id="dsq-author-user-32386">gourav pathak</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-32386" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-32386" class="dsq-comment-message"><p>No it need not be&#8230;.. We will reach there only if the left subtree is a BST(otherwise the function would return false)&#8230;..Now since we know that left subtree is a bst &#8230;&#8230;we only need to check whether right subtree is a BST or not&#8230;.if(isBST(root-&gt;right)) is true then root is also a BST</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-31179">\r\n        <div id="dsq-comment-header-31179" class="dsq-comment-header">\r\n            <cite id="dsq-cite-31179">\r\n                <span id="dsq-author-user-31179">123</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-31179" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-31179" class="dsq-comment-message"><p>Won&#8217;t the method 3 fail when one of the nodes have value either INT_MIN or INT_MAX ? please correct me if I am wrong</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-30815">\r\n        <div id="dsq-comment-header-30815" class="dsq-comment-header">\r\n            <cite id="dsq-cite-30815">\r\n                <span id="dsq-author-user-30815">Nikhil Agrawal</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-30815" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-30815" class="dsq-comment-message"><p>In Method 3:<br />\nThere is no need to subtract and add 1 from root.data because in comparison we are not using equal sign which itself will differentiate values resulting in unique values.<br />\nCorrect me if I am wrong</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-30487">\r\n        <div id="dsq-comment-header-30487" class="dsq-comment-header">\r\n            <cite id="dsq-cite-30487">\r\n                <span id="dsq-author-user-30487">Mukesh</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-30487" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-30487" class="dsq-comment-message"><p>Method-4 is not good for above example. just replace 6 with 1. If last leave node is greater than the parent then not working.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-30484">\r\n        <div id="dsq-comment-header-30484" class="dsq-comment-header">\r\n            <cite id="dsq-cite-30484">\r\n                <span id="dsq-author-user-30484">RASHMIBS</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-30484" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-30484" class="dsq-comment-message"><p>can anybody tell me here how to check for negative condition???  say suppose it should print it is not a BST</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-30485">\r\n        <div id="dsq-comment-header-30485" class="dsq-comment-header">\r\n            <cite id="dsq-cite-30485">\r\n                <span id="dsq-author-user-30485">Zeest</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-30485" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-30485" class="dsq-comment-message"><p>Common man isnt that really a trivial thing.. </p>\n<p>isNotBst(sturct node* root){<br />\nreturn 1^(isBst(root))<br />\n}</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-3" id="dsq-comment-30486">\r\n        <div id="dsq-comment-header-30486" class="dsq-comment-header">\r\n            <cite id="dsq-cite-30486">\r\n                <span id="dsq-author-user-30486">RASHMIBS</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-30486" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-30486" class="dsq-comment-message"><p>ok thanks Zeest ,will check once in my code</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-29614">\r\n        <div id="dsq-comment-header-29614" class="dsq-comment-header">\r\n            <cite id="dsq-cite-29614">\r\n                <span id="dsq-author-user-29614">shruthi</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-29614" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-29614" class="dsq-comment-message"><p>While implementing method 3</p>\n<p>Shouldn&#8217;t it be isBSTUtil(node-&gt;left, min, node-&gt;data) and not node-&gt;data -1 because it is a BST if left is lesser than or equal to the node and not just lesser.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-30354">\r\n        <div id="dsq-comment-header-30354" class="dsq-comment-header">\r\n            <cite id="dsq-cite-30354">\r\n                <span id="dsq-author-user-30354">Joao Brunet</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-30354" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-30354" class="dsq-comment-message"><p>No. A binary search tree does not contains duplicate elements. The left must be less than root, while the right must be greater than root.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-3" id="dsq-comment-30355">\r\n        <div id="dsq-comment-header-30355" class="dsq-comment-header">\r\n            <cite id="dsq-cite-30355">\r\n                <span id="dsq-author-user-30355">Jo\xc3\xa3o Brunet</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-30355" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-30355" class="dsq-comment-message"><p>*does not contain.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-4" id="dsq-comment-33356">\r\n        <div id="dsq-comment-header-33356" class="dsq-comment-header">\r\n            <cite id="dsq-cite-33356">\r\n                <span id="dsq-author-user-33356">Victor</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-33356" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-33356" class="dsq-comment-message"><p>That&#8217;s actually not true. All nodes in the left subtree must less than or EQUAL to the root and the root is less than all nodes in the right subtree</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-5" id="dsq-comment-33357">\r\n        <div id="dsq-comment-header-33357" class="dsq-comment-header">\r\n            <cite id="dsq-cite-33357">\r\n                <span id="dsq-author-user-33357">Victor</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-33357" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-33357" class="dsq-comment-message"><p>must be*</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-29464">\r\n        <div id="dsq-comment-header-29464" class="dsq-comment-header">\r\n            <cite id="dsq-cite-29464">\r\n                <span id="dsq-author-user-29464">Mahendra</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-29464" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-29464" class="dsq-comment-message"><p>I think here is a simple logic/solution to the given problem:</p>\n<p>int isBST(struct node* root){</p>\n<p>\tif(root){</p>\n<p>\t\tif((root-&gt;left==NULL || root-&gt;left-&gt;datadata)&amp;&amp;(root-&gt;right==NULL || root-&gt;right-&gt;data&gt;root-&gt;data)){</p>\n<p>\t\t\tif((root-&gt;left==0 || root-&gt;left-&gt;right==0 || root-&gt;left-&gt;right-&gt;datadata) &amp;&amp; (root-&gt;right==0 || root-&gt;right-&gt;left==0 || root-&gt;right-&gt;left-&gt;data&gt;root-&gt;data))</p>\n<p>\t\t\t\treturn isBST(root-&gt;left)&amp;&amp;isBST(root-&gt;right);</p>\n<p>\t\t\telse</p>\n<p>\t\t\t\treturn 0;</p>\n<p>\t\t}</p>\n<p>\t\telse</p>\n<p>\t\t\treturn 0;</p>\n<p>\t}</p>\n<p>\treturn 1;</p>\n<p>}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-29286">\r\n        <div id="dsq-comment-header-29286" class="dsq-comment-header">\r\n            <cite id="dsq-cite-29286">\r\n                <span id="dsq-author-user-29286">GuestPost</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-29286" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-29286" class="dsq-comment-message"><p>using in order traversal is good.. a little more optimization is possible<br />\n1) no need to have a temp array.<br />\n2) have two variables previous and present<br />\n3) each time check previous &lt; present. Else break + stop in order traversal </p>\n<p>will be a little more space and time optimized.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-29004">\r\n        <div id="dsq-comment-header-29004" class="dsq-comment-header">\r\n            <cite id="dsq-cite-29004">\r\n                <span id="dsq-author-user-29004">Sameer</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-29004" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-29004" class="dsq-comment-message"><p><a href="http://codingrecipies.blogspot.in/2013/10/tree-operations.html" rel="nofollow">http://codingrecipies.blogspot.in/2013/10/tree-operations.html</a><br />\nVery well explained binary search tree</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-28516">\r\n        <div id="dsq-comment-header-28516" class="dsq-comment-header">\r\n            <cite id="dsq-cite-28516">\r\n                <span id="dsq-author-user-28516">pavansrinivas</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-28516" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-28516" class="dsq-comment-message"><p>Code in Java using InOrder Traversal</p>\n<p><code></p>\n<p>\tboolean isBst(){</p>\n<p>\t\tStack s = new Stack();</p>\n<p>\t\tNode temp = root;</p>\n<p>\t\tboolean isFirst = true;</p>\n<p>\t\tint cur=root.i,prev=-1;</p>\n<p>\t\twhile(true){</p>\n<p>\t\t\twhile(temp!=null){<br />\n\t\t\t\ts.push(temp);<br />\n\t\t\t\ttemp = temp.left;<br />\n\t\t\t}<br />\n\t\t\tif(s.isEmpty()){<br />\n\t\t\t\tbreak;<br />\n\t\t\t}<br />\n\t\t\ttemp = s.pop();<br />\n\t\t\tif(isFirst){<br />\n\t\t\t\tcur = temp.i;<br />\n\t\t\t\tisFirst = false;<br />\n\t\t\t}<br />\n\t\t\telse{<br />\n\t\t\t\tprev = cur;<br />\n\t\t\t\tcur = temp.i;<br />\n\t\t\t}<br />\n\t\t\tif(prev&gt;cur){<br />\n\t\t\t\treturn false;<br />\n\t\t\t}<br />\n\t\t\ttemp = temp.right;<br />\n\t\t}<br />\nreturn true;<br />\n\t}</p>\n<p></code></p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-28323">\r\n        <div id="dsq-comment-header-28323" class="dsq-comment-header">\r\n            <cite id="dsq-cite-28323">\r\n                <span id="dsq-author-user-28323">Kuldeep Kumar</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-28323" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-28323" class="dsq-comment-message"><p><code><br />\n#include<br />\n#include<br />\nusing namespace std;<br />\nint flag=1;<br />\n//int prev=INT_MIN;<br />\nint current=INT_MIN;<br />\nvoid checkBst(node *t){<br />\n\tif(t){<br />\n\t\tcheckBst(t-&gt;left);<br />\n\t\tif(t-&gt;data data;<br />\ncheckBst(t-&gt;right);<br />\n\t\t\t}<br />\n\t}<br />\nint main(){<br />\nnode *t=NULL,*root;<br />\nroot = (node*)malloc(sizeof(node));<br />\nroot-&gt;data=8;<br />\nt = (node*)malloc(sizeof(node));<br />\nt-&gt;left=NULL;<br />\nt-&gt;right=NULL;<br />\nt-&gt;data=4;<br />\nroot-&gt;left=t;<br />\nt = (node*)malloc(sizeof(node));<br />\nt-&gt;left=NULL;<br />\nt-&gt;right=NULL;<br />\nt-&gt;data=14;<br />\nroot-&gt;right=t;<br />\nt = (node*)malloc(sizeof(node));<br />\nt-&gt;left=NULL;<br />\nt-&gt;right=NULL;<br />\nt-&gt;data=2;<br />\nroot-&gt;left-&gt;left=t;<br />\nt = (node*)malloc(sizeof(node));<br />\nt-&gt;left=NULL;<br />\nt-&gt;right=NULL;<br />\nt-&gt;data=10;<br />\nroot-&gt;right-&gt;left=t;<br />\npreorder(root);<br />\ncheckBst(root);<br />\nif(flag)<br />\n\tcout&lt;&lt;&quot;nIs a BST:n&quot;;<br />\nelse<br />\n\tcout&lt;&lt;&quot;nNot a BST:n&quot;;<br />\nreturn 0;<br />\n}</p>\n<p></code></p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-27988">\r\n        <div id="dsq-comment-header-27988" class="dsq-comment-header">\r\n            <cite id="dsq-cite-27988">\r\n                <span id="dsq-author-user-27988">praveen kumar</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-27988" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-27988" class="dsq-comment-message"><p>in method if given tree has root 100 and right child of root is also 100 then it not return false &#8230;,but the tree is not a binary tree &#8230;its not a good method in that case&#8230;..am i correct??</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-27989">\r\n        <div id="dsq-comment-header-27989" class="dsq-comment-header">\r\n            <cite id="dsq-cite-27989">\r\n                <span id="dsq-author-user-27989">kp</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-27989" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-27989" class="dsq-comment-message"><p>which one method..??</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-3" id="dsq-comment-27990">\r\n        <div id="dsq-comment-header-27990" class="dsq-comment-header">\r\n            <cite id="dsq-cite-27990">\r\n                <span id="dsq-author-user-27990">praveen</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-27990" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-27990" class="dsq-comment-message"><p>method 4&#8230;using in-order traversal</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-4" id="dsq-comment-27991">\r\n        <div id="dsq-comment-header-27991" class="dsq-comment-header">\r\n            <cite id="dsq-cite-27991">\r\n                <span id="dsq-author-user-27991">praveen kumar</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-27991" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-27991" class="dsq-comment-message"><p>yaah  i  also agree with yamini..its not a good method in that case</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt depth-2" id="dsq-comment-30228">\r\n        <div id="dsq-comment-header-30228" class="dsq-comment-header">\r\n            <cite id="dsq-cite-30228">\r\n                <span id="dsq-author-user-30228">bakwasscoder</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-30228" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-30228" class="dsq-comment-message"><p>Method is correct&#8230;..it&#8217;s returning false: <a href="http://ideone.com/UDKcW9" rel="nofollow">http://ideone.com/UDKcW9</a></p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-27387">\r\n        <div id="dsq-comment-header-27387" class="dsq-comment-header">\r\n            <cite id="dsq-cite-27387">\r\n                <span id="dsq-author-user-27387">viki</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-27387" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-27387" class="dsq-comment-message"><p>//Will this solution work ??</p>\n<p>int isBST(node *root)</p>\n<p>{</p>\n<p>    if(!root)return 1;</p>\n<p>    if(root-&gt;left &amp;&amp; root-&gt;data left-&gt;data)return 0;</p>\n<p>    if(root-&gt;right &amp;&amp; root-&gt;data &gt; root-&gt;right-&gt;data)return 0;</p>\n<p>    if(root-&gt;left &amp;&amp;root-&gt;left-&gt;right &amp;&amp; root-&gt;data left-&gt;right-&gt;data)return 0;</p>\n<p>    if(root-&gt;right &amp;&amp;root-&gt;right-&gt;left &amp;&amp; root-&gt;data &gt;root-&gt;right-&gt;left-&gt;data)return 0;</p>\n<p>    if(isBST(root-&gt;left)&amp;&amp;isBST(root-&gt;right))return 1;</p>\n<p>    return 0;</p>\n<p>}</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-28160">\r\n        <div id="dsq-comment-header-28160" class="dsq-comment-header">\r\n            <cite id="dsq-cite-28160">\r\n                <span id="dsq-author-user-28160">Shiwakant Bharti</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-28160" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-28160" class="dsq-comment-message"><p>The trick looks good to me at least on below test case. Is it inspired from AVL Tree rotation?<br />\n<code><br />\n                        50<br />\n                       /<br />\n                     40       60<br />\n                    /<br />\n                   30            70<br />\n                                 /<br />\n                     35         65<br />\n</code><br />\nWhat about this? Looks like this logic also works on min and max bounding, what say?<br />\n<code></p>\n<p>                 280</p>\n<p>                    410<br />\n                    /<br />\n                  290</p>\n<p>                     400<br />\n                    /<br />\n                   300          </p>\n<p>                     350<br />\n                      /<br />\n                      310</p>\n<p></code></p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</li><!-- #comment-## -->\n<ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-28164">\r\n        <div id="dsq-comment-header-28164" class="dsq-comment-header">\r\n            <cite id="dsq-cite-28164">\r\n                <span id="dsq-author-user-28164">Shiwakant Bharti</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-28164" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-28164" class="dsq-comment-message"><p>@7665663779954a93b5fdbdf8e4f33dd7:disqus I checked on my machine and it returns false. Can you please recheck?</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-21259">\r\n        <div id="dsq-comment-header-21259" class="dsq-comment-header">\r\n            <cite id="dsq-cite-21259">\r\n                <span id="dsq-author-user-21259">rohit</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-21259" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-21259" class="dsq-comment-message"><p>What will be the time complexity of method 2.Will it be O(NlogN)??</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-28165">\r\n        <div id="dsq-comment-header-28165" class="dsq-comment-header">\r\n            <cite id="dsq-cite-28165">\r\n                <span id="dsq-author-user-28165">Shiwakant Bharti</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-28165" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-28165" class="dsq-comment-message"><p>Only if the tree is balanced. Or else either of the minValue() or maxValue may take O(N) resulting in O(N^2) worst case.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</li><!-- #comment-## -->\n<ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-28166">\r\n        <div id="dsq-comment-header-28166" class="dsq-comment-header">\r\n            <cite id="dsq-cite-28166">\r\n                <span id="dsq-author-user-28166">Shiwakant Bharti</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-28166" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-28166" class="dsq-comment-message"><p>Is it even possible do so in worst case without even visiting all nodes O(N)?</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-19865">\r\n        <div id="dsq-comment-header-19865" class="dsq-comment-header">\r\n            <cite id="dsq-cite-19865">\r\n                <span id="dsq-author-user-19865">innosam</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-19865" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-19865" class="dsq-comment-message"><p><a href="http://innosamcodes.wordpress.com/2013/06/16/is-the-tree-a-bst/" rel="nofollow">http://innosamcodes.wordpress.com/2013/06/16/is-the-tree-a-bst/</a><br />\nCheck out this simple program, just introduced bool for checking if max/min exist or not.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-abhishek08aug odd alt thread-even depth-1" id="dsq-comment-18067">\r\n        <div id="dsq-comment-header-18067" class="dsq-comment-header">\r\n            <cite id="dsq-cite-18067">\r\n                <span id="dsq-author-user-18067">abhishek08aug</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-18067" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-18067" class="dsq-comment-message"><p>C++ code:</p>\n<pre> <code language="C">\n#include &lt;iostream&gt;\n#include &lt;stdlib.h&gt;\nusing namespace std;\n \nclass tree_node {\n  private:\n    int data;\n    tree_node * left;\n    tree_node * right;\n  public:\n    tree_node() {\n      left=NULL;\n      right=NULL;\n    }\n    void set_data(int data) {\n      this-&gt;data=data;\n    }\n    int get_data() {\n      return this-&gt;data;\n    }\n    void set_left(tree_node * left) {\n      this-&gt;left=left;\n    }\n    tree_node * get_left() {\n      return this-&gt;left;\n    }\n    void set_right(tree_node * right) {\n      this-&gt;right=right;\n    }\n    tree_node * get_right() {\n      return this-&gt;right;\n    }\n    tree_node ** get_left_ref() {\n      return &amp;(this-&gt;left);\n    }\n    tree_node ** get_right_ref() {\n      return &amp;(this-&gt;right);\n    }\n};\n \nclass tree {\n  private:\n    tree_node * root;\n    int size;\n    void _recursive_insert(tree_node ** root_ref, int value);\n    void _print_preorder(tree_node * root);\n    void _print_inorder(tree_node * root);\n    void _print_postorder(tree_node * root);\n    int _find_size(tree_node * root);\n    int _are_identical(tree_node * tn1, tree_node * tn2);\n    int _find_height(tree_node * root);\n    void _delete_tree(tree_node ** root);\n    void _mirror(tree_node * root);\n    void _print_paths(tree_node * root, int * path_nodes, int next_vacant_position);\n    void _print_array(int * array, int len);\n    tree_node * _lowest_common_ancestor(tree_node * parent, tree_node * root, int a, int b);\n    tree_node * _find_node(tree_node * root, int value);\n    tree_node * _min_node(tree_node * root);\n    void _print_level_order(tree_node * root);\n    int _count_leaf_nodes(tree_node * root);\n    int _is_bst(tree_node * root);\n  public:\n    tree() {\n      root=NULL;\n      size=0;\n    }\n    void insert(int value);\n    void recursive_insert(int value);\n    void print_preorder();\n    void print_inorder();\n    void print_postorder();\n    int find_size();\n    int get_size() {\n      return this-&gt;size;\n    }\n    int are_identical(tree t);\n    int find_height();\n    void delete_tree();\n    void mirror();\n    void print_paths();\n    tree_node * lowest_common_ancestor(int a, int b);\n    tree_node * find_node(int value);\n    tree_node * min_node();\n    void print_level_order();\n    int count_leaf_nodes();\n    int is_bst();\n};\n \nvoid tree::insert(int value) {\n  if(root==NULL) {\n    root=new tree_node;\n    root-&gt;set_data(value);\n  } else {\n    tree_node * parent=NULL;\n    tree_node * current=root;\n    tree_node * new_node=new tree_node;\n    new_node-&gt;set_data(value);\n    while(current!=NULL) {\n      if(value&lt;=current-&gt;get_data()) {\n        parent=current;\n        current=current-&gt;get_left();\n      } else {\n        parent=current;\n        current=current-&gt;get_right();\n      }\n    }\n    if(value&lt;=parent-&gt;get_data() &amp;&amp; parent-&gt;get_left()==NULL) {\n      parent-&gt;set_left(new_node);\n    } else if(value&gt;parent-&gt;get_data() &amp;&amp; parent-&gt;get_right()==NULL) {\n      parent-&gt;set_right(new_node);\n    }\n  }\n  size++;\n}\n \nvoid tree::recursive_insert(int value) {\n  _recursive_insert(&amp;root, value);\n  size++;\n}\n \nvoid tree::_recursive_insert(tree_node ** root_ref, int value) {\n  if(*root_ref==NULL) {\n    tree_node * new_node=new tree_node;\n    new_node-&gt;set_data(value);\n    *root_ref=new_node;   \n  } else {\n    if(value&lt;=(*root_ref)-&gt;get_data()) {\n      _recursive_insert((*root_ref)-&gt;get_left_ref(), value);\n    } else {\n      _recursive_insert((*root_ref)-&gt;get_right_ref(), value);\n    }\n  }\n}\n \nvoid tree::print_preorder() {\n  if(root==NULL) {\n    return;\n  }\n  _print_preorder(root);\n  cout&lt;&lt;endl;\n}\n \nvoid tree::_print_preorder(tree_node * root) {\n  if(root==NULL) {\n    return;\n  }\n  cout&lt;&lt;root-&gt;get_data()&lt;&lt;&quot; &quot;;\n  if(root-&gt;get_left()!=NULL)\n    _print_preorder(root-&gt;get_left());\n  if(root-&gt;get_right()!=NULL)\n    _print_preorder(root-&gt;get_right());\n}\n \nvoid tree::print_inorder() {\n  if(root==NULL) {\n    return;\n  }\n  _print_inorder(root);\n  cout&lt;&lt;endl;\n}\n \nvoid tree::_print_inorder(tree_node * root) {\n  if(root==NULL) {\n    return;\n  }\n  if(root-&gt;get_left()!=NULL)\n    _print_inorder(root-&gt;get_left());\n  cout&lt;&lt;root-&gt;get_data()&lt;&lt;&quot; &quot;;\n  if(root-&gt;get_right()!=NULL)\n    _print_inorder(root-&gt;get_right());\n}\n \nvoid tree::print_postorder() {\n  if(root==NULL) {\n    return;\n  }\n  _print_postorder(root);\n  cout&lt;&lt;endl;\n}\n \nvoid tree::_print_postorder(tree_node * root) {\n  if(root==NULL) {\n    return;\n  }\n  if(root-&gt;get_left()!=NULL)\n    _print_postorder(root-&gt;get_left());\n  if(root-&gt;get_right()!=NULL)\n    _print_postorder(root-&gt;get_right());\n  cout&lt;&lt;root-&gt;get_data()&lt;&lt;&quot; &quot;;\n}\n\nint tree::find_size() {\n  return _find_size(root);\n}\n\nint tree::_find_size(tree_node * root) {\n  if(root==NULL) {\n    return 0;\n  } else {\n    return 1+_find_size(root-&gt;get_left())+_find_size(root-&gt;get_right());\n  }\n}\n\nint tree::are_identical(tree t) {\n  return _are_identical(this-&gt;root, t.root);\n}\n\nint tree::_are_identical(tree_node * tn1, tree_node * tn2) {\n  if(tn1==NULL &amp;&amp; tn2==NULL) {\n    return 1;\n  } else if((tn1==NULL &amp;&amp; tn2!=NULL) || (tn1!=NULL &amp;&amp; tn2==NULL) || (tn1-&gt;get_data()!=tn2-&gt;get_data())) {\n    return 0;\n  } else {\n    return _are_identical(tn1-&gt;get_left(), tn2-&gt;get_left()) &amp;&amp; _are_identical(tn1-&gt;get_right(), tn2-&gt;get_right());\n  }\n}\n\nint tree::find_height() {\n  return _find_height(root);\n}\n\nint tree::_find_height(tree_node * root) {\n  if(root==NULL) {\n    return 0;\n  }\n  else {\n    return 1+max(_find_height(root-&gt;get_left()), _find_height(root-&gt;get_right()));\n  }\n}\n\nvoid tree::delete_tree() {\n  _delete_tree(&amp;root);\n  size=0;\n}\n\nvoid tree::_delete_tree(tree_node ** root) {\n  if(*root==NULL) {\n    return;\n  } else {\n    if((*root)-&gt;get_left()!=NULL) {\n      _delete_tree((*root)-&gt;get_left_ref());\n    }\n    if((*root)-&gt;get_right()!=NULL) {\n      _delete_tree((*root)-&gt;get_right_ref());\n    }\n    delete(*root);\n    *root=NULL;\n  }\n}\n\n/* alternate _delete_tree */\n/*\nvoid tree::_delete_tree(tree_node ** root) {\n  if(*root==NULL) {\n    return;\n  } else {\n    if((*root)-&gt;get_left()!=NULL) {\n      tree_node * left_ref=(*root)-&gt;get_left();\n      _delete_tree(&amp;left_ref);\n    }\n    if((*root)-&gt;get_right()!=NULL) {\n      tree_node * right_ref=(*root)-&gt;get_right();\n      _delete_tree(&amp;right_ref);\n    }\n    delete(*root);\n    *root=NULL;\n  }\n}\n*/\n\nvoid tree::mirror() {\n  _mirror(root);\n}\n\nvoid tree::_mirror(tree_node * root) {\n  if(root==NULL) {\n    return;\n  }\n\n  tree_node * temp=root-&gt;get_left();\n  root-&gt;set_left(root-&gt;get_right());\n  root-&gt;set_right(temp);\n  _mirror(root-&gt;get_left());\n  _mirror(root-&gt;get_right());\n}\n\nvoid tree::print_paths(){\n   int max_path_length=find_height();\n   int * path_nodes=(int *)calloc(sizeof(int), max_path_length);\n  _print_paths(root, path_nodes, 0);\n}\n\nvoid tree::_print_paths(tree_node * root, int * path_nodes, int next_vacant_position){\n  if(root==NULL) {\n    return;\n  } else if(root-&gt;get_left()==NULL &amp;&amp; root-&gt;get_right()==NULL) {\n    *(path_nodes+next_vacant_position)=root-&gt;get_data();\n    _print_array(path_nodes, next_vacant_position);\n  } else {\n    *(path_nodes+next_vacant_position)=root-&gt;get_data();\n    _print_paths(root-&gt;get_left(), path_nodes, next_vacant_position+1);\n    _print_paths(root-&gt;get_right(), path_nodes, next_vacant_position+1);\n  }\n}\n\nvoid tree::_print_array(int * array, int len) {\n  int i;\n  for(i=0; i&lt;=len; i++) {\n    cout&lt;&lt;*(array+i)&lt;&lt;&quot; &quot;;\n  }\n  cout&lt;&lt;endl;\n}\n\ntree_node * tree::find_node(int value) {\n  return _find_node(root, value);\n}\n\ntree_node * tree::_find_node(tree_node * root, int value) {\n  if(root==NULL || root-&gt;get_data()==value) {\n    return root;\n  } else if(value&lt;=root-&gt;get_data()) {\n    return _find_node(root-&gt;get_left(), value);\n  } else {\n    return _find_node(root-&gt;get_right(), value);\n  }\n}\n\ntree_node * tree::lowest_common_ancestor(int a, int b) {\n  return _lowest_common_ancestor(NULL, root, a, b);\n}\n\ntree_node * tree::_lowest_common_ancestor(tree_node * parent, tree_node * root, int a, int b) {\n  if(root==NULL) {\n    return root;\n  } else if((root-&gt;get_data()==a &amp;&amp; (root-&gt;get_left()-&gt;get_data()==b || root-&gt;get_right()-&gt;get_data()==b))\n             || (root-&gt;get_data()==b &amp;&amp; (root-&gt;get_left()-&gt;get_data()==a || root-&gt;get_right()-&gt;get_data()==a))) {\n    return parent;\n  } else if((_find_node(root-&gt;get_left(), a)!=NULL &amp;&amp; _find_node(root-&gt;get_right(), b)!=NULL)\n        || (_find_node(root-&gt;get_left(), b)!=NULL &amp;&amp; _find_node(root-&gt;get_right(), a)!=NULL)) {\n    return root; \n  } else if(_find_node(root-&gt;get_left(), a)!=NULL &amp;&amp; _find_node(root-&gt;get_left(), b)!=NULL) {\n    return _lowest_common_ancestor(root, root-&gt;get_left(), a, b);\n  } else if(_find_node(root-&gt;get_right(), a)!=NULL &amp;&amp; _find_node(root-&gt;get_right(), b)!=NULL) {\n    return _lowest_common_ancestor(root, root-&gt;get_right(), a, b);\n  } else {\n    return NULL;\n  }\n}\n\ntree_node * tree::min_node() {\n  return _min_node(root);\n}\n\ntree_node * tree::_min_node(tree_node * root) {\n  if(root==NULL || root-&gt;get_left()==NULL) {\n    return root;\n  } else {\n    return _min_node(root-&gt;get_left());\n  }\n}\n\nint tree::count_leaf_nodes() {\n  return _count_leaf_nodes(root);\n}\n\nint tree::_count_leaf_nodes(tree_node * root) {\n  if(root==NULL) {\n    return 0;\n  } else if(root-&gt;get_left()==NULL &amp;&amp; root-&gt;get_right()==NULL) {\n    return 1;\n  } else {\n    return _count_leaf_nodes(root-&gt;get_left())+_count_leaf_nodes(root-&gt;get_right());\n  }\n}\n\n\nint tree::is_bst() {\n  return _is_bst(root);\n}\n\nint tree::_is_bst(tree_node * root) {\n  static tree_node * previous=NULL;\n  if(root==NULL) {\n    return 1;\n  } else {\n    if(!_is_bst(root-&gt;get_left())) {\n      return 0;\n    }\n    if(previous!=NULL &amp;&amp; (previous-&gt;get_data())&gt;(root-&gt;get_data())) {\n      return 0;\n    }\n    previous=root;\n    if(!_is_bst(root-&gt;get_right())) {\n      return 0;\n    }    \n  }\n}\n\nint main() {\n  tree t1;\n\n  t1.recursive_insert(5);\n  t1.recursive_insert(3);\n  t1.insert(10);\n  t1.insert(7);\n  t1.recursive_insert(50);\n  t1.recursive_insert(6);\n  t1.recursive_insert(1);\n  t1.recursive_insert(45);\n  t1.recursive_insert(55);\n  t1.recursive_insert(4);\n\n  if(t1.is_bst()) {\n    cout&lt;&lt;&quot;Tree is a BST&quot;&lt;&lt;endl;\n  }\n\n  return 0;\n}\n</code> </pre>\n<p>Tree is a BST</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-aman1234 even depth-2" id="dsq-comment-19742">\r\n        <div id="dsq-comment-header-19742" class="dsq-comment-header">\r\n            <cite id="dsq-cite-19742">\r\n                <span id="dsq-author-user-19742">aman1234</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-19742" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-19742" class="dsq-comment-message"><p>intelligent \xf0\x9f\x98\x80</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-3" id="dsq-comment-22459">\r\n        <div id="dsq-comment-header-22459" class="dsq-comment-header">\r\n            <cite id="dsq-cite-22459">\r\n                <span id="dsq-author-user-22459">prity</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-22459" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-22459" class="dsq-comment-message"><p>Geek <img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/images/smilies/simple-smile.png" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment byuser comment-author-rudra even depth-2" id="dsq-comment-25091">\r\n        <div id="dsq-comment-header-25091" class="dsq-comment-header">\r\n            <cite id="dsq-cite-25091">\r\n                <span id="dsq-author-user-25091">Rudra</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-25091" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-25091" class="dsq-comment-message"><p>Great \xf0\x9f\x98\x80</p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-17568">\r\n        <div id="dsq-comment-header-17568" class="dsq-comment-header">\r\n            <cite id="dsq-cite-17568">\r\n                <span id="dsq-author-user-17568">Pradeep</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-17568" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-17568" class="dsq-comment-message"><p>Another solution (in C#) using Inorder using a stack</p>\n<p>/*<br />\npublic bool IsBstInorder()<br />\n{<br />\n  if (root == null) return true;<br />\n  Stack&lt;BinaryTreeNode&lt;T&gt;&gt; stack = new Stack&lt;BinaryTreeNode&lt;T&gt;&gt;();<br />\n            BinaryTreeNode&lt;T&gt; temp = root;<br />\n            while (true)<br />\n            {<br />\n                for (; temp != null; temp = temp.Left)<br />\n                {<br />\n                    if ((stack.IsEmpty()) ||((!stack.IsEmpty())&amp;&amp; (temp.item.CompareTo(stack.Top().item) &lt; 0)))//Since we are traversing in inorder, item going to push<br />\n                        stack.Push(temp);//should be greater than all the processed items<br />\n                    else<br />\n                        return false;<br />\n                }</p>\n<p>                if (stack.IsEmpty()) return true;<br />\n                BinaryTreeNode&lt;T&gt; node = stack.Pop();<br />\n                temp = node.Right;<br />\n            }<br />\n        }*/</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-17469">\r\n        <div id="dsq-comment-header-17469" class="dsq-comment-header">\r\n            <cite id="dsq-cite-17469">\r\n                <span id="dsq-author-user-17469">Anish P</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-17469" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-17469" class="dsq-comment-message"><pre> <code language="Java">\npublic class Node {\n private Node leftChild;\n private int data;\n private Node rightChild;\n}\nprivate boolean isBST(Node node){ //Here node is the root when //this function is invoked for the first time\n if (node != null) {\n  isBST(node.lefChild);\n  if (previous != null &amp;&amp; previous.data &gt;= node.data) {\n   return false;\n  }\n  return isBST(node.rightChild); \n } \n return true;\n}\n</code> </pre>\n<p>Hi All, Please let me know if the above solution works.Have used the same method as in method-4.</p>\n<p>Thanks<br />\nAnish P</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-28167">\r\n        <div id="dsq-comment-header-28167" class="dsq-comment-header">\r\n            <cite id="dsq-cite-28167">\r\n                <span id="dsq-author-user-28167">Shiwakant Bharti</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-28167" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-28167" class="dsq-comment-message"><p>The contribution of the bst checking of the left child is missing in the final answer which will result in wrong answer(s).</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-17325">\r\n        <div id="dsq-comment-header-17325" class="dsq-comment-header">\r\n            <cite id="dsq-cite-17325">\r\n                <span id="dsq-author-user-17325">adsf</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-17325" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-17325" class="dsq-comment-message"><p>void CheckBST(struct node* root)<br />\n{<br />\n\tint flag=1,min=-32768;<br />\n\tif(root==null)<br />\n\t{<br />\n\t\tprintf(&#8220;Empty Tree&#8221;);<br />\n\t\treturn;<br />\n\t}<br />\n\tIsBst(root,&amp;min,&amp;flag);<br />\n\tif(flag==1)<br />\n\t\tprintf(&#8220;Binary Search Tree&#8221;);<br />\n\telse<br />\n\t\tprintf(&#8220;Not a Binary Search Tree&#8221;);</p>\n<p>}</p>\n<p>void IsBst(struct node* node,int *min,int *flag)<br />\n{<br />\n\tif(node!=null)<br />\n\t{<br />\n\t\tIsBst(node-&gt;left,min,flag);<br />\n\t\tif(node-&gt;data data;<br />\n\t\tIsBst(node-&gt;right,min,flag);<br />\n\t}</p>\n<p>}</p>\n<p>simple and efficient<br />\nCorrect me if  i am wrong</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-adityasraf odd alt thread-even depth-1" id="dsq-comment-16963">\r\n        <div id="dsq-comment-header-16963" class="dsq-comment-header">\r\n            <cite id="dsq-cite-16963">\r\n                <span id="dsq-author-user-16963">AdityaSraf</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-16963" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-16963" class="dsq-comment-message"><p>Lots of typing errors in my last comment. Here it is again: Traverse all nodes starting from the root. For any current node, temporarily store the value of its parent also(obviously except for root), then 2 cases exist:<br />\nCase1: current node < parent\n2 checks:\n1)left child <current node  2)right child>current node &#038;&#038; right child\n<parent Case2: current node > parent<br />\n2 checks:<br />\n1)\tleft child <current node  &#038;&#038; left child>parent<br />\n2)\tright child>current node</current></parent>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-adityasraf even thread-odd thread-alt depth-1" id="dsq-comment-16961">\r\n        <div id="dsq-comment-header-16961" class="dsq-comment-header">\r\n            <cite id="dsq-cite-16961">\r\n                <span id="dsq-author-user-16961">AdityaSraf</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-16961" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-16961" class="dsq-comment-message"><p>Method 4 is cool but isnt the best if there is a non-bst arrangement near the root, and the tree is big. Then we might try this:Traverse all nodes starting from the root. For any current node, temporarily store the value of its parent also(obviously except for root), then 2 cases exist:<br />\nCase1: CN(current node) < parent\n2 checks:\n1)\tleft node <current node  \n2)\tright node>current node  &#038;&#038; right node>\n<parent Case2: current node(current node) >parent<br />\n2 checks:<br />\n1)\tleft node <current node  &#038;&#038; left node>parent<br />\n2)\tright node>>current node</current></parent>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-adityasraf odd alt thread-even depth-1" id="dsq-comment-16960">\r\n        <div id="dsq-comment-header-16960" class="dsq-comment-header">\r\n            <cite id="dsq-cite-16960">\r\n                <span id="dsq-author-user-16960">AdityaSraf</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-16960" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-16960" class="dsq-comment-message"><pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-gupt even thread-odd thread-alt depth-1" id="dsq-comment-16835">\r\n        <div id="dsq-comment-header-16835" class="dsq-comment-header">\r\n            <cite id="dsq-cite-16835">\r\n                <span id="dsq-author-user-16835">Gupt</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-16835" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-16835" class="dsq-comment-message"><p>method 4 is just awesome</p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-15465">\r\n        <div id="dsq-comment-header-15465" class="dsq-comment-header">\r\n            <cite id="dsq-cite-15465">\r\n                <span id="dsq-author-user-15465">Nikin</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-15465" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-15465" class="dsq-comment-message"><pre> <code language="C">\n\nbool isBST(node *sr)\n{\n   static node *prev = NULL;\n\nif(sr)\n{\nif(!isBST(sr-&gt;left))\nreturn false;\n\nif(prev!=NULL &amp;&amp; prev-&gt;data &gt; sr-&gt;data)\nreturn false;\n\nreturn isBST(sr-&gt;right);\n\n}\nreturn true;\n\n}\n\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-rameshdasari even depth-2" id="dsq-comment-16138">\r\n        <div id="dsq-comment-header-16138" class="dsq-comment-header">\r\n            <cite id="dsq-cite-16138">\r\n                <span id="dsq-author-user-16138">rameshdasari</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-16138" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-16138" class="dsq-comment-message"><p>hi can i have display function for binary tree<br />\nthat looks like<br />\n                   1<br />\n                  / \\<br />\n                 /   \\<br />\n                2     3<br />\n               / \\   / \\<br />\n              5   6 7   8</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-10682">\r\n        <div id="dsq-comment-header-10682" class="dsq-comment-header">\r\n            <cite id="dsq-cite-10682">\r\nhttp://www.geeksforgeeks.org/archives/3042                <span id="dsq-author-user-10682">deep</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-10682" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-10682" class="dsq-comment-message"><p>i think how we will deal wid BST containing similar elements depends on biasing.<br />\nwiki is using right biasing.</p>\n<p>while StandFord is using left biasing.<br />\n(for each node, all elements in its left subtree are less-or-equal to the node (). )</p>\n<p>use the code will depends on wich alignment we are using.</p>\n<p>dan if we are given a random BST wid equal elements dan how we will detect.</p>\n<p>is dere any standard convention ?</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-10681">\r\n        <div id="dsq-comment-header-10681" class="dsq-comment-header">\r\n            <cite id="dsq-cite-10681">\r\nhttp://www.geeksforgeeks.org/archives/3042                <span id="dsq-author-user-10681">deep</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-10681" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-10681" class="dsq-comment-message"><p>i think dealing with equal vales in BST is totally convention(left biasing or right biasing) dependent.<br />\n becoz on wiki right biasing is used (The right subtree of a node contains only nodes with keys greater than or equal to the node&#8217;s key.)</p>\n<p>while on StandFord Page left biasing is used (for each node, all elements in its left subtree are less-or-equal to the node ().)</p>\n<p>i think the result of whether a BT containing equal elements is BST or not totally depends on wich biasing we used in our code.</p>\n<p>dan when we hav given a random BST, how will predict it correctly?</p>\n<p>it will  vary from program to program.</p>\n<p>Is dere any standard convention?</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-27992">\r\n        <div id="dsq-comment-header-27992" class="dsq-comment-header">\r\n            <cite id="dsq-cite-27992">\r\n                <span id="dsq-author-user-27992">Praveen kumar Meena</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-27992" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-27992" class="dsq-comment-message"><p>//this travesal is using thread in_order. this is work easily the case of same right node of a tree and it return false. if any default then tell me?? </p>\n<p>bool is_Bst(node* root)</p>\n<p>{</p>\n<p>    if(root==NULL)</p>\n<p>      return true;</p>\n<p>     else</p>\n<p>     {</p>\n<p>          node *p,*p1;</p>\n<p>          p=root;</p>\n<p>          int min=0;</p>\n<p>          while(p)</p>\n<p>           {</p>\n<p>                   if(p-&gt;left==NULL)</p>\n<p>                   {<br />\n //check for left value of root is less then root<br />\n                        if(p-&gt;val&gt;=min)</p>\n<p>                         {</p>\n<p> //this part  is handle equal root and right chaild problem.<br />\n                              if(p-&gt;right!=NULL &amp;&amp; p-&gt;value==(p-&gt;right)-&gt;val)    </p>\n<p>                                {</p>\n<p>                                       return false ;                       </p>\n<p>                                 }</p>\n<p>                                 min=p-&gt;val;</p>\n<p>                                       p=p-&gt;right;</p>\n<p>                          }</p>\n<p>                    }<br />\nelse </p>\n<p>{</p>\n<p>  p1=p-&gt;left;<br />\n//find right most node<br />\nwhile(p1-&gt;right!=NULL &amp;&amp; p1-&gt;right!=p)</p>\n<p>{</p>\n<p>   p1=p1-&gt;right;</p>\n<p>}</p>\n<p>if(p1-&gt;right==NULL)<br />\n{</p>\n<p>    p1-&gt;right=p; //makes thread with its inorder pre_node.</p>\n<p>    p=p-&gt;left;</p>\n<p>}</p>\n<p>else if (p1-&gt;right==p)</p>\n<p>{</p>\n<p>      p1-&gt;right=NULL;   //again makes the tree unthreaded&#8230;&#8230;</p>\n<p>     if(p-&gt;val&gt;=min)<br />\n{</p>\n<p>if(p-&gt;right!=NULL &amp;&amp; p-&gt;value==(p-&gt;right)-&gt;val)</p>\n<p>{</p>\n<p>return false;</p>\n<p>}</p>\n<p>min=p-&gt;val;</p>\n<p>p=p-&gt;right;</p>\n<p>}</p>\n<p>}</p>\n<p>            }<br />\n       }<br />\nreturn true;<br />\n}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-9580">\r\n        <div id="dsq-comment-header-9580" class="dsq-comment-header">\r\n            <cite id="dsq-cite-9580">\r\n                <span id="dsq-author-user-9580">suresh</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-9580" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-9580" class="dsq-comment-message"><pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\nAuxiliary Space : O(1) if Function Call Stack size is not considered, otherwise O(n)\ncan u explain this?\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-9046">\r\n        <div id="dsq-comment-header-9046" class="dsq-comment-header">\r\n            <cite id="dsq-cite-9046">\r\n                <span id="dsq-author-user-9046">!(geek)</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-9046" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-9046" class="dsq-comment-message"><p>i think this will work&#8230;.correck me if iam wrong&#8230;</p>\n<p>int check(struct node* root)<br />\n{<br />\nif(root==NULL)<br />\nreturn 1;<br />\nif(root-&gt;leftright)<br />\nreturn 1;<br />\nelse<br />\nreturn 0;<br />\nreturn check(root-&gt;left)||check(root-&gt;right);<br />\n}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-8630">\r\n        <div id="dsq-comment-header-8630" class="dsq-comment-header">\r\n            <cite id="dsq-cite-8630">\r\n                <span id="dsq-author-user-8630">durgesh</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-8630" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-8630" class="dsq-comment-message"><pre> <code language="C">\n/* I think this version will work. Please correct if anything goes wrong */\n\nbool isBST(struct\tNode*\tstart)\n{\n\tbool\tltree\t=\ttrue;\n\tbool\trtree\t=\ttrue;\n\tif(start\t==\tNULL)\n\t\treturn\ttrue;\n\telse\tif(start-&gt;left\t==\tNULL\t&amp;&amp;\tstart-&gt;right\t==\tNULL)\n\t\treturn\ttrue;\n\telse\tif(start-&gt;left\t!=\tNULL)\n\t{\n\t\tisBST(start-&gt;left);\n\t\tltree\t=\t(start-&gt;left-&gt;value\t&lt;\tstart-&gt;value);\t\t\n\t}\n\telse\tif(start-&gt;right\t!=\tNULL)\n\t{\n\t\tisBST(start-&gt;right);\n\t\trtree\t=\t(start-&gt;right-&gt;value\t&gt;=\tstart-&gt;value);\t\t\n\t}\n\treturn\tltree\t&amp;&amp;\trtree;\n}\n\nCall the above function with root node of the tree and if it return true then the tree is bst else not.\n\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-14330">\r\n        <div id="dsq-comment-header-14330" class="dsq-comment-header">\r\n            <cite id="dsq-cite-14330">\r\nhttp://siddhantsharma91.blogspot.in                <span id="dsq-author-user-14330">siddhant</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-14330" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-14330" class="dsq-comment-message"><p>will not work for\n<pre>\r\n     5\r\n    / \\\r\n   4   8\r\n  / \\ / \\\r\n 3  6 10 9</pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-8231">\r\n        <div id="dsq-comment-header-8231" class="dsq-comment-header">\r\n            <cite id="dsq-cite-8231">\r\n                <span id="dsq-author-user-8231">sachin</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-8231" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-8231" class="dsq-comment-message"><p>In method 3 it is not testing tree with a single child, however BST should have either 0 or 1 child.<br />\nUpdated tested code is below for this &#8211; </p>\n<p>#include<br />\n#include<br />\n#include</p>\n<p>struct node<br />\n{<br />\n\tint data;<br />\n\tstruct node *left;<br />\n\tstruct node *right;<br />\n};</p>\n<p>struct node * newNode(int data)<br />\n{<br />\n        struct node *temp=(struct node *)malloc(sizeof(struct node));<br />\n        temp-&gt;data=data;<br />\n        temp-&gt;left=NULL;<br />\n        temp-&gt;right=NULL;<br />\n        return temp;<br />\n}</p>\n<p>bool isBSTutil(struct node *node,int min,int max)<br />\n{<br />\n\tif(node==NULL)<br />\n\t\treturn true;<br />\n\tif((node-&gt;left!=NULL &amp;&amp; node-&gt;right==NULL) || (node-&gt;left==NULL &amp;&amp; node-&gt;right!=NULL))<br />\n\t\treturn false;<br />\n\tif(node-&gt;data data &gt; max)<br />\n\t\treturn false;</p>\n<p>\treturn (isBSTutil(node-&gt;left,min,node-&gt;data-1) &amp;&amp; isBSTutil(node-&gt;right,node-&gt;data+1,max));</p>\n<p>}</p>\n<p>bool isBST(struct node *root)<br />\n{<br />\n\treturn isBSTutil(root,INT_MIN,INT_MAX);<br />\n}</p>\n<p>int main()<br />\n{</p>\n<p>\tstruct node *root;<br />\n        root = newNode(10);<br />\n        root-&gt;left=newNode(5);<br />\n        root-&gt;right=newNode(17);<br />\n        (root-&gt;left)-&gt;left=newNode(3);<br />\n        (root-&gt;left)-&gt;right=newNode(8);<br />\n\t(root-&gt;right)-&gt;left=newNode(13);</p>\n<p>\tbool status = isBST(root);<br />\n\tif(status)<br />\n\t\tprintf(&#8221; TREE is BST &#8220;);<br />\n\telse<br />\n\t\tprintf(&#8221; TREE is not a BST &#8220;);<br />\n\treturn 0;<br />\n}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-laddoo odd alt thread-odd thread-alt depth-1" id="dsq-comment-7531">\r\n        <div id="dsq-comment-header-7531" class="dsq-comment-header">\r\n            <cite id="dsq-cite-7531">\r\n                <span id="dsq-author-user-7531">laddoo</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-7531" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-7531" class="dsq-comment-message"><p>In method 4: rather than</p>\n<p>If the value of the currently visited node is greater than the previous value then tree is not BST.</p>\n<p>it should be:</p>\n<p>If the value of the currently visited node is lesser than the previous value then tree is not BST.</p>\n<p>Am I Right?</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-geeksforgeeks bypostauthor even depth-2" id="dsq-comment-7538">\r\n        <div id="dsq-comment-header-7538" class="dsq-comment-header">\r\n            <cite id="dsq-cite-7538">\r\n                <span id="dsq-author-user-7538">GeeksforGeeks</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-7538" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-7538" class="dsq-comment-message"><p>@laddoo: Thanks for pointing this out.  We have updated the post.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment byuser comment-author-laddoo odd alt thread-even depth-1" id="dsq-comment-7530">\r\n        <div id="dsq-comment-header-7530" class="dsq-comment-header">\r\n            <cite id="dsq-cite-7530">\r\n                <span id="dsq-author-user-7530">laddoo</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-7530" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-7530" class="dsq-comment-message"><p>Guyz,<br />\nin Method 4 : Rather than<br />\n&#8220;If the value of the currently visited node is greater than the previous value then tree is not BST.&#8221;</p>\n<p>I think,it should be written as :<br />\n&#8220;If the value of the currently visited node is lesser than the previous value then tree is not BST.&#8221;</p>\n<p>Am i right?</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-9926">\r\n        <div id="dsq-comment-header-9926" class="dsq-comment-header">\r\n            <cite id="dsq-cite-9926">\r\n                <span id="dsq-author-user-9926">saibharath</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-9926" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-9926" class="dsq-comment-message"><p>YEAH DUDE U R RIGHT</p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment byuser comment-author-psychocoder odd alt thread-odd thread-alt depth-1" id="dsq-comment-7355">\r\n        <div id="dsq-comment-header-7355" class="dsq-comment-header">\r\n            <cite id="dsq-cite-7355">\r\n                <span id="dsq-author-user-7355">PsychoCoder</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-7355" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-7355" class="dsq-comment-message"><p>If the 3rd method,</p>\n<p>If we do this at the last step it will be better,</p>\n<p>return (isBSTUtil(node->left, min, (node->data-1)) &#038;&#038;<br />\n    isBSTUtil(node->right, node->data+1, max));</p>\n<p>In the sense that in BST all nodes are distinct. So it is better to do this. Otherwise it may conclude a given BST as true where a root&#8217;s left node has same value as the root node.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-geeksforgeeks bypostauthor even depth-2" id="dsq-comment-7358">\r\n        <div id="dsq-comment-header-7358" class="dsq-comment-header">\r\n            <cite id="dsq-cite-7358">\r\n                <span id="dsq-author-user-7358">GeeksforGeeks</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-7358" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-7358" class="dsq-comment-message"><p>@PsychoCoder: Thanks for pointing this out.  We have modified all the methods so that trees with same keys are not considered as BST (as given in the problem statement). Keep it up!</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-7131">\r\n        <div id="dsq-comment-header-7131" class="dsq-comment-header">\r\n            <cite id="dsq-cite-7131">\r\n                <span id="dsq-author-user-7131">Lakshmanan</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-7131" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-7131" class="dsq-comment-message"><p>How about this ?<br />\nOver all idea:<br />\nPerform Recursive in-oder traversal<br />\nStore the in-order predecessor and check if the predecessor is greater than the current element</p>\n<p>#define NEG_INFINITY 1&lt;left) == NO) return NO;<br />\n        if (prev &gt; p-&gt;data)<br />\n        {<br />\n                return NO;<br />\n        }<br />\n        else prev = p-&gt;data;<br />\n        if (isBST(p-&gt;right) == NO) return NO;<br />\n        return YES;<br />\n}</p>\n<p>Complexity : Time &#8211; O(n) &#8211; Complexity of inorder traversal. Space O(1), 1 static/ global variable to store the in-order predecessor.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-7133">\r\n        <div id="dsq-comment-header-7133" class="dsq-comment-header">\r\n            <cite id="dsq-cite-7133">\r\n                <span id="dsq-author-user-7133">Lakshmanan</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-7133" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-7133" class="dsq-comment-message"><p>The code is messed up due to html decoding.</p>\n<p>#define YES 0<br />\n#define NO 1</p>\n<p>int isBST(struct node *p)<br />\n{<br />\n        static int prev = NEG_INFINITY;<br />\n        if (p == NULL) return YES;<br />\n        if (isBST(p-&gt;left) == NO) return NO;<br />\n        if (prev &gt; p-&gt;data)<br />\n        {<br />\n                return NO;<br />\n        }<br />\n        else prev = p-&gt;data;<br />\n        if (isBST(p-&gt;right) == NO) return NO;<br />\n        return YES;<br />\n}</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-geeksforgeeks bypostauthor odd alt depth-3" id="dsq-comment-7135">\r\n        <div id="dsq-comment-header-7135" class="dsq-comment-header">\r\n            <cite id="dsq-cite-7135">\r\n                <span id="dsq-author-user-7135">GeeksforGeeks</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-7135" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-7135" class="dsq-comment-message"><p>@Lakshmanan: To retain formatting and for syntax highlighting, please paste your code between sourcecode tags</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-7017">\r\n        <div id="dsq-comment-header-7017" class="dsq-comment-header">\r\n            <cite id="dsq-cite-7017">\r\n                <span id="dsq-author-user-7017">Ahmad Mansoor</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-7017" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-7017" class="dsq-comment-message"><p>I&#8217;ve solved this problem with two functions..<br />\nthe first one to check the root..<br />\nthe second to check the rest of the tree..<br />\nthe code below is a little bit hideous (stupid variable names)..<br />\nbut it will do the job <img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/images/smilies/simple-smile.png" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>\n<pre> <code language="C">\nbool isBST()\n    {\n        Node *ptr=root;\n        bool L=false;\n        bool R=false;\n        int left, right;\n\n        if(ptr-&gt;left!=NULL){left=ptr-&gt;left-&gt;data; L=true;}\n        if(ptr-&gt;right!=NULL){right = ptr-&gt;right-&gt;data; R=true;}\n\n        if(!L &amp;&amp; !R)return true;\n\n        if(L &amp;&amp; ptr-&gt;data&lt;left)return false;\n        if(R &amp;&amp; ptr-&gt;data&gt;=right)return false;\n\n        bool LL=true, RR=true;\n        if(L)LL=isBST(ptr-&gt;left, ptr-&gt;data, true);\n        if(R)RR=isBST(ptr-&gt;right, ptr-&gt;data, false);\n\n        return LL&amp;&amp;RR;\n    }\n\n    bool isBST(Node* ptr, int parent, bool status)\n    {\n        bool L=false;\n        bool R=false;\n        int left, right;\n\n        if(ptr-&gt;left!=NULL){left=ptr-&gt;left-&gt;data; L=true;}\n        if(ptr-&gt;right!=NULL){right = ptr-&gt;right-&gt;data; R=true;}\n\n        if(!L &amp;&amp; !R)return true;\n\n        if(status)\n        {\n            if(L &amp;&amp; ptr-&gt;data&lt;left)return false;\n            if(R &amp;&amp; (ptr-&gt;data&gt;=right || right&gt;parent))return false;\n        }\n\n        else\n        {\n            if(L &amp;&amp; (ptr-&gt;data&lt;left || left&lt;=parent))return false;\n            if(R &amp;&amp; ptr-&gt;data&gt;=right)return false;\n        }\n\n        bool LL=true, RR=true;\n        if(L)LL=isBST(ptr-&gt;left, ptr-&gt;data, true);\n        if(R)RR=isBST(ptr-&gt;right, ptr-&gt;data, false);\n\n        return LL&amp;&amp;RR;\n    }\n</code> </pre>\n<p>The main idea here is to check (Is the parent the left child of the grandparent or the right one?)</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-6970">\r\n        <div id="dsq-comment-header-6970" class="dsq-comment-header">\r\n            <cite id="dsq-cite-6970">\r\n                <span id="dsq-author-user-6970">Abhimanyu Vohra</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-6970" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-6970" class="dsq-comment-message"><p>I am not able to get why +1 is added in the below line of method 3, can you please specify the logic behind this, thanks.<br />\nisBSTUtil(node-&gt;right, node-&gt;data+1, max);</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-abhinav_arora even thread-odd thread-alt depth-1" id="dsq-comment-6881">\r\n        <div id="dsq-comment-header-6881" class="dsq-comment-header">\r\n            <cite id="dsq-cite-6881">\r\n                <span id="dsq-author-user-6881">Abhinav</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-6881" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-6881" class="dsq-comment-message"><p>Hi Please check this method&#8230;.I have used an approach similar to the optimized version of the diameter and the isBalancedTree Questions. Here I am recursively able to keep track of the minimum and the maximum element of each subtree. Using this I check whether the value at root is greater than the Max of the left subtree and is less than the Min of the Right SUbtree..</p>\n<pre> <code language="C">\n\nint isBST(struct node *root, int *min,int *max)\n{\n    int lmin=0,lmax=0,rmin=0,rmax=0,l=0,r=0;\n\n/*lmin and lmax keep track of min and max of left subtree */    \n/*rmin and rmax  keep track of min and max of right tree */\n\n    if(root==NULL)\n    {\n                  *min=-12345678; /* Used to indicate Null*/ \n                  *max=12345678;\n                  return 1;\n                  }\n    \n    if(root-&gt;left==NULL &amp;&amp; root-&gt;right==NULL)\n    {\n                        *min=*max=root-&gt;data;\n                        return 1;\n                        }\n    l=isBST(root-&gt;left,&amp;lmin,&amp;lmax);\n    r=isBST(root-&gt;right,&amp;rmin,&amp;rmax);\n\n    *min=(lmin==-12345678)?root-&gt;data:lmin;\n    *max=(rmax==12345678)?root-&gt;data:rmax;\n    lmax=(lmax==12345678)?-lmax:lmax;\n    rmin=(rmin==-12345678)?-rmin:rmin;\n    return (l &amp;&amp; r &amp;&amp; root-&gt;data&gt;=lmax &amp;&amp; root-&gt;data&lt;=rmin);\n    }\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-ygos odd alt thread-even depth-1" id="dsq-comment-5805">\r\n        <div id="dsq-comment-header-5805" class="dsq-comment-header">\r\n            <cite id="dsq-cite-5805">\r\n                <span id="dsq-author-user-5805">ygos</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-5805" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-5805" class="dsq-comment-message"><p>Method 4: Inorder Traversal<br />\nIt can be done  with O(1) auxiliary storage. No need to store the entire tree in array. Just need to store previous node to compare with the current node.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-kartik even depth-2" id="dsq-comment-5820">\r\n        <div id="dsq-comment-header-5820" class="dsq-comment-header">\r\n            <cite id="dsq-cite-5820">\r\n                <span id="dsq-author-user-5820">kartik</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-5820" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-5820" class="dsq-comment-message"><p>@ygos: Agree with you.  The post will be updated accordingly.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-3" id="dsq-comment-6433">\r\n        <div id="dsq-comment-header-6433" class="dsq-comment-header">\r\n            <cite id="dsq-cite-6433">\r\n                <span id="dsq-author-user-6433">ar</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-6433" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-6433" class="dsq-comment-message"><p>Not yet updated</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-geeksforgeeks bypostauthor even depth-4" id="dsq-comment-6455">\r\n        <div id="dsq-comment-header-6455" class="dsq-comment-header">\r\n            <cite id="dsq-cite-6455">\r\n                <span id="dsq-author-user-6455">GeeksforGeeks</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-6455" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-6455" class="dsq-comment-message"><p>@ar: This has been updated now.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-5" id="dsq-comment-7001">\r\n        <div id="dsq-comment-header-7001" class="dsq-comment-header">\r\n            <cite id="dsq-cite-7001">\r\n                <span id="dsq-author-user-7001">FlawLess</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-7001" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-7001" class="dsq-comment-message"><p>can you please give a sample of implementation for your suggested method? that would be much appraised!</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-5600">\r\n        <div id="dsq-comment-header-5600" class="dsq-comment-header">\r\n            <cite id="dsq-cite-5600">\r\nhttps://www.facebook.com/profile.php?id=100000362926576                <span id="dsq-author-user-5600">levis</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-5600" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-5600" class="dsq-comment-message"><p>we can use the following method keeping track of the inorder predecessor</p>\n<p>int num=-99999999;</p>\n<p>void isBstutility(struct node *root)<br />\n{<br />\nint true=1;<br />\ntrue =isBst(root,&amp;num);<br />\nif(true)<br />\nprintf(&#8220;it is a binary search tree&#8221;);<br />\nelse<br />\nprintf(&#8220;not a binary search tree&#8221;);<br />\n}</p>\n<p>int num=-99999999;<br />\nint  isBst(struct node *root,int *pred)<br />\n{<br />\nif(root==NULL)<br />\nreturn 1 ;<br />\nif(root-&gt;left!=NULL)<br />\n{<br />\nisBst(root-&gt;left,red);<br />\n}<br />\nif(root-&gt;data&gt;*pred)<br />\n*pred=root-&gt;data;<br />\nelse{return 0;}<br />\nisBst(root-&gt;right,pred);<br />\n}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-5447">\r\n        <div id="dsq-comment-header-5447" class="dsq-comment-header">\r\n            <cite id="dsq-cite-5447">\r\n                <span id="dsq-author-user-5447">someUser</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-5447" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-5447" class="dsq-comment-message"><p>//Initially predecessor = NULL</p>\n<p>int isBst(tree* root, tree** predecessor){</p>\n<p>  if(!root)<br />\n    return 1;</p>\n<p>  if(!root-&gt; left &amp;&amp; !root -&gt; right){<br />\n    if(*predecessor){<br />\n      if((*predecessor) -&gt; data &gt; root -&gt; data)<br />\n\treturn 0;<br />\n    }<br />\n    *predecessor = root;<br />\n    return 1;<br />\n  }<br />\n  if(isBst(root -&gt;left, predecessor)){<br />\n    if(*predecessor){<br />\n      if ((*predecessor) -&gt; data &gt; root -&gt; data){ return 0;}<br />\n    }<br />\n    *predecessor = root;<br />\n    return isBst(root -&gt; right, predecessor);<br />\n  }</p>\n<p>  return 0;<br />\n}</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-5448">\r\n        <div id="dsq-comment-header-5448" class="dsq-comment-header">\r\n            <cite id="dsq-cite-5448">\r\n                <span id="dsq-author-user-5448">someUser</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-5448" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-5448" class="dsq-comment-message"><p>This works in all cases.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-4910">\r\n        <div id="dsq-comment-header-4910" class="dsq-comment-header">\r\n            <cite id="dsq-cite-4910">\r\n                <span id="dsq-author-user-4910">varun sharma</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-4910" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-4910" class="dsq-comment-message"><p>This is how I did it without using a stack or an array or INT_MIN &amp; INT_MAX</p>\n<p>     bool flag=1;<br />\n     int previous=&#8221;;</p>\n<p>bool Detect_BST(struct node* node)<br />\n{<br />\n     if (node == NULL)<br />\n      return flag;      </p>\n<p>      flag = Detect_BST(node-&gt;left);</p>\n<p>      if(previous==&#8221;)<br />\n      previous = node-&gt;data-1;<br />\n\t  if(node-&gt;data data;<br />\n      printf(&#8220;%d\\n&#8221;, node-&gt;data); </p>\n<p>      flag = Detect_BST(node-&gt;right);</p>\n<p>     return flag;<br />\n}</p>\n<p>It works.. <img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/images/smilies/simple-smile.png" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-agniswar even depth-2" id="dsq-comment-5599">\r\n        <div id="dsq-comment-header-5599" class="dsq-comment-header">\r\n            <cite id="dsq-cite-5599">\r\n                <span id="dsq-author-user-5599">Agniswar</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-5599" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-5599" class="dsq-comment-message"><p>@Varun: I did not get your algorithm..could you please explain me your algo ??</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-4743">\r\n        <div id="dsq-comment-header-4743" class="dsq-comment-header">\r\n            <cite id="dsq-cite-4743">\r\nhttp://www.jugadengg.com                <span id="dsq-author-user-4743">Tushar</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-4743" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-4743" class="dsq-comment-message"><p>in method 3 if we have a tree like:<br />\n       5<br />\n      / \\<br />\n     /   \\<br />\n    4     5<br />\n   / \\     \\<br />\n  3   4     6</p>\n<p>Then, the answer will be false as from node containing the first 4 we will send a value of min to right tree as 4+1,i.e.,5<br />\non checking in the right child of this node, 4&lt;5 &#8211; the min value, we return 0.<br />\nThis means we are strictly saying that right subtree cannot have a value equal to a node. I think that equal values are allowed in both right as well as left subtrees</p>\n<p>There can be another clash in the two 5&#039;s but we won&#039;t get to that place as we get a false before that is evaluated.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-kartik even depth-2" id="dsq-comment-4745">\r\n        <div id="dsq-comment-header-4745" class="dsq-comment-header">\r\n            <cite id="dsq-cite-4745">\r\n                <span id="dsq-author-user-4745">kartik</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-4745" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-4745" class="dsq-comment-message"><p>@Tushar: Take a close look at the definition of the BST given at the begining of the post (Also see <a href="http://en.wikipedia.org/wiki/Binary_search_tree" rel="nofollow">http://en.wikipedia.org/wiki/Binary_search_tree</a>).  The definition says greater than or less than, not &#8220;greater than equal to&#8221; or &#8220;less than equal to&#8221;.  So your tree is not a valid BST.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-3" id="dsq-comment-4748">\r\n        <div id="dsq-comment-header-4748" class="dsq-comment-header">\r\n            <cite id="dsq-cite-4748">\r\nhttp://www.jugadengg.com                <span id="dsq-author-user-4748">Tushar</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-4748" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-4748" class="dsq-comment-message"><p>I am sorry for missing out on the explanation at the top.<br />\nBut, then in left subtree, there will be a problem.</p>\n<p>Since the value of max sent wil be node-&gt;data, if we have a node on left contaning the same value, it will have node-&gt;data==max and not node-&gt;data&gt;max, so we will not return 0 for that case. However, according to above explanation this case should not be allowed as well.</p>\n<p>we should call:</p>\n<pre> <code language="C">isBSTUtil(node-&gt;left, min, node-&gt;data-1)</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even depth-3" id="dsq-comment-10680">\r\n        <div id="dsq-comment-header-10680" class="dsq-comment-header">\r\n            <cite id="dsq-cite-10680">\r\nhttp://www.geeksforgeeks.org/archives/3042                <span id="dsq-author-user-10680">deep</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-10680" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-10680" class="dsq-comment-message"><p>@kartik<br />\nfrom above provided links, <a href="http://en.wikipedia.org/wiki/Binary_search_tree" rel="nofollow">http://en.wikipedia.org/wiki/Binary_search_tree</a><br />\nis using right biasing<br />\naccording to wiki  &#8220;The left subtree of a node contains only nodes with keys less than the node&#8217;s key.<br />\nThe right subtree of a node contains only nodes with keys greater than or equal to the node&#8217;s key.&#8221;</p>\n<p>while Stanford University is using left biasing<br />\nnd according to them<br />\n&#8220;for each node, all elements in its left subtree are less-or-equal to the node ().&#8221;</p>\n<p>i think implementation is totally biasing dependent</p>\n<p>if we have given a random tree dan how will we detect whether it is BST or not??</p>\n<p>correct me&#8230;.</p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-4613">\r\n        <div id="dsq-comment-header-4613" class="dsq-comment-header">\r\n            <cite id="dsq-cite-4613">\r\n                <span id="dsq-author-user-4613">kapil</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-4613" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-4613" class="dsq-comment-message"><p>The Maxvalue() and Minvalue() methods can return wrong value as if a tree is not a BST the leftmost node and rightmost node will not give correct min and max value.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-kartik even depth-2" id="dsq-comment-4746">\r\n        <div id="dsq-comment-header-4746" class="dsq-comment-header">\r\n            <cite id="dsq-cite-4746">\r\n                <span id="dsq-author-user-4746">kartik</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-4746" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-4746" class="dsq-comment-message"><p>We can wrtie a MinValue function that does Inorder traversal of a Binary Tree and returns Minimum Value.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-4482">\r\n        <div id="dsq-comment-header-4482" class="dsq-comment-header">\r\n            <cite id="dsq-cite-4482">\r\n                <span id="dsq-author-user-4482">Sourav</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-4482" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-4482" class="dsq-comment-message"><p>Stack st;</p>\n<pre> <code language="C">\r\nboolean InOrder( node * t) \r\n{\r\n  InOrder(t-&gt;left);\r\n  //Use stack instead of temp array\r\n   if( st.empty())\r\n     push(t-&gt;data);\r\n   else if( st.getTop()&gt; t-&gt;data )\r\n     return false;\r\n   else\r\n    {\r\n      st.pop();\r\n      st.push(t-&gt;data);\r\n    }\r\n     // Any time only 1 element in Stack\r\n  InOrder(t-&gt;right);\r\n}\r\n</code> </pre>\n<p>Time: O(n)<br />\nSpace: O(1)..as only 1 element in stack..<br />\nhoe i made my point!</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-maverick even thread-odd thread-alt depth-1" id="dsq-comment-4205">\r\n        <div id="dsq-comment-header-4205" class="dsq-comment-header">\r\n            <cite id="dsq-cite-4205">\r\n                <span id="dsq-author-user-4205">maverick</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-4205" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-4205" class="dsq-comment-message"><p>can  anyone please explain why  the value of the MIN is incremented by 1 in method-3 each time a call is made to right sub-tree?? i think the program works fine without incrementing min by 1 in each recursive call.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-4179">\r\n        <div id="dsq-comment-header-4179" class="dsq-comment-header">\r\n            <cite id="dsq-cite-4179">\r\n                <span id="dsq-author-user-4179">Dreamer</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-4179" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-4179" class="dsq-comment-message"><p>isBSTUtil(node-&gt;right, node-&gt;data+1, max) should be<br />\nisBSTUtil(node-&gt;right, node-&gt;data, max)</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-3612">\r\n        <div id="dsq-comment-header-3612" class="dsq-comment-header">\r\n            <cite id="dsq-cite-3612">\r\n                <span id="dsq-author-user-3612">guest123</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-3612" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-3612" class="dsq-comment-message"><p>Hi all,</p>\n<p>Here is one solution let me know if its correct or not:<br />\nI am not writing exact code its a kind of pseudo code:</p>\n<pre> <code language="C">\r\ncheckBST(node *root)\r\n{\r\n\r\n if(root==NULL)\r\n  {\r\n   return 0;\r\n  }\r\nelse\r\n if(root-&gt;left!=NULL &amp;&amp; root-&gt;left-&gt;data data)\r\n  {\r\n   node *l=root-&gt;left;\r\n   node *ll=l-&gt;left, *rr=l-&gt;right;\r\n   if( (ll!=NULL &amp;&amp; ll-&gt;data &gt; l-&gt;data )|| (rr!=NULL &amp;&amp;           (rr-&gt;datadata || rr-&gt;data &gt; root-&gt;data)) )\r\n   return &quot;NOT A BST&quot;\r\n else if (root-&gt;left !=NULL) checkBst(root-&gt;left)\r\n\r\n//similarly for right node\r\n\r\nif(root-&gt;right!=NULL &amp;&amp; root-&gt;right-&gt;data &gt; root-&gt;data)\r\n  {\r\n   node *r=root-&gt;right;\r\n   node *ll=r-&gt;left, *rr=r-&gt;right;\r\n   if( (rr!=NULL &amp;&amp; rr-&gt;data data )|| (ll!=NULL &amp;&amp;           (ll-&gt;data &gt; r-&gt;data || ll-&gt;data data)) )\r\n   return &quot;NOT A BST&quot;\r\n else if (root-&gt;right !=NULL) checkBst(root-&gt;right)\r\n</code> </pre>\n<p>Please let me know if any mistake.<br />\nThanks.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-3621">\r\n        <div id="dsq-comment-header-3621" class="dsq-comment-header">\r\n            <cite id="dsq-cite-3621">\r\n                <span id="dsq-author-user-3621">guest123</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-3621" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-3621" class="dsq-comment-message"><p>there is mistake in the above code I am writing corrected code:<br />\n if(root-&gt;left!=NULL &amp;&amp; root-&gt;left-&gt;data data)</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-3031">\r\n        <div id="dsq-comment-header-3031" class="dsq-comment-header">\r\n            <cite id="dsq-cite-3031">\r\n                <span id="dsq-author-user-3031">SG ..</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-3031" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-3031" class="dsq-comment-message"><p>If I am not wrong then third method is not logically correct</p>\n<pre> <code language="C">\r\n    Tree *node = newNode(40);\r\n    node-&gt;left        = newNode(20);\r\n    node-&gt;right       = newNode(60);\r\n    node-&gt;left-&gt;left  = newNode(10);\r\n    node-&gt;left-&gt;right = newNode(30); \r\n    node-&gt;right-&gt;left = newNode(35);\r\n</code> </pre>\n<p>this one is not bst but it returns 1</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-sandeep odd alt depth-2" id="dsq-comment-3033">\r\n        <div id="dsq-comment-header-3033" class="dsq-comment-header">\r\n            <cite id="dsq-cite-3033">\r\n                <span id="dsq-author-user-3033">Sandeep</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-3033" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-3033" class="dsq-comment-message"><p>@SG ..<br />\nIt worked fine for me.  Try following program, it prints &#8220;Not a BST&#8221;.</p>\n<pre> <code language="C">#include &lt;stdio.h&gt;\r\n#include &lt;stdlib.h&gt;\r\n#include &lt;limits.h&gt;\r\n \r\n/* A binary tree node has data, pointer to left child\r\n   and a pointer to right child */\r\nstruct node\r\n{\r\n    int data;\r\n    struct node* left;\r\n    struct node* right;\r\n};\r\n \r\nint isBSTUtil(struct node* node, int min, int max);\r\n \r\n/* Returns true if the given tree is a binary search tree\r\n (efficient version). */\r\nint isBST(struct node* node)\r\n{\r\n  return(isBSTUtil(node, INT_MIN, INT_MAX));\r\n} \r\n \r\n/* Returns true if the given tree is a BST and its\r\n   values are &gt;= min and &lt;= max. */\r\nint isBSTUtil(struct node* node, int min, int max)\r\n{ \r\n \r\n  /* an empty tree is BST */\r\n  if (node==NULL)\r\n     return 1;\r\n \r\n  /* false if this node violates the min/max constraint */\r\n  if (node-&gt;data &lt; min || node-&gt;data &gt; max)\r\n     return 0; \r\n \r\n  /* otherwise check the subtrees recursively,\r\n   tightening the min or max constraint */\r\n  return\r\n    isBSTUtil(node-&gt;left, min, node-&gt;data) &amp;&amp;\r\n    isBSTUtil(node-&gt;right, node-&gt;data+1, max);\r\n} \r\n \r\n/* Helper function that allocates a new node with the\r\n   given data and NULL left and right pointers. */\r\nstruct node* newNode(int data)\r\n{\r\n  struct node* node = (struct node*)\r\n                       malloc(sizeof(struct node));\r\n  node-&gt;data = data;\r\n  node-&gt;left = NULL;\r\n  node-&gt;right = NULL;\r\n \r\n  return(node);\r\n}\r\n \r\n/* Driver program to test above functions*/\r\nint main()\r\n{\r\n  struct node *node = newNode(40);\r\n  node-&gt;left        = newNode(20);\r\n  node-&gt;right       = newNode(60);\r\n  node-&gt;left-&gt;left  = newNode(10);\r\n  node-&gt;left-&gt;right = newNode(30);\r\n  node-&gt;right-&gt;left = newNode(35);\r\n \r\n  if(isBST(node))\r\n    printf(&quot;Is BST&quot;);\r\n  else\r\n    printf(&quot;Not a BST&quot;);\r\n \r\n  getchar();\r\n  return 0;\r\n}\r\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-3" id="dsq-comment-3034">\r\n        <div id="dsq-comment-header-3034" class="dsq-comment-header">\r\n            <cite id="dsq-cite-3034">\r\n                <span id="dsq-author-user-3034">SG ..</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-3034" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-3034" class="dsq-comment-message"><p>ohk .. i guess i made some blunder &#8230; yup its working fine for me &#8230;</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-2985">\r\n        <div id="dsq-comment-header-2985" class="dsq-comment-header">\r\n            <cite id="dsq-cite-2985">\r\n                <span id="dsq-author-user-2985">unique72</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-2985" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-2985" class="dsq-comment-message"><p>Method 4 doesn&#8217;t require an array (see Vicas post above). Here&#8217;s an OOP version.</p>\n<p>final class BSTChecker&lt;T extends Comparable&lt;? super T&gt;&gt; {<br />\n  private T last = null;</p>\n<p>  public static &lt;T extends Comparable&lt;? super T&gt;&gt; boolean check(Node&lt;T&gt; root) {<br />\n    return new BSTChecker&lt;T&gt;().isSorted(root);<br />\n  }</p>\n<p>  private boolean isSorted(Node&lt;T&gt; root) {<br />\n    if(null == root) {<br />\n      return true;<br />\n    }<br />\n    if(isSorted(root.getLeft()) &amp;&amp; (null == last || 0 &gt; last.compareTo(root.getData()))) {<br />\n      last = root.getData();<br />\n      return isSorted(root.getRight());<br />\n    }<br />\n    return false;<br />\n  }<br />\n}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-2601">\r\n        <div id="dsq-comment-header-2601" class="dsq-comment-header">\r\n            <cite id="dsq-cite-2601">\r\n                <span id="dsq-author-user-2601">Maulish S Soni</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-2601" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-2601" class="dsq-comment-message"><p>What if Tree contains data other then INT then INT_MIN and INT_MAX will not work. So what is the generic solution for any type of BST?</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-2075">\r\n        <div id="dsq-comment-header-2075" class="dsq-comment-header">\r\n            <cite id="dsq-cite-2075">\r\n                <span id="dsq-author-user-2075">Harshit</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-2075" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-2075" class="dsq-comment-message"><pre> <code language="C">\nMethod 4 can be corrected by :\n\nbool flag=true;\nint previous=INT_MIN;\nvoid inorder(node *nd,bool fromleft){\n  if(flag==false)return;\n  if(nd){\n     inorder(nd-&gt;left, true);\n     if(node-&gt;data &gt; previous &amp; fromleft){\n           previous=node-&gt;data;\n     }\n     else if(node-&gt;data &gt;= previous &amp; !fromleft){\n           previous=node-&gt;data;\n     }\n     else flag=false;\n     if(flag)\n     inorder(nd-&gt;right, false);\n     else return;\n   }\n}\n</code> </pre>\n<p>call : inorder(root, left)</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-ravikant even thread-even depth-1" id="dsq-comment-1809">\r\n        <div id="dsq-comment-header-1809" class="dsq-comment-header">\r\n            <cite id="dsq-cite-1809">\r\n                <span id="dsq-author-user-1809">ravikant</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-1809" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-1809" class="dsq-comment-message"><p>Awesome is an understatement for this site !!!!!</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-1774">\r\n        <div id="dsq-comment-header-1774" class="dsq-comment-header">\r\n            <cite id="dsq-cite-1774">\r\n                <span id="dsq-author-user-1774">AD</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-1774" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-1774" class="dsq-comment-message"><p>For the Inorder traversal you don&#8217;t have to save all the values. You can just save the last value in a static variable or pass in an int by value and then compare with the last value: E.g:</p>\n<pre> <code language="C">\r\nFunction Call = check_BST(root, INT_MIN, true)\r\n\r\nvoid check_BST(node* root, int&amp; last_data, bool&amp; status)\r\n{\r\n\tif(node != NULL)\r\n\t{\r\n\t\tcheck_BST(node-&gt;rchild, last_data, status);\r\n\r\n\t\tif(node-&gt;data data;\r\n\t\t\r\n\t\tcheck_BST(node-&gt;lchild, last_data, status);\r\n\r\n\t}\r\n}\r\n\r\nOR\r\nFunction Call = check_BST(root, true)\r\n\r\nvoid check_BST(node* root, bool&amp; last_data)\r\n{\r\n        static int last_data = INT_MIN;\r\n\tif(node != NULL)\r\n\t{\r\n\t\tcheck_BST(node-&gt;rchild, status);\r\n\r\n\t\tif(node-&gt;data data;\r\n\t\t\r\n\t\tcheck_BST(node-&gt;lchild, status);\r\n\t}\r\n}\r\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-1587">\r\n        <div id="dsq-comment-header-1587" class="dsq-comment-header">\r\n            <cite id="dsq-cite-1587">\r\n                <span id="dsq-author-user-1587">Anish</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-1587" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-1587" class="dsq-comment-message"><p>The above method given in forum will fail for the following:</p>\n<p>&#8230;..100<br />\n&#8230;../..\\<br />\n&#8230;.50&#8230;120<br />\n../&#8230;\\<br />\n.60&#8230; 82<br />\n./.\\<br />\n45 81</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-shekhu odd alt depth-2" id="dsq-comment-1592">\r\n        <div id="dsq-comment-header-1592" class="dsq-comment-header">\r\n            <cite id="dsq-cite-1592">\r\n                <span id="dsq-author-user-1592">Shekhu</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-1592" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-1592" class="dsq-comment-message"><p>which method?</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-3" id="dsq-comment-1594">\r\n        <div id="dsq-comment-header-1594" class="dsq-comment-header">\r\n            <cite id="dsq-cite-1594">\r\n                <span id="dsq-author-user-1594">Anish</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-1594" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-1594" class="dsq-comment-message"><p>Mehod Two..</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment byuser comment-author-geeksforgeeks bypostauthor odd alt depth-2" id="dsq-comment-1595">\r\n        <div id="dsq-comment-header-1595" class="dsq-comment-header">\r\n            <cite id="dsq-cite-1595">\r\n                <span id="dsq-author-user-1595">GeeksforGeeks</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-1595" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-1595" class="dsq-comment-message"><p>@Anish: Thanks for reporting the issue.  There was a typo in below line (there was false instead of true)   </p>\n<pre> <code language="C">if (node == NULL)  \r\nreturn(false); </code> </pre>\n<p>We have corrected it.  It works now.</p>\n<pre> <code language="C">\r\n#include &lt;stdio.h&gt;\r\n#include &lt;stdlib.h&gt;\r\n#include &lt;limits.h&gt;\r\n#define true 1\r\n#define false 0\r\n#define bool int \r\n \r\n/* A binary tree node has data, pointer to left child\r\n   and a pointer to right child */\r\nstruct node\r\n{\r\n    int data;\r\n    struct node* left;\r\n    struct node* right;\r\n};\r\n\r\nint minValue(struct node* node) {\r\n  struct node* current = node;\r\n \r\n  /* loop down to find the leftmost leaf */\r\n  while (current-&gt;left != NULL) {\r\n    current = current-&gt;left;\r\n  }\r\n  return(current-&gt;data);\r\n}\r\n\r\nint maxValue(struct node* node) {\r\n  struct node* current = node;\r\n \r\n  /* loop down to find the leftmost leaf */\r\n  while (current-&gt;right != NULL) {\r\n    current = current-&gt;right;\r\n  }\r\n  return(current-&gt;data);\r\n}\r\n\r\n/* Returns true if a binary tree is a binary search tree */\r\nint isBST(struct node* node)\r\n{\r\n  if (node == NULL)\r\n    return(true); \r\n\r\n  /* false if the max of the left is &gt; than us */\r\n  if (node-&gt;left!=NULL &amp;&amp; maxValue(node-&gt;left) &gt; node-&gt;data)\r\n    return(false); \r\n\r\n  /* false if the min of the right is &lt;= than us */\r\n  if (node-&gt;right!=NULL &amp;&amp; minValue(node-&gt;right) &lt;= node-&gt;data)\r\n    return(false); \r\n\r\n  /* false if, recursively, the left or right is not a BST */\r\n  if (!isBST(node-&gt;left) || !isBST(node-&gt;right))\r\n    return(false); \r\n\r\n  /* passing all that, it\'s a BST */\r\n  return(true);\r\n}\r\n\r\n/* Helper function that allocates a new node with the\r\n   given data and NULL left and right pointers. */\r\nstruct node* newNode(int data)\r\n{\r\n  struct node* node = (struct node*)\r\n                       malloc(sizeof(struct node));\r\n  node-&gt;data = data;\r\n  node-&gt;left = NULL;\r\n  node-&gt;right = NULL;\r\n \r\n  return(node);\r\n}\r\n \r\n/* Driver program to test above functions*/\r\nint main()\r\n{\r\n  struct node *root = newNode(100);\r\n  root-&gt;left        = newNode(50);\r\n  root-&gt;right       = newNode(120);\r\n  root-&gt;left-&gt;left  = newNode(60);\r\n  root-&gt;left-&gt;right = newNode(82);\r\n  root-&gt;left-&gt;left-&gt;left  = newNode(45);\r\n  root-&gt;left-&gt;left-&gt;right = newNode(81);  \r\n \r\n  if(isBST(root))\r\n    printf(&quot;Is BST&quot;);\r\n  else\r\n    printf(&quot;Not a BST&quot;);\r\n \r\n  getchar();\r\n  return 0;\r\n}\r\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-3" id="dsq-comment-1596">\r\n        <div id="dsq-comment-header-1596" class="dsq-comment-header">\r\n            <cite id="dsq-cite-1596">\r\n                <span id="dsq-author-user-1596">Anish</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-1596" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-1596" class="dsq-comment-message"><p>ok but still I think the problem persists. I don&#8217;t know I may be wrong. Here is what I think:</p>\n<p>In reference to above problem..<br />\nfirst node 100,<br />\nits left tree!= Null. and min function gives u 45. and max function gives u 82. for this iteration this function is not going to return 0.<br />\nNext 50 is passed.<br />\nmin gives 45 and max will give 81. for this iteration this function is not going to return 0.<br />\nNext 60 is passed. No issues with that also,<br />\n&#8230; Similarly I think this function will return u true. that this is BST. But it is not..</p>\n<p>Correct me If i m wrong..</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-sandeep odd alt depth-4" id="dsq-comment-1603">\r\n        <div id="dsq-comment-header-1603" class="dsq-comment-header">\r\n            <cite id="dsq-cite-1603">\r\n                <span id="dsq-author-user-1603">Sandeep</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-1603" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-1603" class="dsq-comment-message"><p>@Ashish:  I think you are considering min and max of left only, but the code compares max of left and min of right.  Try running the above code, it prints &#8220;Not a BST&#8221;</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-5" id="dsq-comment-1605">\r\n        <div id="dsq-comment-header-1605" class="dsq-comment-header">\r\n            <cite id="dsq-cite-1605">\r\n                <span id="dsq-author-user-1605">Anish</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-1605" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-1605" class="dsq-comment-message"><p>ya i understood.. Thanks.:-)</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-1223">\r\n        <div id="dsq-comment-header-1223" class="dsq-comment-header">\r\n            <cite id="dsq-cite-1223">\r\n                <span id="dsq-author-user-1223">Vikas</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-1223" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-1223" class="dsq-comment-message"><p>In method 4,<br />\nI think we can do it with O(1) space complexity.<br />\n,ie, we don&#8217;t need array.<br />\ninitialize &#8216;previous&#8217; with say INT_MIN</p>\n<pre> <code language="C">\nbool flag=true;\nint previous=INT_MIN;\nvoid inorder(node *nd){\n  if(flag==false)return;\n  if(nd){\n     inorder(nd-&gt;left); \n     if(node-&gt;data &gt; previous){\n           previous=node-&gt;data;\n     }\n     else flag=false;\n     if(flag)\n     inorder(nd-&gt;right);\n     else return;\n   }\n}</code> </pre>\n<p>// check if flag=false,then not BST, else BST</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-1224">\r\n        <div id="dsq-comment-header-1224" class="dsq-comment-header">\r\n            <cite id="dsq-cite-1224">\r\n                <span id="dsq-author-user-1224">Vikas</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-1224" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-1224" class="dsq-comment-message"><p>in check condition we can have equality also if not strictly ascending.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-geek4u odd alt depth-2" id="dsq-comment-1655">\r\n        <div id="dsq-comment-header-1655" class="dsq-comment-header">\r\n            <cite id="dsq-cite-1655">\r\n                <span id="dsq-author-user-1655">geek4u</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-1655" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-1655" class="dsq-comment-message"><p>This doesn&#8217;t look like O(1) space complexity solution as you have recursion in the function.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even depth-2" id="dsq-comment-2480">\r\n        <div id="dsq-comment-header-2480" class="dsq-comment-header">\r\n            <cite id="dsq-cite-2480">\r\n                <span id="dsq-author-user-2480">Abhirup Ghosh</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-2480" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-2480" class="dsq-comment-message"><p>I think the solution is fine.</p>\n<p>@geek4u even if recursion space is considered, number of recursive call can not exceed number of nodes in the tree.</p>\n<p>@Vikas In a BST there can not be duplicate elements. Its by definition of BST. It is is a ordered set. And set can not have duplicate element. So equality is unnecessary.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment byuser comment-author-geeksforgeeks bypostauthor odd alt thread-even depth-1" id="dsq-comment-563">\r\n        <div id="dsq-comment-header-563" class="dsq-comment-header">\r\n            <cite id="dsq-cite-563">\r\n                <span id="dsq-author-user-563">GeeksforGeeks</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-563" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-563" class="dsq-comment-message"><p>@LJW489: Thanks for suggesting a new method. We have added it to the original post. Keep it up!</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-1572">\r\n        <div id="dsq-comment-header-1572" class="dsq-comment-header">\r\n            <cite id="dsq-cite-1572">\r\n                <span id="dsq-author-user-1572">foobar</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-1572" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-1572" class="dsq-comment-message"><p>Method4 will not work if the BST has duplicate elements. As per definition of a BST left &lt; root and root&lt;=right</p>\n<p>So duplicate elements should be present only in the right subtree and not in the left subtree.</p>\n<p>If we perform an inorder traversal we can never find this out. So method 4 is flawed.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-562">\r\n        <div id="dsq-comment-header-562" class="dsq-comment-header">\r\n            <cite id="dsq-cite-562">\r\n                <span id="dsq-author-user-562">LJW489</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-562" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-562" class="dsq-comment-message"><p>can i just traverse the tree in in-order, and store the values in an array. after which i check that the array is in ascending order. if it is, then the tree is a BST.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-4197">\r\n        <div id="dsq-comment-header-4197" class="dsq-comment-header">\r\n            <cite id="dsq-cite-4197">\r\n                <span id="dsq-author-user-4197">Terminal</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-4197" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-4197" class="dsq-comment-message"><p>I think this method will have issue for a this tree:</p>\n<p>     20<br />\n    /   \\<br />\n  20    20<br />\nThis is an invalid binary tree but above method will fail.<br />\nIf the method will result in an invalid tree it will also have wrong result for<br />\n     20<br />\n    /  \\<br />\n   19  20.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-516">\r\n        <div id="dsq-comment-header-516" class="dsq-comment-header">\r\n            <cite id="dsq-cite-516">\r\n                <span id="dsq-author-user-516">Sandeep</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-516" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-516" class="dsq-comment-message"><p>@nesamani1822: Your approach suffers from the same problem as method 1(simple but wrong) in the post.  It will not work for trees like below:</p>\n<pre>\r\n        3\r\n      /   \\\r\n    /       \\\r\n   2        5\r\n  / \\\r\n/     \\\r\n1      4\r\n</pre>\n<p>Let me know if I have missed something.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-2392">\r\n        <div id="dsq-comment-header-2392" class="dsq-comment-header">\r\n            <cite id="dsq-cite-2392">\r\n                <span id="dsq-author-user-2392">Mansoor</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-2392" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-2392" class="dsq-comment-message"><p><del>True</del></p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment byuser comment-author-nesamani1822 odd alt thread-odd thread-alt depth-1" id="dsq-comment-508">\r\n        <div id="dsq-comment-header-508" class="dsq-comment-header">\r\n            <cite id="dsq-cite-508">\r\n                <span id="dsq-author-user-508">nesamani1822</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-508" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-508" class="dsq-comment-message"><p>Please find the code with typo correction.</p>\n<pre> <code language="C">\r\nbool isBinarySearchTree = false;\r\n \r\nbool isBST(struct *node, int data)\r\n{\r\nif(node!=null &amp;&amp; node-&gt;left !=null &amp;&amp; node -&gt;right !=null)\r\n{\r\n    if(node-&gt;left-&gt;element right-&gt;element &gt; data)\r\n    {\r\n        isBinarySearchTree = true;\r\n        isBST(node-&gt;left, node-&gt;left-&gt;element);\r\n        isBST(node-&gt;right, node-&gt;right-&gt;element);\r\n    }\r\n    else\r\n    {\r\n        isBinarySearchTree = false;\r\n        return;\r\n    }\r\n \r\n}\r\nelse if(node!=null &amp;&amp; (node-&gt;left!=null || node-&gt;right!=null))\r\n{\r\n    if(node-&gt;left!=null &amp;&amp; node-&gt;left-&gt;element right,node-&gt;right-&gt;element);\r\n        }\r\n    else if (node-&gt;right!=null &amp;&amp; node-&gt;right-&gt;element &gt; data)\r\n        {\r\n            isBinarySearchTree = true;\r\n            isBST(node-&gt;right,node-&gt;right-&gt;element);\r\n        }\r\n    else\r\n        {\r\n            isBinarySearchTree =false;\r\n            return;\r\n        }\r\n}\r\nelse\r\n{\r\nisBinarySearchTree = true;\r\nreturn;\r\n}\r\n \r\nreturn isBinarySearchTree;\r\n}\r\n</code> </pre>\n<p>Call : isBST(head, head-&gt;data)</p>\n<p>Explanation:<br />\n1) Traverse the tree in preorder and check for each node whether its left &amp; right child statisfies the BST rule( left-&gt;element element &gt; data)<br />\n2) This code handles for all the scenario like only child (left / right) and both child(left &amp; right)<br />\n3) It is recursive function and if it reaches the leaf node then that subtree statisfies the BST rule and it returns after setting the boolean variable to true.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-geeksforgeeks bypostauthor even thread-even depth-1" id="dsq-comment-506">\r\n        <div id="dsq-comment-header-506" class="dsq-comment-header">\r\n            <cite id="dsq-cite-506">\r\n                <span id="dsq-author-user-506">GeeksforGeeks</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-506" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-506" class="dsq-comment-message"><p>@nesamani1822: Thanks for sharing the code. </p>\n<p>There are some typos in below lines.</p>\n<pre> <code language="C">\r\n  if(node-&gt;left-&gt;element right-&gt;element &gt; data)\r\n  if(node-&gt;left!=null &amp;&amp; node-&gt;left-&gt;element left,node-&gt;left-&gt;element);\r\n</code> </pre>\n<p>Also, could you please add few words about the approach?</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-nesamani1822 odd alt thread-odd thread-alt depth-1" id="dsq-comment-501">\r\n        <div id="dsq-comment-header-501" class="dsq-comment-header">\r\n            <cite id="dsq-cite-501">\r\n                <span id="dsq-author-user-501">nesamani1822</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-501" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-501" class="dsq-comment-message"><p>I think the following code will also work</p>\n<pre> <code language="C">\r\nbool isBinarySearchTree = false;\r\n\r\nbool isBST(struct *node, int data)\r\n{\r\nif(node!=null &amp;&amp; node-&gt;left !=null &amp;&amp; node -&gt;right !=null)\r\n{\r\n\tif(node-&gt;left-&gt;element right-&gt;element &gt; data)\r\n\t{\r\n\t\tisBinarySearchTree = true;\r\n\t\tisBST(node-&gt;left, node-&gt;left-&gt;element);\r\n\t\tisBST(node-&gt;right, node-&gt;right-&gt;element);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tisBinarySearchTree = false;\r\n\t\treturn;\r\n\t}\r\n\r\n}\r\nelse if(node!=null &amp;&amp; (node-&gt;left!=null || node-&gt;right!=null))\r\n{\r\n\tif(node-&gt;left!=null &amp;&amp; node-&gt;left-&gt;element left,node-&gt;left-&gt;element);\r\n\t\t}\r\n\telse if (node-&gt;right!=null &amp;&amp; node-&gt;right-&gt;element &gt; data)\r\n\t\t{\r\n\t\t\tisBinarySearchTree = true;\r\n\t\t\tisBST(node-&gt;right,node-&gt;right-&gt;element);\r\n\t\t}\r\n\telse\r\n\t\t{\r\n\t\t\tisBinarySearchTree =false;\r\n\t\t\treturn;\r\n\t\t}\r\n}\r\nelse\r\n{\r\nisBinarySearchTree = true;\r\nreturn;\r\n}\r\n\r\nreturn isBinarySearchTree;\r\n}\r\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n            </ul>\r\n\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n<script type="text/javascript">\r\nvar disqus_url = \'http://www.geeksforgeeks.org/a-program-to-check-if-a-binary-tree-is-bst-or-not/\';\r\nvar disqus_identifier = \'3042 http://geeksforgeeks.org/?p=3042\';\r\nvar disqus_container_id = \'disqus_thread\';\r\nvar disqus_shortname = \'geeksforgeeks\';\r\nvar disqus_title = "A program to check if a binary tree is BST or not";\r\nvar disqus_config_custom = window.disqus_config;\r\nvar disqus_config = function () {\r\n    /*\r\n    All currently supported events:\r\n    onReady: fires when everything is ready,\r\n    onNewComment: fires when a new comment is posted,\r\n    onIdentify: fires when user is authenticated\r\n    */\r\n    \r\n    \r\n    this.language = \'\';\r\n    \r\n    if (disqus_config_custom) {\r\n        disqus_config_custom.call(this);\r\n    }\r\n};\r\n\r\n(function() {\r\n    var dsq = document.createElement(\'script\'); dsq.type = \'text/javascript\';\r\n    dsq.async = true;\r\n    dsq.src = \'//\' + disqus_shortname + \'.disqus.com/embed.js\';\r\n    (document.getElementsByTagName(\'head\')[0] || document.getElementsByTagName(\'body\')[0]).appendChild(dsq);\r\n})();\r\n</script>\r\n\r\n\r\n\t\t\t\r\n\t\t</div><!-- #content -->\r\n\t</div><!-- #primary -->\r\n\r\n\r\n\t\t\t<div id="secondary" class="widget-area" role="complementary">\r\n\t\t\t<aside id="text-9" class="widget widget_text">\t\t\t<div class="textwidget"><div id="fb-root"></div>\r\n<script>(function(d, s, id) {\r\n  var js, fjs = d.getElementsByTagName(s)[0];\r\n  if (d.getElementById(id)) return;\r\n  js = d.createElement(s); js.id = id;\r\n  js.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.3&appId=138031159685820";\r\n  fjs.parentNode.insertBefore(js, fjs);\r\n}(document, \'script\', \'facebook-jssdk\'));</script>\r\n\r\n<div class="fb-page" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="300" data-height="180" data-small-header="true" data-adapt-container-width="false" data-hide-cover="true" data-show-facepile="true" data-show-posts="false"><div class="fb-xfbml-parse-ignore"><blockquote cite="https://www.facebook.com/pages/GeeksforGeeks/316764689022"><a href="https://www.facebook.com/pages/GeeksforGeeks/316764689022">GeeksforGeeks</a></blockquote></div></div>\r\n</div>\n\t\t</aside><aside id="text-33" class="widget widget_text">\t\t\t<div class="textwidget"><a href="http://www.springpeople.com/gfg-landing">\r\n<img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/GfG-2.jpg" alt="SpringPeople Ad">\r\n</a>\r\n</div>\n\t\t</aside><aside id="text-14" class="widget widget_text"><p class="widget-title">Popular Posts</p>\t\t\t<div class="textwidget"><ul>\r\n<li><a href="http://www.geeksforgeeks.org/top-algorithms-and-data-structures-for-competitive-programming/">Top 10 Algorithms and Data Structures for Competitive Programming</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/top-10-algorithms-in-interview-questions/">Top 10 algorithms in Interview Questions</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/how-to-begin-with-competitive-programming/">How to begin with Competitive Programming?</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>\r\n<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>\r\n<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding \xe2\x80\x9cextern\xe2\x80\x9d keyword in C</a> </li>\r\n<li><a href="http://www.geeksforgeeks.org/heavy-light-decomposition-set-1-introduction/"> Heavy Light Decomposition</a> </li>\r\n<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>\r\n</ul></div>\n\t\t</aside><aside id="text-17" class="widget widget_text">\t\t\t<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<!-- Big 300x600 Sidebar -->\r\n<ins class="adsbygoogle"\r\n     style="display:inline-block;width:300px;height:600px"\r\n     data-ad-client="ca-pub-9465609616171866"\r\n     data-ad-slot="4402736037"></ins>\r\n<script>\r\n(adsbygoogle = window.adsbygoogle || []).push({});\r\n</script></div>\n\t\t</aside><aside id="text-32" class="widget widget_text">\t\t\t<div class="textwidget"><form style="border:1px solid #ccc;padding:3px;text-align:center;" action="https://feedburner.google.com/fb/a/mailverify" method="post" target="popupwindow" onsubmit="window.open(\'https://feedburner.google.com/fb/a/mailverify?uri=Geeksforgeeks\', \'popupwindow\', \'scrollbars=yes,width=550,height=520\');return true"><p>Subscribe and Never Miss an Article</p><input type="text" style="width:140px" placeholder="Email Address" name="email"/><input type="hidden" value="Geeksforgeeks" name="uri"/><input type="hidden" name="loc" value="en_US"/>&nbsp;&nbsp;<input type="submit" style="background-color: #4cb96b;" value="Subscribe" /></form></div>\n\t\t</aside><aside id="text-18" class="widget widget_text">\t\t\t<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<!-- LargeRectangleSide -->\r\n<ins class="adsbygoogle"\r\n     style="display:inline-block;width:336px;height:280px"\r\n     data-ad-client="ca-pub-9465609616171866"\r\n     data-ad-slot="1884636833"></ins>\r\n<script>\r\n(adsbygoogle = window.adsbygoogle || []).push({});\r\n</script></div>\n\t\t</aside><aside id="text-13" class="widget widget_text">\t\t\t<div class="textwidget"><ul><li><a href="http://geeksquiz.com/category/articles/puzzle/">Common Interview Puzzles</a></li><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/advanced-data-structure/">Advanced Data Structures</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/pattern-searching/">Pattern Searching</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li><li><a href="http://www.geeksforgeeks.org/category/searching/">Searching</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/sorting/">Sorting</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/Hash/">Hashing</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/algorithm/analysis/">Analysis of Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/algorithm/mathematical/">Mathematical Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/algorithm/randomized/">Randomized Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>\r\n</ul>\r\n\r\n\r\n\r\n\r\n</div>\n\t\t</aside><aside id="categories-384568212" class="widget widget_categories"><p class="widget-title">All Categories</p><label class="screen-reader-text" for="cat">All Categories</label><select name=\'cat\' id=\'cat\' class=\'postform\' >\n\t<option value=\'-1\'>Select Category</option>\n\t<option class="level-0" value="1762">Advanced Data Structure&nbsp;&nbsp;(69)</option>\n\t<option class="level-0" value="1744">Algorithm&nbsp;&nbsp;(406)</option>\n\t<option class="level-1" value="1745">&nbsp;&nbsp;&nbsp;Analysis&nbsp;&nbsp;(16)</option>\n\t<option class="level-1" value="1748">&nbsp;&nbsp;&nbsp;Backtracking&nbsp;&nbsp;(11)</option>\n\t<option class="level-1" value="1750">&nbsp;&nbsp;&nbsp;Divide and Conquer&nbsp;&nbsp;(29)</option>\n\t<option class="level-1" value="1746">&nbsp;&nbsp;&nbsp;Dynamic Programming&nbsp;&nbsp;(91)</option>\n\t<option class="level-1" value="1754">&nbsp;&nbsp;&nbsp;Geometric&nbsp;&nbsp;(14)</option>\n\t<option class="level-1" value="1747">&nbsp;&nbsp;&nbsp;Greedy&nbsp;&nbsp;(20)</option>\n\t<option class="level-1" value="1753">&nbsp;&nbsp;&nbsp;Mathematical&nbsp;&nbsp;(123)</option>\n\t<option class="level-1" value="1749">&nbsp;&nbsp;&nbsp;Pattern Searching&nbsp;&nbsp;(30)</option>\n\t<option class="level-1" value="1757">&nbsp;&nbsp;&nbsp;Randomized&nbsp;&nbsp;(19)</option>\n\t<option class="level-1" value="1751">&nbsp;&nbsp;&nbsp;Searching&nbsp;&nbsp;(43)</option>\n\t<option class="level-1" value="1752">&nbsp;&nbsp;&nbsp;Sorting&nbsp;&nbsp;(40)</option>\n\t<option class="level-0" value="3">Arrays&nbsp;&nbsp;(80)</option>\n\t<option class="level-0" value="18">Articles&nbsp;&nbsp;(25)</option>\n\t<option class="level-0" value="1761">Binary Search Tree&nbsp;&nbsp;(37)</option>\n\t<option class="level-0" value="17">Bit Magic&nbsp;&nbsp;(56)</option>\n\t<option class="level-0" value="14">C/C++ Puzzles&nbsp;&nbsp;(244)</option>\n\t<option class="level-0" value="1790">Competitive Programming&nbsp;&nbsp;(4)</option>\n\t<option class="level-0" value="1710">GBlog&nbsp;&nbsp;(56)</option>\n\t<option class="level-0" value="67">GFacts&nbsp;&nbsp;(43)</option>\n\t<option class="level-0" value="97">Graph&nbsp;&nbsp;(74)</option>\n\t<option class="level-0" value="1756">Hash&nbsp;&nbsp;(21)</option>\n\t<option class="level-0" value="1755">Heap&nbsp;&nbsp;(18)</option>\n\t<option class="level-0" value="1140">Interview Experiences&nbsp;&nbsp;(1,052)</option>\n\t<option class="level-0" value="87">Java&nbsp;&nbsp;(55)</option>\n\t<option class="level-0" value="8">Linked Lists&nbsp;&nbsp;(70)</option>\n\t<option class="level-0" value="1760">Matrix&nbsp;&nbsp;(39)</option>\n\t<option class="level-0" value="66">MCQ&nbsp;&nbsp;(95)</option>\n\t<option class="level-0" value="4">Misc&nbsp;&nbsp;(40)</option>\n\t<option class="level-0" value="5">Output&nbsp;&nbsp;(55)</option>\n\t<option class="level-0" value="1767">Project&nbsp;&nbsp;(22)</option>\n\t<option class="level-0" value="1789">Python&nbsp;&nbsp;(5)</option>\n\t<option class="level-0" value="1743">Queue&nbsp;&nbsp;(16)</option>\n\t<option class="level-0" value="1742">Stack&nbsp;&nbsp;(25)</option>\n\t<option class="level-0" value="7">Strings&nbsp;&nbsp;(61)</option>\n\t<option class="level-0" value="1788">Technical Scripter&nbsp;&nbsp;(14)</option>\n\t<option class="level-0" value="19">Trees&nbsp;&nbsp;(114)</option>\n</select>\n\n<script type=\'text/javascript\'>\n/* <![CDATA[ */\n(function() {\n\tvar dropdown = document.getElementById( "cat" );\n\tfunction onCatChange() {\n\t\tif ( dropdown.options[ dropdown.selectedIndex ].value > 0 ) {\n\t\t\tlocation.href = "http://www.geeksforgeeks.org/?cat=" + dropdown.options[ dropdown.selectedIndex ].value;\n\t\t}\n\t}\n\tdropdown.onchange = onCatChange;\n})();\n/* ]]> */\n</script>\n\n</aside><aside id="text-21" class="widget widget_text"><p class="widget-title">Recent Comments</p>\t\t\t<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>\n\t\t</aside><aside id="tag_cloud-3" class="widget widget_tag_cloud"><p class="widget-title">Tags</p><div class="tagcloud"><a href=\'http://www.geeksforgeeks.org/tag/adobe/\' class=\'tag-link-148\' title=\'32 topics\' style=\'font-size: 12.905109489051pt;\'>Adobe</a>\n<a href=\'http://www.geeksforgeeks.org/tag/advance-data-structures/\' class=\'tag-link-152\' title=\'31 topics\' style=\'font-size: 12.802919708029pt;\'>Advance Data Structures</a>\n<a href=\'http://www.geeksforgeeks.org/tag/advanced-data-structures/\' class=\'tag-link-150\' title=\'38 topics\' style=\'font-size: 13.620437956204pt;\'>Advanced Data Structures</a>\n<a href=\'http://www.geeksforgeeks.org/tag/amazon/\' class=\'tag-link-141\' title=\'254 topics\' style=\'font-size: 22pt;\'>Amazon</a>\n<a href=\'http://www.geeksforgeeks.org/tag/array/\' class=\'tag-link-68\' title=\'12 topics\' style=\'font-size: 8.7153284671533pt;\'>array</a>\n<a href=\'http://www.geeksforgeeks.org/tag/backtracking/\' class=\'tag-link-112\' title=\'11 topics\' style=\'font-size: 8.4087591240876pt;\'>Backtracking</a>\n<a href=\'http://www.geeksforgeeks.org/tag/bharti-softbank-hike/\' class=\'tag-link-1214\' title=\'10 topics\' style=\'font-size: 8pt;\'>Bharti SoftBank (HIKE)</a>\n<a href=\'http://www.geeksforgeeks.org/tag/bit-magic/\' class=\'tag-link-17\' title=\'15 topics\' style=\'font-size: 9.6350364963504pt;\'>Bit Magic</a>\n<a href=\'http://www.geeksforgeeks.org/tag/c/\' class=\'tag-link-86\' title=\'18 topics\' style=\'font-size: 10.452554744526pt;\'>C++</a>\n<a href=\'http://www.geeksforgeeks.org/tag/cn/\' class=\'tag-link-142\' title=\'12 topics\' style=\'font-size: 8.7153284671533pt;\'>CN</a>\n<a href=\'http://www.geeksforgeeks.org/tag/c-puzzle/\' class=\'tag-link-69\' title=\'15 topics\' style=\'font-size: 9.6350364963504pt;\'>c puzzle</a>\n<a href=\'http://www.geeksforgeeks.org/tag/d-e-shaw/\' class=\'tag-link-823\' title=\'17 topics\' style=\'font-size: 10.248175182482pt;\'>D-E-Shaw</a>\n<a href=\'http://www.geeksforgeeks.org/tag/dbms/\' class=\'tag-link-139\' title=\'11 topics\' style=\'font-size: 8.4087591240876pt;\'>DBMS</a>\n<a href=\'http://www.geeksforgeeks.org/tag/divide-and-conquer/\' class=\'tag-link-113\' title=\'27 topics\' style=\'font-size: 12.189781021898pt;\'>Divide and Conquer</a>\n<a href=\'http://www.geeksforgeeks.org/tag/dynamic-programming/\' class=\'tag-link-111\' title=\'83 topics\' style=\'font-size: 16.992700729927pt;\'>Dynamic Programming</a>\n<a href=\'http://www.geeksforgeeks.org/tag/flipkart/\' class=\'tag-link-173\' title=\'46 topics\' style=\'font-size: 14.43795620438pt;\'>Flipkart</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate/\' class=\'tag-link-114\' title=\'88 topics\' style=\'font-size: 17.299270072993pt;\'>GATE</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-2012/\' class=\'tag-link-133\' title=\'10 topics\' style=\'font-size: 8pt;\'>GATE-CS-2012</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-c-language/\' class=\'tag-link-72\' title=\'10 topics\' style=\'font-size: 8pt;\'>GATE-CS-C-Language</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-ds-algo/\' class=\'tag-link-79\' title=\'35 topics\' style=\'font-size: 13.313868613139pt;\'>GATE-CS-DS-&amp;-Algo</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-older/\' class=\'tag-link-145\' title=\'15 topics\' style=\'font-size: 9.6350364963504pt;\'>GATE-CS-Older</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gfact/\' class=\'tag-link-67\' title=\'20 topics\' style=\'font-size: 10.861313868613pt;\'>GFacts</a>\n<a href=\'http://www.geeksforgeeks.org/tag/goldman-sachs/\' class=\'tag-link-590\' title=\'20 topics\' style=\'font-size: 10.861313868613pt;\'>Goldman Sachs</a>\n<a href=\'http://www.geeksforgeeks.org/tag/google/\' class=\'tag-link-155\' title=\'15 topics\' style=\'font-size: 9.6350364963504pt;\'>Google</a>\n<a href=\'http://www.geeksforgeeks.org/tag/graph/\' class=\'tag-link-97\' title=\'45 topics\' style=\'font-size: 14.335766423358pt;\'>Graph</a>\n<a href=\'http://www.geeksforgeeks.org/tag/greedy-algorithm/\' class=\'tag-link-159\' title=\'20 topics\' style=\'font-size: 10.861313868613pt;\'>Greedy Algorithm</a>\n<a href=\'http://www.geeksforgeeks.org/tag/hashing/\' class=\'tag-link-250\' title=\'15 topics\' style=\'font-size: 9.6350364963504pt;\'>Hashing</a>\n<a href=\'http://www.geeksforgeeks.org/tag/interview-experience/\' class=\'tag-link-126\' title=\'216 topics\' style=\'font-size: 21.284671532847pt;\'>Interview Experience</a>\n<a href=\'http://www.geeksforgeeks.org/tag/java/\' class=\'tag-link-87\' title=\'61 topics\' style=\'font-size: 15.664233576642pt;\'>Java</a>\n<a href=\'http://www.geeksforgeeks.org/tag/maq-software/\' class=\'tag-link-1392\' title=\'11 topics\' style=\'font-size: 8.4087591240876pt;\'>MAQ Software</a>\n<a href=\'http://www.geeksforgeeks.org/tag/mathematicalalgo/\' class=\'tag-link-154\' title=\'73 topics\' style=\'font-size: 16.481751824818pt;\'>MathematicalAlgo</a>\n<a href=\'http://www.geeksforgeeks.org/tag/matrix/\' class=\'tag-link-211\' title=\'21 topics\' style=\'font-size: 11.065693430657pt;\'>Matrix</a>\n<a href=\'http://www.geeksforgeeks.org/tag/microsoft/\' class=\'tag-link-104\' title=\'95 topics\' style=\'font-size: 17.605839416058pt;\'>Microsoft</a>\n<a href=\'http://www.geeksforgeeks.org/tag/morgan-stanley/\' class=\'tag-link-167\' title=\'17 topics\' style=\'font-size: 10.248175182482pt;\'>Morgan Stanley</a>\n<a href=\'http://www.geeksforgeeks.org/tag/operating-systems/\' class=\'tag-link-110\' title=\'19 topics\' style=\'font-size: 10.656934306569pt;\'>Operating systems</a>\n<a href=\'http://www.geeksforgeeks.org/tag/oracle/\' class=\'tag-link-171\' title=\'24 topics\' style=\'font-size: 11.678832116788pt;\'>Oracle</a>\n<a href=\'http://www.geeksforgeeks.org/tag/pattern-searching/\' class=\'tag-link-107\' title=\'26 topics\' style=\'font-size: 11.985401459854pt;\'>Pattern Searching</a>\n<a href=\'http://www.geeksforgeeks.org/tag/puzzle/\' class=\'tag-link-70\' title=\'15 topics\' style=\'font-size: 9.6350364963504pt;\'>puzzle</a>\n<a href=\'http://www.geeksforgeeks.org/tag/python/\' class=\'tag-link-1770\' title=\'21 topics\' style=\'font-size: 11.065693430657pt;\'>Python</a>\n<a href=\'http://www.geeksforgeeks.org/tag/recursion/\' class=\'tag-link-85\' title=\'21 topics\' style=\'font-size: 11.065693430657pt;\'>Recursion</a>\n<a href=\'http://www.geeksforgeeks.org/tag/samsung/\' class=\'tag-link-180\' title=\'12 topics\' style=\'font-size: 8.7153284671533pt;\'>Samsung</a>\n<a href=\'http://www.geeksforgeeks.org/tag/sap-labs/\' class=\'tag-link-1414\' title=\'23 topics\' style=\'font-size: 11.474452554745pt;\'>SAP Labs</a>\n<a href=\'http://www.geeksforgeeks.org/tag/snapdeal/\' class=\'tag-link-1246\' title=\'16 topics\' style=\'font-size: 9.9416058394161pt;\'>SnapDeal</a>\n<a href=\'http://www.geeksforgeeks.org/tag/stack/\' class=\'tag-link-94\' title=\'17 topics\' style=\'font-size: 10.248175182482pt;\'>stack</a>\n<a href=\'http://www.geeksforgeeks.org/tag/stack-queue/\' class=\'tag-link-899\' title=\'12 topics\' style=\'font-size: 8.7153284671533pt;\'>Stack-Queue</a></div>\n</aside><aside id="text-25" class="widget widget_text">\t\t\t<div class="textwidget"><ul>\r\n<li><h2><a href="http://geeksquiz.com/">GeeksQuiz</a></h2></li>\r\n\r\n<li><h2><a href="http://code.geeksforgeeks.org/">GeeksforGeeksIDE</a></h2></li>\r\n\r\n<li><h2><a href="http://www.practice.geeksforgeeks.org/">GeeksforGeeks Practice</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/data-structures/">Data Structures</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/c/">C Programming</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++ Programming</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/java/">Java Programming</a></h2></li>\r\n\r\n<li><h2><a href="http://geeksquiz.com/books/">Books</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Experiences</a></h2></li>\r\n\r\n<li><h2><a href="http://geeksquiz.com/gate-corner-2/">GATE CS</a></h2></li>\r\n\r\n<li><h2><a href="http://www.gatecs.geeksquiz.com">GATE CS Forum</a></h2></li>\r\n\r\n<li><h2><a href="https://play.google.com/store/apps/details?id=free.programming.programming">Android App</a></h2></li>\r\n</ul>\r\n\r\n</div>\n\t\t</aside>\t\t</div><!-- #secondary -->\r\n\t\t</div><!-- #main .wrapper -->\r\n\t<footer id="colophon" role="contentinfo">\r\n\t\t<div class="site-info">\r\n\t\t<div class="clear"></div>\r\n\t\t</div><!-- .site-info -->\r\n\t\t</footer><!-- #colophon -->\r\n<center>\r\n<div class="iconic-footer">\r\n\r\n@geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>  <a href="http://www.geeksforgeeks.org/about/"> &nbsp; &nbsp; &nbsp; &nbsp;About Us!&nbsp; &nbsp; &nbsp; &nbsp;</a><a href="http://www.geeksforgeeks.org/new/ad.htm"> &nbsp; &nbsp; &nbsp; &nbsp;Advertise with us!&nbsp; &nbsp; &nbsp; &nbsp;</a>\r\n\r\n      \t\t\t</div></center><!-- .site-info -->\r\n\r\n\t\t\t\t<div class="clear"></div>\r\n</div><!-- #page -->\r\n\r\n        <script type="text/javascript">\r\n        // <![CDATA[\r\n        var disqus_shortname = \'geeksforgeeks\';\r\n        (function () {\r\n            var nodes = document.getElementsByTagName(\'span\');\r\n            for (var i = 0, url; i < nodes.length; i++) {\r\n                if (nodes[i].className.indexOf(\'dsq-postid\') != -1) {\r\n                    nodes[i].parentNode.setAttribute(\'data-disqus-identifier\', nodes[i].getAttribute(\'data-dsqidentifier\'));\r\n                    url = nodes[i].parentNode.href.split(\'#\', 1);\r\n                    if (url.length == 1) { url = url[0]; }\r\n                    else { url = url[1]; }\r\n                    nodes[i].parentNode.href = url + \'#disqus_thread\';\r\n                }\r\n            }\r\n            var s = document.createElement(\'script\'); \r\n            s.async = true;\r\n            s.type = \'text/javascript\';\r\n            s.src = \'//\' + disqus_shortname + \'.disqus.com/count.js\';\r\n            (document.getElementsByTagName(\'HEAD\')[0] || document.getElementsByTagName(\'BODY\')[0]).appendChild(s);\r\n        }());\r\n        // ]]>\r\n        </script>\r\n        <script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushJava.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushPython.js\'></script>\n<script type=\'text/javascript\'>\n\t(function(){\n\t\tvar corecss = document.createElement(\'link\');\n\t\tvar themecss = document.createElement(\'link\');\n\t\tvar corecssurl = "http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9b";\r\n\t\tif ( corecss.setAttribute ) {\r\n\t\t\t\tcorecss.setAttribute( "rel", "stylesheet" );\r\n\t\t\t\tcorecss.setAttribute( "type", "text/css" );\r\n\t\t\t\tcorecss.setAttribute( "href", corecssurl );\r\n\t\t} else {\r\n\t\t\t\tcorecss.rel = "stylesheet";\r\n\t\t\t\tcorecss.href = corecssurl;\r\n\t\t}\r\n\t\tdocument.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );\r\n\t\tvar themecssurl = "http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9b";\r\n\t\tif ( themecss.setAttribute ) {\r\n\t\t\t\tthemecss.setAttribute( "rel", "stylesheet" );\r\n\t\t\t\tthemecss.setAttribute( "type", "text/css" );\r\n\t\t\t\tthemecss.setAttribute( "href", themecssurl );\r\n\t\t} else {\r\n\t\t\t\tthemecss.rel = "stylesheet";\r\n\t\t\t\tthemecss.href = themecssurl;\r\n\t\t}\r\n\t\t//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);\r\n\t\tdocument.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );\r\n\t})();\n\tSyntaxHighlighter.config.strings.expandSource = \'+ expand source\';\n\tSyntaxHighlighter.config.strings.help = \'?\';\n\tSyntaxHighlighter.config.strings.alert = \'SyntaxHighlighter\\n\\n\';\n\tSyntaxHighlighter.config.strings.noBrush = \'Can\\\'t find brush for: \';\n\tSyntaxHighlighter.config.strings.brushNotHtmlScript = \'Brush wasn\\\'t configured for html-script option: \';\n\tSyntaxHighlighter.defaults[\'gutter\'] = false;\n\tSyntaxHighlighter.defaults[\'pad-line-numbers\'] = true;\n\tSyntaxHighlighter.defaults[\'toolbar\'] = false;\n\tSyntaxHighlighter.all();\r\n</script>\r\n<link rel=\'stylesheet\' id=\'tabby-print-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/tabby-responsive-tabs/css/tabby-print.css\' type=\'text/css\' media=\'all\' />\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/js/comment-reply.min.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/js/selectnav.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/js/jquery/jquery.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/js/jquery/jquery-migrate.min.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/tabby-responsive-tabs/js/tabby.js\'></script>\n\n<script>jQuery(document).ready(function($) { RESPONSIVEUI.responsiveTabs(); })</script>\n\r\n\r\n<script type="text/javascript">\r\n\r\n  var _gaq = _gaq || [];\r\n  _gaq.push([\'_setAccount\', \'UA-12148232-1\']);\r\n  _gaq.push([\'_trackPageview\']);\r\n\r\n  (function() {\r\n    var ga = document.createElement(\'script\'); ga.type = \'text/javascript\'; ga.async = true;\r\n    ga.src = (\'https:\' == document.location.protocol ? \'https://ssl\' : \'http://www\') + \'.google-analytics.com/ga.js\';\r\n    var s = document.getElementsByTagName(\'script\')[0]; s.parentNode.insertBefore(ga, s);\r\n  })();\r\n\r\n</script>  \r\n<script async type="text/javascript" src="//cdn.fancybar.net/ac/fancybar.js?zoneid=1502&serve=C6ADVKE&placement=geeksforgeeks" id="_fancybar_js"></script>\r\n</body>\r\n</html>\n<!-- Dynamic page generated in 0.423 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2016-03-01 12:46:24 -->\n\n<!-- Compression = gzip -->\n<!-- super cache -->'
p144
sb.