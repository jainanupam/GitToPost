ccopy_reg
_reconstructor
p0
(cpost
Post
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'post_file'
p6
S'/Users/anupamjain/code/gitRepo/GitToPost/posts/Java/posted/CycleDetectionInDirectedGraph'
p7
sS'files_covered'
p8
c__builtin__
set
p9
((lp10
S'/Users/anupamjain/code/gitRepo/Questions/Algo/Java/CycleDetectionInDirectedGraph.java'
p11
atp12
Rp13
sS'title'
p14
VDetect Cycle in a Directed Graph
p15
sS'file_name'
p16
g11
sS'link'
p17
S'http://www.geeksforgeeks.org/detect-cycle-in-a-graph/'
p18
sS'host_name'
p19
S'www.geeksforgeeks.org'
p20
sS'problem_text'
p21
g0
(cbs4.element
Tag
p22
g2
Ntp23
Rp24
(dp25
S'can_be_empty_element'
p26
I00
sS'previous_element'
p27
NsS'next_sibling'
p28
NsS'name'
p29
S'p'
p30
sS'parent'
p31
NsS'namespace'
p32
NsS'prefix'
p33
NsS'previous_sibling'
p34
NsS'attrs'
p35
(dp36
sS'next_element'
p37
g0
(g22
g2
Ntp38
Rp39
(dp40
g26
I00
sg27
g24
sg28
Nsg29
Vp
p41
sg31
g24
sg32
Nsg33
Nsg34
Nsg35
(dp42
sg37
g0
(cbs4.element
NavigableString
p43
c__builtin__
unicode
p44
VGiven a directed graph, check whether the graph contains a cycle or not.  Your function should return true if the given graph contains at least one cycle, else return false.
p45
tp46
Rp47
(dp48
g34
Nsg27
g39
sg28
g0
(g22
g2
Ntp49
Rp50
(dp51
g26
I00
sg27
g47
sg28
g0
(g43
g44
V  For example, the following graph contains three cycles 0->2->0,  0->1->2->0 and  3->3, so your function must return true.
p52
tp53
Rp54
(dp55
g34
g50
sg27
g50
sg28
Nsg37
Nsg31
g39
sbsg29
Vspan
p56
sg31
g39
sg32
Nsg33
Nsg34
g47
sg35
(dp57
Vid
p58
Vmore-18516
p59
ssg37
g54
sS'parser_class'
p60
cbs4
BeautifulSoup
p61
sS'hidden'
p62
I00
sS'contents'
p63
(lp64
sbsg37
g50
sg31
g39
sbsg60
g61
sg62
I00
sg63
(lp65
g47
ag50
ag54
asbsg60
Nsg62
I00
sg63
(lp66
g39
asbsS'raw_page'
p67
S'<!DOCTYPE html>\r\n<!--[if IE 7]>\r\n<html class="ie ie7" lang="en-US" prefix="og: http://ogp.me/ns#">\r\n<![endif]-->\r\n<!--[if IE 8]>\r\n<html class="ie ie8" lang="en-US" prefix="og: http://ogp.me/ns#">\r\n<![endif]-->\r\n<!--[if !(IE 7) | !(IE 8)  ]><!-->\r\n<html lang="en-US" prefix="og: http://ogp.me/ns#">\r\n<!--<![endif]-->\r\n<head>\r\n<meta charset="UTF-8" />\r\n<meta name="viewport" content="width=device-width" />\r\n\r\n<meta property="og:image" content="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/gfg_200X200.png">\r\n<meta property="og:image:type" content="image/png">\r\n<meta property="og:image:width" content="200">\r\n<meta property="og:image:height" content="200">\r\n\r\n<title>Detect Cycle in a Directed Graph - GeeksforGeeks</title>\r\n<link rel="profile" href="http://gmpg.org/xfn/11" />\r\n<link rel="pingback" href="http://www.geeksforgeeks.org/xmlrpc.php" />\r\n<!--[if lt IE 9]>\r\n<script src="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/js/html5.js" type="text/javascript"></script>\r\n<![endif]-->\r\n\n<!-- This site is optimized with the Yoast SEO plugin v3.0.7 - https://yoast.com/wordpress/plugins/seo/ -->\n<link rel="canonical" href="http://www.geeksforgeeks.org/detect-cycle-in-a-graph/" />\n<meta property="og:locale" content="en_US" />\n<meta property="og:type" content="article" />\n<meta property="og:title" content="Detect Cycle in a Directed Graph - GeeksforGeeks" />\n<meta property="og:description" content="Given a directed graph, check whether the graph contains a cycle or not. Your function should return true if the given graph contains at least one cycle, else return false. For example, the following graph contains three cycles 0-&gt;2-&gt;0, 0-&gt;1-&gt;2-&gt;0 and 3-&gt;3, so your function must return true. Solution Depth First Traversal can be used\xe2\x80\xa6 Read More &raquo;" />\n<meta property="og:url" content="http://www.geeksforgeeks.org/detect-cycle-in-a-graph/" />\n<meta property="og:site_name" content="GeeksforGeeks" />\n<meta property="article:tag" content="Graph" />\n<meta property="article:section" content="Graph" />\n<meta property="article:published_time" content="2012-04-03T19:20:39+00:00" />\n<meta property="article:modified_time" content="2014-02-09T19:30:37+00:00" />\n<meta property="og:updated_time" content="2014-02-09T19:30:37+00:00" />\n<meta property="og:image" content="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/DFS.jpg" />\n<!-- / Yoast SEO plugin. -->\n\n\t\t<script type="text/javascript">\n\t\t\twindow._wpemojiSettings = {"baseUrl":"http:\\/\\/s.w.org\\/images\\/core\\/emoji\\/72x72\\/","ext":".png","source":{"concatemoji":"http:\\/\\/www.geeksforgeeks.org\\/wp-includes\\/js\\/wp-emoji-release.min.js"}};\n\t\t\t!function(a,b,c){function d(a){var c=b.createElement("canvas"),d=c.getContext&&c.getContext("2d");return d&&d.fillText?(d.textBaseline="top",d.font="600 32px Arial","flag"===a?(d.fillText(String.fromCharCode(55356,56812,55356,56807),0,0),c.toDataURL().length>3e3):(d.fillText(String.fromCharCode(55357,56835),0,0),0!==d.getImageData(16,16,1,1).data[0])):!1}function e(a){var c=b.createElement("script");c.src=a,c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f,g;c.supports={simple:d("simple"),flag:d("flag")},c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.simple&&c.supports.flag||(g=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",g,!1),a.addEventListener("load",g,!1)):(a.attachEvent("onload",g),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&&f.twemoji&&(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);\n\t\t</script>\n\t\t<style type="text/css">\nimg.wp-smiley,\nimg.emoji {\n\tdisplay: inline !important;\n\tborder: none !important;\n\tbox-shadow: none !important;\n\theight: 1em !important;\n\twidth: 1em !important;\n\tmargin: 0 .07em !important;\n\tvertical-align: -0.1em !important;\n\tbackground: none !important;\n\tpadding: 0 !important;\n}\n</style>\n<link rel=\'stylesheet\' id=\'wp-pagenavi-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/wp-pagenavi/pagenavi-css.css\' type=\'text/css\' media=\'all\' />\n<link rel=\'stylesheet\' id=\'themonic-fonts-css\'  href=\'http://fonts.googleapis.com/css?family=Ubuntu:400,700&#038;subset=latin,latin-ext\' type=\'text/css\' media=\'all\' />\n<link rel=\'stylesheet\' id=\'themonic-style-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/style.css\' type=\'text/css\' media=\'all\' />\n<link rel=\'stylesheet\' id=\'custom-style-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/custom.css\' type=\'text/css\' media=\'all\' />\n<!--[if lt IE 9]>\n<link rel=\'stylesheet\' id=\'themonic-ie-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/css/ie.css\' type=\'text/css\' media=\'all\' />\n<![endif]-->\n<meta name="generator" content="WordPress 4.2.7" />\n<style type="text/css" id="custom-background-css">\nbody.custom-background { background-color: #ffffff; }\n</style>\n<style type="text/css" id="syntaxhighlighteranchor"></style>\n<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<script>\r\n  (adsbygoogle = window.adsbygoogle || []).push({\r\n    google_ad_client: "ca-pub-9465609616171866",\r\n    enable_page_level_ads: true\r\n  });\r\n</script>\r\n</head>\r\n<body class="single single-post postid-18516 single-format-standard custom-background custom-background-white custom-font-enabled">\r\n<div id="page" class="hfeed site">\r\n\t<header id="masthead" class="site-header" role="banner">\r\n\t\t\t\t\t<hgroup>\r\n\t\t\t<a href="http://www.geeksforgeeks.org/" title="GeeksforGeeks" rel="home">GeeksforGeeks</a>\r\n\t\t\t\t<br .../> <a class="site-description">A computer science portal for geeks</a>\r\n\t\t</hgroup>\r\n\r\n<div style="float:right;">\r\n<hgroup style="float:right;">   \r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://www.geeksforgeeks.org/campus-ambassador-program-by-geeksforgeeks/">CA</a>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://geeksquiz.com/gate-corner-2/">GATE CS</a>\r\n\r\n<strong><a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://practice.geeksforgeeks.org/">Practice</a></strong>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://www.geeksforgeeks.org/suggest/">Suggest</a>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://code.geeksforgeeks.org/">IDE</a>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://qa.geeksforgeeks.org/">Q&A</a>\r\n\r\n<a style="padding:0px 30px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://geeksquiz.com/">GeeksQuiz</a>\r\n\r\n</hgroup><br></br>\r\n\r\n<span style="display:inline-block; width:300px;float:right;">\r\n<script>\r\n  (function() {\r\n    var cx = \'009682134359037907028:tj6eafkv_be\';\r\n    var gcse = document.createElement(\'script\');\r\n    gcse.type = \'text/javascript\';\r\n    gcse.async = true;\r\n    gcse.src = (document.location.protocol == \'https:\' ? \'https:\' : \'http:\') +\r\n        \'//cse.google.com/cse.js?cx=\' + cx;\r\n    var s = document.getElementsByTagName(\'script\')[0];\r\n    s.parentNode.insertBefore(gcse, s);\r\n  })();\r\n</script>\r\n<gcse:search></gcse:search>\r\n\r\n<style type="text/css">\r\n  .gsc-control-cse {\r\n     padding: 0px 10px;\r\n  } \r\n\r\n  .gsc-control-cse {\r\n    font-family: "Trebuchet MS", sans-serif;\r\n    /*border-color: #E1F3DA;*/\r\n    /*background-color: #E1F3DA;*/\r\n  }\r\n  input.gsc-input {\r\n    border-color: #94CC7A;\r\n  }\r\n  input.gsc-search-button {\r\n    border-color: #94CC7A;\r\n    background-color: #4CB96B;\r\n    margin-top:7px;\r\n  }\r\n  .gsc-tabHeader.gsc-tabhInactive {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gsc-tabHeader.gsc-tabhActive {\r\n    border-color: #A9DA92;\r\n    background-color: #A9DA92;\r\n  }\r\n  .gsc-tabsArea {\r\n    border-color: #A9DA92;\r\n  }\r\n  .gsc-webResult.gsc-result {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gsc-webResult.gsc-result:hover {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:link,\r\n  .gs-webResult.gs-result a.gs-title:link b {\r\n    color: #009900;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:visited,\r\n  .gs-webResult.gs-result a.gs-title:visited b {\r\n    color: #009900;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:hover,\r\n  .gs-webResult.gs-result a.gs-title:hover b {\r\n    color: #003300;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:active,\r\n  .gs-webResult.gs-result a.gs-title:active b {\r\n    color: #009900;\r\n  }\r\n  .gsc-cursor-page {\r\n    color: #009900;\r\n  }\r\n  a.gsc-trailing-more-results:link {\r\n    color: #009900;\r\n  }\r\n  .gs-webResult.gs-result .gs-snippet {\r\n    color: #454545;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl {\r\n    color: #33cc00;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl-short {\r\n    color: #33cc00;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl-short {\r\n    display: none;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl-long {\r\n    display: block;\r\n  }\r\n  .gsc-cursor-box {\r\n    border-color: #A9DA92;\r\n  }\r\n  .gsc-results .gsc-cursor-page {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {\r\n    border-color: #A9DA92;\r\n    background-color: #A9DA92;\r\n  }\r\n  .gs-promotion.gs-result {\r\n    border-color: #94CC7A;\r\n    background-color: #CBE8B4;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:link {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:visited {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:hover {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:active {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result .gs-snippet {\r\n    color: #454545;\r\n  }\r\n  .gs-promotion.gs-result .gs-visibleUrl,\r\n  .gs-promotion.gs-result .gs-visibleUrl-short {\r\n    color: #815FA7;\r\n  }\r\n  .gsib_a {\r\n    padding : 2px;\r\n  }\r\n</style>    \r\n</span>\r\n</div>\r\n\r\n\t\t\r\n\t\t\r\n\t\t<nav id="site-navigation" class="themonic-nav" role="navigation">\r\n\t\t\t<a class="assistive-text" href="#content" title="Skip to content">Skip to content</a>\r\n\t\t\t<div class="menu-iconic-container"><ul id="menu-top" class="nav-menu"><li id="menu-item-135003" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-135003"><a href="http://www.geeksforgeeks.org/">Home</a></li>\n<li id="menu-item-135004" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-135004"><a title="Algorithms" href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algo</a>\n<ul class="sub-menu">\n\t<li id="menu-item-135030" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135030"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#AnalysisofAlgorithms">Analysis of Algorithms</a></li>\n\t<li id="menu-item-135031" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135031"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#SearchingandSorting">Searching and Sorting</a></li>\n\t<li id="menu-item-135032" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135032"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#GreedyAlgorithms">Greedy Algorithms</a></li>\n\t<li id="menu-item-135033" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135033"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#DynamicProgramming">Dynamic Programming</a></li>\n\t<li id="menu-item-135034" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135034"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#PatternSearching">Pattern Searching</a></li>\n\t<li id="menu-item-135035" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135035"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#OtherStringAlgorithms">Other String Algorithms</a></li>\n\t<li id="menu-item-135036" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135036"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#Backtracking">Backtracking</a></li>\n\t<li id="menu-item-135037" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135037"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#DivideandConquer">Divide and Conquer</a></li>\n\t<li id="menu-item-135038" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135038"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#GeometricAlgorithms">Geometric Algorithms</a></li>\n\t<li id="menu-item-135039" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135039"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#MathematicalAlgorithms">Mathematical Algorithms</a></li>\n\t<li id="menu-item-135040" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135040"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#BitAlgorithms">Bit Algorithms</a></li>\n\t<li id="menu-item-135041" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135041"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#GraphAlgorithms">Graph Algorithms</a></li>\n\t<li id="menu-item-135042" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135042"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#RandomizedAlgorithms">Randomized Algorithms</a></li>\n</ul>\n</li>\n<li id="menu-item-135010" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-135010"><a title="Data Structures" href="http://www.geeksforgeeks.org/data-structures/">DS</a>\n<ul class="sub-menu">\n\t<li id="menu-item-135045" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135045"><a href="http://www.geeksforgeeks.org/data-structures/#LinkedList">LinkedList</a></li>\n\t<li id="menu-item-135046" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135046"><a href="http://www.geeksforgeeks.org/data-structures/#Stack">Stack</a></li>\n\t<li id="menu-item-135047" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135047"><a href="http://www.geeksforgeeks.org/data-structures/#Queue">Queue</a></li>\n\t<li id="menu-item-135048" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135048"><a href="http://www.geeksforgeeks.org/data-structures/#BinaryTree">Binary Tree</a></li>\n\t<li id="menu-item-135049" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135049"><a href="http://www.geeksforgeeks.org/data-structures/#BinarySearchTree">Binary Search Tree</a></li>\n\t<li id="menu-item-135050" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135050"><a href="http://www.geeksforgeeks.org/data-structures/#Heap">Heap</a></li>\n\t<li id="menu-item-135051" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135051"><a href="http://www.geeksforgeeks.org/data-structures/#Hashing">Hashing</a></li>\n\t<li id="menu-item-135052" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135052"><a href="http://www.geeksforgeeks.org/data-structures/#Graph">Graph</a></li>\n\t<li id="menu-item-135053" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135053"><a href="http://www.geeksforgeeks.org/data-structures/#AdvancedDataStructure">Advanced Data Structure</a></li>\n\t<li id="menu-item-135054" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135054"><a href="http://www.geeksforgeeks.org/data-structures/#Array">Array</a></li>\n\t<li id="menu-item-135055" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135055"><a href="http://www.geeksforgeeks.org/data-structures/#Matrix">Matrix</a></li>\n\t<li id="menu-item-135056" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135056"><a href="http://www.geeksforgeeks.org/data-structures/#Misc">Misc</a></li>\n</ul>\n</li>\n<li id="menu-item-135014" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135014"><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview</a></li>\n<li id="menu-item-135006" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135006"><a href="http://www.geeksforgeeks.org/c/">C</a></li>\n<li id="menu-item-135007" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135007"><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>\n<li id="menu-item-135012" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135012"><a href="http://www.geeksforgeeks.org/java/">Java</a></li>\n<li id="menu-item-137004" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-137004"><a href="http://www.geeksforgeeks.org/python/">Python</a></li>\n<li id="menu-item-135009" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135009"><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>\n<li id="menu-item-135016" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135016"><a href="http://qa.geeksforgeeks.org/index.php?qa=ask">Ask a Q</a></li>\n<li id="menu-item-135077" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135077"><a href="https://play.google.com/store/apps/details?id=free.programming.programming">AndroidApp</a></li>\n<li id="menu-item-135367" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135367"><a href="http://www.geeksforgeeks.org/category/guestblogs/">GBlog</a></li>\n<li id="menu-item-135028" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135028"><a href="http://www.geeksforgeeks.org/category/gfact/">GFact</a></li>\n<li id="menu-item-136004" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-136004"><a href="http://www.geeksforgeeks.org/category/project/">Project</a></li>\n<li id="menu-item-136978" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-136978"><a href="http://www.geeksforgeeks.org/jobs/">Jobs</a></li>\n<li id="menu-item-135019" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135019"><a href="http://www.geeksforgeeks.org/category/c-arrays/">Arr</a></li>\n<li id="menu-item-135022" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135022"><a href="http://www.geeksforgeeks.org/category/c-strings/">String</a></li>\n<li id="menu-item-135937" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135937"><a href="http://www.geeksforgeeks.org/category/matrix/">Matrix</a></li>\n<li id="menu-item-135023" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135023"><a href="http://www.geeksforgeeks.org/category/linked-list/">Linked List</a></li>\n<li id="menu-item-135029" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135029"><a href="http://www.geeksforgeeks.org/category/stack/">Stack</a></li>\n<li id="menu-item-135932" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135932"><a href="http://www.geeksforgeeks.org/category/queue/">Q</a></li>\n<li id="menu-item-136299" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-136299"><a href="http://www.geeksforgeeks.org/category/hash/">Hash</a></li>\n<li id="menu-item-135941" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135941"><a href="http://www.geeksforgeeks.org/category/heap/">Heap</a></li>\n<li id="menu-item-135020" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135020"><a href="http://www.geeksforgeeks.org/category/tree/">Tree</a></li>\n<li id="menu-item-135940" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135940"><a href="http://www.geeksforgeeks.org/category/binary-search-tree/">BST</a></li>\n<li id="menu-item-135024" class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-parent current-post-parent menu-item-135024"><a href="http://www.geeksforgeeks.org/category/graph/">Graph</a></li>\n<li id="menu-item-135017" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135017"><a href="http://www.geeksforgeeks.org/category/c-puzzles/">C/C++</a></li>\n<li id="menu-item-135027" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135027"><a href="http://www.geeksforgeeks.org/category/bit-magic/">Bit</a></li>\n<li id="menu-item-135021" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135021"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/">MCQ</a></li>\n<li id="menu-item-135018" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135018"><a href="http://www.geeksforgeeks.org/category/c-programs/">Misc</a></li>\n<li id="menu-item-135025" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135025"><a href="http://www.geeksforgeeks.org/category/program-output/">O/P</a></li>\n</ul></div>\t\t</nav><!-- #site-navigation -->\r\n\t\t<div class="clear"></div>\r\n\t</header><!-- #masthead -->\r\n\r\n\t<div id="main" class="wrapper">\t<div id="primary" class="site-content">\r\n\t\t<div id="content" role="main">\r\n\r\n\t\t\t\t\t\t\t\r\n\t<article id="post-18516" class="post-18516 post type-post status-publish format-standard hentry category-graph tag-graph">\r\n\t\t\t\t<header class="entry-header">\r\n\t\t\t\t\t\t<h1 class="entry-title">Detect Cycle in a Directed Graph</h1>\r\n\t\t\t\t\r\n\t\t\t</header><!-- .entry-header -->\r\n\r\n\t\t\t\t<div class="entry-content">\r\n\t\t\t<p>Given a directed graph, check whether the graph contains a cycle or not.  Your function should return true if the given graph contains at least one cycle, else return false.<span id="more-18516"></span>  For example, the following graph contains three cycles 0->2->0,  0->1->2->0 and  3->3, so your function must return true.</p>\n<p><strong>Solution</strong><br />\nDepth First Traversal can be used to detect cycle in a Graph. DFS for a connected graph produces a tree. There is a cycle in a graph only if there is a <a href="http://en.wikipedia.org/wiki/Depth-first_search#Output_of_a_depth-first_search">back edge</a> present in the graph. A back edge is an edge that is from a node to itself (selfloop) or one of its ancestor in the tree produced by DFS. In the following graph, there are 3 back edges, marked with cross sign. We can observe that these 3 back edges indicate 3 cycles present in the graph.</p>\n<p><a href="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/DFS.jpg"><img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/DFS.jpg" alt="" title="DFS" width="422" height="181" class="aligncenter size-full wp-image-18349" /></a></p>\n<p>For a disconnected graph, we get the DFS forrest as output. To detect cycle, we can check for cycle in individual trees by checking back edges.</p>\n<p>To detect a back edge, we can keep track of vertices currently in recursion stack of function for DFS traversal.  If we reach a vertex that is already in the recursion stack, then there is a cycle in the tree. The edge that connects current vertex to the vertex in the recursion stack is back edge.  We have used recStack[] array to keep track of vertices in the recursion stack.</p>\n<pre class="brush: cpp; highlight: [30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75]; title: ; notranslate" title="">\r\n// A C++ Program to detect cycle in a graph\r\n#include&lt;iostream&gt;\r\n#include &lt;list&gt;\r\n#include &lt;limits.h&gt;\r\n\r\nusing namespace std;\r\n\r\nclass Graph\r\n{\r\n    int V;    // No. of vertices\r\n    list&lt;int&gt; *adj;    // Pointer to an array containing adjacency lists\r\n    bool isCyclicUtil(int v, bool visited[], bool *rs);  // used by isCyclic()\r\npublic:\r\n    Graph(int V);   // Constructor\r\n    void addEdge(int v, int w);   // to add an edge to graph\r\n    bool isCyclic();    // returns true if there is a cycle in this graph\r\n};\r\n\r\nGraph::Graph(int V)\r\n{\r\n    this-&gt;V = V;\r\n    adj = new list&lt;int&gt;[V];\r\n}\r\n\r\nvoid Graph::addEdge(int v, int w)\r\n{\r\n    adj[v].push_back(w); // Add w to v\xe2\x80\x99s list.\r\n}\r\n\r\n// This function is a variation of DFSUytil() in http://www.geeksforgeeks.org/archives/18212\r\nbool Graph::isCyclicUtil(int v, bool visited[], bool *recStack)\r\n{\r\n    if(visited[v] == false)\r\n    {\r\n        // Mark the current node as visited and part of recursion stack\r\n        visited[v] = true;\r\n        recStack[v] = true;\r\n\r\n        // Recur for all the vertices adjacent to this vertex\r\n        list&lt;int&gt;::iterator i;\r\n        for(i = adj[v].begin(); i != adj[v].end(); ++i)\r\n        {\r\n            if ( !visited[*i] &amp;&amp; isCyclicUtil(*i, visited, recStack) )\r\n                return true;\r\n            else if (recStack[*i])\r\n                return true;\r\n        }\r\n\r\n    }\r\n    recStack[v] = false;  // remove the vertex from recursion stack\r\n    return false;\r\n}\r\n\r\n// Returns true if the graph contains a cycle, else false.\r\n// This function is a variation of DFS() in http://www.geeksforgeeks.org/archives/18212\r\nbool Graph::isCyclic()\r\n{\r\n    // Mark all the vertices as not visited and not part of recursion\r\n    // stack\r\n    bool *visited = new bool[V];\r\n    bool *recStack = new bool[V];\r\n    for(int i = 0; i &lt; V; i++)\r\n    {\r\n        visited[i] = false;\r\n        recStack[i] = false;\r\n    }\r\n\r\n    // Call the recursive helper function to detect cycle in different\r\n    // DFS trees\r\n    for(int i = 0; i &lt; V; i++)\r\n        if (isCyclicUtil(i, visited, recStack))\r\n            return true;\r\n\r\n    return false;\r\n}\r\n\r\nint main()\r\n{\r\n    // Create a graph given in the above diagram\r\n    Graph g(4);\r\n    g.addEdge(0, 1);\r\n    g.addEdge(0, 2);\r\n    g.addEdge(1, 2);\r\n    g.addEdge(2, 0);\r\n    g.addEdge(2, 3);\r\n    g.addEdge(3, 3);\r\n\r\n    if(g.isCyclic())\r\n        cout &lt;&lt; &quot;Graph contains cycle&quot;;\r\n    else\r\n        cout &lt;&lt; &quot;Graph doesn\'t contain cycle&quot;;\r\n    return 0;\r\n}\r\n</pre>\n<p>Output:</p>\n<pre>\r\nGraph contains cycle\r\n</pre>\n<p>Time Complexity of this method is same as time complexity of <a href="http://www.geeksforgeeks.org/archives/18212">DFS traversal</a> which is O(V+E).</p>\n<p>Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.</p>\n\r\n\t\t\t<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<!-- Big Rectangle Blog Bottom -->\r\n<ins class="adsbygoogle"\r\n     style="display:inline-block;width:336px;height:280px"\r\n     data-ad-client="ca-pub-9465609616171866"\r\n     data-ad-slot="4061219431"></ins>\r\n<script>\r\n(adsbygoogle = window.adsbygoogle || []).push({});\r\n</script>\r\n<br></br>\r\n\t\t</div><!-- .entry-content -->\r\n\t\t\t\t\r\n\t\t\r\n\r\n\t\t<footer class="entry-meta">\r\n\t\t<span class="post-comment"><a href="http://www.geeksforgeeks.org/detect-cycle-in-a-graph/#comments" class="commentslink" ><span class="dsq-postid" data-dsqidentifier="18516 http://www.geeksforgeeks.org/?p=18516">58 Comments</span></a> <!--added for comments by Shubham-->\r\n\t\t</span><span>Category: <a href="http://www.geeksforgeeks.org/category/graph/" rel="category tag">Graph</a></span> <span>Tags: <a href="http://www.geeksforgeeks.org/tag/graph/" rel="tag">Graph</a></span> \r\n           \t          \t\r\n\t\t\t\t\t</footer><!-- .entry-meta -->\r\n\t</article><!-- #post -->\r\n<div class="related_posts"><h3>Related Posts:</h3><ul><li><a href="http://www.geeksforgeeks.org/number-of-triangles-in-directed-and-undirected-graphs/" title="Number of Triangles in Directed and Undirected Graphs">Number of Triangles in Directed and Undirected Graphs</a></li><li><a href="http://www.geeksforgeeks.org/number-of-triangles-in-a-undirected-graph/" title="Number of Triangles in an Undirected Graph">Number of Triangles in an Undirected Graph</a></li><li><a href="http://www.geeksforgeeks.org/iterative-depth-first-traversal/" title="Iterative Depth First Traversal of Graph">Iterative Depth First Traversal of Graph</a></li><li><a href="http://www.geeksforgeeks.org/print-all-jumping-numbers-smaller-than-or-equal-to-a-given-value/" title="Print all Jumping Numbers smaller than or equal to a given value">Print all Jumping Numbers smaller than or equal to a given value</a></li><li><a href="http://www.geeksforgeeks.org/hopcroft-karp-algorithm-for-maximum-matching-set-2-implementation/" title="Hopcroft\xe2\x80\x93Karp Algorithm for Maximum Matching | Set 2 (Implementation)">Hopcroft\xe2\x80\x93Karp Algorithm for Maximum Matching | Set 2 (Implementation)</a></li><li><a href="http://www.geeksforgeeks.org/hopcroft-karp-algorithm-for-maximum-matching-set-1-introduction/" title="Hopcroft\xe2\x80\x93Karp Algorithm for Maximum Matching | Set 1 (Introduction)">Hopcroft\xe2\x80\x93Karp Algorithm for Maximum Matching | Set 1 (Introduction)</a></li><li><a href="http://www.geeksforgeeks.org/length-of-shortest-chain-to-reach-a-target-word/" title="Length of shortest chain to reach a target word">Length of shortest chain to reach a target word</a></li><li><a href="http://www.geeksforgeeks.org/find-same-contacts-in-a-list-of-contacts/" title="Find same contacts in a list of contacts">Find same contacts in a list of contacts</a></li></ul></div><br></br>\r\n\r\n<!-- Added on 29 Oct 2015 for next and previous from same category -->\r\n<nav class="nav-single">\r\n\t\t\t\t\t<div class="assistive-text">Post navigation</div>\r\n\t\t\t\t\t<span class="nav-previous"><a href="http://www.geeksforgeeks.org/breadth-first-traversal-for-a-graph/" rel="prev">Previous post in category</a></span>\r\n\t\t\t\t\t<span class="nav-next"><a href="http://www.geeksforgeeks.org/find-if-there-is-a-path-between-two-vertices-in-a-given-graph/" rel="next">Next post in category</a></span>\r\n\t\t\t\t</nav><!-- .nav-single -->\r\n\r\n\r\n<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>\r\n    <script type="text/javascript">\r\n    $(document).ready(function(){\r\n        $.ajax({\r\n            url:"http://courses.geeksforgeeks.org/plugin.php",\r\n            method:"POST",\r\n            dataType:"json",\r\n            data:{post_id:$("#ratePlugin").attr("pid"),url:window.location.href},\r\n            xhrFields:{withCredentials:true},\r\n            success:function(response){\r\n                $("#ratePlugin").html(response.rate);\r\n                $("#markPlugin").html(response.mark);\r\n            },\r\n            complete:function(){\r\n                $(".box").click(function(){\r\n                    rrequest({post_id:$("#ratePlugin").attr("pid"),post_title:$("#ratePlugin").attr("ptitle"),rating:$(this).attr("rating"),url:window.location.href});\r\n                });\r\n                $(".mark").click(function(){\r\n                    mrequest({post_id:$("#markPlugin").attr("pid"),post_title:$("#markPlugin").attr("ptitle"),op:$(this).attr("id"),url:window.location.href});\r\n                });\r\n            }\r\n        });\r\n        function rrequest(payload){\r\n            $.ajax({\r\n                url:"http://courses.geeksforgeeks.org/gfgRatings.php",\r\n                method:"POST",\r\n                dataType:"html",\r\n                data:payload,\r\n                xhrFields:{withCredentials:true},\r\n                success:function(response){\r\n                    $("#ratePlugin").html(response);\r\n                },\r\n                complete:function(){\r\n                    $(".box").click(function(){\r\n                        rrequest({post_id:$("#ratePlugin").attr("pid"),post_title:$("#ratePlugin").attr("ptitle"),rating:$(this).attr("rating"),url:window.location.href});\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        //rrequest({post_id:$("#ratePlugin").attr("pid"),url:window.location.href});\r\n        function mrequest(payload){\r\n            $.ajax({\r\n                url:"http://courses.geeksforgeeks.org/gfgMarking.php",\r\n                method:"POST",\r\n                dataType:"html",\r\n                data:payload,\r\n                xhrFields:{withCredentials:true},\r\n                success:function(response){\r\n                    $("#markPlugin").html(response);\r\n                },\r\n                complete:function(){\r\n                    $(".mark").click(function(){\r\n                        mrequest({post_id:$("#markPlugin").attr("pid"),post_title:$("#markPlugin").attr("ptitle"),op:$(this).attr("id"),url:window.location.href});\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        //mrequest({post_id:$("#markPlugin").attr("pid"),url:window.location.href});\r\n    });\r\n</script>\r\n\r\n<div class="plugins">\r\n<div pid="18516" ptitle="Detect Cycle in a Directed Graph" id="ratePlugin"></div>\r\n<div pid="18516" ptitle="Detect Cycle in a Directed Graph" id="markPlugin"></div>\r\n</div>\r\n\r\n<br></br>\r\n\r\n<script>\r\n  window.fbAsyncInit=function() {\r\n    FB.init({\r\n      appId      : \\\'380853768781431\\\',\r\n      xfbml      : true,\r\n      version    : \\\'v2.3\\\'\r\n    });\r\n  };\r\n\r\n  (function(d, s, id){\r\n     var js, fjs = d.getElementsByTagName(s)[0];\r\n     if (d.getElementById(id)) {return;}\r\n     js = d.createElement(s); js.id = id;\r\n     js.src = "//connect.facebook.net/en_US/sdk.js";\r\n     fjs.parentNode.insertBefore(js, fjs);\r\n   }(document, \\\'script\\\', \\\'facebook-jssdk\\\'));\r\n</script>\r\n<div class="fb-like" data-share="true" data-width="450" data-show-faces="true"></div>\r\n\r\n<br></br>\r\n<p>Writing code in comment? Please use <a href="http://code.geeksforgeeks.org/">code.geeksforgeeks.org</a>, generate link and share the link here.</a>\r\n\t\t\t\t\r\n<div id="disqus_thread">\r\n            <div id="dsq-content">\r\n\r\n\r\n            <ul id="dsq-comments">\r\n                    <li class="comment even thread-even depth-1" id="dsq-comment-35865">\r\n        <div id="dsq-comment-header-35865" class="dsq-comment-header">\r\n            <cite id="dsq-cite-35865">\r\n                <span id="dsq-author-user-35865">prashant jha</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-35865" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-35865" class="dsq-comment-message"><p>method 1-<br />\nif there is any back edge in dfs spanning tree then it will have cycle<br />\nmethod 2-<br />\nwarshall algorithm :find the path matrix and if any diagonal entry in matrix in 1 ie path is there for vertex v to v so it has cycle .if all diagonal entries are 0 then it dont have cycle</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-35150">\r\n        <div id="dsq-comment-header-35150" class="dsq-comment-header">\r\n            <cite id="dsq-cite-35150">\r\n                <span id="dsq-author-user-35150">Guest</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-35150" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-35150" class="dsq-comment-message"></div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-34979">\r\n        <div id="dsq-comment-header-34979" class="dsq-comment-header">\r\n            <cite id="dsq-cite-34979">\r\n                <span id="dsq-author-user-34979">Himanshu Dagar</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-34979" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-34979" class="dsq-comment-message"><p>can refer to below link in case u needed proper algo:-</p>\n<p><a href="http://ideone.com/TtFsJA" rel="nofollow">http://ideone.com/TtFsJA</a></p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-34117">\r\n        <div id="dsq-comment-header-34117" class="dsq-comment-header">\r\n            <cite id="dsq-cite-34117">\r\n                <span id="dsq-author-user-34117">hh4hooch</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-34117" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-34117" class="dsq-comment-message"><p>You could perform this recursively with much less overhead. Providing you have a structure(since were using graphs let&#8217;s just assume you do), you can mark the nodes with two variables for visited and alive. As you cycle through you mark each node&#8217;s alive as true until the last recursive call comes back and has no child nodes left, then set it back to false. What this will do is negate the need to have a list keeping track of nodes as well as the need to search the data structure for membership. You can simply run the algorithm and if you never enter a node where alive has already be set to true then there are no cycles. If you do enter a node where alive is already true, every node currently marked as true is in the cycle.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-33894">\r\n        <div id="dsq-comment-header-33894" class="dsq-comment-header">\r\n            <cite id="dsq-cite-33894">\r\n                <span id="dsq-author-user-33894">Wellwisher</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-33894" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-33894" class="dsq-comment-message"><p>Detect cycle of length 3 or check if the graph is traingle free </p>\n<p><a href="http://onestopinterviewprep.blogspot.com/2014/03/triangle-free-graph.html" rel="nofollow">http://onestopinterviewprep.blogspot.com/2014/03/triangle-free-graph.html</a></p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-35193">\r\n        <div id="dsq-comment-header-35193" class="dsq-comment-header">\r\n            <cite id="dsq-cite-35193">\r\nhttp://kaushik-lele-algos-datastructures.blogspot.in/                <span id="dsq-author-user-35193">kaushik Lele</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-35193" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-35193" class="dsq-comment-message"><p>There can be two types of triangle<br />\n1) Each triangle with side with length 1<br />\ne.g. 1-2,1-3,2-3<br />\n2) It can be bigger array<br />\n1-2,2-3  and 1-4,4-3 and 2-3 </p>\n<p>I have written two functions, findTriangle() which finds both type of triangles and findOneLevelTriangle() which finds only type 1 triangle</p>\n<p><a href="http://ideone.com/UEKoKy" rel="nofollow">http://ideone.com/UEKoKy</a></p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-33474">\r\n        <div id="dsq-comment-header-33474" class="dsq-comment-header">\r\n            <cite id="dsq-cite-33474">\r\n                <span id="dsq-author-user-33474">shubham19may</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-33474" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-33474" class="dsq-comment-message"><p>why cant we simply perform a DFS and check if any vertex points to an already visited vertex??? what is a need to take stack???</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-34118">\r\n        <div id="dsq-comment-header-34118" class="dsq-comment-header">\r\n            <cite id="dsq-cite-34118">\r\n                <span id="dsq-author-user-34118">hh4hooch</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-34118" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-34118" class="dsq-comment-message"><p>Well, if you used that as the condition it would only work if there was a single loop in the entire graph. Think about two different vertices(A, B) that point to another vertex(C). If you return after visiting C from A and A has a a second child B and we travel to B. B would try to travel to C and C is marked as visited. This would say there is a cycle when there is no cycle because a points to C and B but B only points to C.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-33408">\r\n        <div id="dsq-comment-header-33408" class="dsq-comment-header">\r\n            <cite id="dsq-cite-33408">\r\n                <span id="dsq-author-user-33408">pulkit mehra</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-33408" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-33408" class="dsq-comment-message"><p>why do we need to keep track of back edges?? Why can&#8217;t a normal dfs work as in case of undirected graphs?? We just keep track of visited vertices if an adjacent vertex is visited we should return true??</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-33604">\r\n        <div id="dsq-comment-header-33604" class="dsq-comment-header">\r\n            <cite id="dsq-cite-33604">\r\n                <span id="dsq-author-user-33604">swebdev</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-33604" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-33604" class="dsq-comment-message"><p>Let&#8217;s say we have three vertices, and following edges:<br />\n0-&gt;1<br />\n0-&gt;2<br />\n1-&gt;2<br />\nNormal dfs algorithm would detect a cycle in this graph, although there is not. (use paper/pen for clarification).</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even depth-2" id="dsq-comment-34997">\r\n        <div id="dsq-comment-header-34997" class="dsq-comment-header">\r\n            <cite id="dsq-cite-34997">\r\n                <span id="dsq-author-user-34997">Sanjay Agarwal</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-34997" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-34997" class="dsq-comment-message"><p>@pulkitmehra:disqus You are correct. But you need to color the nodes as WHITE, GRAY and BLACK, as suggested in the book &#8220;Introduction to Algorithms&#8221; by Cormen. In this case, if a vertex (u) which is just now discovered (colored GRAY), is connected to a GRAY vertex (v), then the edge (u, v) is a back edge, i.e. the graph contains a cycle.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-33075">\r\n        <div id="dsq-comment-header-33075" class="dsq-comment-header">\r\n            <cite id="dsq-cite-33075">\r\n                <span id="dsq-author-user-33075">zealfire</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-33075" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-33075" class="dsq-comment-message"><p>i too want to comment on time complexity of this question:how can iie be same as complexity of dfs when it is performing dfs on all nodes</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-32890">\r\n        <div id="dsq-comment-header-32890" class="dsq-comment-header">\r\n            <cite id="dsq-cite-32890">\r\n                <span id="dsq-author-user-32890">Abhimanyu</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-32890" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-32890" class="dsq-comment-message"><p>Can BFS be used for the same. If yes, How?</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-32774">\r\n        <div id="dsq-comment-header-32774" class="dsq-comment-header">\r\n            <cite id="dsq-cite-32774">\r\n                <span id="dsq-author-user-32774">Nemil Timbadia</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-32774" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-32774" class="dsq-comment-message"><p>Isn&#8217;t this question performing DFS on all the nodes. How is the time complexity the same as the DFS&#8230;</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-32964">\r\n        <div id="dsq-comment-header-32964" class="dsq-comment-header">\r\n            <cite id="dsq-cite-32964">\r\n                <span id="dsq-author-user-32964">nopey12</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-32964" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-32964" class="dsq-comment-message"><p>It checks each node only for once. So after first dfs it will not perform dfs from the ones on the first dfs traversal.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-32507">\r\n        <div id="dsq-comment-header-32507" class="dsq-comment-header">\r\n            <cite id="dsq-cite-32507">\r\n                <span id="dsq-author-user-32507">22Dush22</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-32507" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-32507" class="dsq-comment-message"><p>The code doesn&#8217;t seem to work for the following configuration&#8230;<br />\n    Graph g(4);<br />\n    g.addEdge(3, 1);<br />\n    g.addEdge(3, 4);<br />\n    g.addEdge(1, 2);</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-32508">\r\n        <div id="dsq-comment-header-32508" class="dsq-comment-header">\r\n            <cite id="dsq-cite-32508">\r\n                <span id="dsq-author-user-32508">Kartik</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-32508" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-32508" class="dsq-comment-message"><p>When the number of vertices is 4, the vertices should be numbered as 0, 1, 2,  and 3.  Please try the program with following.</p>\n<p>Graph g(4);<br />\n    g.addEdge(2, 0);<br />\n    g.addEdge(2, 3);<br />\n    g.addEdge(0, 1);</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-31870">\r\n        <div id="dsq-comment-header-31870" class="dsq-comment-header">\r\n            <cite id="dsq-cite-31870">\r\n                <span id="dsq-author-user-31870">Serena</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-31870" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-31870" class="dsq-comment-message"><p>How can I modify your algorithm to find just the cycles of specific length? That means to chech for example if there (in the graph) exists a cycle of length 7. How could I implement that in your algorithm?</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-33902">\r\n        <div id="dsq-comment-header-33902" class="dsq-comment-header">\r\n            <cite id="dsq-cite-33902">\r\n                <span id="dsq-author-user-33902">OJ</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-33902" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-33902" class="dsq-comment-message"><p>Just modify the recStack to the length of desired length of cycle (i.e. in your case 7) and return false, if the 8th vertex in DFS doesn&#8217;t equal to the first vertex in Stack (i.e. with index 0). You have to be as well passing integer specifying the length of cycle. Hopefully it&#8217;s understandable, I&#8217;m not really good in explaining stuff \xf0\x9f\x98\x89</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-29385">\r\n        <div id="dsq-comment-header-29385" class="dsq-comment-header">\r\n            <cite id="dsq-cite-29385">\r\n                <span id="dsq-author-user-29385">Ankit Chaudhary</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-29385" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-29385" class="dsq-comment-message"><p>Create two arrays:<br />\n1. visitTime[V]={0}<br />\n2. departure[V]={0}<br />\nCreate a global variable int time=0;</p>\n<p>DFS(u)</p>\n<p>1.When a vertex is visited, visitTime[u]=++time.<br />\n2.visit all adjacents v of u if notvisited<br />\n      do DFS(v)</p>\n<p>3. departure[v]=time++</p>\n<p>Modify DFS as<br />\nIn second step, check<br />\n      if (visitTime[v]&gt;visitTime[u] &amp;&amp; departure[u]==0)<br />\n             then there is back edge from v to u<br />\n                  return true.</p>\n<p>Algo:<br />\n1. visit[V]={0}<br />\n2. departure[V]={0}<br />\n3. int time=0;</p>\n<p>DFS(int u)<br />\n1. visit[u]=++time;<br />\n2. for all adjacent v of u<br />\n         if(!visit[v])<br />\n          {</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-30924">\r\n        <div id="dsq-comment-header-30924" class="dsq-comment-header">\r\n            <cite id="dsq-cite-30924">\r\n                <span id="dsq-author-user-30924">Bhavik</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-30924" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-30924" class="dsq-comment-message"><p>I think the condition should be for each v adjacent to u:<br />\nvisit[v] &lt; visit[u] &amp;&amp; departure[v]==0.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-29087">\r\n        <div id="dsq-comment-header-29087" class="dsq-comment-header">\r\n            <cite id="dsq-cite-29087">\r\n                <span id="dsq-author-user-29087">learningCode</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-29087" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-29087" class="dsq-comment-message"><p>What about using BFS like below:</p>\n<p>bool Graph::isCyclic()<br />\n{<br />\n    bool *visited = new bool[mNumVertices];<br />\n    for(int i = 0; i &lt; mNumVertices; i++)<br />\n        visited[i] = false;</p>\n<p>    for(int u = 0; u &lt; mNumVertices; u++)<br />\n    {<br />\n        if(!visited[u] &amp;&amp; isCyclicUtil(u, visited))<br />\n            return true;<br />\n    }</p>\n<p>    return false;<br />\n}</p>\n<p>bool Graph::isCyclicUtil(int u, bool *visited)<br />\n{<br />\n    visited[u] = true;</p>\n<p>    list::iterator iter = mAdj[u].begin();<br />\n    for(;iter != mAdj[u].end(); iter++)<br />\n    {<br />\n        if(visited[*iter] == true)<br />\n            return true;<br />\n    }</p>\n<p>    return false;<br />\n}</p>\n<p>I confirmed that it works fine.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-29384">\r\n        <div id="dsq-comment-header-29384" class="dsq-comment-header">\r\n            <cite id="dsq-cite-29384">\r\n                <span id="dsq-author-user-29384">Ankit Chaudhary</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-29384" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-29384" class="dsq-comment-message"><p>E={1-&gt;2, 1-&gt;3, 2-&gt;3}<br />\nV={1,2,3}<br />\nCheck for this input</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-3" id="dsq-comment-29483">\r\n        <div id="dsq-comment-header-29483" class="dsq-comment-header">\r\n            <cite id="dsq-cite-29483">\r\n                <span id="dsq-author-user-29483">viki</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-29483" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-29483" class="dsq-comment-message"><p>I checked and it&#8217;s working fine&#8230;doesn&#8217;t contain cycle.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even depth-3" id="dsq-comment-35176">\r\n        <div id="dsq-comment-header-35176" class="dsq-comment-header">\r\n            <cite id="dsq-cite-35176">\r\nhttp://kaushik-lele-algos-datastructures.blogspot.in/                <span id="dsq-author-user-35176">kaushik Lele</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-35176" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-35176" class="dsq-comment-message"><p>Logic is we mark only current node as visited and check if any of its adjacent nodes are visited. If yes, then it is a cycle.<br />\nElse you iterate over next vertex.</p>\n<p>For your example<br />\nE={1-&gt;2, 1-&gt;3, 2-&gt;3}<br />\nV={1,2,3}</p>\n<p>Iteration for node 1<br />\nv[1] marked as true, v[2] ,v[3] remain false.<br />\n2 &amp; 3 both are adjacent nodes, both are false. So this iteration does not return true</p>\n<p>Iteration for node 2<br />\nv[2] marked as true. v[1] is already true,v[3] remain false.<br />\n3 is its adjacent node, it is false. So this iteration does not return true</p>\n<p>Iteration for node 3<br />\nv[3] marked as true. v[1],v[2],v[3] all are true<br />\n3 has no adjacent node. So this iteration also does not return true.</p>\n<p>All nodes visited, no returned true. So there is no cycle</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt depth-2" id="dsq-comment-35174">\r\n        <div id="dsq-comment-header-35174" class="dsq-comment-header">\r\n            <cite id="dsq-cite-35174">\r\nhttp://kaushik-lele-algos-datastructures.blogspot.in/                <span id="dsq-author-user-35174">kaushik Lele</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-35174" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-35174" class="dsq-comment-message"><p>It should work fine.<br />\nSo u mark only current node as visited and check if any of its adjacent nodes are visited. If yes, then it is a cycle.</p>\n<p>Else you iterate over next vertex.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-28183">\r\n        <div id="dsq-comment-header-28183" class="dsq-comment-header">\r\n            <cite id="dsq-cite-28183">\r\n                <span id="dsq-author-user-28183">Sanjay Agarwal</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-28183" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-28183" class="dsq-comment-message"><p><code><br />\n#include<br />\n#include<br />\n#include<br />\nint mat[20][20];<br />\nint no_of_vertex;<br />\nbool depth_first_search(int v)<br />\n{<br />\n    int i, top = -1;<br />\n    int stack[20] = {0}, visited[20] = {0};<br />\n    do<br />\n    {<br />\n        for(i = 1; i = 0);<br />\n    return false;    //otherwise return false.<br />\n}<br />\nint main()<br />\n{<br />\n    int i, j;<br />\n    printf("n Enter the number of vertices:");<br />\n    scanf("%d",&amp;no_of_vertex);<br />\n    printf("n Enter graph data in adjacency matrix form:n");<br />\n    for(i = 1; i &lt;= no_of_vertex; i++)<br />\n        for(j = 1; j &lt;= no_of_vertex; j++)<br />\n            scanf(&quot;%d&quot;,&amp;mat[i][j]);<br />\n    for(i = 1; i &lt;= no_of_vertex; i++)<br />\n    {<br />\n        if (depth_first_search(i))   //if cycle is found, break<br />\n            break;<br />\n    }<br />\n    if (i &lt;= no_of_vertex)<br />\n        printf(&quot;Graph has cyclen&quot;);<br />\n    else<br />\n        printf(&quot;Graph has no cyclesn&quot;);<br />\n    getch();<br />\n    return 0;<br />\n}</p>\n<p></code></p>\n<p>Please feel free to comment in case you find any mistake in the implementation. Thanks in advance <img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/images/smilies/simple-smile.png" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-28146">\r\n        <div id="dsq-comment-header-28146" class="dsq-comment-header">\r\n            <cite id="dsq-cite-28146">\r\n                <span id="dsq-author-user-28146">Arpit</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-28146" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-28146" class="dsq-comment-message"><p>can&#8217;t we simply use the property that if number of edges is greater than &#8220;n-1&#8243;,where n is number of nodes&#8230; the graph will have a cycle&#8230;</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-28283">\r\n        <div id="dsq-comment-header-28283" class="dsq-comment-header">\r\n            <cite id="dsq-cite-28283">\r\n                <span id="dsq-author-user-28283">Sanjay Agarwal</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-28283" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-28283" class="dsq-comment-message"><p>No, this logic will not work in all cases. e.g. consider a directed graph as:<br />\n1&#8212;&gt;2<br />\n1&#8212;&gt;4<br />\n2&#8212;&gt;3<br />\n3&#8212;&gt;4</p>\n<p>Here, no. of nodes (n) = 4<br />\nNo. of edges = 4 &gt; n-1<br />\nBut, this graph does not contain any cycle.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-27235">\r\n        <div id="dsq-comment-header-27235" class="dsq-comment-header">\r\n            <cite id="dsq-cite-27235">\r\n                <span id="dsq-author-user-27235">mayank</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-27235" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-27235" class="dsq-comment-message"><p>Apply a modified BFS for given graph. According to new BFS we process a node when it&#8217;s parent is already processed .<br />\nIf at the end of BFS, total number of visited nodes is not equal to total number of nodes then there a loop in graph, as We will not be able to process the node from where loop starts.</p>\n<p>I.e. 1-&gt;2  2-&gt;3     3-&gt;4    4-&gt;1.</p>\n<p>Here When We try to apply BFS on 1, we could not enter in loop and output will not have 1. same as 1 2,3,4. so output is empty and we can say loop in graph</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-27137">\r\n        <div id="dsq-comment-header-27137" class="dsq-comment-header">\r\n            <cite id="dsq-cite-27137">\r\n                <span id="dsq-author-user-27137">Durga Prasana</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-27137" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-27137" class="dsq-comment-message"><p>Shouldn&#8217;t the isCyclic be something like:</p>\n<p>// Call the recursive helper function to detect cycle in different<br />\n// DFS trees<br />\nfor(int i = 0; i &lt; V; i++){<br />\n    //Reset the visited &amp; recStack before starting with current node &#039;i&#039;<br />\n    for(int i = 0; i &lt; V; i++){<br />\n        visited[i] = false;<br />\n        recStack[i] = false;<br />\n    }</p>\n<p>    if (isCyclicUtil(i, visited, recStack))<br />\n        return true;<br />\n    return false;<br />\n}</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-29997">\r\n        <div id="dsq-comment-header-29997" class="dsq-comment-header">\r\n            <cite id="dsq-cite-29997">\r\n                <span id="dsq-author-user-29997">Infinity1</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-29997" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-29997" class="dsq-comment-message"><p>nope this is recursion, so automatically would recurse back and have nothing in either.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-25036">\r\n        <div id="dsq-comment-header-25036" class="dsq-comment-header">\r\n            <cite id="dsq-cite-25036">\r\n                <span id="dsq-author-user-25036">hary</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-25036" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-25036" class="dsq-comment-message"><p>@geeksforgeeks correct me If I am wrong</p>\n<pre> <code language="C">\nfor(int i = 0; i &lt; V; i++)\n        if (isCyclicUtil(i, visited, recStack))\n            return true;\nI think the call to isCyclicUtil should be made only when visited[i] == false; o.w. we are iterating the already visted vertices again in search of a cycle.\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-24952">\r\n        <div id="dsq-comment-header-24952" class="dsq-comment-header">\r\n            <cite id="dsq-cite-24952">\r\n                <span id="dsq-author-user-24952">S Praveen</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-24952" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-24952" class="dsq-comment-message"><p>Hello,<br />\n      If i am not wrong can we say like at last in the isCyclicUtil function when we make reStack[v]=false we are actually conforming that node v is not a part of any circle present in the graph.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-16714">\r\n        <div id="dsq-comment-header-16714" class="dsq-comment-header">\r\n            <cite id="dsq-cite-16714">\r\n                <span id="dsq-author-user-16714">Nikunj Banka</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-16714" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-16714" class="dsq-comment-message"><p>I don&#8217;t think that the algorithm works in worst case O(V + E). Rather it takes O(V^2) time in the following case : </p>\n<p>The graph is a tree that has just one vertex in the right branch and has all other vertices in the left branch placed sequentially.Every vertex in the left branch has an edge that links to the right branch vertex. </p>\n<p>Now, on running the above algorithm, we will examine the stack everytime we examine a vertex in the left branch.(to check if the stack contains the vertex that is in the right branch).</p>\n<p>So we will examine the stack a sum total of O(V^2) times, as </p>\n<p>1 + 2 + 3 + 4 + 5 + &#8230;&#8230; = O(V^2)</p>\n<p>This way, the algo has a running time of quadratic and not linear.</p>\n<p>Please correct me if I am wrong.<br />\nPS. I have not read the code as I don&#8217;t know C++.</p>\n<p>thanks.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-20492">\r\n        <div id="dsq-comment-header-20492" class="dsq-comment-header">\r\n            <cite id="dsq-cite-20492">\r\n                <span id="dsq-author-user-20492">Harendra</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-20492" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-20492" class="dsq-comment-message"><p>Yes running time complexity seems much higher. It is order of O(V^2).</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-3" id="dsq-comment-29484">\r\n        <div id="dsq-comment-header-29484" class="dsq-comment-header">\r\n            <cite id="dsq-cite-29484">\r\n                <span id="dsq-author-user-29484">viki</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-29484" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-29484" class="dsq-comment-message"><p>No, running time is O(E+V) only. Observe carefully.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-11149">\r\n        <div id="dsq-comment-header-11149" class="dsq-comment-header">\r\n            <cite id="dsq-cite-11149">\r\n                <span id="dsq-author-user-11149">suyash</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-11149" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-11149" class="dsq-comment-message"><p>I doubt, whether code given in solution is working properly,<br />\nI took simple example like we have edges (0,1) , (1,2) , (0,2)<br />\nBut as we are making flag false while exiting from function isCyclicUtil . So while visiting 2 from vertex 0, we are not able to find recStack[2] as true.Every time isCyclicUtil returns false.Please correct if my analysis is wrong</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-11150">\r\n        <div id="dsq-comment-header-11150" class="dsq-comment-header">\r\n            <cite id="dsq-cite-11150">\r\n                <span id="dsq-author-user-11150">Kartik</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-11150" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-11150" class="dsq-comment-message"><p>Take a closer look at the problem statement. The given code is for directed graphs.  So a graph with edges in set {(0,1) , (1,2) , (0,2)} doesn&#8217;t contain cycle.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-3" id="dsq-comment-11152">\r\n        <div id="dsq-comment-header-11152" class="dsq-comment-header">\r\n            <cite id="dsq-cite-11152">\r\n                <span id="dsq-author-user-11152">suyash</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-11152" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-11152" class="dsq-comment-message"><p>yes , got your point &#8230;.thanks</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even depth-2" id="dsq-comment-11151">\r\n        <div id="dsq-comment-header-11151" class="dsq-comment-header">\r\n            <cite id="dsq-cite-11151">\r\n                <span id="dsq-author-user-11151">suyash</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-11151" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-11151" class="dsq-comment-message"><p>I think, we just need to do DFS and keep on marking vertices as visited ,and if we encounter any vertex while traversing that is  already visited then there is cycle &#8230;</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-3" id="dsq-comment-11153">\r\n        <div id="dsq-comment-header-11153" class="dsq-comment-header">\r\n            <cite id="dsq-cite-11153">\r\n                <span id="dsq-author-user-11153">suyash</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-11153" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-11153" class="dsq-comment-message"><p>I guess this approach is valid in case of undirected graph,but not correct for direct graph.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-10901">\r\n        <div id="dsq-comment-header-10901" class="dsq-comment-header">\r\n            <cite id="dsq-cite-10901">\r\nhttp://www.jagadishvenkat.webs.com                <span id="dsq-author-user-10901">jagadish</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-10901" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-10901" class="dsq-comment-message"><p>Hi venki, Sachin<br />\nWill this approach work?</p>\n<pre> <code language="C">\n/*  */\nvoid dfs(Vertex v){\nvisited[v]=true;\nfor each adjacent vertex \'u\' of v,\n          if(visited[u]==true) {\n          printf(&quot;cycle!&quot;); // since this is a back edge \n          }\n          else {\n          dfs(u);\n          }\n}\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-10401">\r\n        <div id="dsq-comment-header-10401" class="dsq-comment-header">\r\n            <cite id="dsq-cite-10401">\r\n                <span id="dsq-author-user-10401">venkat</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-10401" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-10401" class="dsq-comment-message"><p>Shopping</p>\n<p>You have just moved into a new apartment and have a long list of items you need to buy. Unfortunately, to buy this many items requires going to many different stores. You would like to minimize the amount of driving necessary to buy all the items you need.<br />\nYour city is organized as a set of intersections connected by roads. Your house and every store is located at some intersection. Your task is to find the shortest route that begins at your house, visits all the stores that you need to shop at, and returns to your house.<br />\nInput Format:</p>\n<p>Each test case begins with a line containing two integers N and M, the number of intersections and roads in the city, respectively. Each of these integers is between 1 and 100000, inclusive. The intersections are numbered from 0 to N-1. Your house is at the intersection numbered 0. M lines follow, each containing three integers X, Y, and D, indicating that the intersections X and Y are connected by a bidirectional road of length D. The following line contains a single integer S, the number of stores you need to visit, which is between 1 and ten, inclusive. The subsequent S lines each contain one integer indicating the intersection at which each store is located. It is possible to reach all of the stores from your house.<br />\nOutput Format:</p>\n<p>Output a line containing a single integer, the length of the shortest possible shopping trip from your house, visiting all the stores, and returning to your house.<br />\nConstraints:</p>\n<p>Sample Input:</p>\n<p>4 6<br />\n0 1 1<br />\n1 2 1<br />\n2 3 1<br />\n3 0 1<br />\n0 2 5<br />\n1 3 5<br />\n3<br />\n1<br />\n2<br />\n3<br />\nSample Output:</p>\n<p>4<br />\nExplanation:<br />\nAnother Test Case:<br />\nSample Input 2:</p>\n<p> 5 10<br />\n 1 3 875<br />\n 2 0 866<br />\n 2 1 131<br />\n 0 1 274<br />\n 4 3 38<br />\n 4 2 605<br />\n 1 3 263<br />\n 4 3 380<br />\n 4 3 196<br />\n 1 0 67<br />\n 3<br />\n 2<br />\n 1<br />\n 4</p>\n<p>Sample Output 2:</p>\n<p>998</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-10335">\r\n        <div id="dsq-comment-header-10335" class="dsq-comment-header">\r\n            <cite id="dsq-cite-10335">\r\n                <span id="dsq-author-user-10335">venkat</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-10335" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-10335" class="dsq-comment-message"><p>can any one suggest good algorithm for this problem&#8230;..</p>\n<p>for a given graph&#8230;&#8230;we need to visit&#8230;..some selected nodes&#8230;.with minimum distance&#8230;.and return to the starting point..</p>\n<p>say starting node is 0&#8230;&#8230;</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-10336">\r\n        <div id="dsq-comment-header-10336" class="dsq-comment-header">\r\n            <cite id="dsq-cite-10336">\r\n                <span id="dsq-author-user-10336">kartik</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-10336" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-10336" class="dsq-comment-message"><p>@venkat: Please post your question to <a href="http://www.geeksforgeeks.org/forum/" rel="nofollow">forum using </a><a href="http://www.geeksforgeeks.org/forum/?new=1" rel="nofollow">Ask a Question</a> page. It will be visible to more geeks on forum.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-10056">\r\n        <div id="dsq-comment-header-10056" class="dsq-comment-header">\r\n            <cite id="dsq-cite-10056">\r\n                <span id="dsq-author-user-10056">Sreenivas Doosa</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-10056" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-10056" class="dsq-comment-message"><p>Please see the below code. Please let me know if anything goes wrong</p>\n<pre> <code language="C">\n\nbool Graph::isCyclic() {\n\n\t/*\n\t * If there exists atleast one cycle return true\n\t */\n\tbool* visited = new bool[V];\n\n\tfor(int i = 0; i &lt; V; i++) {\n\n\t\tfor(int j = 0; j &lt; V; j++) {\n\t\t\tvisited[j] = false;\n\t\t}\n\n\t\tif(isCyclicUtil(i, i, visited)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n\nbool Graph::isCyclicUtil(int node, int origin, bool visited[]) {\n\n\tif(!visited[node]) {\n\n\t\tvisited[node] = true;\n\n\t\tlist&lt;int&gt;::iterator itr;\n\t\tfor(itr = adj[node].begin(); itr != adj[node].end(); ++itr) {\n\n\t\t\tif(isCyclicUtil(*itr, origin, visited)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t} else {\n\t\t// already visited\n\t\tif(node == origin) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-aygul odd alt depth-2" id="dsq-comment-15310">\r\n        <div id="dsq-comment-header-15310" class="dsq-comment-header">\r\n            <cite id="dsq-cite-15310">\r\n                <span id="dsq-author-user-15310">aygul</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-15310" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-15310" class="dsq-comment-message"><p>I guess this can detect only one level of back edge. You are not checking the other parents.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-9033">\r\n        <div id="dsq-comment-header-9033" class="dsq-comment-header">\r\n            <cite id="dsq-cite-9033">\r\n                <span id="dsq-author-user-9033">Unknown</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-9033" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-9033" class="dsq-comment-message"><p>What is the benefit of using &#8220;isCyclicUtil(*i, visited, recStack)&#8221; in the below lines? Can&#8217;t we simply check using visited and recStack for the cycle.</p>\n<pre> <code language="C">\nif ( !visited[*i] &amp;&amp; isCyclicUtil(*i, visited, recStack) )\n                return true;\n            else if (recStack[*i])\n                return true;\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-8629">\r\n        <div id="dsq-comment-header-8629" class="dsq-comment-header">\r\n            <cite id="dsq-cite-8629">\r\n                <span id="dsq-author-user-8629">Mark</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-8629" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-8629" class="dsq-comment-message"><p>Can you please also write the code to &#8221; List the vertices that constitute the Cycle??&#8221;</p>\n<p>Thanks in Advance..</p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-8320">\r\n        <div id="dsq-comment-header-8320" class="dsq-comment-header">\r\n            <cite id="dsq-cite-8320">\r\n                <span id="dsq-author-user-8320">sachin</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-8320" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-8320" class="dsq-comment-message"><p>venki,<br />\nyour solution is fine.i just wanted to know,if it can be done or not with only visited array.</p>\n<pre> <code language="C">\ndfs(int v)\n {\n  if(visited[v])\n   return cycle;\n   else visited[v] =1;\n  for(i in adj[v])\n{    if(!visited[i])\n     dfs(i);\n     visited[i]=0    \n}\n\n\n\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-8321">\r\n        <div id="dsq-comment-header-8321" class="dsq-comment-header">\r\n            <cite id="dsq-cite-8321">\r\n                <span id="dsq-author-user-8321">Venki</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-8321" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-8321" class="dsq-comment-message"><p>@Sachin, in your code the entry node v could be anyone of the adjacent nodes (i) while exploring the source vertex. The backtracking procedure will come to same adjacent node to explore any remaining node. Such node need not be the source node where we initiate the initial call. Try your code with dense graph, you will get an idea.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-8229">\r\n        <div id="dsq-comment-header-8229" class="dsq-comment-header">\r\n            <cite id="dsq-cite-8229">\r\n                <span id="dsq-author-user-8229">Venki</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-8229" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-8229" class="dsq-comment-message"><p>@Sandeep, I don&#8217;t think we need an explicit recursion stack. We can keep track of DFS origin node in the function call. See pseudo code below ( not tested \xf0\x9f\x98\x9b ),</p>\n<pre> <code language="C">\n// in - exploring node, pr it\'s parent\ncycleDetect(int in, int pr)\n{\n    visited[in] = Yes;\n    \n    for each v in G.ADJ(in)\n        if( !visited[v] )\n            cycleDetect(v, in)\n        else\n            if ( v == pr )\n                found cycle\n}\n\nThe function can be called as following,\n\nfor each v in G.V\n    if( visited[origin] )\n        cycleDetect(origin, origin)\n\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-8304">\r\n        <div id="dsq-comment-header-8304" class="dsq-comment-header">\r\n            <cite id="dsq-cite-8304">\r\n                <span id="dsq-author-user-8304">sachin</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-8304" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-8304" class="dsq-comment-message"><p>i dont get it,why pr is needed .if we find out visited true then there should be cycle?</p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-3" id="dsq-comment-8308">\r\n        <div id="dsq-comment-header-8308" class="dsq-comment-header">\r\n            <cite id="dsq-cite-8308">\r\n                <span id="dsq-author-user-8308">Venki</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-8308" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-8308" class="dsq-comment-message"><p>visited will be set for all those adjacent explored vertices. We may come back to one of these vertices but we need to check whether we have reached the origin node.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-4" id="dsq-comment-8311">\r\n        <div id="dsq-comment-header-8311" class="dsq-comment-header">\r\n            <cite id="dsq-cite-8311">\r\n                <span id="dsq-author-user-8311">sachin</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-8311" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-8311" class="dsq-comment-message"><p>Bu if we can reset visited flag after backtrack to previos branch.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-5" id="dsq-comment-8312">\r\n        <div id="dsq-comment-header-8312" class="dsq-comment-header">\r\n            <cite id="dsq-cite-8312">\r\nhttp://www.geeksforgeeks.org                <span id="dsq-author-user-8312">Venki</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-8312" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-8312" class="dsq-comment-message"><p>@Sachin, above pseudo code is written to detect cycle from a vertex to itself (point-to-point). Or it checks the source vertex is on cycle path. If we unmark the visited (DFS marker) flag during backtracking I am not sure, how can we able to check whether we have reached source vertex. Please note that I haven&#8217;t used any explicit recursion stack. </p>\n<p>The explicit stack method given in the post will detect the loop even if we start at an arbitrary vertex and if it touches a loop vertex. If the current exploring vertex is found on the recursion stack, cycle is detected. If not, we restore recursion stack state (similar to what you said in the reply) during trace back (backtracking).</p>\n<p>Let me know if I am missing anything.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n            </ul>\r\n\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n<script type="text/javascript">\r\nvar disqus_url = \'http://www.geeksforgeeks.org/detect-cycle-in-a-graph/\';\r\nvar disqus_identifier = \'18516 http://www.geeksforgeeks.org/?p=18516\';\r\nvar disqus_container_id = \'disqus_thread\';\r\nvar disqus_shortname = \'geeksforgeeks\';\r\nvar disqus_title = "Detect Cycle in a Directed Graph";\r\nvar disqus_config_custom = window.disqus_config;\r\nvar disqus_config = function () {\r\n    /*\r\n    All currently supported events:\r\n    onReady: fires when everything is ready,\r\n    onNewComment: fires when a new comment is posted,\r\n    onIdentify: fires when user is authenticated\r\n    */\r\n    \r\n    \r\n    this.language = \'\';\r\n    \r\n    if (disqus_config_custom) {\r\n        disqus_config_custom.call(this);\r\n    }\r\n};\r\n\r\n(function() {\r\n    var dsq = document.createElement(\'script\'); dsq.type = \'text/javascript\';\r\n    dsq.async = true;\r\n    dsq.src = \'//\' + disqus_shortname + \'.disqus.com/embed.js\';\r\n    (document.getElementsByTagName(\'head\')[0] || document.getElementsByTagName(\'body\')[0]).appendChild(dsq);\r\n})();\r\n</script>\r\n\r\n\r\n\t\t\t\r\n\t\t</div><!-- #content -->\r\n\t</div><!-- #primary -->\r\n\r\n\r\n\t\t\t<div id="secondary" class="widget-area" role="complementary">\r\n\t\t\t<aside id="text-9" class="widget widget_text">\t\t\t<div class="textwidget"><div id="fb-root"></div>\r\n<script>(function(d, s, id) {\r\n  var js, fjs = d.getElementsByTagName(s)[0];\r\n  if (d.getElementById(id)) return;\r\n  js = d.createElement(s); js.id = id;\r\n  js.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.3&appId=138031159685820";\r\n  fjs.parentNode.insertBefore(js, fjs);\r\n}(document, \'script\', \'facebook-jssdk\'));</script>\r\n\r\n<div class="fb-page" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="300" data-height="180" data-small-header="true" data-adapt-container-width="false" data-hide-cover="true" data-show-facepile="true" data-show-posts="false"><div class="fb-xfbml-parse-ignore"><blockquote cite="https://www.facebook.com/pages/GeeksforGeeks/316764689022"><a href="https://www.facebook.com/pages/GeeksforGeeks/316764689022">GeeksforGeeks</a></blockquote></div></div>\r\n</div>\n\t\t</aside><aside id="text-33" class="widget widget_text">\t\t\t<div class="textwidget"><a href="http://www.springpeople.com/gfg-landing">\r\n<img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/GfG-2.jpg" alt="SpringPeople Ad">\r\n</a>\r\n</div>\n\t\t</aside><aside id="text-14" class="widget widget_text"><p class="widget-title">Popular Posts</p>\t\t\t<div class="textwidget"><ul>\r\n<li><a href="http://www.geeksforgeeks.org/top-algorithms-and-data-structures-for-competitive-programming/">Top 10 Algorithms and Data Structures for Competitive Programming</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/top-10-algorithms-in-interview-questions/">Top 10 algorithms in Interview Questions</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/how-to-begin-with-competitive-programming/">How to begin with Competitive Programming?</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>\r\n<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>\r\n<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding \xe2\x80\x9cextern\xe2\x80\x9d keyword in C</a> </li>\r\n<li><a href="http://www.geeksforgeeks.org/heavy-light-decomposition-set-1-introduction/"> Heavy Light Decomposition</a> </li>\r\n<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>\r\n</ul></div>\n\t\t</aside><aside id="text-17" class="widget widget_text">\t\t\t<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<!-- Big 300x600 Sidebar -->\r\n<ins class="adsbygoogle"\r\n     style="display:inline-block;width:300px;height:600px"\r\n     data-ad-client="ca-pub-9465609616171866"\r\n     data-ad-slot="4402736037"></ins>\r\n<script>\r\n(adsbygoogle = window.adsbygoogle || []).push({});\r\n</script></div>\n\t\t</aside><aside id="text-32" class="widget widget_text">\t\t\t<div class="textwidget"><form style="border:1px solid #ccc;padding:3px;text-align:center;" action="https://feedburner.google.com/fb/a/mailverify" method="post" target="popupwindow" onsubmit="window.open(\'https://feedburner.google.com/fb/a/mailverify?uri=Geeksforgeeks\', \'popupwindow\', \'scrollbars=yes,width=550,height=520\');return true"><p>Subscribe and Never Miss an Article</p><input type="text" style="width:140px" placeholder="Email Address" name="email"/><input type="hidden" value="Geeksforgeeks" name="uri"/><input type="hidden" name="loc" value="en_US"/>&nbsp;&nbsp;<input type="submit" style="background-color: #4cb96b;" value="Subscribe" /></form></div>\n\t\t</aside><aside id="text-18" class="widget widget_text">\t\t\t<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<!-- LargeRectangleSide -->\r\n<ins class="adsbygoogle"\r\n     style="display:inline-block;width:336px;height:280px"\r\n     data-ad-client="ca-pub-9465609616171866"\r\n     data-ad-slot="1884636833"></ins>\r\n<script>\r\n(adsbygoogle = window.adsbygoogle || []).push({});\r\n</script></div>\n\t\t</aside><aside id="text-13" class="widget widget_text">\t\t\t<div class="textwidget"><ul><li><a href="http://geeksquiz.com/category/articles/puzzle/">Common Interview Puzzles</a></li><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/advanced-data-structure/">Advanced Data Structures</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/pattern-searching/">Pattern Searching</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li><li><a href="http://www.geeksforgeeks.org/category/searching/">Searching</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/sorting/">Sorting</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/Hash/">Hashing</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/algorithm/analysis/">Analysis of Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/algorithm/mathematical/">Mathematical Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/algorithm/randomized/">Randomized Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>\r\n</ul>\r\n\r\n\r\n\r\n\r\n</div>\n\t\t</aside><aside id="categories-384568212" class="widget widget_categories"><p class="widget-title">All Categories</p><label class="screen-reader-text" for="cat">All Categories</label><select name=\'cat\' id=\'cat\' class=\'postform\' >\n\t<option value=\'-1\'>Select Category</option>\n\t<option class="level-0" value="1762">Advanced Data Structure&nbsp;&nbsp;(69)</option>\n\t<option class="level-0" value="1744">Algorithm&nbsp;&nbsp;(405)</option>\n\t<option class="level-1" value="1745">&nbsp;&nbsp;&nbsp;Analysis&nbsp;&nbsp;(16)</option>\n\t<option class="level-1" value="1748">&nbsp;&nbsp;&nbsp;Backtracking&nbsp;&nbsp;(11)</option>\n\t<option class="level-1" value="1750">&nbsp;&nbsp;&nbsp;Divide and Conquer&nbsp;&nbsp;(29)</option>\n\t<option class="level-1" value="1746">&nbsp;&nbsp;&nbsp;Dynamic Programming&nbsp;&nbsp;(91)</option>\n\t<option class="level-1" value="1754">&nbsp;&nbsp;&nbsp;Geometric&nbsp;&nbsp;(14)</option>\n\t<option class="level-1" value="1747">&nbsp;&nbsp;&nbsp;Greedy&nbsp;&nbsp;(20)</option>\n\t<option class="level-1" value="1753">&nbsp;&nbsp;&nbsp;Mathematical&nbsp;&nbsp;(123)</option>\n\t<option class="level-1" value="1749">&nbsp;&nbsp;&nbsp;Pattern Searching&nbsp;&nbsp;(30)</option>\n\t<option class="level-1" value="1757">&nbsp;&nbsp;&nbsp;Randomized&nbsp;&nbsp;(19)</option>\n\t<option class="level-1" value="1751">&nbsp;&nbsp;&nbsp;Searching&nbsp;&nbsp;(43)</option>\n\t<option class="level-1" value="1752">&nbsp;&nbsp;&nbsp;Sorting&nbsp;&nbsp;(40)</option>\n\t<option class="level-0" value="3">Arrays&nbsp;&nbsp;(80)</option>\n\t<option class="level-0" value="18">Articles&nbsp;&nbsp;(25)</option>\n\t<option class="level-0" value="1761">Binary Search Tree&nbsp;&nbsp;(37)</option>\n\t<option class="level-0" value="17">Bit Magic&nbsp;&nbsp;(56)</option>\n\t<option class="level-0" value="14">C/C++ Puzzles&nbsp;&nbsp;(244)</option>\n\t<option class="level-0" value="1790">Competitive Programming&nbsp;&nbsp;(4)</option>\n\t<option class="level-0" value="1710">GBlog&nbsp;&nbsp;(56)</option>\n\t<option class="level-0" value="67">GFacts&nbsp;&nbsp;(43)</option>\n\t<option class="level-0" value="97">Graph&nbsp;&nbsp;(74)</option>\n\t<option class="level-0" value="1756">Hash&nbsp;&nbsp;(21)</option>\n\t<option class="level-0" value="1755">Heap&nbsp;&nbsp;(18)</option>\n\t<option class="level-0" value="1140">Interview Experiences&nbsp;&nbsp;(1,052)</option>\n\t<option class="level-0" value="87">Java&nbsp;&nbsp;(55)</option>\n\t<option class="level-0" value="8">Linked Lists&nbsp;&nbsp;(70)</option>\n\t<option class="level-0" value="1760">Matrix&nbsp;&nbsp;(39)</option>\n\t<option class="level-0" value="66">MCQ&nbsp;&nbsp;(95)</option>\n\t<option class="level-0" value="4">Misc&nbsp;&nbsp;(40)</option>\n\t<option class="level-0" value="5">Output&nbsp;&nbsp;(55)</option>\n\t<option class="level-0" value="1767">Project&nbsp;&nbsp;(22)</option>\n\t<option class="level-0" value="1789">Python&nbsp;&nbsp;(5)</option>\n\t<option class="level-0" value="1743">Queue&nbsp;&nbsp;(16)</option>\n\t<option class="level-0" value="1742">Stack&nbsp;&nbsp;(25)</option>\n\t<option class="level-0" value="7">Strings&nbsp;&nbsp;(61)</option>\n\t<option class="level-0" value="1788">Technical Scripter&nbsp;&nbsp;(14)</option>\n\t<option class="level-0" value="19">Trees&nbsp;&nbsp;(114)</option>\n</select>\n\n<script type=\'text/javascript\'>\n/* <![CDATA[ */\n(function() {\n\tvar dropdown = document.getElementById( "cat" );\n\tfunction onCatChange() {\n\t\tif ( dropdown.options[ dropdown.selectedIndex ].value > 0 ) {\n\t\t\tlocation.href = "http://www.geeksforgeeks.org/?cat=" + dropdown.options[ dropdown.selectedIndex ].value;\n\t\t}\n\t}\n\tdropdown.onchange = onCatChange;\n})();\n/* ]]> */\n</script>\n\n</aside><aside id="text-21" class="widget widget_text"><p class="widget-title">Recent Comments</p>\t\t\t<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>\n\t\t</aside><aside id="tag_cloud-3" class="widget widget_tag_cloud"><p class="widget-title">Tags</p><div class="tagcloud"><a href=\'http://www.geeksforgeeks.org/tag/adobe/\' class=\'tag-link-148\' title=\'32 topics\' style=\'font-size: 12.905109489051pt;\'>Adobe</a>\n<a href=\'http://www.geeksforgeeks.org/tag/advance-data-structures/\' class=\'tag-link-152\' title=\'31 topics\' style=\'font-size: 12.802919708029pt;\'>Advance Data Structures</a>\n<a href=\'http://www.geeksforgeeks.org/tag/advanced-data-structures/\' class=\'tag-link-150\' title=\'38 topics\' style=\'font-size: 13.620437956204pt;\'>Advanced Data Structures</a>\n<a href=\'http://www.geeksforgeeks.org/tag/amazon/\' class=\'tag-link-141\' title=\'254 topics\' style=\'font-size: 22pt;\'>Amazon</a>\n<a href=\'http://www.geeksforgeeks.org/tag/array/\' class=\'tag-link-68\' title=\'12 topics\' style=\'font-size: 8.7153284671533pt;\'>array</a>\n<a href=\'http://www.geeksforgeeks.org/tag/backtracking/\' class=\'tag-link-112\' title=\'11 topics\' style=\'font-size: 8.4087591240876pt;\'>Backtracking</a>\n<a href=\'http://www.geeksforgeeks.org/tag/bharti-softbank-hike/\' class=\'tag-link-1214\' title=\'10 topics\' style=\'font-size: 8pt;\'>Bharti SoftBank (HIKE)</a>\n<a href=\'http://www.geeksforgeeks.org/tag/bit-magic/\' class=\'tag-link-17\' title=\'15 topics\' style=\'font-size: 9.6350364963504pt;\'>Bit Magic</a>\n<a href=\'http://www.geeksforgeeks.org/tag/c/\' class=\'tag-link-86\' title=\'18 topics\' style=\'font-size: 10.452554744526pt;\'>C++</a>\n<a href=\'http://www.geeksforgeeks.org/tag/cn/\' class=\'tag-link-142\' title=\'12 topics\' style=\'font-size: 8.7153284671533pt;\'>CN</a>\n<a href=\'http://www.geeksforgeeks.org/tag/c-puzzle/\' class=\'tag-link-69\' title=\'15 topics\' style=\'font-size: 9.6350364963504pt;\'>c puzzle</a>\n<a href=\'http://www.geeksforgeeks.org/tag/d-e-shaw/\' class=\'tag-link-823\' title=\'17 topics\' style=\'font-size: 10.248175182482pt;\'>D-E-Shaw</a>\n<a href=\'http://www.geeksforgeeks.org/tag/dbms/\' class=\'tag-link-139\' title=\'11 topics\' style=\'font-size: 8.4087591240876pt;\'>DBMS</a>\n<a href=\'http://www.geeksforgeeks.org/tag/divide-and-conquer/\' class=\'tag-link-113\' title=\'27 topics\' style=\'font-size: 12.189781021898pt;\'>Divide and Conquer</a>\n<a href=\'http://www.geeksforgeeks.org/tag/dynamic-programming/\' class=\'tag-link-111\' title=\'83 topics\' style=\'font-size: 16.992700729927pt;\'>Dynamic Programming</a>\n<a href=\'http://www.geeksforgeeks.org/tag/flipkart/\' class=\'tag-link-173\' title=\'46 topics\' style=\'font-size: 14.43795620438pt;\'>Flipkart</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate/\' class=\'tag-link-114\' title=\'88 topics\' style=\'font-size: 17.299270072993pt;\'>GATE</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-2012/\' class=\'tag-link-133\' title=\'10 topics\' style=\'font-size: 8pt;\'>GATE-CS-2012</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-c-language/\' class=\'tag-link-72\' title=\'10 topics\' style=\'font-size: 8pt;\'>GATE-CS-C-Language</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-ds-algo/\' class=\'tag-link-79\' title=\'35 topics\' style=\'font-size: 13.313868613139pt;\'>GATE-CS-DS-&amp;-Algo</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-older/\' class=\'tag-link-145\' title=\'15 topics\' style=\'font-size: 9.6350364963504pt;\'>GATE-CS-Older</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gfact/\' class=\'tag-link-67\' title=\'20 topics\' style=\'font-size: 10.861313868613pt;\'>GFacts</a>\n<a href=\'http://www.geeksforgeeks.org/tag/goldman-sachs/\' class=\'tag-link-590\' title=\'20 topics\' style=\'font-size: 10.861313868613pt;\'>Goldman Sachs</a>\n<a href=\'http://www.geeksforgeeks.org/tag/google/\' class=\'tag-link-155\' title=\'15 topics\' style=\'font-size: 9.6350364963504pt;\'>Google</a>\n<a href=\'http://www.geeksforgeeks.org/tag/graph/\' class=\'tag-link-97\' title=\'45 topics\' style=\'font-size: 14.335766423358pt;\'>Graph</a>\n<a href=\'http://www.geeksforgeeks.org/tag/greedy-algorithm/\' class=\'tag-link-159\' title=\'20 topics\' style=\'font-size: 10.861313868613pt;\'>Greedy Algorithm</a>\n<a href=\'http://www.geeksforgeeks.org/tag/hashing/\' class=\'tag-link-250\' title=\'15 topics\' style=\'font-size: 9.6350364963504pt;\'>Hashing</a>\n<a href=\'http://www.geeksforgeeks.org/tag/interview-experience/\' class=\'tag-link-126\' title=\'216 topics\' style=\'font-size: 21.284671532847pt;\'>Interview Experience</a>\n<a href=\'http://www.geeksforgeeks.org/tag/java/\' class=\'tag-link-87\' title=\'61 topics\' style=\'font-size: 15.664233576642pt;\'>Java</a>\n<a href=\'http://www.geeksforgeeks.org/tag/maq-software/\' class=\'tag-link-1392\' title=\'11 topics\' style=\'font-size: 8.4087591240876pt;\'>MAQ Software</a>\n<a href=\'http://www.geeksforgeeks.org/tag/mathematicalalgo/\' class=\'tag-link-154\' title=\'73 topics\' style=\'font-size: 16.481751824818pt;\'>MathematicalAlgo</a>\n<a href=\'http://www.geeksforgeeks.org/tag/matrix/\' class=\'tag-link-211\' title=\'21 topics\' style=\'font-size: 11.065693430657pt;\'>Matrix</a>\n<a href=\'http://www.geeksforgeeks.org/tag/microsoft/\' class=\'tag-link-104\' title=\'95 topics\' style=\'font-size: 17.605839416058pt;\'>Microsoft</a>\n<a href=\'http://www.geeksforgeeks.org/tag/morgan-stanley/\' class=\'tag-link-167\' title=\'17 topics\' style=\'font-size: 10.248175182482pt;\'>Morgan Stanley</a>\n<a href=\'http://www.geeksforgeeks.org/tag/operating-systems/\' class=\'tag-link-110\' title=\'19 topics\' style=\'font-size: 10.656934306569pt;\'>Operating systems</a>\n<a href=\'http://www.geeksforgeeks.org/tag/oracle/\' class=\'tag-link-171\' title=\'24 topics\' style=\'font-size: 11.678832116788pt;\'>Oracle</a>\n<a href=\'http://www.geeksforgeeks.org/tag/pattern-searching/\' class=\'tag-link-107\' title=\'26 topics\' style=\'font-size: 11.985401459854pt;\'>Pattern Searching</a>\n<a href=\'http://www.geeksforgeeks.org/tag/puzzle/\' class=\'tag-link-70\' title=\'15 topics\' style=\'font-size: 9.6350364963504pt;\'>puzzle</a>\n<a href=\'http://www.geeksforgeeks.org/tag/python/\' class=\'tag-link-1770\' title=\'21 topics\' style=\'font-size: 11.065693430657pt;\'>Python</a>\n<a href=\'http://www.geeksforgeeks.org/tag/recursion/\' class=\'tag-link-85\' title=\'21 topics\' style=\'font-size: 11.065693430657pt;\'>Recursion</a>\n<a href=\'http://www.geeksforgeeks.org/tag/samsung/\' class=\'tag-link-180\' title=\'12 topics\' style=\'font-size: 8.7153284671533pt;\'>Samsung</a>\n<a href=\'http://www.geeksforgeeks.org/tag/sap-labs/\' class=\'tag-link-1414\' title=\'23 topics\' style=\'font-size: 11.474452554745pt;\'>SAP Labs</a>\n<a href=\'http://www.geeksforgeeks.org/tag/snapdeal/\' class=\'tag-link-1246\' title=\'16 topics\' style=\'font-size: 9.9416058394161pt;\'>SnapDeal</a>\n<a href=\'http://www.geeksforgeeks.org/tag/stack/\' class=\'tag-link-94\' title=\'17 topics\' style=\'font-size: 10.248175182482pt;\'>stack</a>\n<a href=\'http://www.geeksforgeeks.org/tag/stack-queue/\' class=\'tag-link-899\' title=\'12 topics\' style=\'font-size: 8.7153284671533pt;\'>Stack-Queue</a></div>\n</aside><aside id="text-25" class="widget widget_text">\t\t\t<div class="textwidget"><ul>\r\n<li><h2><a href="http://geeksquiz.com/">GeeksQuiz</a></h2></li>\r\n\r\n<li><h2><a href="http://code.geeksforgeeks.org/">GeeksforGeeksIDE</a></h2></li>\r\n\r\n<li><h2><a href="http://www.practice.geeksforgeeks.org/">GeeksforGeeks Practice</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/data-structures/">Data Structures</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/c/">C Programming</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++ Programming</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/java/">Java Programming</a></h2></li>\r\n\r\n<li><h2><a href="http://geeksquiz.com/books/">Books</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Experiences</a></h2></li>\r\n\r\n<li><h2><a href="http://geeksquiz.com/gate-corner-2/">GATE CS</a></h2></li>\r\n\r\n<li><h2><a href="http://www.gatecs.geeksquiz.com">GATE CS Forum</a></h2></li>\r\n\r\n<li><h2><a href="https://play.google.com/store/apps/details?id=free.programming.programming">Android App</a></h2></li>\r\n</ul>\r\n\r\n</div>\n\t\t</aside>\t\t</div><!-- #secondary -->\r\n\t\t</div><!-- #main .wrapper -->\r\n\t<footer id="colophon" role="contentinfo">\r\n\t\t<div class="site-info">\r\n\t\t<div class="clear"></div>\r\n\t\t</div><!-- .site-info -->\r\n\t\t</footer><!-- #colophon -->\r\n<center>\r\n<div class="iconic-footer">\r\n\r\n@geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>  <a href="http://www.geeksforgeeks.org/about/"> &nbsp; &nbsp; &nbsp; &nbsp;About Us!&nbsp; &nbsp; &nbsp; &nbsp;</a><a href="http://www.geeksforgeeks.org/new/ad.htm"> &nbsp; &nbsp; &nbsp; &nbsp;Advertise with us!&nbsp; &nbsp; &nbsp; &nbsp;</a>\r\n\r\n      \t\t\t</div></center><!-- .site-info -->\r\n\r\n\t\t\t\t<div class="clear"></div>\r\n</div><!-- #page -->\r\n\r\n        <script type="text/javascript">\r\n        // <![CDATA[\r\n        var disqus_shortname = \'geeksforgeeks\';\r\n        (function () {\r\n            var nodes = document.getElementsByTagName(\'span\');\r\n            for (var i = 0, url; i < nodes.length; i++) {\r\n                if (nodes[i].className.indexOf(\'dsq-postid\') != -1) {\r\n                    nodes[i].parentNode.setAttribute(\'data-disqus-identifier\', nodes[i].getAttribute(\'data-dsqidentifier\'));\r\n                    url = nodes[i].parentNode.href.split(\'#\', 1);\r\n                    if (url.length == 1) { url = url[0]; }\r\n                    else { url = url[1]; }\r\n                    nodes[i].parentNode.href = url + \'#disqus_thread\';\r\n                }\r\n            }\r\n            var s = document.createElement(\'script\'); \r\n            s.async = true;\r\n            s.type = \'text/javascript\';\r\n            s.src = \'//\' + disqus_shortname + \'.disqus.com/count.js\';\r\n            (document.getElementsByTagName(\'HEAD\')[0] || document.getElementsByTagName(\'BODY\')[0]).appendChild(s);\r\n        }());\r\n        // ]]>\r\n        </script>\r\n        <script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js\'></script>\n<script type=\'text/javascript\'>\n\t(function(){\n\t\tvar corecss = document.createElement(\'link\');\n\t\tvar themecss = document.createElement(\'link\');\n\t\tvar corecssurl = "http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9b";\r\n\t\tif ( corecss.setAttribute ) {\r\n\t\t\t\tcorecss.setAttribute( "rel", "stylesheet" );\r\n\t\t\t\tcorecss.setAttribute( "type", "text/css" );\r\n\t\t\t\tcorecss.setAttribute( "href", corecssurl );\r\n\t\t} else {\r\n\t\t\t\tcorecss.rel = "stylesheet";\r\n\t\t\t\tcorecss.href = corecssurl;\r\n\t\t}\r\n\t\tdocument.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );\r\n\t\tvar themecssurl = "http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9b";\r\n\t\tif ( themecss.setAttribute ) {\r\n\t\t\t\tthemecss.setAttribute( "rel", "stylesheet" );\r\n\t\t\t\tthemecss.setAttribute( "type", "text/css" );\r\n\t\t\t\tthemecss.setAttribute( "href", themecssurl );\r\n\t\t} else {\r\n\t\t\t\tthemecss.rel = "stylesheet";\r\n\t\t\t\tthemecss.href = themecssurl;\r\n\t\t}\r\n\t\t//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);\r\n\t\tdocument.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );\r\n\t})();\n\tSyntaxHighlighter.config.strings.expandSource = \'+ expand source\';\n\tSyntaxHighlighter.config.strings.help = \'?\';\n\tSyntaxHighlighter.config.strings.alert = \'SyntaxHighlighter\\n\\n\';\n\tSyntaxHighlighter.config.strings.noBrush = \'Can\\\'t find brush for: \';\n\tSyntaxHighlighter.config.strings.brushNotHtmlScript = \'Brush wasn\\\'t configured for html-script option: \';\n\tSyntaxHighlighter.defaults[\'gutter\'] = false;\n\tSyntaxHighlighter.defaults[\'pad-line-numbers\'] = true;\n\tSyntaxHighlighter.defaults[\'toolbar\'] = false;\n\tSyntaxHighlighter.all();\r\n</script>\r\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/js/comment-reply.min.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/js/selectnav.js\'></script>\n\r\n\r\n<script type="text/javascript">\r\n\r\n  var _gaq = _gaq || [];\r\n  _gaq.push([\'_setAccount\', \'UA-12148232-1\']);\r\n  _gaq.push([\'_trackPageview\']);\r\n\r\n  (function() {\r\n    var ga = document.createElement(\'script\'); ga.type = \'text/javascript\'; ga.async = true;\r\n    ga.src = (\'https:\' == document.location.protocol ? \'https://ssl\' : \'http://www\') + \'.google-analytics.com/ga.js\';\r\n    var s = document.getElementsByTagName(\'script\')[0]; s.parentNode.insertBefore(ga, s);\r\n  })();\r\n\r\n</script>  \r\n<script async type="text/javascript" src="//cdn.fancybar.net/ac/fancybar.js?zoneid=1502&serve=C6ADVKE&placement=geeksforgeeks" id="_fancybar_js"></script>\r\n</body>\r\n</html>\n<!-- Dynamic page generated in 0.337 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2016-03-01 11:18:01 -->\n\n<!-- Compression = gzip -->\n<!-- super cache -->'
p68
sb.