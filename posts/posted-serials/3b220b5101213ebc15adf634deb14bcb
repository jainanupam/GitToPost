ccopy_reg
_reconstructor
p0
(cpost
Post
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'post_file'
p6
S'/Users/anupamjain/code/gitRepo/GitToPost/posts/Java/posted/HeightBalancedBTree'
p7
sS'files_covered'
p8
c__builtin__
set
p9
((lp10
S'/Users/anupamjain/code/gitRepo/Questions/Algo/Java/HeightBalancedBTree.java'
p11
atp12
Rp13
sS'title'
p14
VHow to determine if a binary tree is height-balanced?
p15
sS'file_name'
p16
g11
sS'link'
p17
S'http://www.geeksforgeeks.org/how-to-determine-if-a-binary-tree-is-balanced/'
p18
sS'host_name'
p19
S'www.geeksforgeeks.org'
p20
sS'problem_text'
p21
g0
(cbs4.element
Tag
p22
g2
Ntp23
Rp24
(dp25
S'can_be_empty_element'
p26
I00
sS'previous_element'
p27
NsS'next_sibling'
p28
NsS'name'
p29
S'p'
p30
sS'parent'
p31
NsS'namespace'
p32
NsS'prefix'
p33
NsS'previous_sibling'
p34
NsS'attrs'
p35
(dp36
sS'next_element'
p37
g0
(g22
g2
Ntp38
Rp39
(dp40
g26
I00
sg27
g24
sg28
g0
(g22
g2
Ntp41
Rp42
(dp43
g26
I00
sg27
g0
(g22
g2
Ntp44
Rp45
(dp46
g26
I00
sg27
g0
(cbs4.element
NavigableString
p47
c__builtin__
unicode
p48
VA tree where no leaf is much farther away from the root than any other leaf. Different balancing schemes allow different definitions of \u201cmuch farther\u201d and different amounts of work to keep them balanced.
p49
tp50
Rp51
(dp52
g34
Nsg27
g39
sg28
g45
sg37
g45
sg31
g39
sbsg28
Nsg29
Vspan
p53
sg31
g39
sg32
Nsg33
Nsg34
g51
sg35
(dp54
Vid
p55
Vmore-5230
p56
ssg37
g42
sS'parser_class'
p57
cbs4
BeautifulSoup
p58
sS'hidden'
p59
I00
sS'contents'
p60
(lp61
sbsg28
g0
(g22
g2
Ntp62
Rp63
(dp64
g26
I00
sg27
g0
(g47
g48
V\u000a3) The difference between heights of left subtree and right subtree is not more than 1. 
p65
tp66
Rp67
(dp68
g34
g0
(g22
g2
Ntp69
Rp70
(dp71
g26
I01
sg27
g0
(g47
g48
V\u000a2) Right subtree of T is balanced
p72
tp73
Rp74
(dp75
g34
g0
(g22
g2
Ntp76
Rp77
(dp78
g26
I01
sg27
g0
(g47
g48
V\u000a1) Left subtree of T is balanced
p79
tp80
Rp81
(dp82
g34
g0
(g22
g2
Ntp83
Rp84
(dp85
g26
I01
sg27
g0
(g47
g48
V\u000aAn empty tree is height-balanced. A non-empty binary tree T is balanced if:
p86
tp87
Rp88
(dp89
g34
g0
(g22
g2
Ntp90
Rp91
(dp92
g26
I01
sg27
g0
(g47
g48
VConsider a height-balancing scheme where following conditions should be checked to determine if a binary tree is balanced.
p93
tp94
Rp95
(dp96
g34
Nsg27
g42
sg28
g91
sg37
g91
sg31
g42
sbsg28
g88
sg29
Vbr
p97
sg31
g42
sg32
Nsg33
Nsg34
g95
sg35
(dp98
sg37
g88
sg57
g58
sg59
I00
sg60
(lp99
sbsg27
g91
sg28
g84
sg37
g84
sg31
g42
sbsg28
g81
sg29
Vbr
p100
sg31
g42
sg32
Nsg33
Nsg34
g88
sg35
(dp101
sg37
g81
sg57
g58
sg59
I00
sg60
(lp102
sbsg27
g84
sg28
g77
sg37
g77
sg31
g42
sbsg28
g74
sg29
Vbr
p103
sg31
g42
sg32
Nsg33
Nsg34
g81
sg35
(dp104
sg37
g74
sg57
g58
sg59
I00
sg60
(lp105
sbsg27
g77
sg28
g70
sg37
g70
sg31
g42
sbsg28
g67
sg29
Vbr
p106
sg31
g42
sg32
Nsg33
Nsg34
g74
sg35
(dp107
sg37
g67
sg57
g58
sg59
I00
sg60
(lp108
sbsg27
g70
sg28
Nsg37
g63
sg31
g42
sbsg28
g0
(g22
g2
Ntp109
Rp110
(dp111
g26
I00
sg27
g0
(g47
g48
VThe above height-balancing scheme is used in AVL trees. The diagram below shows two trees, one of them is height-balanced and other is not. The second tree is not height-balanced because height of left subtree is 2 more than height of right subtree.
p112
tp113
Rp114
(dp115
g34
Nsg27
g63
sg28
Nsg37
g110
sg31
g63
sbsg28
g0
(g22
g2
Ntp116
Rp117
(dp118
g26
I00
sg27
g0
(g22
g2
Ntp119
Rp120
(dp121
g26
I01
sg27
g0
(g22
g2
Ntp122
Rp123
(dp124
g26
I00
sg27
g110
sg28
Nsg29
Va
p125
sg31
g110
sg32
Nsg33
Nsg34
Nsg35
(dp126
Vhref
p127
Vhttp://geeksforgeeks.org/wp-content/uploads/balanced_tree.GIF
p128
ssg37
g120
sg57
g58
sg59
I00
sg60
(lp129
g120
asbsg28
Nsg29
Vimg
p130
sg31
g123
sg32
Nsg33
Nsg34
Nsg35
(dp131
Vsrc
p132
Vhttp://geeksforgeeks.org/wp-content/uploads/balanced_tree.GIF
p133
sVtitle
p134
Vtree_diameter
p135
sVheight
p136
V236
p137
sVwidth
p138
V533
p139
sValt
p140
V
p141
sVclass
p142
(lp143
Valigncenter
p144
aVsize-full
p145
aVwp-image-5737
p146
assg37
g117
sg57
g58
sg59
I00
sg60
(lp147
sbsg28
g0
(g22
g2
Ntp148
Rp149
(dp150
g26
I00
sg27
g0
(g47
g48
VTo check if a tree is height-balanced, get the height of left and right subtrees. Return true if difference between heights is not more than 1 and left and right subtrees are balanced, otherwise return false.
p151
tp152
Rp153
(dp154
g34
Nsg27
g117
sg28
Nsg37
g149
sg31
g117
sbsg28
g0
(g22
g2
Ntp155
Rp156
(dp157
g26
I00
sg27
g0
(g47
g48
V\u000a
p158
tp159
Rp160
(dp161
g34
g0
(g22
g2
Ntp162
Rp163
(dp164
g26
I00
sg27
g0
(g47
g48
V\u000a
p165
tp166
Rp167
(dp168
g34
Nsg27
g0
(g22
g2
Ntp169
Rp170
(dp171
g26
I00
sg27
g0
(g47
g48
V\u000a
p172
tp173
Rp174
(dp175
g34
g0
(g22
g2
Ntp176
Rp177
(dp178
g26
I00
sg27
g0
(g47
g48
V\u000a
p179
tp180
Rp181
(dp182
g34
g0
(g22
g2
Ntp183
Rp184
(dp185
g26
I00
sg27
g0
(g47
g48
V\u000a
p186
tp187
Rp188
(dp189
g34
Nsg27
g0
(g22
g2
Ntp190
Rp191
(dp192
g26
I00
sg27
g0
(g47
g48
V\u000a
p193
tp194
Rp195
(dp196
g34
g0
(g22
g2
Ntp197
Rp198
(dp199
g26
I00
sg27
g0
(g47
g48
V\u000a
p200
tp201
Rp202
(dp203
g34
Nsg27
g149
sg28
g198
sg37
g198
sg31
g149
sbsg28
g195
sg29
Vh2
p204
sg31
g149
sg32
Nsg33
Nsg34
g202
sg35
(dp205
Vclass
p206
(lp207
Vtabtitle
p208
assg37
g0
(g47
g48
VC
p209
tp210
Rp211
(dp212
g34
Nsg27
g198
sg28
Nsg37
g195
sg31
g198
sbsg57
g58
sg59
I00
sg60
(lp213
g211
asbsg27
g211
sg28
g191
sg37
g191
sg31
g149
sbsg28
g177
sg29
Vdiv
p214
sg31
g149
sg32
Nsg33
Nsg34
g195
sg35
(dp215
Vclass
p216
(lp217
Vtabcontent
p218
assg37
g188
sg57
g58
sg59
I00
sg60
(lp219
g188
ag184
ag181
asbsg28
g184
sg37
g184
sg31
g191
sbsg28
g181
sg29
Vpre
p220
sg31
g191
sg32
Nsg33
Nsg34
g188
sg35
(dp221
Vclass
p222
(lp223
Vbrush:
p224
aVcpp;
p225
aVtitle:
p226
aV;
p227
aVnotranslate
p228
asVtitle
p229
g141
ssg37
g0
(g47
g48
V\u000a/* program to check if a tree is height-balanced or not */\u000a#include<stdio.h>\u000a#include<stdlib.h>\u000a#define bool int\u000a\u000a/* A binary tree node has data, pointer to left child\u000a   and a pointer to right child */\u000astruct node\u000a{\u000a    int data;\u000a    struct node* left;\u000a    struct node* right;\u000a};\u000a\u000a/* Returns the height of a binary tree */\u000aint height(struct node* node);\u000a\u000a/* Returns true if binary tree with root as root is height-balanced */\u000abool isBalanced(struct node *root)\u000a{\u000a   int lh; /* for height of left subtree */\u000a   int rh; /* for height of right subtree */  \u000a\u000a   /* If tree is empty then return true */\u000a   if(root == NULL)\u000a    return 1; \u000a\u000a   /* Get the height of left and right sub trees */\u000a   lh = height(root->left);\u000a   rh = height(root->right);\u000a\u000a   if( abs(lh-rh) <= 1 &&\u000a       isBalanced(root->left) &&\u000a       isBalanced(root->right))\u000a     return 1;\u000a\u000a   /* If we reach here then tree is not height-balanced */\u000a   return 0;\u000a}\u000a\u000a/* UTILITY FUNCTIONS TO TEST isBalanced() FUNCTION */\u000a\u000a/* returns maximum of two integers */\u000aint max(int a, int b)\u000a{\u000a  return (a >= b)? a: b;\u000a}    \u000a\u000a/*  The function Compute the "height" of a tree. Height is the\u000a    number of nodes along the longest path from the root node\u000a    down to the farthest leaf node.*/\u000aint height(struct node* node)\u000a{\u000a   /* base case tree is empty */\u000a   if(node == NULL)\u000a       return 0;\u000a\u000a   /* If tree is not empty then height = 1 + max of left\u000a      height and right heights */\u000a   return 1 + max(height(node->left), height(node->right));\u000a} \u000a\u000a/* Helper function that allocates a new node with the\u000a   given data and NULL left and right pointers. */\u000astruct node* newNode(int data)\u000a{\u000a    struct node* node = (struct node*)\u000a                                malloc(sizeof(struct node));\u000a    node->data = data;\u000a    node->left = NULL;\u000a    node->right = NULL;\u000a\u000a    return(node);\u000a}\u000a\u000aint main()\u000a{\u000a    struct node *root = newNode(1);\u000a    root->left = newNode(2);\u000a    root->right = newNode(3);\u000a    root->left->left = newNode(4);\u000a    root->left->right = newNode(5);\u000a    root->left->left->left = newNode(8);\u000a\u000a    if(isBalanced(root))\u000a      printf("Tree is balanced");\u000a    else\u000a      printf("Tree is not balanced");    \u000a\u000a    getchar();\u000a    return 0;\u000a}\u000a
p230
tp231
Rp232
(dp233
g34
Nsg27
g184
sg28
Nsg37
g181
sg31
g184
sbsg57
g58
sg59
I00
sg60
(lp234
g232
asbsg27
g232
sg28
Nsg37
g177
sg31
g191
sbsg28
g174
sg29
Vh2
p235
sg31
g149
sg32
Nsg33
Nsg34
g191
sg35
(dp236
Vclass
p237
(lp238
Vtabtitle
p239
assg37
g0
(g47
g48
VJava
p240
tp241
Rp242
(dp243
g34
Nsg27
g177
sg28
Nsg37
g174
sg31
g177
sbsg57
g58
sg59
I00
sg60
(lp244
g242
asbsg27
g242
sg28
g170
sg37
g170
sg31
g149
sbsg28
Nsg29
Vdiv
p245
sg31
g149
sg32
Nsg33
Nsg34
g174
sg35
(dp246
Vclass
p247
(lp248
Vtabcontent
p249
assg37
g167
sg57
g58
sg59
I00
sg60
(lp250
g167
ag163
ag160
asbsg28
g163
sg37
g163
sg31
g170
sbsg28
g160
sg29
Vpre
p251
sg31
g170
sg32
Nsg33
Nsg34
g167
sg35
(dp252
Vclass
p253
(lp254
Vbrush:
p255
aVjava;
p256
aVtitle:
p257
ag227
aVnotranslate
p258
asVtitle
p259
g141
ssg37
g0
(g47
g48
V\u000a// Java program to determine if binary tree is height balanced\u000a\u000a// A binary tree node\u000aclass Node {\u000a\u000a    int data;\u000a    Node left, right;\u000a\u000a    Node(int item) {\u000a        data = item;\u000a        left = right = null;\u000a    }\u000a}\u000a\u000aclass BinaryTree {\u000a\u000a    static Node root;\u000a\u000a    /* Returns true if binary tree with root as root is height-balanced */\u000a    boolean isBalanced(Node node) {\u000a        int lh; /* for height of left subtree */\u000a\u000a        int rh; /* for height of right subtree */\u000a\u000a        /* If tree is empty then return true */\u000a        if (node == null) {\u000a            return true;\u000a        }\u000a\u000a        /* Get the height of left and right sub trees */\u000a        lh = height(node.left);\u000a        rh = height(node.right);\u000a\u000a        if (Math.abs(lh - rh) <= 1\u000a                && isBalanced(node.left)\u000a                && isBalanced(node.right)) {\u000a            return true;\u000a        }\u000a\u000a        /* If we reach here then tree is not height-balanced */\u000a        return false;\u000a    }\u000a\u000a    /* UTILITY FUNCTIONS TO TEST isBalanced() FUNCTION */\u000a    /* returns maximum of two integers */\u000a    int max(int a, int b) {\u000a        return (a >= b) ? a : b;\u000a    }\u000a\u000a    /*  The function Compute the "height" of a tree. Height is the\u000a     number of nodes along the longest path from the root node\u000a     down to the farthest leaf node.*/\u000a    int height(Node node) {\u000a        \u000a        /* base case tree is empty */\u000a        if (node == null) {\u000a            return 0;\u000a        }\u000a\u000a        /* If tree is not empty then height = 1 + max of left\u000a         height and right heights */\u000a        return 1 + max(height(node.left), height(node.right));\u000a    }\u000a\u000a    public static void main(String args[]) {\u000a        BinaryTree tree = new BinaryTree();\u000a        tree.root = new Node(1);\u000a        tree.root.left = new Node(2);\u000a        tree.root.right = new Node(3);\u000a        tree.root.left.left = new Node(4);\u000a        tree.root.left.right = new Node(5);\u000a        tree.root.left.left.left = new Node(8);\u000a\u000a        if(tree.isBalanced(root))\u000a            System.out.println("Tree is balanced");\u000a        else\u000a            System.out.println("Tree is not balanced");\u000a    }\u000a}\u000a\u000a// This code has been contributed by Mayank Jaiswal\u000a\u000a
p260
tp261
Rp262
(dp263
g34
Nsg27
g163
sg28
Nsg37
g160
sg31
g163
sbsg57
g58
sg59
I00
sg60
(lp264
g262
asbsg27
g262
sg28
Nsg37
g156
sg31
g170
sbsg28
g0
(g22
g2
Ntp265
Rp266
(dp267
g26
I00
sg27
g0
(g47
g48
VTime Complexity: O(n^2) Worst case occurs in case of skewed tree.
p268
tp269
Rp270
(dp271
g34
Nsg27
g156
sg28
Nsg37
g266
sg31
g156
sbsg28
Nsg29
Vp
p272
sg31
g24
sg32
Nsg33
Nsg34
g156
sg35
(dp273
sg37
Nsg57
g58
sg59
I00
sg60
(lp274
sbsg29
g272
sg31
g24
sg32
Nsg33
Nsg34
g149
sg35
(dp275
sg37
g270
sg57
g58
sg59
I00
sg60
(lp276
g270
asbsg29
Vdiv
p277
sg31
g24
sg32
Nsg33
Nsg34
g117
sg35
(dp278
Vclass
p279
(lp280
Vresponsive-tabs
p281
assg37
g202
sg57
g58
sg59
I00
sg60
(lp282
g202
ag198
ag195
ag191
ag177
ag174
ag170
asbsg29
g272
sg31
g24
sg32
Nsg33
Nsg34
g110
sg35
(dp283
sg37
g153
sg57
g58
sg59
I00
sg60
(lp284
g153
asbsg29
g272
sg31
g24
sg32
Nsg33
Nsg34
g63
sg35
(dp285
sg37
g123
sg57
g58
sg59
I00
sg60
(lp286
g123
asbsg29
g272
sg31
g24
sg32
Nsg33
Nsg34
g42
sg35
(dp287
sg37
g114
sg57
g58
sg59
I00
sg60
(lp288
g114
asbsg29
g272
sg31
g24
sg32
Nsg33
Nsg34
g39
sg35
(dp289
sg37
g95
sg57
g58
sg59
I00
sg60
(lp290
g95
ag91
ag88
ag84
ag81
ag77
ag74
ag70
ag67
asbsg29
g272
sg31
g24
sg32
Nsg33
Nsg34
Nsg35
(dp291
sg37
g51
sg57
g58
sg59
I00
sg60
(lp292
g51
ag45
asbsg57
Nsg59
I00
sg60
(lp293
g39
ag42
ag63
ag110
ag117
ag149
ag156
ag266
asbsS'raw_page'
p294
S'<!DOCTYPE html>\r\n<!--[if IE 7]>\r\n<html class="ie ie7" lang="en-US" prefix="og: http://ogp.me/ns#">\r\n<![endif]-->\r\n<!--[if IE 8]>\r\n<html class="ie ie8" lang="en-US" prefix="og: http://ogp.me/ns#">\r\n<![endif]-->\r\n<!--[if !(IE 7) | !(IE 8)  ]><!-->\r\n<html lang="en-US" prefix="og: http://ogp.me/ns#">\r\n<!--<![endif]-->\r\n<head>\r\n<meta charset="UTF-8" />\r\n<meta name="viewport" content="width=device-width" />\r\n\r\n<meta property="og:image" content="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/gfg_200X200.png">\r\n<meta property="og:image:type" content="image/png">\r\n<meta property="og:image:width" content="200">\r\n<meta property="og:image:height" content="200">\r\n\r\n<title>How to determine if a binary tree is height-balanced? - GeeksforGeeks</title>\r\n<link rel="profile" href="http://gmpg.org/xfn/11" />\r\n<link rel="pingback" href="http://www.geeksforgeeks.org/xmlrpc.php" />\r\n<!--[if lt IE 9]>\r\n<script src="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/js/html5.js" type="text/javascript"></script>\r\n<![endif]-->\r\n\n<!-- This site is optimized with the Yoast SEO plugin v3.0.7 - https://yoast.com/wordpress/plugins/seo/ -->\n<link rel="canonical" href="http://www.geeksforgeeks.org/how-to-determine-if-a-binary-tree-is-balanced/" />\n<meta property="og:locale" content="en_US" />\n<meta property="og:type" content="article" />\n<meta property="og:title" content="How to determine if a binary tree is height-balanced? - GeeksforGeeks" />\n<meta property="og:description" content="A tree where no leaf is much farther away from the root than any other leaf. Different balancing schemes allow different definitions of &#8220;much farther&#8221; and different amounts of work to keep them balanced. Consider a height-balancing scheme where following conditions should be checked to determine if a binary tree is balanced. An empty tree\xe2\x80\xa6 Read More &raquo;" />\n<meta property="og:url" content="http://www.geeksforgeeks.org/how-to-determine-if-a-binary-tree-is-balanced/" />\n<meta property="og:site_name" content="GeeksforGeeks" />\n<meta property="article:section" content="Trees" />\n<meta property="article:published_time" content="2010-03-20T20:46:17+00:00" />\n<meta property="article:modified_time" content="2016-01-06T11:53:00+00:00" />\n<meta property="og:updated_time" content="2016-01-06T11:53:00+00:00" />\n<meta property="og:image" content="http://geeksforgeeks.org/wp-content/uploads/balanced_tree.GIF" />\n<!-- / Yoast SEO plugin. -->\n\n\t\t<script type="text/javascript">\n\t\t\twindow._wpemojiSettings = {"baseUrl":"http:\\/\\/s.w.org\\/images\\/core\\/emoji\\/72x72\\/","ext":".png","source":{"concatemoji":"http:\\/\\/www.geeksforgeeks.org\\/wp-includes\\/js\\/wp-emoji-release.min.js"}};\n\t\t\t!function(a,b,c){function d(a){var c=b.createElement("canvas"),d=c.getContext&&c.getContext("2d");return d&&d.fillText?(d.textBaseline="top",d.font="600 32px Arial","flag"===a?(d.fillText(String.fromCharCode(55356,56812,55356,56807),0,0),c.toDataURL().length>3e3):(d.fillText(String.fromCharCode(55357,56835),0,0),0!==d.getImageData(16,16,1,1).data[0])):!1}function e(a){var c=b.createElement("script");c.src=a,c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f,g;c.supports={simple:d("simple"),flag:d("flag")},c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.simple&&c.supports.flag||(g=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",g,!1),a.addEventListener("load",g,!1)):(a.attachEvent("onload",g),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&&f.twemoji&&(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);\n\t\t</script>\n\t\t<style type="text/css">\nimg.wp-smiley,\nimg.emoji {\n\tdisplay: inline !important;\n\tborder: none !important;\n\tbox-shadow: none !important;\n\theight: 1em !important;\n\twidth: 1em !important;\n\tmargin: 0 .07em !important;\n\tvertical-align: -0.1em !important;\n\tbackground: none !important;\n\tpadding: 0 !important;\n}\n</style>\n<link rel=\'stylesheet\' id=\'wp-pagenavi-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/wp-pagenavi/pagenavi-css.css\' type=\'text/css\' media=\'all\' />\n<link rel=\'stylesheet\' id=\'themonic-fonts-css\'  href=\'http://fonts.googleapis.com/css?family=Ubuntu:400,700&#038;subset=latin,latin-ext\' type=\'text/css\' media=\'all\' />\n<link rel=\'stylesheet\' id=\'themonic-style-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/style.css\' type=\'text/css\' media=\'all\' />\n<link rel=\'stylesheet\' id=\'custom-style-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/custom.css\' type=\'text/css\' media=\'all\' />\n<!--[if lt IE 9]>\n<link rel=\'stylesheet\' id=\'themonic-ie-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/css/ie.css\' type=\'text/css\' media=\'all\' />\n<![endif]-->\n<meta name="generator" content="WordPress 4.2.7" />\n<style type="text/css" id="custom-background-css">\nbody.custom-background { background-color: #ffffff; }\n</style>\n<style type="text/css" id="syntaxhighlighteranchor"></style>\n<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<script>\r\n  (adsbygoogle = window.adsbygoogle || []).push({\r\n    google_ad_client: "ca-pub-9465609616171866",\r\n    enable_page_level_ads: true\r\n  });\r\n</script>\r\n</head>\r\n<body class="single single-post postid-5230 single-format-standard custom-background custom-background-white custom-font-enabled">\r\n<div id="page" class="hfeed site">\r\n\t<header id="masthead" class="site-header" role="banner">\r\n\t\t\t\t\t<hgroup>\r\n\t\t\t<a href="http://www.geeksforgeeks.org/" title="GeeksforGeeks" rel="home">GeeksforGeeks</a>\r\n\t\t\t\t<br .../> <a class="site-description">A computer science portal for geeks</a>\r\n\t\t</hgroup>\r\n\r\n<div style="float:right;">\r\n<hgroup style="float:right;">   \r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://www.geeksforgeeks.org/campus-ambassador-program-by-geeksforgeeks/">CA</a>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://geeksquiz.com/gate-corner-2/">GATE CS</a>\r\n\r\n<strong><a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://practice.geeksforgeeks.org/">Practice</a></strong>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://www.geeksforgeeks.org/suggest/">Suggest</a>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://code.geeksforgeeks.org/">IDE</a>\r\n\r\n<a style="padding:0px 25px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://qa.geeksforgeeks.org/">Q&A</a>\r\n\r\n<a style="padding:0px 30px 0px 0px; font-size:25px; font-family: Georgia,Times New Roman,Times,Helvetica,Arial,serif; font-weight: lighter; letter-spacing: -0.05em; text-decoration:none;" href="http://geeksquiz.com/">GeeksQuiz</a>\r\n\r\n</hgroup><br></br>\r\n\r\n<span style="display:inline-block; width:300px;float:right;">\r\n<script>\r\n  (function() {\r\n    var cx = \'009682134359037907028:tj6eafkv_be\';\r\n    var gcse = document.createElement(\'script\');\r\n    gcse.type = \'text/javascript\';\r\n    gcse.async = true;\r\n    gcse.src = (document.location.protocol == \'https:\' ? \'https:\' : \'http:\') +\r\n        \'//cse.google.com/cse.js?cx=\' + cx;\r\n    var s = document.getElementsByTagName(\'script\')[0];\r\n    s.parentNode.insertBefore(gcse, s);\r\n  })();\r\n</script>\r\n<gcse:search></gcse:search>\r\n\r\n<style type="text/css">\r\n  .gsc-control-cse {\r\n     padding: 0px 10px;\r\n  } \r\n\r\n  .gsc-control-cse {\r\n    font-family: "Trebuchet MS", sans-serif;\r\n    /*border-color: #E1F3DA;*/\r\n    /*background-color: #E1F3DA;*/\r\n  }\r\n  input.gsc-input {\r\n    border-color: #94CC7A;\r\n  }\r\n  input.gsc-search-button {\r\n    border-color: #94CC7A;\r\n    background-color: #4CB96B;\r\n    margin-top:7px;\r\n  }\r\n  .gsc-tabHeader.gsc-tabhInactive {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gsc-tabHeader.gsc-tabhActive {\r\n    border-color: #A9DA92;\r\n    background-color: #A9DA92;\r\n  }\r\n  .gsc-tabsArea {\r\n    border-color: #A9DA92;\r\n  }\r\n  .gsc-webResult.gsc-result {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gsc-webResult.gsc-result:hover {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:link,\r\n  .gs-webResult.gs-result a.gs-title:link b {\r\n    color: #009900;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:visited,\r\n  .gs-webResult.gs-result a.gs-title:visited b {\r\n    color: #009900;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:hover,\r\n  .gs-webResult.gs-result a.gs-title:hover b {\r\n    color: #003300;\r\n  }\r\n  .gs-webResult.gs-result a.gs-title:active,\r\n  .gs-webResult.gs-result a.gs-title:active b {\r\n    color: #009900;\r\n  }\r\n  .gsc-cursor-page {\r\n    color: #009900;\r\n  }\r\n  a.gsc-trailing-more-results:link {\r\n    color: #009900;\r\n  }\r\n  .gs-webResult.gs-result .gs-snippet {\r\n    color: #454545;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl {\r\n    color: #33cc00;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl-short {\r\n    color: #33cc00;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl-short {\r\n    display: none;\r\n  }\r\n  .gs-webResult.gs-result .gs-visibleUrl-long {\r\n    display: block;\r\n  }\r\n  .gsc-cursor-box {\r\n    border-color: #A9DA92;\r\n  }\r\n  .gsc-results .gsc-cursor-page {\r\n    border-color: #A9DA92;\r\n    background-color: #FFFFFF;\r\n  }\r\n  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {\r\n    border-color: #A9DA92;\r\n    background-color: #A9DA92;\r\n  }\r\n  .gs-promotion.gs-result {\r\n    border-color: #94CC7A;\r\n    background-color: #CBE8B4;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:link {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:visited {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:hover {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result a.gs-title:active {\r\n    color: #0066CC;\r\n  }\r\n  .gs-promotion.gs-result .gs-snippet {\r\n    color: #454545;\r\n  }\r\n  .gs-promotion.gs-result .gs-visibleUrl,\r\n  .gs-promotion.gs-result .gs-visibleUrl-short {\r\n    color: #815FA7;\r\n  }\r\n  .gsib_a {\r\n    padding : 2px;\r\n  }\r\n</style>    \r\n</span>\r\n</div>\r\n\r\n\t\t\r\n\t\t\r\n\t\t<nav id="site-navigation" class="themonic-nav" role="navigation">\r\n\t\t\t<a class="assistive-text" href="#content" title="Skip to content">Skip to content</a>\r\n\t\t\t<div class="menu-iconic-container"><ul id="menu-top" class="nav-menu"><li id="menu-item-135003" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-135003"><a href="http://www.geeksforgeeks.org/">Home</a></li>\n<li id="menu-item-135004" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-135004"><a title="Algorithms" href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algo</a>\n<ul class="sub-menu">\n\t<li id="menu-item-135030" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135030"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#AnalysisofAlgorithms">Analysis of Algorithms</a></li>\n\t<li id="menu-item-135031" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135031"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#SearchingandSorting">Searching and Sorting</a></li>\n\t<li id="menu-item-135032" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135032"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#GreedyAlgorithms">Greedy Algorithms</a></li>\n\t<li id="menu-item-135033" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135033"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#DynamicProgramming">Dynamic Programming</a></li>\n\t<li id="menu-item-135034" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135034"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#PatternSearching">Pattern Searching</a></li>\n\t<li id="menu-item-135035" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135035"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#OtherStringAlgorithms">Other String Algorithms</a></li>\n\t<li id="menu-item-135036" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135036"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#Backtracking">Backtracking</a></li>\n\t<li id="menu-item-135037" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135037"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#DivideandConquer">Divide and Conquer</a></li>\n\t<li id="menu-item-135038" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135038"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#GeometricAlgorithms">Geometric Algorithms</a></li>\n\t<li id="menu-item-135039" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135039"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#MathematicalAlgorithms">Mathematical Algorithms</a></li>\n\t<li id="menu-item-135040" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135040"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#BitAlgorithms">Bit Algorithms</a></li>\n\t<li id="menu-item-135041" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135041"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#GraphAlgorithms">Graph Algorithms</a></li>\n\t<li id="menu-item-135042" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135042"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#RandomizedAlgorithms">Randomized Algorithms</a></li>\n</ul>\n</li>\n<li id="menu-item-135010" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-135010"><a title="Data Structures" href="http://www.geeksforgeeks.org/data-structures/">DS</a>\n<ul class="sub-menu">\n\t<li id="menu-item-135045" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135045"><a href="http://www.geeksforgeeks.org/data-structures/#LinkedList">LinkedList</a></li>\n\t<li id="menu-item-135046" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135046"><a href="http://www.geeksforgeeks.org/data-structures/#Stack">Stack</a></li>\n\t<li id="menu-item-135047" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135047"><a href="http://www.geeksforgeeks.org/data-structures/#Queue">Queue</a></li>\n\t<li id="menu-item-135048" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135048"><a href="http://www.geeksforgeeks.org/data-structures/#BinaryTree">Binary Tree</a></li>\n\t<li id="menu-item-135049" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135049"><a href="http://www.geeksforgeeks.org/data-structures/#BinarySearchTree">Binary Search Tree</a></li>\n\t<li id="menu-item-135050" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135050"><a href="http://www.geeksforgeeks.org/data-structures/#Heap">Heap</a></li>\n\t<li id="menu-item-135051" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135051"><a href="http://www.geeksforgeeks.org/data-structures/#Hashing">Hashing</a></li>\n\t<li id="menu-item-135052" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135052"><a href="http://www.geeksforgeeks.org/data-structures/#Graph">Graph</a></li>\n\t<li id="menu-item-135053" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135053"><a href="http://www.geeksforgeeks.org/data-structures/#AdvancedDataStructure">Advanced Data Structure</a></li>\n\t<li id="menu-item-135054" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135054"><a href="http://www.geeksforgeeks.org/data-structures/#Array">Array</a></li>\n\t<li id="menu-item-135055" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135055"><a href="http://www.geeksforgeeks.org/data-structures/#Matrix">Matrix</a></li>\n\t<li id="menu-item-135056" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135056"><a href="http://www.geeksforgeeks.org/data-structures/#Misc">Misc</a></li>\n</ul>\n</li>\n<li id="menu-item-135014" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135014"><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview</a></li>\n<li id="menu-item-135006" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135006"><a href="http://www.geeksforgeeks.org/c/">C</a></li>\n<li id="menu-item-135007" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135007"><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>\n<li id="menu-item-135012" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135012"><a href="http://www.geeksforgeeks.org/java/">Java</a></li>\n<li id="menu-item-137004" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-137004"><a href="http://www.geeksforgeeks.org/python/">Python</a></li>\n<li id="menu-item-135009" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-135009"><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>\n<li id="menu-item-135016" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135016"><a href="http://qa.geeksforgeeks.org/index.php?qa=ask">Ask a Q</a></li>\n<li id="menu-item-135077" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135077"><a href="https://play.google.com/store/apps/details?id=free.programming.programming">AndroidApp</a></li>\n<li id="menu-item-135367" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135367"><a href="http://www.geeksforgeeks.org/category/guestblogs/">GBlog</a></li>\n<li id="menu-item-135028" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135028"><a href="http://www.geeksforgeeks.org/category/gfact/">GFact</a></li>\n<li id="menu-item-136004" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-136004"><a href="http://www.geeksforgeeks.org/category/project/">Project</a></li>\n<li id="menu-item-136978" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-136978"><a href="http://www.geeksforgeeks.org/jobs/">Jobs</a></li>\n<li id="menu-item-135019" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135019"><a href="http://www.geeksforgeeks.org/category/c-arrays/">Arr</a></li>\n<li id="menu-item-135022" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135022"><a href="http://www.geeksforgeeks.org/category/c-strings/">String</a></li>\n<li id="menu-item-135937" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135937"><a href="http://www.geeksforgeeks.org/category/matrix/">Matrix</a></li>\n<li id="menu-item-135023" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135023"><a href="http://www.geeksforgeeks.org/category/linked-list/">Linked List</a></li>\n<li id="menu-item-135029" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-135029"><a href="http://www.geeksforgeeks.org/category/stack/">Stack</a></li>\n<li id="menu-item-135932" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135932"><a href="http://www.geeksforgeeks.org/category/queue/">Q</a></li>\n<li id="menu-item-136299" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-136299"><a href="http://www.geeksforgeeks.org/category/hash/">Hash</a></li>\n<li id="menu-item-135941" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135941"><a href="http://www.geeksforgeeks.org/category/heap/">Heap</a></li>\n<li id="menu-item-135020" class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-parent current-post-parent menu-item-135020"><a href="http://www.geeksforgeeks.org/category/tree/">Tree</a></li>\n<li id="menu-item-135940" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135940"><a href="http://www.geeksforgeeks.org/category/binary-search-tree/">BST</a></li>\n<li id="menu-item-135024" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135024"><a href="http://www.geeksforgeeks.org/category/graph/">Graph</a></li>\n<li id="menu-item-135017" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135017"><a href="http://www.geeksforgeeks.org/category/c-puzzles/">C/C++</a></li>\n<li id="menu-item-135027" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135027"><a href="http://www.geeksforgeeks.org/category/bit-magic/">Bit</a></li>\n<li id="menu-item-135021" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135021"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question/">MCQ</a></li>\n<li id="menu-item-135018" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135018"><a href="http://www.geeksforgeeks.org/category/c-programs/">Misc</a></li>\n<li id="menu-item-135025" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-135025"><a href="http://www.geeksforgeeks.org/category/program-output/">O/P</a></li>\n</ul></div>\t\t</nav><!-- #site-navigation -->\r\n\t\t<div class="clear"></div>\r\n\t</header><!-- #masthead -->\r\n\r\n\t<div id="main" class="wrapper">\t<div id="primary" class="site-content">\r\n\t\t<div id="content" role="main">\r\n\r\n\t\t\t\t\t\t\t\r\n\t<article id="post-5230" class="post-5230 post type-post status-publish format-standard hentry category-tree">\r\n\t\t\t\t<header class="entry-header">\r\n\t\t\t\t\t\t<h1 class="entry-title">How to determine if a binary tree is height-balanced?</h1>\r\n\t\t\t\t\r\n\t\t\t</header><!-- .entry-header -->\r\n\r\n\t\t\t\t<div class="entry-content">\r\n\t\t\t<p>A tree where no leaf is much farther away from the root than any other leaf. Different balancing schemes allow different definitions of &#8220;much farther&#8221; and different amounts of work to keep them balanced.<span id="more-5230"></span></p>\n<p>Consider a height-balancing scheme where following conditions should be checked to determine if a binary tree is balanced.<br />\nAn empty tree is height-balanced. A non-empty binary tree T is balanced if:<br />\n1) Left subtree of T is balanced<br />\n2) Right subtree of T is balanced<br />\n3) The difference between heights of left subtree and right subtree is not more than 1. </p>\n<p>The above height-balancing scheme is used in AVL trees. The diagram below shows two trees, one of them is height-balanced and other is not. The second tree is not height-balanced because height of left subtree is 2 more than height of right subtree.</p>\n<p><a href="http://geeksforgeeks.org/wp-content/uploads/balanced_tree.GIF"><img src="http://geeksforgeeks.org/wp-content/uploads/balanced_tree.GIF" alt="" title="tree_diameter" width="533" height="236" class="aligncenter size-full wp-image-5737" /></a></p>\n<p>To check if a tree is height-balanced, get the height of left and right subtrees. Return true if difference between heights is not more than 1 and left and right subtrees are balanced, otherwise return false.</p>\n<div class="responsive-tabs">\n<h2 class="tabtitle">C</h2>\n<div class="tabcontent">\n\n<pre class="brush: cpp; title: ; notranslate" title="">\r\n/* program to check if a tree is height-balanced or not */\r\n#include&lt;stdio.h&gt;\r\n#include&lt;stdlib.h&gt;\r\n#define bool int\r\n\r\n/* A binary tree node has data, pointer to left child\r\n   and a pointer to right child */\r\nstruct node\r\n{\r\n    int data;\r\n    struct node* left;\r\n    struct node* right;\r\n};\r\n\r\n/* Returns the height of a binary tree */\r\nint height(struct node* node);\r\n\r\n/* Returns true if binary tree with root as root is height-balanced */\r\nbool isBalanced(struct node *root)\r\n{\r\n   int lh; /* for height of left subtree */\r\n   int rh; /* for height of right subtree */  \r\n\r\n   /* If tree is empty then return true */\r\n   if(root == NULL)\r\n    return 1; \r\n\r\n   /* Get the height of left and right sub trees */\r\n   lh = height(root-&gt;left);\r\n   rh = height(root-&gt;right);\r\n\r\n   if( abs(lh-rh) &lt;= 1 &amp;&amp;\r\n       isBalanced(root-&gt;left) &amp;&amp;\r\n       isBalanced(root-&gt;right))\r\n     return 1;\r\n\r\n   /* If we reach here then tree is not height-balanced */\r\n   return 0;\r\n}\r\n\r\n/* UTILITY FUNCTIONS TO TEST isBalanced() FUNCTION */\r\n\r\n/* returns maximum of two integers */\r\nint max(int a, int b)\r\n{\r\n  return (a &gt;= b)? a: b;\r\n}    \r\n\r\n/*  The function Compute the &quot;height&quot; of a tree. Height is the\r\n    number of nodes along the longest path from the root node\r\n    down to the farthest leaf node.*/\r\nint height(struct node* node)\r\n{\r\n   /* base case tree is empty */\r\n   if(node == NULL)\r\n       return 0;\r\n\r\n   /* If tree is not empty then height = 1 + max of left\r\n      height and right heights */\r\n   return 1 + max(height(node-&gt;left), height(node-&gt;right));\r\n} \r\n\r\n/* Helper function that allocates a new node with the\r\n   given data and NULL left and right pointers. */\r\nstruct node* newNode(int data)\r\n{\r\n    struct node* node = (struct node*)\r\n                                malloc(sizeof(struct node));\r\n    node-&gt;data = data;\r\n    node-&gt;left = NULL;\r\n    node-&gt;right = NULL;\r\n\r\n    return(node);\r\n}\r\n\r\nint main()\r\n{\r\n    struct node *root = newNode(1);\r\n    root-&gt;left = newNode(2);\r\n    root-&gt;right = newNode(3);\r\n    root-&gt;left-&gt;left = newNode(4);\r\n    root-&gt;left-&gt;right = newNode(5);\r\n    root-&gt;left-&gt;left-&gt;left = newNode(8);\r\n\r\n    if(isBalanced(root))\r\n      printf(&quot;Tree is balanced&quot;);\r\n    else\r\n      printf(&quot;Tree is not balanced&quot;);    \r\n\r\n    getchar();\r\n    return 0;\r\n}\r\n</pre>\n\n</div><h2 class="tabtitle">Java</h2>\n<div class="tabcontent">\n\n<pre class="brush: java; title: ; notranslate" title="">\r\n// Java program to determine if binary tree is height balanced\r\n\r\n// A binary tree node\r\nclass Node {\r\n\r\n    int data;\r\n    Node left, right;\r\n\r\n    Node(int item) {\r\n        data = item;\r\n        left = right = null;\r\n    }\r\n}\r\n\r\nclass BinaryTree {\r\n\r\n    static Node root;\r\n\r\n    /* Returns true if binary tree with root as root is height-balanced */\r\n    boolean isBalanced(Node node) {\r\n        int lh; /* for height of left subtree */\r\n\r\n        int rh; /* for height of right subtree */\r\n\r\n        /* If tree is empty then return true */\r\n        if (node == null) {\r\n            return true;\r\n        }\r\n\r\n        /* Get the height of left and right sub trees */\r\n        lh = height(node.left);\r\n        rh = height(node.right);\r\n\r\n        if (Math.abs(lh - rh) &lt;= 1\r\n                &amp;&amp; isBalanced(node.left)\r\n                &amp;&amp; isBalanced(node.right)) {\r\n            return true;\r\n        }\r\n\r\n        /* If we reach here then tree is not height-balanced */\r\n        return false;\r\n    }\r\n\r\n    /* UTILITY FUNCTIONS TO TEST isBalanced() FUNCTION */\r\n    /* returns maximum of two integers */\r\n    int max(int a, int b) {\r\n        return (a &gt;= b) ? a : b;\r\n    }\r\n\r\n    /*  The function Compute the &quot;height&quot; of a tree. Height is the\r\n     number of nodes along the longest path from the root node\r\n     down to the farthest leaf node.*/\r\n    int height(Node node) {\r\n        \r\n        /* base case tree is empty */\r\n        if (node == null) {\r\n            return 0;\r\n        }\r\n\r\n        /* If tree is not empty then height = 1 + max of left\r\n         height and right heights */\r\n        return 1 + max(height(node.left), height(node.right));\r\n    }\r\n\r\n    public static void main(String args[]) {\r\n        BinaryTree tree = new BinaryTree();\r\n        tree.root = new Node(1);\r\n        tree.root.left = new Node(2);\r\n        tree.root.right = new Node(3);\r\n        tree.root.left.left = new Node(4);\r\n        tree.root.left.right = new Node(5);\r\n        tree.root.left.left.left = new Node(8);\r\n\r\n        if(tree.isBalanced(root))\r\n            System.out.println(&quot;Tree is balanced&quot;);\r\n        else\r\n            System.out.println(&quot;Tree is not balanced&quot;);\r\n    }\r\n}\r\n\r\n// This code has been contributed by Mayank Jaiswal\r\n\r\n</pre>\n</div></div>\n<p>Time Complexity: O(n^2) Worst case occurs in case of skewed tree.</p>\n<p></br><br />\n<strong>Optimized implementation:</strong>  Above implementation can be optimized by calculating the height in the same recursion rather than calling a height() function separately.  Thanks to Amar for suggesting this optimized version. This optimization reduces time complexity to O(n).</p>\n<pre class="brush: cpp; title: ; notranslate" title="">\r\n/* program to check if a tree is height-balanced or not */\r\n#include&lt;stdio.h&gt;\r\n#include&lt;stdlib.h&gt;\r\n#define bool int\r\n\r\n/* A binary tree node has data, pointer to left child\r\n   and a pointer to right child */\r\nstruct node\r\n{\r\n  int data;\r\n  struct node* left;\r\n  struct node* right;\r\n};\r\n\r\n/* The function returns true if root is balanced else false\r\n   The second parameter is to store the height of tree.  \r\n   Initially, we need to pass a pointer to a location with value \r\n   as 0. We can also write a wrapper over this function */\r\nbool isBalanced(struct node *root, int* height)\r\n{\r\n  /* lh --&gt; Height of left subtree \r\n     rh --&gt; Height of right subtree */    \r\n  int lh = 0, rh = 0;  \r\n\r\n  /* l will be true if left subtree is balanced \r\n    and r will be true if right subtree is balanced */ \r\n  int l = 0, r = 0;\r\n    \r\n  if(root == NULL)\r\n  {\r\n    *height = 0;\r\n     return 1;\r\n  }\r\n\r\n  /* Get the heights of left and right subtrees in lh and rh \r\n    And store the returned values in l and r */    \r\n  l = isBalanced(root-&gt;left, &amp;lh);\r\n  r = isBalanced(root-&gt;right,&amp;rh);\r\n\r\n  /* Height of current node is max of heights of left and \r\n     right subtrees plus 1*/    \r\n  *height = (lh &gt; rh? lh: rh) + 1;\r\n    \r\n  /* If difference between heights of left and right \r\n     subtrees is more than 2 then this node is not balanced\r\n     so return 0 */\r\n  if((lh - rh &gt;= 2) || (rh - lh &gt;= 2))\r\n    return 0;\r\n    \r\n  /* If this node is balanced and left and right subtrees \r\n    are balanced then return true */\r\n  else return l&amp;&amp;r;\r\n}\r\n\r\n\r\n/* UTILITY FUNCTIONS TO TEST isBalanced() FUNCTION */\r\n\r\n/* Helper function that allocates a new node with the\r\n   given data and NULL left and right pointers. */\r\nstruct node* newNode(int data)\r\n{\r\n    struct node* node = (struct node*)\r\n                                malloc(sizeof(struct node));\r\n    node-&gt;data = data;\r\n    node-&gt;left = NULL;\r\n    node-&gt;right = NULL;\r\n\r\n    return(node);\r\n}\r\n\r\nint main()\r\n{\r\n  int height = 0;\r\n   \r\n  /* Constructed binary tree is\r\n             1\r\n           /   \\\r\n         2      3\r\n       /  \\    /\r\n     4     5  6\r\n    /\r\n   7\r\n  */    \r\n  struct node *root = newNode(1);  \r\n  root-&gt;left = newNode(2);\r\n  root-&gt;right = newNode(3);\r\n  root-&gt;left-&gt;left = newNode(4);\r\n  root-&gt;left-&gt;right = newNode(5);\r\n  root-&gt;right-&gt;left = newNode(6);\r\n  root-&gt;left-&gt;left-&gt;left = newNode(7);\r\n\r\n  if(isBalanced(root, &amp;height))\r\n    printf(&quot;Tree is balanced&quot;);\r\n  else\r\n    printf(&quot;Tree is not balanced&quot;);    \r\n\r\n  getchar();\r\n  return 0;\r\n}\r\n</pre>\n<p>Time Complexity: O(n)</p>\n<p>Please write comments if you find any of the above codes/algorithms incorrect, or find other ways to solve the same problem.</p>\n\r\n\t\t\t<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<!-- Big Rectangle Blog Bottom -->\r\n<ins class="adsbygoogle"\r\n     style="display:inline-block;width:336px;height:280px"\r\n     data-ad-client="ca-pub-9465609616171866"\r\n     data-ad-slot="4061219431"></ins>\r\n<script>\r\n(adsbygoogle = window.adsbygoogle || []).push({});\r\n</script>\r\n<br></br>\r\n\t\t</div><!-- .entry-content -->\r\n\t\t\t\t\r\n\t\t\r\n\r\n\t\t<footer class="entry-meta">\r\n\t\t<span class="post-comment"><a href="http://www.geeksforgeeks.org/how-to-determine-if-a-binary-tree-is-balanced/#comments" class="commentslink" ><span class="dsq-postid" data-dsqidentifier="5230 http://geeksforgeeks.org/?p=5230">65 Comments</span></a> <!--added for comments by Shubham-->\r\n\t\t</span><span>Category: <a href="http://www.geeksforgeeks.org/category/tree/" rel="category tag">Trees</a></span> <span></span> \r\n           \t          \t\r\n\t\t\t\t\t</footer><!-- .entry-meta -->\r\n\t</article><!-- #post -->\r\n<div class="related_posts"><h3>Related Posts:</h3><ul><li><a href="http://www.geeksforgeeks.org/bfs-vs-dfs-binary-tree/" title="BFS vs DFS for Binary Tree">BFS vs DFS for Binary Tree</a></li><li><a href="http://www.geeksforgeeks.org/maximum-difference-between-node-and-its-ancestor-in-binary-tree/" title="Maximum difference between node and its ancestor in Binary Tree">Maximum difference between node and its ancestor in Binary Tree</a></li><li><a href="http://www.geeksforgeeks.org/inorder-non-threaded-binary-tree-traversal-without-recursion-or-stack/" title="Inorder Non-threaded Binary Tree Traversal without Recursion or Stack">Inorder Non-threaded Binary Tree Traversal without Recursion or Stack</a></li><li><a href="http://www.geeksforgeeks.org/check-if-leaf-traversal-of-two-binary-trees-is-same/" title="Check if leaf traversal of two Binary Trees is same?">Check if leaf traversal of two Binary Trees is same?</a></li><li><a href="http://www.geeksforgeeks.org/closest-leaf-to-a-given-node-in-binary-tree/" title="Closest leaf to a given node in Binary Tree">Closest leaf to a given node in Binary Tree</a></li><li><a href="http://www.geeksforgeeks.org/locking-and-unlocking-of-resources-in-the-form-of-n-ary-tree/" title="Locking and Unlocking of Resources arranged in the form of n-ary Tree">Locking and Unlocking of Resources arranged in the form of n-ary Tree</a></li><li><a href="http://www.geeksforgeeks.org/find-all-possible-trees-with-given-inorder-traversal/" title="Find all possible binary trees with given Inorder Traversal">Find all possible binary trees with given Inorder Traversal</a></li><li><a href="http://www.geeksforgeeks.org/find-lca-in-binary-tree-using-rmq/" title="Find LCA in Binary Tree using RMQ">Find LCA in Binary Tree using RMQ</a></li></ul></div><br></br>\r\n\r\n<!-- Added on 29 Oct 2015 for next and previous from same category -->\r\n<nav class="nav-single">\r\n\t\t\t\t\t<div class="assistive-text">Post navigation</div>\r\n\t\t\t\t\t<span class="nav-previous"><a href="http://www.geeksforgeeks.org/diameter-of-a-binary-tree/" rel="prev">Previous post in category</a></span>\r\n\t\t\t\t\t<span class="nav-next"><a href="http://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion/" rel="next">Next post in category</a></span>\r\n\t\t\t\t</nav><!-- .nav-single -->\r\n\r\n\r\n<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>\r\n    <script type="text/javascript">\r\n    $(document).ready(function(){\r\n        $.ajax({\r\n            url:"http://courses.geeksforgeeks.org/plugin.php",\r\n            method:"POST",\r\n            dataType:"json",\r\n            data:{post_id:$("#ratePlugin").attr("pid"),url:window.location.href},\r\n            xhrFields:{withCredentials:true},\r\n            success:function(response){\r\n                $("#ratePlugin").html(response.rate);\r\n                $("#markPlugin").html(response.mark);\r\n            },\r\n            complete:function(){\r\n                $(".box").click(function(){\r\n                    rrequest({post_id:$("#ratePlugin").attr("pid"),post_title:$("#ratePlugin").attr("ptitle"),rating:$(this).attr("rating"),url:window.location.href});\r\n                });\r\n                $(".mark").click(function(){\r\n                    mrequest({post_id:$("#markPlugin").attr("pid"),post_title:$("#markPlugin").attr("ptitle"),op:$(this).attr("id"),url:window.location.href});\r\n                });\r\n            }\r\n        });\r\n        function rrequest(payload){\r\n            $.ajax({\r\n                url:"http://courses.geeksforgeeks.org/gfgRatings.php",\r\n                method:"POST",\r\n                dataType:"html",\r\n                data:payload,\r\n                xhrFields:{withCredentials:true},\r\n                success:function(response){\r\n                    $("#ratePlugin").html(response);\r\n                },\r\n                complete:function(){\r\n                    $(".box").click(function(){\r\n                        rrequest({post_id:$("#ratePlugin").attr("pid"),post_title:$("#ratePlugin").attr("ptitle"),rating:$(this).attr("rating"),url:window.location.href});\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        //rrequest({post_id:$("#ratePlugin").attr("pid"),url:window.location.href});\r\n        function mrequest(payload){\r\n            $.ajax({\r\n                url:"http://courses.geeksforgeeks.org/gfgMarking.php",\r\n                method:"POST",\r\n                dataType:"html",\r\n                data:payload,\r\n                xhrFields:{withCredentials:true},\r\n                success:function(response){\r\n                    $("#markPlugin").html(response);\r\n                },\r\n                complete:function(){\r\n                    $(".mark").click(function(){\r\n                        mrequest({post_id:$("#markPlugin").attr("pid"),post_title:$("#markPlugin").attr("ptitle"),op:$(this).attr("id"),url:window.location.href});\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        //mrequest({post_id:$("#markPlugin").attr("pid"),url:window.location.href});\r\n    });\r\n</script>\r\n\r\n<div class="plugins">\r\n<div pid="5230" ptitle="How to determine if a binary tree is height-balanced?" id="ratePlugin"></div>\r\n<div pid="5230" ptitle="How to determine if a binary tree is height-balanced?" id="markPlugin"></div>\r\n</div>\r\n\r\n<br></br>\r\n\r\n<script>\r\n  window.fbAsyncInit=function() {\r\n    FB.init({\r\n      appId      : \\\'380853768781431\\\',\r\n      xfbml      : true,\r\n      version    : \\\'v2.3\\\'\r\n    });\r\n  };\r\n\r\n  (function(d, s, id){\r\n     var js, fjs = d.getElementsByTagName(s)[0];\r\n     if (d.getElementById(id)) {return;}\r\n     js = d.createElement(s); js.id = id;\r\n     js.src = "//connect.facebook.net/en_US/sdk.js";\r\n     fjs.parentNode.insertBefore(js, fjs);\r\n   }(document, \\\'script\\\', \\\'facebook-jssdk\\\'));\r\n</script>\r\n<div class="fb-like" data-share="true" data-width="450" data-show-faces="true"></div>\r\n\r\n<br></br>\r\n<p>Writing code in comment? Please use <a href="http://code.geeksforgeeks.org/">code.geeksforgeeks.org</a>, generate link and share the link here.</a>\r\n\t\t\t\t\r\n<div id="disqus_thread">\r\n            <div id="dsq-content">\r\n\r\n\r\n            <ul id="dsq-comments">\r\n                    <li class="comment even thread-even depth-1" id="dsq-comment-36120">\r\n        <div id="dsq-comment-header-36120" class="dsq-comment-header">\r\n            <cite id="dsq-cite-36120">\r\n                <span id="dsq-author-user-36120">sri</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-36120" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-36120" class="dsq-comment-message"><p>we can further optimize the second approach by initializing l=r=1;</p>\n<p>add an if statemnet</p>\n<p>if(l&amp;&amp;r)</p>\n<p>{</p>\n<p>r = isBalanced(root-&gt;right,&amp;rh);<br />\n.<br />\n.<br />\n  else return l&amp;&amp;r;</p>\n<p>}</p>\n<p>return 0;</p>\n<p>this prevents checking the tree further when any of the subtree is not hheightbalanced.<br />\nPls, Correct me if i am wrong.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-36044">\r\n        <div id="dsq-comment-header-36044" class="dsq-comment-header">\r\n            <cite id="dsq-cite-36044">\r\n                <span id="dsq-author-user-36044">samthebest</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-36044" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-36044" class="dsq-comment-message"><p>why in 1st method the worst occurs in case of skewed tree?<br />\nin fact at 1st node itself the tree is not balanced and it will traverse only once to get the height in O(n) time &#8230;<br />\nso accorsin to me it should be best case while worst case shoud be in case of a balanced tree ?? correct me if m wrong</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-33390">\r\n        <div id="dsq-comment-header-33390" class="dsq-comment-header">\r\n            <cite id="dsq-cite-33390">\r\n                <span id="dsq-author-user-33390">Mohamad Al Mustapha</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-33390" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-33390" class="dsq-comment-message"><p>Check this iterative algorithm solving the same problem.</p>\n<p><a href="http://cs-and-design.blogspot.com/2014/03/how-to-find-if-binary-search-tree-is.html" rel="nofollow">http://cs-and-design.blogspot.com/2014/03/how-to-find-if-binary-search-tree-is.html</a></p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-33121">\r\n        <div id="dsq-comment-header-33121" class="dsq-comment-header">\r\n            <cite id="dsq-cite-33121">\r\n                <span id="dsq-author-user-33121">supershal</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-33121" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-33121" class="dsq-comment-message"><p>if( Integer.MaxInteger == isHeightBalanced( root, 0) ) {</p>\n<p>    return false;</p>\n<p>}else{</p>\n<p>return true;</p>\n<p>}</p>\n<p>public int isHeightBalanced(Node root, int height){</p>\n<p>    if(root == null){</p>\n<p>    return height;</p>\n<p>}</p>\n<p>int lHeight = isHeightBalanced( root.left, height + 1);</p>\n<p>int rHeight = isHeightBalanced( root.left, height + 1);</p>\n<p>    if( abs(lHeight &#8211; rHeight) &gt; 1) {</p>\n<p>    return Integer.MAXInteger;</p>\n<p>}</p>\n<p>return max(lHeight , rHeight) ;</p>\n<p>}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-32762">\r\n        <div id="dsq-comment-header-32762" class="dsq-comment-header">\r\n            <cite id="dsq-cite-32762">\r\n                <span id="dsq-author-user-32762">phantom</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-32762" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-32762" class="dsq-comment-message"><p>max = max_depth(root) #function to find max_depth &#8212;&gt; takes O(n)<br />\nmin = min_depth(root) # function to find min_depth &#8212;&gt; takes O(n)<br />\nif ( max &#8211; min) &lt;= boundary: </p>\n<p>    return true<br />\nelse:<br />\n    return false</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-29084">\r\n        <div id="dsq-comment-header-29084" class="dsq-comment-header">\r\n            <cite id="dsq-cite-29084">\r\n                <span id="dsq-author-user-29084">deepak</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-29084" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-29084" class="dsq-comment-message"><p>Is the following tree height balanced:</p>\n<p>                                     1</p>\n<p>                        /                      </p>\n<p>                      6                          2</p>\n<p>                    /                              /      </p>\n<p>                  7     11                      3        4</p>\n<p>                /                                        /</p>\n<p>              8   10      12                        5</p>\n<p>              9</p>\n<p>    struct node *root = newNode(1);<br />\n\troot-&gt;left = newNode(6);<br />\n\troot-&gt;right = newNode(2);<br />\n\troot-&gt;right-&gt;left = newNode(3);<br />\n\troot-&gt;right-&gt;right = newNode(4);<br />\n\troot-&gt;right-&gt;right-&gt;left = newNode(5);<br />\n\troot-&gt;left-&gt;left = newNode(7);<br />\n\troot-&gt;left-&gt;left-&gt;left = newNode(8);<br />\n\troot-&gt;left-&gt;left-&gt;left-&gt;left = newNode(9);<br />\n\troot-&gt;left-&gt;right = newNode(11);<br />\n\troot-&gt;left-&gt;right-&gt;right = newNode(12);<br />\n\troot-&gt;left-&gt;left-&gt;right = newNode(10);</p>\n<p>@admin according to the definition it is not 3 is at a distance 2 and 9 is at a distance 4. But the program gives it as height balanced. Did i made any mistake?</p>\n<p>Another good solution would be: find max height, find min height check if difference left), get_minpath(root-&gt;right));<br />\n}</p>\n<p>int get_maxpath(struct node *root){<br />\n    if(root == NULL)<br />\n        return 0;<br />\n    return 1 + max(get_maxpath(root-&gt;left), get_maxpath(root-&gt;right));<br />\n}</p>\n<p>cout &lt;&lt; get_maxpath(root) &#8211; get_minpath(root) &lt;= 1 &lt;&lt; endl;</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-28861">\r\n        <div id="dsq-comment-header-28861" class="dsq-comment-header">\r\n            <cite id="dsq-cite-28861">\r\n                <span id="dsq-author-user-28861">Jasprit</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-28861" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-28861" class="dsq-comment-message"><p>int isBalanced(struct node *root, int *height)<br />\n{<br />\n    if (root == NULL) {*height = 0; return 1; }<br />\n    int lh = 0, rh = 0;<br />\n    if (isBalanced(root-&gt;left, &amp;lh) &amp;&amp; isBalanced(root-&gt;right, &amp;rh))<br />\n    {<br />\n        *height = max(lh, rh) +1;<br />\n        if ((abs(lh &#8211; rh) &gt;= 2)) return 0;<br />\n        return 1;<br />\n    }<br />\n    return 0;<br />\n}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-28616">\r\n        <div id="dsq-comment-header-28616" class="dsq-comment-header">\r\n            <cite id="dsq-cite-28616">\r\n                <span id="dsq-author-user-28616">pavansrinivas</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-28616" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-28616" class="dsq-comment-message"><p>Similar to &#8220;Check if Leaves are at same level&#8221;..</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-22388">\r\n        <div id="dsq-comment-header-22388" class="dsq-comment-header">\r\n            <cite id="dsq-cite-22388">\r\n                <span id="dsq-author-user-22388">Aditya Ambashtha</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-22388" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-22388" class="dsq-comment-message"><p>We can check balance while finding height of the tree..</p>\n<p>supply the address of an int whose value is initialized as 1 in the beginning..If that value survives, the tree is balanced, else unbalanced&#8230;</p>\n<pre> <code language="C">\nint findHeightAndBalance(struct node *root,int *ans)\n{\n    if (root==NULL)\n        return 0;\n\n    int lef,rig;\n\n    lef=findHeightAndBalance(root-&gt;left,ans);\n    rig=findHeightAndBalance(root-&gt;right,ans);\n\n    if (abso(lef,rig)&lt;=1)\n        *ans=(*ans)&amp;1;\n    else\n        *ans=(*ans)&amp;0;\n\n    return (max(lef,rig)+1);\n}\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</li><!-- #comment-## -->\n    <li class="comment byuser comment-author-ultimate_coder odd alt thread-odd thread-alt depth-1" id="dsq-comment-19620">\r\n        <div id="dsq-comment-header-19620" class="dsq-comment-header">\r\n            <cite id="dsq-cite-19620">\r\n                <span id="dsq-author-user-19620">ultimate_coder</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-19620" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-19620" class="dsq-comment-message"><p>+1 optimisation to method 1&#8217;s space complexity.</p>\n<pre> <code language="C">\nif( abs(lh-rh) &lt;= 1 &amp;&amp;\n       isBalanced(root-&gt;left) &amp;&amp;\n       isBalanced(root-&gt;right))\n     return 1;\nThis should be replaced by \n\nreturn ( (abs(lh-rh) &lt;= 1) &amp;&amp;  isBalanced(root-&gt;left) &amp;&amp;  isBalanced(root-&gt;right)) )\n\nAs u can see it is a &quot;tail recursion&quot;, so it reduces size of stack frame and also prevents condition for stack oveflow. :P\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-18983">\r\n        <div id="dsq-comment-header-18983" class="dsq-comment-header">\r\n            <cite id="dsq-cite-18983">\r\n                <span id="dsq-author-user-18983">initialcoder</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-18983" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-18983" class="dsq-comment-message"><pre> <code language="C">\n#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n\ntypedef struct NodeTag{\n\tchar SYMBOL;\n\tstruct NodeTag * LLINK;\n\tstruct NodeTag * RLINK;\n} TreeNode;\n\nint getHeight(TreeNode * root){\n\n\tif(root == NULL)\n\t\treturn 0;\n\tint lHeight =0;\n\tint rHeight = 0;\n\t\n\tlHeight = getHeight(root-&gt;LLINK);\n\trHeight = getHeight(root-&gt;RLINK);\n\t\n\tif(lHeight &gt; rHeight)\n\t\treturn (lHeight + 1);\n\telse\n\t\treturn (rHeight + 1);\n}\n\nint isBalanced(TreeNode * root){\n\tif(root == NULL)\n\t\treturn 1;\n\tint lheight, rheight, temp;\n\tlheight = getHeight(root-&gt;LLINK);\n\trheight = getHeight(root-&gt;RLINK);\n\t\n\ttemp = lheight - rheight;\n\t\n\tif(temp &gt;= -1 &amp;&amp; temp &lt;=1)\n\t\treturn 1;\n\telse\n\t\treturn 0;\t\n}\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-18454">\r\n        <div id="dsq-comment-header-18454" class="dsq-comment-header">\r\n            <cite id="dsq-cite-18454">\r\n                <span id="dsq-author-user-18454">prity</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-18454" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-18454" class="dsq-comment-message"><p>Hi, can some one explain the second approach. Thanks.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-18364">\r\n        <div id="dsq-comment-header-18364" class="dsq-comment-header">\r\n            <cite id="dsq-cite-18364">\r\n                <span id="dsq-author-user-18364">Priyanka K</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-18364" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-18364" class="dsq-comment-message"><pre> <code language="C">\n//the function returns height of subtree whichever is greatest\n//if subtrees are balanced otherwise return -1 \nint ifHeightBal(node *root){\n    if(!root)\n             return 0;\n    int l=ifHeightBal(root-&gt;left);\n    int r=ifHeightBal(root-&gt;right);\n    if(abs(l-r)&gt;1 || l==-1 || r==-1)\n           return -1;\n    return l&gt;r?l+1:r+1;\n}\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-abhishek08aug odd alt thread-odd thread-alt depth-1" id="dsq-comment-18083">\r\n        <div id="dsq-comment-header-18083" class="dsq-comment-header">\r\n            <cite id="dsq-cite-18083">\r\n                <span id="dsq-author-user-18083">abhishek08aug</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-18083" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-18083" class="dsq-comment-message"><p>C++ code:</p>\n<pre> <code language="C">\n#include &lt;iostream&gt;\n#include &lt;stdlib.h&gt;\nusing namespace std;\n \nclass tree_node {\n  private:\n    int data;\n    tree_node * left;\n    tree_node * right;\n  public:\n    tree_node() {\n      left=NULL;\n      right=NULL;\n    }\n    void set_data(int data) {\n      this-&gt;data=data;\n    }\n    int get_data() {\n      return this-&gt;data;\n    }\n    void set_left(tree_node * left) {\n      this-&gt;left=left;\n    }\n    tree_node * get_left() {\n      return this-&gt;left;\n    }\n    void set_right(tree_node * right) {\n      this-&gt;right=right;\n    }\n    tree_node * get_right() {\n      return this-&gt;right;\n    }\n    tree_node ** get_left_ref() {\n      return &amp;(this-&gt;left);\n    }\n    tree_node ** get_right_ref() {\n      return &amp;(this-&gt;right);\n    }\n};\n \nclass tree {\n  private:\n    tree_node * root;\n    int size;\n    void _recursive_insert(tree_node ** root_ref, int value);\n    void _print_preorder(tree_node * root);\n    void _print_inorder(tree_node * root);\n    void _print_postorder(tree_node * root);\n    int _find_size(tree_node * root);\n    int _are_identical(tree_node * tn1, tree_node * tn2);\n    int _find_height(tree_node * root);\n    void _delete_tree(tree_node ** root);\n    void _mirror(tree_node * root);\n    void _print_paths(tree_node * root, int * path_nodes, int next_vacant_position);\n    void _print_array(int * array, int len);\n    tree_node * _lowest_common_ancestor(tree_node * parent, tree_node * root, int a, int b);\n    tree_node * _find_node(tree_node * root, int value);\n    tree_node * _min_node(tree_node * root);\n    void _print_level_order(tree_node * root);\n    int _count_leaf_nodes(tree_node * root);\n    int _is_bst(tree_node * root);\n    int _children_sum(tree_node * root);\n    void _ensure_children_sum(tree_node * root);\n    int _diameter(tree_node * root);\n    int _is_height_balanced(tree_node * root);\n  public:\n    tree() {\n      root=NULL;\n      size=0;\n    }\n    void insert(int value);\n    void recursive_insert(int value);\n    void print_preorder();\n    void print_inorder();\n    void print_postorder();\n    int find_size();\n    int get_size() {\n      return this-&gt;size;\n    }\n    int are_identical(tree t);\n    int find_height();\n    void delete_tree();\n    void mirror();\n    void print_paths();\n    tree_node * lowest_common_ancestor(int a, int b);\n    tree_node * find_node(int value);\n    tree_node * min_node();\n    void print_level_order();\n    int count_leaf_nodes();\n    int is_bst();\n    int children_sum();\n    void ensure_children_sum();\n    int diameter();\n    int is_height_balanced();\n};\n \nvoid tree::insert(int value) {\n  if(root==NULL) {\n    root=new tree_node;\n    root-&gt;set_data(value);\n  } else {\n    tree_node * parent=NULL;\n    tree_node * current=root;\n    tree_node * new_node=new tree_node;\n    new_node-&gt;set_data(value);\n    while(current!=NULL) {\n      if(value&lt;=current-&gt;get_data()) {\n        parent=current;\n        current=current-&gt;get_left();\n      } else {\n        parent=current;\n        current=current-&gt;get_right();\n      }\n    }\n    if(value&lt;=parent-&gt;get_data() &amp;&amp; parent-&gt;get_left()==NULL) {\n      parent-&gt;set_left(new_node);\n    } else if(value&gt;parent-&gt;get_data() &amp;&amp; parent-&gt;get_right()==NULL) {\n      parent-&gt;set_right(new_node);\n    }\n  }\n  size++;\n}\n \nvoid tree::recursive_insert(int value) {\n  _recursive_insert(&amp;root, value);\n  size++;\n}\n \nvoid tree::_recursive_insert(tree_node ** root_ref, int value) {\n  if(*root_ref==NULL) {\n    tree_node * new_node=new tree_node;\n    new_node-&gt;set_data(value);\n    *root_ref=new_node;   \n  } else {\n    if(value&lt;=(*root_ref)-&gt;get_data()) {\n      _recursive_insert((*root_ref)-&gt;get_left_ref(), value);\n    } else {\n      _recursive_insert((*root_ref)-&gt;get_right_ref(), value);\n    }\n  }\n}\n \nvoid tree::print_preorder() {\n  if(root==NULL) {\n    return;\n  }\n  _print_preorder(root);\n  cout&lt;&lt;endl;\n}\n \nvoid tree::_print_preorder(tree_node * root) {\n  if(root==NULL) {\n    return;\n  }\n  cout&lt;&lt;root-&gt;get_data()&lt;&lt;&quot; &quot;;\n  if(root-&gt;get_left()!=NULL)\n    _print_preorder(root-&gt;get_left());\n  if(root-&gt;get_right()!=NULL)\n    _print_preorder(root-&gt;get_right());\n}\n \nvoid tree::print_inorder() {\n  if(root==NULL) {\n    return;\n  }\n  _print_inorder(root);\n  cout&lt;&lt;endl;\n}\n \nvoid tree::_print_inorder(tree_node * root) {\n  if(root==NULL) {\n    return;\n  }\n  if(root-&gt;get_left()!=NULL)\n    _print_inorder(root-&gt;get_left());\n  cout&lt;&lt;root-&gt;get_data()&lt;&lt;&quot; &quot;;\n  if(root-&gt;get_right()!=NULL)\n    _print_inorder(root-&gt;get_right());\n}\n \nvoid tree::print_postorder() {\n  if(root==NULL) {\n    return;\n  }\n  _print_postorder(root);\n  cout&lt;&lt;endl;\n}\n \nvoid tree::_print_postorder(tree_node * root) {\n  if(root==NULL) {\n    return;\n  }\n  if(root-&gt;get_left()!=NULL)\n    _print_postorder(root-&gt;get_left());\n  if(root-&gt;get_right()!=NULL)\n    _print_postorder(root-&gt;get_right());\n  cout&lt;&lt;root-&gt;get_data()&lt;&lt;&quot; &quot;;\n}\n\nint tree::find_size() {\n  return _find_size(root);\n}\n\nint tree::_find_size(tree_node * root) {\n  if(root==NULL) {\n    return 0;\n  } else {\n    return 1+_find_size(root-&gt;get_left())+_find_size(root-&gt;get_right());\n  }\n}\n\nint tree::are_identical(tree t) {\n  return _are_identical(this-&gt;root, t.root);\n}\n\nint tree::_are_identical(tree_node * tn1, tree_node * tn2) {\n  if(tn1==NULL &amp;&amp; tn2==NULL) {\n    return 1;\n  } else if((tn1==NULL &amp;&amp; tn2!=NULL) || (tn1!=NULL &amp;&amp; tn2==NULL) || (tn1-&gt;get_data()!=tn2-&gt;get_data())) {\n    return 0;\n  } else {\n    return _are_identical(tn1-&gt;get_left(), tn2-&gt;get_left()) &amp;&amp; _are_identical(tn1-&gt;get_right(), tn2-&gt;get_right());\n  }\n}\n\nint tree::find_height() {\n  return _find_height(root);\n}\n\nint tree::_find_height(tree_node * root) {\n  if(root==NULL) {\n    return 0;\n  }\n  else {\n    return 1+max(_find_height(root-&gt;get_left()), _find_height(root-&gt;get_right()));\n  }\n}\n\nvoid tree::delete_tree() {\n  _delete_tree(&amp;root);\n  size=0;\n}\n\nvoid tree::_delete_tree(tree_node ** root) {\n  if(*root==NULL) {\n    return;\n  } else {\n    if((*root)-&gt;get_left()!=NULL) {\n      _delete_tree((*root)-&gt;get_left_ref());\n    }\n    if((*root)-&gt;get_right()!=NULL) {\n      _delete_tree((*root)-&gt;get_right_ref());\n    }\n    delete(*root);\n    *root=NULL;\n  }\n}\n\n/* alternate _delete_tree */\n/*\nvoid tree::_delete_tree(tree_node ** root) {\n  if(*root==NULL) {\n    return;\n  } else {\n    if((*root)-&gt;get_left()!=NULL) {\n      tree_node * left_ref=(*root)-&gt;get_left();\n      _delete_tree(&amp;left_ref);\n    }\n    if((*root)-&gt;get_right()!=NULL) {\n      tree_node * right_ref=(*root)-&gt;get_right();\n      _delete_tree(&amp;right_ref);\n    }\n    delete(*root);\n    *root=NULL;\n  }\n}\n*/\n\nvoid tree::mirror() {\n  _mirror(root);\n}\n\nvoid tree::_mirror(tree_node * root) {\n  if(root==NULL) {\n    return;\n  }\n\n  tree_node * temp=root-&gt;get_left();\n  root-&gt;set_left(root-&gt;get_right());\n  root-&gt;set_right(temp);\n  _mirror(root-&gt;get_left());\n  _mirror(root-&gt;get_right());\n}\n\nvoid tree::print_paths(){\n   int max_path_length=find_height();\n   int * path_nodes=(int *)calloc(sizeof(int), max_path_length);\n  _print_paths(root, path_nodes, 0);\n}\n\nvoid tree::_print_paths(tree_node * root, int * path_nodes, int next_vacant_position){\n  if(root==NULL) {\n    return;\n  } else if(root-&gt;get_left()==NULL &amp;&amp; root-&gt;get_right()==NULL) {\n    *(path_nodes+next_vacant_position)=root-&gt;get_data();\n    _print_array(path_nodes, next_vacant_position);\n  } else {\n    *(path_nodes+next_vacant_position)=root-&gt;get_data();\n    _print_paths(root-&gt;get_left(), path_nodes, next_vacant_position+1);\n    _print_paths(root-&gt;get_right(), path_nodes, next_vacant_position+1);\n  }\n}\n\nvoid tree::_print_array(int * array, int len) {\n  int i;\n  for(i=0; i&lt;=len; i++) {\n    cout&lt;&lt;*(array+i)&lt;&lt;&quot; &quot;;\n  }\n  cout&lt;&lt;endl;\n}\n\ntree_node * tree::find_node(int value) {\n  return _find_node(root, value);\n}\n\ntree_node * tree::_find_node(tree_node * root, int value) {\n  if(root==NULL || root-&gt;get_data()==value) {\n    return root;\n  } else if(value&lt;=root-&gt;get_data()) {\n    return _find_node(root-&gt;get_left(), value);\n  } else {\n    return _find_node(root-&gt;get_right(), value);\n  }\n}\n\ntree_node * tree::lowest_common_ancestor(int a, int b) {\n  return _lowest_common_ancestor(NULL, root, a, b);\n}\n\ntree_node * tree::_lowest_common_ancestor(tree_node * parent, tree_node * root, int a, int b) {\n  if(root==NULL) {\n    return root;\n  } else if((root-&gt;get_data()==a &amp;&amp; (root-&gt;get_left()-&gt;get_data()==b || root-&gt;get_right()-&gt;get_data()==b))\n             || (root-&gt;get_data()==b &amp;&amp; (root-&gt;get_left()-&gt;get_data()==a || root-&gt;get_right()-&gt;get_data()==a))) {\n    return parent;\n  } else if((_find_node(root-&gt;get_left(), a)!=NULL &amp;&amp; _find_node(root-&gt;get_right(), b)!=NULL)\n        || (_find_node(root-&gt;get_left(), b)!=NULL &amp;&amp; _find_node(root-&gt;get_right(), a)!=NULL)) {\n    return root; \n  } else if(_find_node(root-&gt;get_left(), a)!=NULL &amp;&amp; _find_node(root-&gt;get_left(), b)!=NULL) {\n    return _lowest_common_ancestor(root, root-&gt;get_left(), a, b);\n  } else if(_find_node(root-&gt;get_right(), a)!=NULL &amp;&amp; _find_node(root-&gt;get_right(), b)!=NULL) {\n    return _lowest_common_ancestor(root, root-&gt;get_right(), a, b);\n  } else {\n    return NULL;\n  }\n}\n\ntree_node * tree::min_node() {\n  return _min_node(root);\n}\n\ntree_node * tree::_min_node(tree_node * root) {\n  if(root==NULL || root-&gt;get_left()==NULL) {\n    return root;\n  } else {\n    return _min_node(root-&gt;get_left());\n  }\n}\n\nint tree::count_leaf_nodes() {\n  return _count_leaf_nodes(root);\n}\n\nint tree::_count_leaf_nodes(tree_node * root) {\n  if(root==NULL) {\n    return 0;\n  } else if(root-&gt;get_left()==NULL &amp;&amp; root-&gt;get_right()==NULL) {\n    return 1;\n  } else {\n    return _count_leaf_nodes(root-&gt;get_left())+_count_leaf_nodes(root-&gt;get_right());\n  }\n}\n\n\nint tree::is_bst() {\n  return _is_bst(root);\n}\n\nint tree::_is_bst(tree_node * root) {\n  static tree_node * previous=NULL;\n  if(root==NULL) {\n    return 1;\n  } else {\n    if(!_is_bst(root-&gt;get_left())) {\n      return 0;\n    }\n    if(previous!=NULL &amp;&amp; (previous-&gt;get_data())&gt;(root-&gt;get_data())) {\n      return 0;\n    }\n    previous=root;\n    if(!_is_bst(root-&gt;get_right())) {\n      return 0;\n    }    \n  }\n}\n\nint tree::children_sum() {\n  return _children_sum(root);\n}\n\nint tree::_children_sum(tree_node * root) {\n  if(root==NULL) {\n    return 1;\n  }\n  if(root-&gt;get_left()==NULL &amp;&amp; root-&gt;get_right()==NULL) {\n    return 1;\n  }\n  else if(_children_sum(root-&gt;get_left()) &amp;&amp; _children_sum(root-&gt;get_right())){\n    int left_data;\n    int right_data;\n    if(root-&gt;get_left()!=NULL) {\n      left_data=root-&gt;get_left()-&gt;get_data();\n    } else {\n      left_data=0;\n    }\n    if(root-&gt;get_right()!=NULL) {\n      right_data=root-&gt;get_right()-&gt;get_data();\n    } else {\n      right_data=0;\n    }\n\n    if(left_data+right_data==root-&gt;get_data()) {\n      return 1;\n    } else {\n      return 0;\n    }\n  } else {\n    return 0;\n  }\n}\n\nvoid tree::ensure_children_sum() {\n  _ensure_children_sum(root);\n}\n\nvoid tree::_ensure_children_sum(tree_node * root) {\n  if(root==NULL || (root-&gt;get_left()==NULL &amp;&amp; root-&gt;get_right()==NULL)) {\n    return;\n  } else {\n    _ensure_children_sum(root-&gt;get_left());\n    _ensure_children_sum(root-&gt;get_right());\n    int left_data;\n    int right_data;\n    if(root-&gt;get_left()!=NULL) {\n      left_data=root-&gt;get_left()-&gt;get_data();\n    } else {\n      left_data=0;\n    }\n    if(root-&gt;get_right()!=NULL) {\n      right_data=root-&gt;get_right()-&gt;get_data();\n    } else {\n      right_data=0;\n    }\n    root-&gt;set_data(left_data+right_data);\n  }\n}\n\nint tree::diameter() {\n  return _diameter(root);\n}\n\nint tree::_diameter(tree_node * root) {\n  if(root==NULL) {\n    return 0;\n  } else {\n    return max(_find_height(root-&gt;get_left())+_find_height(root-&gt;get_right())+1, max(_diameter(root-&gt;get_left()), _diameter(root-&gt;get_left())));\n  }\n}\n\nint tree::is_height_balanced() {\n  return _is_height_balanced(root);\n}\n\nint tree::_is_height_balanced(tree_node * root) {\n  if(root==NULL) {\n    return 1;\n  } else {\n    int left_height=_find_height(root-&gt;get_left());\n    int right_height=_find_height(root-&gt;get_right());\n    if(abs(left_height-right_height)&lt;=1 &amp;&amp; _is_height_balanced(root-&gt;get_left()) &amp;&amp; _is_height_balanced(root-&gt;get_left())) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n}\n\nint main() {\n  tree t1;\n\n  t1.recursive_insert(5);\n  t1.recursive_insert(3);\n  t1.insert(10);\n  t1.insert(7);\n  t1.recursive_insert(50);\n  t1.recursive_insert(6);\n  t1.recursive_insert(1);\n  t1.recursive_insert(45);\n  t1.recursive_insert(55);\n  t1.recursive_insert(4);\n\n  t1.print_inorder();\n\n  if(t1.is_height_balanced()==1) {\n    cout&lt;&lt;&quot;Tree is height balanced&quot;&lt;&lt;endl;\n  } else {\n    cout&lt;&lt;&quot;Tree is not height balanced&quot;&lt;&lt;endl;\n  }\n\n  t1.recursive_insert(70);\n\n  if(t1.is_height_balanced()==1) {\n    cout&lt;&lt;&quot;Tree is height balanced&quot;&lt;&lt;endl;\n  } else {\n    cout&lt;&lt;&quot;Tree is not height balanced&quot;&lt;&lt;endl;\n  }\n\n  return 0;\n}\n</code> </pre>\n<p>1 3 4 5 6 7 10 45 50 55<br />\nTree is height balanced<br />\nTree is not height balanced</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-onlynishant even thread-even depth-1" id="dsq-comment-17704">\r\n        <div id="dsq-comment-header-17704" class="dsq-comment-header">\r\n            <cite id="dsq-cite-17704">\r\nhttps://sites.google.com/site/nishantonl9/                <span id="dsq-author-user-17704">Nishant Kumar</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-17704" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-17704" class="dsq-comment-message"><p>It returns -1 if not balanced.</p>\n<pre> <code language="C">\nint isHeightBalance(tree* root){\n\tif(root==NULL)\n\t\treturn 0;\n\tint left = isHeightBalance(root-&gt;left);\n\tint right = isHeightBalance(root-&gt;right);\n\n\tif(abs(right-left)&lt;2 &amp;&amp; left!=-1 &amp;&amp; right!=-1)\n\t\treturn 1 + max(left,right);\n\telse\n\t\treturn -1;\n\n}\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-30131">\r\n        <div id="dsq-comment-header-30131" class="dsq-comment-header">\r\n            <cite id="dsq-cite-30131">\r\n                <span id="dsq-author-user-30131">Gaurav</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-30131" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-30131" class="dsq-comment-message"><p>your code will never return -1. Take a simple example:<br />\n             1<br />\n           /<br />\n         2<br />\n        /<br />\n       3</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-3" id="dsq-comment-30133">\r\n        <div id="dsq-comment-header-30133" class="dsq-comment-header">\r\n            <cite id="dsq-cite-30133">\r\n                <span id="dsq-author-user-30133">Mika</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-30133" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-30133" class="dsq-comment-message"><p>For root node &#8216;1&#8217;, it would return -1 as abs(right-left) = 2</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-16864">\r\n        <div id="dsq-comment-header-16864" class="dsq-comment-header">\r\n            <cite id="dsq-cite-16864">\r\n                <span id="dsq-author-user-16864">varun jain</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-16864" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-16864" class="dsq-comment-message"><p>#include<br />\n#include<br />\n#include<br />\nint h=0,lmax=0;<br />\nstruct tree<br />\n{<br />\n\tchar data;<br />\n\tstruct tree *left;<br />\n\tstruct tree *right;<br />\n};<br />\nint buildtree(struct tree **,int );<br />\nint balance(struct tree *,int);<br />\nint max(int,int);<br />\nint main()<br />\n{struct tree *root;<br />\nroot=NULL;<br />\nint arr[8]={50,54,32,33,31,56,34,53};<br />\nfor(int i=0;i&lt;8;i++)<br />\nbuildtree(&amp;root,arr[i]);<br />\nint k;<br />\n(k=abs(balance(root,0)-lmax))data=n;<br />\n(*root)-&gt;left=NULL;<br />\n(*root)-&gt;right=NULL;<br />\n}<br />\nelse<br />\n{<br />\n\tif(ndata)<br />\n\tbuildtree(&amp;((*root)-&gt;left),n);<br />\n\telse<br />\n\tbuildtree(&amp;((*root)-&gt;right),n);<br />\n}<br />\n}</p>\n<p>int balance(struct tree *root,int l)<br />\n{if(l&gt;lmax)<br />\nlmax=l;</p>\n<p>if(root==NULL)<br />\nreturn 0;<br />\nelse<br />\nreturn 1+max(balance(root-&gt;left,l+1),balance(root-&gt;right,l+1));<br />\n}</p>\n<p>int max(int a,int b)<br />\n{return abs(a-b)b?a:b):0;<br />\n}</p>\n<p>what about this code?here i am using two parameter to find if tree is balance or not.if (balance(struct tree*,int)-lmax)&lt;=1 then tree is balanced otherwise not.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-15898">\r\n        <div id="dsq-comment-header-15898" class="dsq-comment-header">\r\n            <cite id="dsq-cite-15898">\r\n                <span id="dsq-author-user-15898">Shankar</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-15898" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-15898" class="dsq-comment-message"><p>A<br />\n    /   \\<br />\n   B     C<br />\n    \\   / \\<br />\n     E F   G<br />\n          / \\<br />\n         H   I</p>\n<p>Is the above a balanced binary tree? If not, wont the algorithm fail in this case?</p>\n<p>Each of the subtrees are balanced and the diff between left subtree height and right subtree height is one.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-15900">\r\n        <div id="dsq-comment-header-15900" class="dsq-comment-header">\r\n            <cite id="dsq-cite-15900">\r\n                <span id="dsq-author-user-15900">Shankar</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-15900" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-15900" class="dsq-comment-message"><p>Sorry, i meant this tree.</p>\n<p>&#8230;.A<br />\n&#8230;/..\\<br />\n..B&#8230;.C<br />\n..\\&#8230;/..\\<br />\n..E..F&#8230;.G<br />\n&#8230;&#8230;../ \\<br />\n&#8230;&#8230;.H&#8230;I</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-3" id="dsq-comment-15901">\r\n        <div id="dsq-comment-header-15901" class="dsq-comment-header">\r\n            <cite id="dsq-cite-15901">\r\n                <span id="dsq-author-user-15901">Shankar</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-15901" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-15901" class="dsq-comment-message"><p>H &amp; I are under G, F &amp; G under C, E under B, B&amp;C under A.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment byuser comment-author-onlynishant odd alt depth-2" id="dsq-comment-17705">\r\n        <div id="dsq-comment-header-17705" class="dsq-comment-header">\r\n            <cite id="dsq-cite-17705">\r\nhttps://sites.google.com/site/nishantonl9/                <span id="dsq-author-user-17705">Nishant Kumar</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-17705" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-17705" class="dsq-comment-message"><p>Yes, It is a balanced tree.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-15003">\r\n        <div id="dsq-comment-header-15003" class="dsq-comment-header">\r\n            <cite id="dsq-cite-15003">\r\n                <span id="dsq-author-user-15003">mrn</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-15003" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-15003" class="dsq-comment-message"><pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\nint avl_check(Node *n,bool *check)\n{\n\tif(n==NULL) return 0;\n\tint lh=avl_check(n-&gt;l,check);\n\tint lr=avl_check(n-&gt;r,check);\n\tif(abs(lh-lr) &gt; 1)\n\t{\n\t\t*check=false;\n\t\treturn 0;\n\t}\n\treturn max(lh,lr)+1;\t\n}\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-aygul odd alt thread-even depth-1" id="dsq-comment-15001">\r\n        <div id="dsq-comment-header-15001" class="dsq-comment-header">\r\n            <cite id="dsq-cite-15001">\r\n                <span id="dsq-author-user-15001">aygul</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-15001" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-15001" class="dsq-comment-message"><p>Here is a c# version. Tried to optimize the given solution&#8230; </p>\n<p>bool IsBalanced(BTNode root)<br />\n{<br />\n    int h = 0;<br />\n    retrun IsBalanced(root, ref h);<br />\n}</p>\n<p>bool IsBalanced(BTNode root, ref int h)<br />\n{<br />\n    if (root == null) return true;</p>\n<p>    int lHeight = 0;<br />\n    if (!IsBalanced(root.Left, ref lHeight))<br />\n        return false;</p>\n<p>    int rHeight = 0;<br />\n    if (!IsBalanced(root.Right, ref rHeight))<br />\n        return false;</p>\n<p>    if (lHeight &#8211; rHeight &gt;= 2 || rHeight &#8211; lHeight &gt;= 2)<br />\n        return false;</p>\n<p>    h = (lHeight &gt; rHeight ? lHeight : rHeight) + 1;<br />\n    return true;<br />\n}</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-14856">\r\n        <div id="dsq-comment-header-14856" class="dsq-comment-header">\r\n            <cite id="dsq-cite-14856">\r\n                <span id="dsq-author-user-14856">Porus</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-14856" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-14856" class="dsq-comment-message"><pre> <code language="C"></code> </pre>\n<p>/* Paste your code here (You may delete these lines if not writing code) */<br />\n/*A little more Optimization..*/<br />\nbool isBalancedTree(Tree *t , int *height)</p>\n<p>   int lh = 0 , rh = 0;<br />\n   if(!t) return TRUE;<br />\n   if(isBalancedTree(t-&gt;left , &amp;lh) , isBalancedTree(t-&gt;right , &amp;rh))<br />\n  {<br />\n     *height = max(lh,rh) +1;<br />\n      if(Abs(lh-rh) &lt; 2)<br />\n      return TRUE;<br />\n      else<br />\n      return FALSE;<br />\n   }<br />\n   else<br />\n   return FALSE;<br />\n}</p>\n<p>Hey Geeks , Please correct if im wrong&#8230;</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-14857">\r\n        <div id="dsq-comment-header-14857" class="dsq-comment-header">\r\n            <cite id="dsq-cite-14857">\r\n                <span id="dsq-author-user-14857">Porus</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-14857" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-14857" class="dsq-comment-message"><p>Correction in the above code ::</p>\n<p>Should be as below..</p>\n<p> if(isBalancedTree(t-&gt;left , &amp;lh) &amp;&amp; isBalancedTree(t-&gt;right , &amp;rh))</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-14246">\r\n        <div id="dsq-comment-header-14246" class="dsq-comment-header">\r\n            <cite id="dsq-cite-14246">\r\n                <span id="dsq-author-user-14246">sreeram</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-14246" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-14246" class="dsq-comment-message"><pre> <code language="C"></code> </pre>\n<p>int isbalanced(struct node *root)<br />\n{<br />\nif(root == NULL)<br />\nreturn 0;</p>\n<p>int b1=isbalanced(root-&gt;left);<br />\nint b2=isbalanceed(root-&gt;right);</p>\n<p>if( b1 != -1  &amp;&amp;  b2 != -1 &amp;&amp; abs(b1-b2) &lt;= 1)<br />\nreturn 1+max(b1,b2);<br />\nelse<br />\nreturn -1;<br />\n}  //returns the height of the tree if balanced else returns -1</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-14570">\r\n        <div id="dsq-comment-header-14570" class="dsq-comment-header">\r\n            <cite id="dsq-cite-14570">\r\n                <span id="dsq-author-user-14570">aaddd</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-14570" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-14570" class="dsq-comment-message"><p>I think when root==null should return -1 since the empty tree height is -1 rather than 0.</p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-13971">\r\n        <div id="dsq-comment-header-13971" class="dsq-comment-header">\r\n            <cite id="dsq-cite-13971">\r\n                <span id="dsq-author-user-13971">Udit Bhatia</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-13971" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-13971" class="dsq-comment-message"><pre> <code language="C">\n\nint isHeightBalanced(NODE *root){\n\n\tif(root==NULL){\n\t\treturn 0;\n\t}\n\n\tint LH=0,RH=0;\n\t\n\tLH=isHeightBalanced(root-&gt;left);\n\tRH=isHeightBalanced(root-&gt;right);\n\n\tif((LH==-1) || (RH==-1)){\n\t\treturn -1; //not a height balanced.\n\t}\n\n\tif( abs(LH-RH) &lt;= 1){\n\t\t\n\t\t// is height balanced uptill now\n\t\treturn ((LH &gt; RH) ? (LH + 1) : (RH + 1));\n\t}else{\n\n\t\treturn -1;\n\t}\n}\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-12131">\r\n        <div id="dsq-comment-header-12131" class="dsq-comment-header">\r\n            <cite id="dsq-cite-12131">\r\n                <span id="dsq-author-user-12131">ramana</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-12131" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-12131" class="dsq-comment-message"><pre> <code language="C">\nint maxheight( struct stree *p)\n{\n     if(p==NULL)\n    return 0;\n    else\n    m=max(1+maxheight(p-&gt;left),1+maxheight(p-&gt;right));\n    return m;\n}\n          \nint minheight(struct stree *p)\n{   \n    if(p==NULL)\n    return 0;\n    else\n    m=min(1+minheight(p-&gt;left),1+minheight(p-&gt;right));\n  \n    return m;\n}\n</code> </pre>\n<p>sub max-min and verify it is 1 or 0</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-2" id="dsq-comment-12135">\r\n        <div id="dsq-comment-header-12135" class="dsq-comment-header">\r\n            <cite id="dsq-cite-12135">\r\n                <span id="dsq-author-user-12135">godrej</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-12135" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-12135" class="dsq-comment-message"><p>can ny one explain about this complexity</p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-aygul odd alt depth-2" id="dsq-comment-15000">\r\n        <div id="dsq-comment-header-15000" class="dsq-comment-header">\r\n            <cite id="dsq-cite-15000">\r\n                <span id="dsq-author-user-15000">aygul</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-15000" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-15000" class="dsq-comment-message"><p>Nice approach! It is still O(n).</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-12130">\r\n        <div id="dsq-comment-header-12130" class="dsq-comment-header">\r\n            <cite id="dsq-cite-12130">\r\n                <span id="dsq-author-user-12130">ramana</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-12130" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-12130" class="dsq-comment-message"><p>int maxheight( struct stree *p)<br />\n{<br />\n     if(p==NULL)<br />\n    return 0;<br />\n    else<br />\n    m=max(1+maxheight(p-&gt;left),1+maxheight(p-&gt;right));<br />\n    return m;<br />\n}</p>\n<p>int minheight(struct stree *p)<br />\n{<br />\n    if(p==NULL)<br />\n    return 0;<br />\n    else<br />\n    m=min(1+minheight(p-&gt;left),1+minheight(p-&gt;right));</p>\n<p>    return m;<br />\n}<br />\nsubstract maxheight-minheight and check it if is 1 or 0<br />\nthis works&#8230;&#8230; <img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/images/smilies/simple-smile.png" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-12111">\r\n        <div id="dsq-comment-header-12111" class="dsq-comment-header">\r\n            <cite id="dsq-cite-12111">\r\n                <span id="dsq-author-user-12111">code_player</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-12111" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-12111" class="dsq-comment-message"><p>Actually I am not getting why time complexity of first approach is O(n^2). in the condition if the first expression abs(lh-lr)&lt;=1 doesn&#039;t satisfy then next expressions of &amp;&amp; won&#039;t be evaluated and it will simply return 0.</p>\n<p>/* Paste your code here (You may delete these lines if not writing code) */</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-11265">\r\n        <div id="dsq-comment-header-11265" class="dsq-comment-header">\r\n            <cite id="dsq-cite-11265">\r\n                <span id="dsq-author-user-11265">suja</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-11265" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-11265" class="dsq-comment-message"><p>this is confusing for a clear idea go to link<br />\n<a href="http://www.mytechinterviews.com/balanced-tree" rel="nofollow">http://www.mytechinterviews.com/balanced-tree</a></p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-11134">\r\n        <div id="dsq-comment-header-11134" class="dsq-comment-header">\r\n            <cite id="dsq-cite-11134">\r\n                <span id="dsq-author-user-11134">Abhinav</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-11134" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-11134" class="dsq-comment-message"><p>The time complexity calculation for the first algorithm in this post seems flawed to me. </p>\n<p>I am providing my calculation and it would be great if you guys can take a look and let me know.</p>\n<p>Complexity Calculation<br />\n=================<br />\nThe O(n^2) argument misses the fact that the number of nodes at every level is different. The n in O(n) time for height algorithm is going to vary at each level. Also, it is the balanced tree that would be the worst case. This is because the algorithm will find a much earlier exit in the case of unbalanced tree, it will have lesser nodes to traverse in order to determine the balance.</p>\n<p>The correct way to calculate this would be: lets say T is the time taken and we are considering a complete balanced tree,<br />\nT = summation[ (2^h &#8211; 2) * n/(2^h &#8211; 1) ]<br />\nwhere n = number of nodes in tree,<br />\nh = height of the node,<br />\nh ranges from 2 to lg(n).</p>\n<p>The second term n/(2^h &#8211; 1) is the number of nodes at height h. The first term in the number of nodes in the subtree for each of these nodes at height h.</p>\n<p>The summation T comes out to be O(n log(n)).</p>\n<p>Another point I wanted to make is that the two recursive calls are not taken into account while calculating the time complexity. This does not however cause a problem here because the two calls do not share any computations (as in the case of Fibonacci numbers). Still, it would be better if it was mentioned that this was the reason you could ignore the two calls.</p>\n<p>The most correct way to write the complexity equation for this algorithm would have been:<br />\nT(n) = T(n1) + T(n2) + O(n1+n2), n1=number of nodes in left subtree, n2=number of nodes in right subtree.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-10266">\r\n        <div id="dsq-comment-header-10266" class="dsq-comment-header">\r\n            <cite id="dsq-cite-10266">\r\n                <span id="dsq-author-user-10266">vj</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-10266" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-10266" class="dsq-comment-message"><p>just find the max height from root and min height from root.If the difference is less then or equal to 1 we have a balanced tree..else not.</p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-8425">\r\n        <div id="dsq-comment-header-8425" class="dsq-comment-header">\r\n            <cite id="dsq-cite-8425">\r\n                <span id="dsq-author-user-8425">Dexters</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-8425" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-8425" class="dsq-comment-message"><p>How is maxdepth for the tree is 0?</p>\n<p><a href="http://www.mytechinterviews.com/balanced-tree" rel="nofollow">http://www.mytechinterviews.com/balanced-tree</a><br />\n<a href="http://stackoverflow.com/questions/6917439/doubt-regarding-function-to-check-whether-a-tree-is-balanced-or-not" rel="nofollow">http://stackoverflow.com/questions/6917439/doubt-regarding-function-to-check-whether-a-tree-is-balanced-or-not</a></p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-6381">\r\n        <div id="dsq-comment-header-6381" class="dsq-comment-header">\r\n            <cite id="dsq-cite-6381">\r\nhttp://cracktheinterview.org/                <span id="dsq-author-user-6381">vinay polisetti</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-6381" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-6381" class="dsq-comment-message"><p>Can someone explain me the usage of the height variable in method2 ?</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt thread-even depth-1" id="dsq-comment-6364">\r\n        <div id="dsq-comment-header-6364" class="dsq-comment-header">\r\n            <cite id="dsq-cite-6364">\r\n                <span id="dsq-author-user-6364">mohit</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-6364" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-6364" class="dsq-comment-message"><pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\nint blncd_tree(Node  n)\n{\n\tif(n==NULL) return 0;\n\tint l=0,r=0;\n\tl=blncd_tree(n-&gt;l);\n\tr=blncd_tree(n-&gt;r);\n\tif(l==-2 || r==-2)\n\t\t return -2;\t\n\tif(abs(l-r) &lt;=1) \n\t\treturn l&gt;r?l+1:r+1;\n\telse\n\t\treturn -2;\n}\n\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-6338">\r\n        <div id="dsq-comment-header-6338" class="dsq-comment-header">\r\n            <cite id="dsq-cite-6338">\r\n                <span id="dsq-author-user-6338">master fuji</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-6338" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-6338" class="dsq-comment-message"><p>Hi GeeksforGeeks,</p>\n<p>im happy with ur site, one suggestion is to hide the solutions for people, who wants to give a try with ur test cases</p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-geeksforgeeks bypostauthor odd alt depth-2" id="dsq-comment-6341">\r\n        <div id="dsq-comment-header-6341" class="dsq-comment-header">\r\n            <cite id="dsq-cite-6341">\r\n                <span id="dsq-author-user-6341">GeeksforGeeks</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-6341" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-6341" class="dsq-comment-message"><p>@master fuji: Thanks for the feedback.  Hiding solutions is a nice idea.  We will consider it in next release.  Keep visiting us!!</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment byuser comment-author-sreenivas even thread-even depth-1" id="dsq-comment-4087">\r\n        <div id="dsq-comment-header-4087" class="dsq-comment-header">\r\n            <cite id="dsq-cite-4087">\r\n                <span id="dsq-author-user-4087">sreenivas putta</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-4087" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-4087" class="dsq-comment-message"><p>findout the maximum depth of the tree and minimum depth of the tree and find the difference between two. i.e.,if  maxdepth-mindepth&lt;=1 , then tree is balanced. the more optimized version for the problem.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-4090">\r\n        <div id="dsq-comment-header-4090" class="dsq-comment-header">\r\n            <cite id="dsq-cite-4090">\r\n                <span id="dsq-author-user-4090">ayan_2587</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-4090" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-4090" class="dsq-comment-message"><p>Dude..that is what I have posted in my solution below !!!</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment byuser comment-author-geeksforgeeks bypostauthor even depth-2" id="dsq-comment-4091">\r\n        <div id="dsq-comment-header-4091" class="dsq-comment-header">\r\n            <cite id="dsq-cite-4091">\r\n                <span id="dsq-author-user-4091">GeeksforGeeks</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-4091" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-4091" class="dsq-comment-message"><p>@sreenivas putta &#038; ayan_2587:</p>\n<p>Consider the following tree.  max and min dpeth of the tree are 0. But the tree is not balanced as both left and right subtrees of A are not balanced.<br />\n&#8230;&#8230;.A<br />\n&#8230;&#8230;/&#8230;\\<br />\n&#8230;..B&#8230;.C<br />\n&#8230;./&#8230;&#8230;.\\<br />\n&#8230;D&#8230;&#8230;..E<br />\n../&#8230;&#8230;&#8230;..\\<br />\n.F&#8230;&#8230;&#8230;&#8230;G</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-3" id="dsq-comment-8424">\r\n        <div id="dsq-comment-header-8424" class="dsq-comment-header">\r\n            <cite id="dsq-cite-8424">\r\n                <span id="dsq-author-user-8424">Dexters</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-8424" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-8424" class="dsq-comment-message"><p>How is maxdepth for the tree is 0?</p>\n<p><a href="http://www.mytechinterviews.com/balanced-tree" rel="nofollow">http://www.mytechinterviews.com/balanced-tree</a><br />\n<a href="http://stackoverflow.com/questions/6917439/doubt-regarding-function-to-check-whether-a-tree-is-balanced-or-not" rel="nofollow">http://stackoverflow.com/questions/6917439/doubt-regarding-function-to-check-whether-a-tree-is-balanced-or-not</a></p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-3820">\r\n        <div id="dsq-comment-header-3820" class="dsq-comment-header">\r\n            <cite id="dsq-cite-3820">\r\n                <span id="dsq-author-user-3820">ayan_2587</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-3820" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-3820" class="dsq-comment-message"><p>My solution to the post :-<br />\nDo a simple Depth First Traversal of the given tree in question.<br />\nMaintain two variables, min &amp; max. While doing the depth traversal once you reach a leaf node, compare the level(level of the leaf node ie. height) of the leaf node with the min &amp; max variable.if it less than min store the level in min, else if it is greater than max, store it in max. At the end of the traversal, if the difference between min &amp; max is more than one then, the tree is not balanced.</p>\n<p>Please let me know if there is any bug in this solution<br />\nThanks <img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/images/smilies/simple-smile.png" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment odd alt depth-2" id="dsq-comment-9094">\r\n        <div id="dsq-comment-header-9094" class="dsq-comment-header">\r\n            <cite id="dsq-cite-9094">\r\n                <span id="dsq-author-user-9094">krishna</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-9094" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-9094" class="dsq-comment-message"><p>As i understand depth of the node is the count of nodes from the root to the current node.</p>\n<p>Assuming above defnition is legal, Your logic doesnt make much sense. There is no necessity that max and min depths should differ by one.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-even depth-1" id="dsq-comment-3441">\r\n        <div id="dsq-comment-header-3441" class="dsq-comment-header">\r\n            <cite id="dsq-cite-3441">\r\n                <span id="dsq-author-user-3441">gaurav</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-3441" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-3441" class="dsq-comment-message"><p>Could anyone explain, how the time complexity of the Optimized Algorithm is O(n)?</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-kartik odd alt depth-2" id="dsq-comment-3442">\r\n        <div id="dsq-comment-header-3442" class="dsq-comment-header">\r\n            <cite id="dsq-cite-3442">\r\n                <span id="dsq-author-user-3442">kartik</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-3442" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-3442" class="dsq-comment-message"><p>@gaurav: The optimized solution just does tree traversal of the tree and time complexity of tree tree traversal is O(n).  See <a href="http://geeksforgeeks.org/?p=618" rel="nofollow">this </a>post for time complexity of tree traversals.</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-3" id="dsq-comment-3793">\r\n        <div id="dsq-comment-header-3793" class="dsq-comment-header">\r\n            <cite id="dsq-cite-3793">\r\n                <span id="dsq-author-user-3793">ricky</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-3793" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-3793" class="dsq-comment-message"><p>@kartik can u explin the how Tc of 1st program is O(n^2) ..plz through some light  on the same ..can u proove that ..one more suggestion .that plz try to prrove time complixity of each program your write in geeksforgeek..its Awesome  site i have seen in my whole lifetime&#8230;..Please try to reply ASAP&#8230;.</p>\n<p>Thanks<br />\nRicky</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-sandeep odd alt depth-4" id="dsq-comment-3814">\r\n        <div id="dsq-comment-header-3814" class="dsq-comment-header">\r\n            <cite id="dsq-cite-3814">\r\n                <span id="dsq-author-user-3814">Sandeep</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-3814" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-3814" class="dsq-comment-message"><p>@ricky: Thanks for the nice comments about the site!!</p>\n<p>The time complexity of height function height() is O(n) where n is the number of nudes in binary tree. The height function is being called for every node in the given binary tree.  For a skewed tree, time complexity would be O(n) + O(n-1) + O(n-2) + O(n-3) + &#8230; + O(1) which is O(n^2)</p>\n<pre>\r\n       1\r\n      /\r\n     2\r\n    /\r\n   3\r\n  /\r\n 4\r\n</pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-5" id="dsq-comment-14569">\r\n        <div id="dsq-comment-header-14569" class="dsq-comment-header">\r\n            <cite id="dsq-cite-14569">\r\n                <span id="dsq-author-user-14569">aaa</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-14569" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-14569" class="dsq-comment-message"><p>I don&#8217;t think so since for a skewed tree, the function will terminate for the first iteration since the left height is 2 more than the right height, then it&#8217;s O(n-1).</p>\n<pre> <code language="C">\n/* Paste your code here (You may delete these lines if not writing code) */\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt depth-5" id="dsq-comment-14571">\r\n        <div id="dsq-comment-header-14571" class="dsq-comment-header">\r\n            <cite id="dsq-cite-14571">\r\n                <span id="dsq-author-user-14571">aaddd</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-14571" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-14571" class="dsq-comment-message"><p>I don&#8217;t think so since for a skewed tree, the function will terminate for the first iteration since the left height is 2 more than the right height, then it&#8217;s O(n-1).</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment even depth-5" id="dsq-comment-14574">\r\n        <div id="dsq-comment-header-14574" class="dsq-comment-header">\r\n            <cite id="dsq-cite-14574">\r\n                <span id="dsq-author-user-14574">aaddd</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-14574" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-14574" class="dsq-comment-message"><p>Instead, i think the worst case should be: all the above level except the leaves are balanced except for the last second two bottom levels, so the iteration will go all the way down and for each level it takes O(n), so total should be O(nlogn).</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-665">\r\n        <div id="dsq-comment-header-665" class="dsq-comment-header">\r\n            <cite id="dsq-cite-665">\r\n                <span id="dsq-author-user-665">Amar</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-665" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-665" class="dsq-comment-message"><p>How about this? The complexity is O(n) here.</p>\n<pre> <code language="C">\r\nint isbaltree2(nodeptr root, int* max)\r\n{\r\n    int l = 0, r = 0,left = 0, right = 0;\r\n    if(root == NULL)\r\n    {\r\n        *max = 0;\r\n        return 1;\r\n    }\r\n    l = isbaltree2(root-&gt;left,&amp;left);\r\n    r = isbaltree2(root-&gt;right,&amp;right);\r\n    *max = (left&gt;right?left:right) + 1;\r\n    if((left - right &gt;= 2) || (right - left &gt;= 2))\r\n    {\r\n        printf(&quot;\\n Not balanced at : %d&quot;,root-&gt;data);\r\n        return 0;\r\n    }\r\n    return l&amp;&amp;r;\r\n}\r\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-geeksforgeeks bypostauthor even depth-2" id="dsq-comment-721">\r\n        <div id="dsq-comment-header-721" class="dsq-comment-header">\r\n            <cite id="dsq-cite-721">\r\n                <span id="dsq-author-user-721">GeeksforGeeks</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-721" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-721" class="dsq-comment-message"><p>@Amar: Awesome!! We have included this optimized implementation to our original post.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n    <li class="comment odd alt depth-2" id="dsq-comment-2198">\r\n        <div id="dsq-comment-header-2198" class="dsq-comment-header">\r\n            <cite id="dsq-cite-2198">\r\n                <span id="dsq-author-user-2198">gk_manutd</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-2198" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-2198" class="dsq-comment-message"><p>if you initialize left &amp; right as 0 everytime&#8230; then max always returns 1, right?</p>\n<p>Shouldn&#8217;t left &amp; right be initialized outside the function altogether?</p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment even depth-3" id="dsq-comment-2199">\r\n        <div id="dsq-comment-header-2199" class="dsq-comment-header">\r\n            <cite id="dsq-cite-2199">\r\n                <span id="dsq-author-user-2199">gk_manutd</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-2199" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-2199" class="dsq-comment-message"><p>apologies- posted at the wrong place.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment odd alt depth-2" id="dsq-comment-3596">\r\n        <div id="dsq-comment-header-3596" class="dsq-comment-header">\r\n            <cite id="dsq-cite-3596">\r\n                <span id="dsq-author-user-3596">Jegan</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-3596" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-3596" class="dsq-comment-message"><p>How about this optimization</p>\n<pre> <code language="C">\r\nint isbaltree2(nodeptr root)\r\n{\r\n    int l = 0, r = 0, left = 0, right = 0;\r\n    if(root == NULL)\r\n    {\r\n        *max = 0;\r\n        return 1;\r\n    }\r\n    l = isbaltree2(root-&gt;left,&amp;left);\r\n    if(!l)return 0;\r\n    r = isbaltree2(root-&gt;right,&amp;right);\r\n    if(!r)return 0;\r\n    *max = (left&gt;right?left:right) + 1;\r\n    if((left - right &gt;= 2) || (right - left &gt;= 2))\r\n    {\r\n        printf(&quot;\\n Not balanced at : %d&quot;,root-&gt;data);\r\n        return 0;\r\n    }\r\n    return l&amp;&amp;r;\r\n}\r\n</code> </pre>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment byuser comment-author-sandeep even thread-even depth-1" id="dsq-comment-569">\r\n        <div id="dsq-comment-header-569" class="dsq-comment-header">\r\n            <cite id="dsq-cite-569">\r\n                <span id="dsq-author-user-569">Sandeep</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-569" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-569" class="dsq-comment-message"><p>@Nik: height() is called for every node in a given tree. Time complexity of height() for a skewed tree with n nodes is Theta of n (or cn).  So, overall time complexity for skewed tree becomes cn + c(n-1) + c(n-2) + .. + c which is equal to O(n^2). </p>\n</div>\r\n        </div>\r\n\r\n    <ul class="children">\n    <li class="comment byuser comment-author-jenvor odd alt depth-2" id="dsq-comment-572">\r\n        <div id="dsq-comment-header-572" class="dsq-comment-header">\r\n            <cite id="dsq-cite-572">\r\n                <span id="dsq-author-user-572">Gerald</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-572" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-572" class="dsq-comment-message"><p>Yes, I agree. Worst-case time complexity is O(n^2). Consider a tree in which each node has just a single child node.</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n</ul><!-- .children -->\n</li><!-- #comment-## -->\n    <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-568">\r\n        <div id="dsq-comment-header-568" class="dsq-comment-header">\r\n            <cite id="dsq-cite-568">\r\n                <span id="dsq-author-user-568">Nik</span>\r\n            </cite>\r\n        </div>\r\n        <div id="dsq-comment-body-568" class="dsq-comment-body">\r\n            <div id="dsq-comment-message-568" class="dsq-comment-message"><p>Can someone verify how the time complexity of above goes to O(n^2)? Wouldn&#8217;t it be O(n)?</p>\n</div>\r\n        </div>\r\n\r\n    </li><!-- #comment-## -->\n            </ul>\r\n\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n<script type="text/javascript">\r\nvar disqus_url = \'http://www.geeksforgeeks.org/how-to-determine-if-a-binary-tree-is-balanced/\';\r\nvar disqus_identifier = \'5230 http://geeksforgeeks.org/?p=5230\';\r\nvar disqus_container_id = \'disqus_thread\';\r\nvar disqus_shortname = \'geeksforgeeks\';\r\nvar disqus_title = "How to determine if a binary tree is height-balanced?";\r\nvar disqus_config_custom = window.disqus_config;\r\nvar disqus_config = function () {\r\n    /*\r\n    All currently supported events:\r\n    onReady: fires when everything is ready,\r\n    onNewComment: fires when a new comment is posted,\r\n    onIdentify: fires when user is authenticated\r\n    */\r\n    \r\n    \r\n    this.language = \'\';\r\n    \r\n    if (disqus_config_custom) {\r\n        disqus_config_custom.call(this);\r\n    }\r\n};\r\n\r\n(function() {\r\n    var dsq = document.createElement(\'script\'); dsq.type = \'text/javascript\';\r\n    dsq.async = true;\r\n    dsq.src = \'//\' + disqus_shortname + \'.disqus.com/embed.js\';\r\n    (document.getElementsByTagName(\'head\')[0] || document.getElementsByTagName(\'body\')[0]).appendChild(dsq);\r\n})();\r\n</script>\r\n\r\n\r\n\t\t\t\r\n\t\t</div><!-- #content -->\r\n\t</div><!-- #primary -->\r\n\r\n\r\n\t\t\t<div id="secondary" class="widget-area" role="complementary">\r\n\t\t\t<aside id="text-9" class="widget widget_text">\t\t\t<div class="textwidget"><div id="fb-root"></div>\r\n<script>(function(d, s, id) {\r\n  var js, fjs = d.getElementsByTagName(s)[0];\r\n  if (d.getElementById(id)) return;\r\n  js = d.createElement(s); js.id = id;\r\n  js.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.3&appId=138031159685820";\r\n  fjs.parentNode.insertBefore(js, fjs);\r\n}(document, \'script\', \'facebook-jssdk\'));</script>\r\n\r\n<div class="fb-page" data-href="https://www.facebook.com/pages/GeeksforGeeks/316764689022" data-width="300" data-height="180" data-small-header="true" data-adapt-container-width="false" data-hide-cover="true" data-show-facepile="true" data-show-posts="false"><div class="fb-xfbml-parse-ignore"><blockquote cite="https://www.facebook.com/pages/GeeksforGeeks/316764689022"><a href="https://www.facebook.com/pages/GeeksforGeeks/316764689022">GeeksforGeeks</a></blockquote></div></div>\r\n</div>\n\t\t</aside><aside id="text-33" class="widget widget_text">\t\t\t<div class="textwidget"><a href="http://www.springpeople.com/gfg-landing">\r\n<img src="http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/GfG-2.jpg" alt="SpringPeople Ad">\r\n</a>\r\n</div>\n\t\t</aside><aside id="text-14" class="widget widget_text"><p class="widget-title">Popular Posts</p>\t\t\t<div class="textwidget"><ul>\r\n<li><a href="http://www.geeksforgeeks.org/top-algorithms-and-data-structures-for-competitive-programming/">Top 10 Algorithms and Data Structures for Competitive Programming</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/top-10-algorithms-in-interview-questions/">Top 10 algorithms in Interview Questions</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/how-to-begin-with-competitive-programming/">How to begin with Competitive Programming?</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/">  All permutations of a given string </a></li>\r\n<li><a href="http://www.geeksforgeeks.org/memory-layout-of-c-program/"> Memory Layout of C Programs</a> </li>\r\n<li><a href="http://www.geeksforgeeks.org/understanding-extern-keyword-in-c/"> Understanding \xe2\x80\x9cextern\xe2\x80\x9d keyword in C</a> </li>\r\n<li><a href="http://www.geeksforgeeks.org/heavy-light-decomposition-set-1-introduction/"> Heavy Light Decomposition</a> </li>\r\n<li><a href="http://www.geeksforgeeks.org/sorted-linked-list-to-balanced-bst/"> Sorted Linked List to Balanced BST</a></li>\r\n</ul></div>\n\t\t</aside><aside id="text-17" class="widget widget_text">\t\t\t<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<!-- Big 300x600 Sidebar -->\r\n<ins class="adsbygoogle"\r\n     style="display:inline-block;width:300px;height:600px"\r\n     data-ad-client="ca-pub-9465609616171866"\r\n     data-ad-slot="4402736037"></ins>\r\n<script>\r\n(adsbygoogle = window.adsbygoogle || []).push({});\r\n</script></div>\n\t\t</aside><aside id="text-32" class="widget widget_text">\t\t\t<div class="textwidget"><form style="border:1px solid #ccc;padding:3px;text-align:center;" action="https://feedburner.google.com/fb/a/mailverify" method="post" target="popupwindow" onsubmit="window.open(\'https://feedburner.google.com/fb/a/mailverify?uri=Geeksforgeeks\', \'popupwindow\', \'scrollbars=yes,width=550,height=520\');return true"><p>Subscribe and Never Miss an Article</p><input type="text" style="width:140px" placeholder="Email Address" name="email"/><input type="hidden" value="Geeksforgeeks" name="uri"/><input type="hidden" name="loc" value="en_US"/>&nbsp;&nbsp;<input type="submit" style="background-color: #4cb96b;" value="Subscribe" /></form></div>\n\t\t</aside><aside id="text-18" class="widget widget_text">\t\t\t<div class="textwidget"><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>\r\n<!-- LargeRectangleSide -->\r\n<ins class="adsbygoogle"\r\n     style="display:inline-block;width:336px;height:280px"\r\n     data-ad-client="ca-pub-9465609616171866"\r\n     data-ad-slot="1884636833"></ins>\r\n<script>\r\n(adsbygoogle = window.adsbygoogle || []).push({});\r\n</script></div>\n\t\t</aside><aside id="text-13" class="widget widget_text">\t\t\t<div class="textwidget"><ul><li><a href="http://geeksquiz.com/category/articles/puzzle/">Common Interview Puzzles</a></li><li><a href="http://www.geeksforgeeks.org/category/interview-experiences/">Interview Experiences</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/advanced-data-structure/">Advanced Data Structures</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Greedy Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/pattern-searching/">Pattern Searching</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide & Conquer</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/geometric-algorithms/">Geometric Algorithms</a></li><li><a href="http://www.geeksforgeeks.org/category/searching/">Searching</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/sorting/">Sorting</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/Hash/">Hashing</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/algorithm/analysis/">Analysis of Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/algorithm/mathematical/">Mathematical Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/category/algorithm/randomized/">Randomized Algorithms</a></li>\r\n<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>\r\n</ul>\r\n\r\n\r\n\r\n\r\n</div>\n\t\t</aside><aside id="categories-384568212" class="widget widget_categories"><p class="widget-title">All Categories</p><label class="screen-reader-text" for="cat">All Categories</label><select name=\'cat\' id=\'cat\' class=\'postform\' >\n\t<option value=\'-1\'>Select Category</option>\n\t<option class="level-0" value="1762">Advanced Data Structure&nbsp;&nbsp;(69)</option>\n\t<option class="level-0" value="1744">Algorithm&nbsp;&nbsp;(405)</option>\n\t<option class="level-1" value="1745">&nbsp;&nbsp;&nbsp;Analysis&nbsp;&nbsp;(16)</option>\n\t<option class="level-1" value="1748">&nbsp;&nbsp;&nbsp;Backtracking&nbsp;&nbsp;(11)</option>\n\t<option class="level-1" value="1750">&nbsp;&nbsp;&nbsp;Divide and Conquer&nbsp;&nbsp;(29)</option>\n\t<option class="level-1" value="1746">&nbsp;&nbsp;&nbsp;Dynamic Programming&nbsp;&nbsp;(91)</option>\n\t<option class="level-1" value="1754">&nbsp;&nbsp;&nbsp;Geometric&nbsp;&nbsp;(14)</option>\n\t<option class="level-1" value="1747">&nbsp;&nbsp;&nbsp;Greedy&nbsp;&nbsp;(20)</option>\n\t<option class="level-1" value="1753">&nbsp;&nbsp;&nbsp;Mathematical&nbsp;&nbsp;(123)</option>\n\t<option class="level-1" value="1749">&nbsp;&nbsp;&nbsp;Pattern Searching&nbsp;&nbsp;(30)</option>\n\t<option class="level-1" value="1757">&nbsp;&nbsp;&nbsp;Randomized&nbsp;&nbsp;(19)</option>\n\t<option class="level-1" value="1751">&nbsp;&nbsp;&nbsp;Searching&nbsp;&nbsp;(43)</option>\n\t<option class="level-1" value="1752">&nbsp;&nbsp;&nbsp;Sorting&nbsp;&nbsp;(40)</option>\n\t<option class="level-0" value="3">Arrays&nbsp;&nbsp;(80)</option>\n\t<option class="level-0" value="18">Articles&nbsp;&nbsp;(25)</option>\n\t<option class="level-0" value="1761">Binary Search Tree&nbsp;&nbsp;(37)</option>\n\t<option class="level-0" value="17">Bit Magic&nbsp;&nbsp;(56)</option>\n\t<option class="level-0" value="14">C/C++ Puzzles&nbsp;&nbsp;(244)</option>\n\t<option class="level-0" value="1790">Competitive Programming&nbsp;&nbsp;(4)</option>\n\t<option class="level-0" value="1710">GBlog&nbsp;&nbsp;(56)</option>\n\t<option class="level-0" value="67">GFacts&nbsp;&nbsp;(43)</option>\n\t<option class="level-0" value="97">Graph&nbsp;&nbsp;(74)</option>\n\t<option class="level-0" value="1756">Hash&nbsp;&nbsp;(21)</option>\n\t<option class="level-0" value="1755">Heap&nbsp;&nbsp;(18)</option>\n\t<option class="level-0" value="1140">Interview Experiences&nbsp;&nbsp;(1,052)</option>\n\t<option class="level-0" value="87">Java&nbsp;&nbsp;(55)</option>\n\t<option class="level-0" value="8">Linked Lists&nbsp;&nbsp;(70)</option>\n\t<option class="level-0" value="1760">Matrix&nbsp;&nbsp;(39)</option>\n\t<option class="level-0" value="66">MCQ&nbsp;&nbsp;(95)</option>\n\t<option class="level-0" value="4">Misc&nbsp;&nbsp;(40)</option>\n\t<option class="level-0" value="5">Output&nbsp;&nbsp;(55)</option>\n\t<option class="level-0" value="1767">Project&nbsp;&nbsp;(22)</option>\n\t<option class="level-0" value="1789">Python&nbsp;&nbsp;(5)</option>\n\t<option class="level-0" value="1743">Queue&nbsp;&nbsp;(16)</option>\n\t<option class="level-0" value="1742">Stack&nbsp;&nbsp;(25)</option>\n\t<option class="level-0" value="7">Strings&nbsp;&nbsp;(61)</option>\n\t<option class="level-0" value="1788">Technical Scripter&nbsp;&nbsp;(14)</option>\n\t<option class="level-0" value="19">Trees&nbsp;&nbsp;(114)</option>\n</select>\n\n<script type=\'text/javascript\'>\n/* <![CDATA[ */\n(function() {\n\tvar dropdown = document.getElementById( "cat" );\n\tfunction onCatChange() {\n\t\tif ( dropdown.options[ dropdown.selectedIndex ].value > 0 ) {\n\t\t\tlocation.href = "http://www.geeksforgeeks.org/?cat=" + dropdown.options[ dropdown.selectedIndex ].value;\n\t\t}\n\t}\n\tdropdown.onchange = onCatChange;\n})();\n/* ]]> */\n</script>\n\n</aside><aside id="text-21" class="widget widget_text"><p class="widget-title">Recent Comments</p>\t\t\t<div class="textwidget"><script type="text/javascript" src="http://geeksforgeeks.disqus.com//recent_comments_widget.js?num_items=6&hide_avatars=1&excerpt_length=50&hide_mods=0"></script></div>\n\t\t</aside><aside id="tag_cloud-3" class="widget widget_tag_cloud"><p class="widget-title">Tags</p><div class="tagcloud"><a href=\'http://www.geeksforgeeks.org/tag/adobe/\' class=\'tag-link-148\' title=\'32 topics\' style=\'font-size: 12.905109489051pt;\'>Adobe</a>\n<a href=\'http://www.geeksforgeeks.org/tag/advance-data-structures/\' class=\'tag-link-152\' title=\'31 topics\' style=\'font-size: 12.802919708029pt;\'>Advance Data Structures</a>\n<a href=\'http://www.geeksforgeeks.org/tag/advanced-data-structures/\' class=\'tag-link-150\' title=\'38 topics\' style=\'font-size: 13.620437956204pt;\'>Advanced Data Structures</a>\n<a href=\'http://www.geeksforgeeks.org/tag/amazon/\' class=\'tag-link-141\' title=\'254 topics\' style=\'font-size: 22pt;\'>Amazon</a>\n<a href=\'http://www.geeksforgeeks.org/tag/array/\' class=\'tag-link-68\' title=\'12 topics\' style=\'font-size: 8.7153284671533pt;\'>array</a>\n<a href=\'http://www.geeksforgeeks.org/tag/backtracking/\' class=\'tag-link-112\' title=\'11 topics\' style=\'font-size: 8.4087591240876pt;\'>Backtracking</a>\n<a href=\'http://www.geeksforgeeks.org/tag/bharti-softbank-hike/\' class=\'tag-link-1214\' title=\'10 topics\' style=\'font-size: 8pt;\'>Bharti SoftBank (HIKE)</a>\n<a href=\'http://www.geeksforgeeks.org/tag/bit-magic/\' class=\'tag-link-17\' title=\'15 topics\' style=\'font-size: 9.6350364963504pt;\'>Bit Magic</a>\n<a href=\'http://www.geeksforgeeks.org/tag/c/\' class=\'tag-link-86\' title=\'18 topics\' style=\'font-size: 10.452554744526pt;\'>C++</a>\n<a href=\'http://www.geeksforgeeks.org/tag/cn/\' class=\'tag-link-142\' title=\'12 topics\' style=\'font-size: 8.7153284671533pt;\'>CN</a>\n<a href=\'http://www.geeksforgeeks.org/tag/c-puzzle/\' class=\'tag-link-69\' title=\'15 topics\' style=\'font-size: 9.6350364963504pt;\'>c puzzle</a>\n<a href=\'http://www.geeksforgeeks.org/tag/d-e-shaw/\' class=\'tag-link-823\' title=\'17 topics\' style=\'font-size: 10.248175182482pt;\'>D-E-Shaw</a>\n<a href=\'http://www.geeksforgeeks.org/tag/dbms/\' class=\'tag-link-139\' title=\'11 topics\' style=\'font-size: 8.4087591240876pt;\'>DBMS</a>\n<a href=\'http://www.geeksforgeeks.org/tag/divide-and-conquer/\' class=\'tag-link-113\' title=\'27 topics\' style=\'font-size: 12.189781021898pt;\'>Divide and Conquer</a>\n<a href=\'http://www.geeksforgeeks.org/tag/dynamic-programming/\' class=\'tag-link-111\' title=\'83 topics\' style=\'font-size: 16.992700729927pt;\'>Dynamic Programming</a>\n<a href=\'http://www.geeksforgeeks.org/tag/flipkart/\' class=\'tag-link-173\' title=\'46 topics\' style=\'font-size: 14.43795620438pt;\'>Flipkart</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate/\' class=\'tag-link-114\' title=\'88 topics\' style=\'font-size: 17.299270072993pt;\'>GATE</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-2012/\' class=\'tag-link-133\' title=\'10 topics\' style=\'font-size: 8pt;\'>GATE-CS-2012</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-c-language/\' class=\'tag-link-72\' title=\'10 topics\' style=\'font-size: 8pt;\'>GATE-CS-C-Language</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-ds-algo/\' class=\'tag-link-79\' title=\'35 topics\' style=\'font-size: 13.313868613139pt;\'>GATE-CS-DS-&amp;-Algo</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gate-cs-older/\' class=\'tag-link-145\' title=\'15 topics\' style=\'font-size: 9.6350364963504pt;\'>GATE-CS-Older</a>\n<a href=\'http://www.geeksforgeeks.org/tag/gfact/\' class=\'tag-link-67\' title=\'20 topics\' style=\'font-size: 10.861313868613pt;\'>GFacts</a>\n<a href=\'http://www.geeksforgeeks.org/tag/goldman-sachs/\' class=\'tag-link-590\' title=\'20 topics\' style=\'font-size: 10.861313868613pt;\'>Goldman Sachs</a>\n<a href=\'http://www.geeksforgeeks.org/tag/google/\' class=\'tag-link-155\' title=\'15 topics\' style=\'font-size: 9.6350364963504pt;\'>Google</a>\n<a href=\'http://www.geeksforgeeks.org/tag/graph/\' class=\'tag-link-97\' title=\'45 topics\' style=\'font-size: 14.335766423358pt;\'>Graph</a>\n<a href=\'http://www.geeksforgeeks.org/tag/greedy-algorithm/\' class=\'tag-link-159\' title=\'20 topics\' style=\'font-size: 10.861313868613pt;\'>Greedy Algorithm</a>\n<a href=\'http://www.geeksforgeeks.org/tag/hashing/\' class=\'tag-link-250\' title=\'15 topics\' style=\'font-size: 9.6350364963504pt;\'>Hashing</a>\n<a href=\'http://www.geeksforgeeks.org/tag/interview-experience/\' class=\'tag-link-126\' title=\'216 topics\' style=\'font-size: 21.284671532847pt;\'>Interview Experience</a>\n<a href=\'http://www.geeksforgeeks.org/tag/java/\' class=\'tag-link-87\' title=\'61 topics\' style=\'font-size: 15.664233576642pt;\'>Java</a>\n<a href=\'http://www.geeksforgeeks.org/tag/maq-software/\' class=\'tag-link-1392\' title=\'11 topics\' style=\'font-size: 8.4087591240876pt;\'>MAQ Software</a>\n<a href=\'http://www.geeksforgeeks.org/tag/mathematicalalgo/\' class=\'tag-link-154\' title=\'73 topics\' style=\'font-size: 16.481751824818pt;\'>MathematicalAlgo</a>\n<a href=\'http://www.geeksforgeeks.org/tag/matrix/\' class=\'tag-link-211\' title=\'21 topics\' style=\'font-size: 11.065693430657pt;\'>Matrix</a>\n<a href=\'http://www.geeksforgeeks.org/tag/microsoft/\' class=\'tag-link-104\' title=\'95 topics\' style=\'font-size: 17.605839416058pt;\'>Microsoft</a>\n<a href=\'http://www.geeksforgeeks.org/tag/morgan-stanley/\' class=\'tag-link-167\' title=\'17 topics\' style=\'font-size: 10.248175182482pt;\'>Morgan Stanley</a>\n<a href=\'http://www.geeksforgeeks.org/tag/operating-systems/\' class=\'tag-link-110\' title=\'19 topics\' style=\'font-size: 10.656934306569pt;\'>Operating systems</a>\n<a href=\'http://www.geeksforgeeks.org/tag/oracle/\' class=\'tag-link-171\' title=\'24 topics\' style=\'font-size: 11.678832116788pt;\'>Oracle</a>\n<a href=\'http://www.geeksforgeeks.org/tag/pattern-searching/\' class=\'tag-link-107\' title=\'26 topics\' style=\'font-size: 11.985401459854pt;\'>Pattern Searching</a>\n<a href=\'http://www.geeksforgeeks.org/tag/puzzle/\' class=\'tag-link-70\' title=\'15 topics\' style=\'font-size: 9.6350364963504pt;\'>puzzle</a>\n<a href=\'http://www.geeksforgeeks.org/tag/python/\' class=\'tag-link-1770\' title=\'21 topics\' style=\'font-size: 11.065693430657pt;\'>Python</a>\n<a href=\'http://www.geeksforgeeks.org/tag/recursion/\' class=\'tag-link-85\' title=\'21 topics\' style=\'font-size: 11.065693430657pt;\'>Recursion</a>\n<a href=\'http://www.geeksforgeeks.org/tag/samsung/\' class=\'tag-link-180\' title=\'12 topics\' style=\'font-size: 8.7153284671533pt;\'>Samsung</a>\n<a href=\'http://www.geeksforgeeks.org/tag/sap-labs/\' class=\'tag-link-1414\' title=\'23 topics\' style=\'font-size: 11.474452554745pt;\'>SAP Labs</a>\n<a href=\'http://www.geeksforgeeks.org/tag/snapdeal/\' class=\'tag-link-1246\' title=\'16 topics\' style=\'font-size: 9.9416058394161pt;\'>SnapDeal</a>\n<a href=\'http://www.geeksforgeeks.org/tag/stack/\' class=\'tag-link-94\' title=\'17 topics\' style=\'font-size: 10.248175182482pt;\'>stack</a>\n<a href=\'http://www.geeksforgeeks.org/tag/stack-queue/\' class=\'tag-link-899\' title=\'12 topics\' style=\'font-size: 8.7153284671533pt;\'>Stack-Queue</a></div>\n</aside><aside id="text-25" class="widget widget_text">\t\t\t<div class="textwidget"><ul>\r\n<li><h2><a href="http://geeksquiz.com/">GeeksQuiz</a></h2></li>\r\n\r\n<li><h2><a href="http://code.geeksforgeeks.org/">GeeksforGeeksIDE</a></h2></li>\r\n\r\n<li><h2><a href="http://www.practice.geeksforgeeks.org/">GeeksforGeeks Practice</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/data-structures/">Data Structures</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/c/">C Programming</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++ Programming</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/java/">Java Programming</a></h2></li>\r\n\r\n<li><h2><a href="http://geeksquiz.com/books/">Books</a></h2></li>\r\n\r\n<li><h2><a href="http://www.geeksforgeeks.org/about/interview-corner/">Interview Experiences</a></h2></li>\r\n\r\n<li><h2><a href="http://geeksquiz.com/gate-corner-2/">GATE CS</a></h2></li>\r\n\r\n<li><h2><a href="http://www.gatecs.geeksquiz.com">GATE CS Forum</a></h2></li>\r\n\r\n<li><h2><a href="https://play.google.com/store/apps/details?id=free.programming.programming">Android App</a></h2></li>\r\n</ul>\r\n\r\n</div>\n\t\t</aside>\t\t</div><!-- #secondary -->\r\n\t\t</div><!-- #main .wrapper -->\r\n\t<footer id="colophon" role="contentinfo">\r\n\t\t<div class="site-info">\r\n\t\t<div class="clear"></div>\r\n\t\t</div><!-- .site-info -->\r\n\t\t</footer><!-- #colophon -->\r\n<center>\r\n<div class="iconic-footer">\r\n\r\n@geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us!</a>  <a href="http://www.geeksforgeeks.org/about/"> &nbsp; &nbsp; &nbsp; &nbsp;About Us!&nbsp; &nbsp; &nbsp; &nbsp;</a><a href="http://www.geeksforgeeks.org/new/ad.htm"> &nbsp; &nbsp; &nbsp; &nbsp;Advertise with us!&nbsp; &nbsp; &nbsp; &nbsp;</a>\r\n\r\n      \t\t\t</div></center><!-- .site-info -->\r\n\r\n\t\t\t\t<div class="clear"></div>\r\n</div><!-- #page -->\r\n\r\n        <script type="text/javascript">\r\n        // <![CDATA[\r\n        var disqus_shortname = \'geeksforgeeks\';\r\n        (function () {\r\n            var nodes = document.getElementsByTagName(\'span\');\r\n            for (var i = 0, url; i < nodes.length; i++) {\r\n                if (nodes[i].className.indexOf(\'dsq-postid\') != -1) {\r\n                    nodes[i].parentNode.setAttribute(\'data-disqus-identifier\', nodes[i].getAttribute(\'data-dsqidentifier\'));\r\n                    url = nodes[i].parentNode.href.split(\'#\', 1);\r\n                    if (url.length == 1) { url = url[0]; }\r\n                    else { url = url[1]; }\r\n                    nodes[i].parentNode.href = url + \'#disqus_thread\';\r\n                }\r\n            }\r\n            var s = document.createElement(\'script\'); \r\n            s.async = true;\r\n            s.type = \'text/javascript\';\r\n            s.src = \'//\' + disqus_shortname + \'.disqus.com/count.js\';\r\n            (document.getElementsByTagName(\'HEAD\')[0] || document.getElementsByTagName(\'BODY\')[0]).appendChild(s);\r\n        }());\r\n        // ]]>\r\n        </script>\r\n        <script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushJava.js\'></script>\n<script type=\'text/javascript\'>\n\t(function(){\n\t\tvar corecss = document.createElement(\'link\');\n\t\tvar themecss = document.createElement(\'link\');\n\t\tvar corecssurl = "http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9b";\r\n\t\tif ( corecss.setAttribute ) {\r\n\t\t\t\tcorecss.setAttribute( "rel", "stylesheet" );\r\n\t\t\t\tcorecss.setAttribute( "type", "text/css" );\r\n\t\t\t\tcorecss.setAttribute( "href", corecssurl );\r\n\t\t} else {\r\n\t\t\t\tcorecss.rel = "stylesheet";\r\n\t\t\t\tcorecss.href = corecssurl;\r\n\t\t}\r\n\t\tdocument.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );\r\n\t\tvar themecssurl = "http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9b";\r\n\t\tif ( themecss.setAttribute ) {\r\n\t\t\t\tthemecss.setAttribute( "rel", "stylesheet" );\r\n\t\t\t\tthemecss.setAttribute( "type", "text/css" );\r\n\t\t\t\tthemecss.setAttribute( "href", themecssurl );\r\n\t\t} else {\r\n\t\t\t\tthemecss.rel = "stylesheet";\r\n\t\t\t\tthemecss.href = themecssurl;\r\n\t\t}\r\n\t\t//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);\r\n\t\tdocument.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );\r\n\t})();\n\tSyntaxHighlighter.config.strings.expandSource = \'+ expand source\';\n\tSyntaxHighlighter.config.strings.help = \'?\';\n\tSyntaxHighlighter.config.strings.alert = \'SyntaxHighlighter\\n\\n\';\n\tSyntaxHighlighter.config.strings.noBrush = \'Can\\\'t find brush for: \';\n\tSyntaxHighlighter.config.strings.brushNotHtmlScript = \'Brush wasn\\\'t configured for html-script option: \';\n\tSyntaxHighlighter.defaults[\'gutter\'] = false;\n\tSyntaxHighlighter.defaults[\'pad-line-numbers\'] = true;\n\tSyntaxHighlighter.defaults[\'toolbar\'] = false;\n\tSyntaxHighlighter.all();\r\n</script>\r\n<link rel=\'stylesheet\' id=\'tabby-print-css\'  href=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/tabby-responsive-tabs/css/tabby-print.css\' type=\'text/css\' media=\'all\' />\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/js/comment-reply.min.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/themes/iconic-one/js/selectnav.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/js/jquery/jquery.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-includes/js/jquery/jquery-migrate.min.js\'></script>\n<script type=\'text/javascript\' src=\'http://d1gjlxt8vb0knt.cloudfront.net//wp-content/plugins/tabby-responsive-tabs/js/tabby.js\'></script>\n\n<script>jQuery(document).ready(function($) { RESPONSIVEUI.responsiveTabs(); })</script>\n\r\n\r\n<script type="text/javascript">\r\n\r\n  var _gaq = _gaq || [];\r\n  _gaq.push([\'_setAccount\', \'UA-12148232-1\']);\r\n  _gaq.push([\'_trackPageview\']);\r\n\r\n  (function() {\r\n    var ga = document.createElement(\'script\'); ga.type = \'text/javascript\'; ga.async = true;\r\n    ga.src = (\'https:\' == document.location.protocol ? \'https://ssl\' : \'http://www\') + \'.google-analytics.com/ga.js\';\r\n    var s = document.getElementsByTagName(\'script\')[0]; s.parentNode.insertBefore(ga, s);\r\n  })();\r\n\r\n</script>  \r\n<script async type="text/javascript" src="//cdn.fancybar.net/ac/fancybar.js?zoneid=1502&serve=C6ADVKE&placement=geeksforgeeks" id="_fancybar_js"></script>\r\n</body>\r\n</html>\n<!-- Dynamic page generated in 0.361 seconds. -->\n<!-- Cached page generated by WP-Super-Cache on 2016-03-01 10:52:08 -->\n\n<!-- Compression = gzip -->\n<!-- super cache -->'
p295
sb.